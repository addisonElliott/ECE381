FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 0A 1F LJMP  _PWMPiano2_ISR     (0153)     ljmp	_PWMPiano2_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 09 C2 LJMP  _PWMPiano3_ISR     (0161)     ljmp	_PWMPiano3_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 2A C5 LJMP  _PS2DigBuf_ISR     (0165)     ljmp	_PS2DigBuf_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 2F 84 LJMP  _PS2OneShot_ISR    (0169)     ljmp	_PS2OneShot_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 2F AD LJMP  _TenMicroSecTimer_ISR(0177)     ljmp	_TenMicroSecTimer_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
0040: 7D 0A D9 LJMP  _PWM8LED_ISR       (0181)     ljmp	_PWM8LED_ISR
0043: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
004C: 7D 0A 7C LJMP  _PWMPiano1_ISR     (0193)     ljmp	_PWMPiano1_ISR
004F: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
0054: 7D 07 B1 LJMP  _UARTClock_ISR     (0201)     ljmp	_UARTClock_ISR
0057: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
0058: 7D 07 AF LJMP  _UART_TX_ISR       (0205)     ljmp	_UART_TX_ISR
005B: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
005C: 7D 07 B0 LJMP  _UART_RX_ISR       (0209)     ljmp	_UART_RX_ISR
005F: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [ps2.c:XXXForceBadTxParity+139],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [ps2.c:XXXForceBadTxParity+140],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 07 41 LCALL 0x0741             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 06    MOV   A,0x6              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 0C    MOV   X,0xC              (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 22    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 22    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 22    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 21    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 22    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 22 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 21    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 21    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 22    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 22 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 21    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 1E 7B LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
063C: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_ps2bitbang_Bank1
                                        (0019) export LoadConfigTBL_ps2bitbang_Bank0
                                        (0020) export LoadConfigTBL_ps2bitbang_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_ps2bitbang_Bank0:
                                        (0023) ;  Instance name LCD, User Module LCD
                                        (0024) ;  Instance name PORT1SHADOWREG, User Module SHADOWREGS
                                        (0025) ;  Instance name PS2DigBuf, User Module DigBuf
                                        (0026) ;       Instance name PS2DigBuf, Block Name DigBuf(DBB10)
                                        (0027) 	db		33h, 03h		;PS2DigBuf_CONTROL_REG(DBB10CR0)
                                        (0028) 	db		31h, 00h		;PS2DigBuf_DATA_1_REG(DBB10DR1)
                                        (0029) 	db		32h, 00h		;PS2DigBuf_DATA_2_REG(DBB10DR2)
                                        (0030) ;  Instance name PS2OneShot, User Module OneShot
                                        (0031) ;       Instance name PS2OneShot, Block Name OneShot8(DBB11)
                                        (0032) 	db		37h, 00h		;PS2OneShot_CONTROL_REG(DBB11CR0)
                                        (0033) 	db		35h, 00h		;PS2OneShot_POLY_REG   (DBB11DR1)
                                        (0034) 	db		36h, 00h		;PS2OneShot_SEED_REG   (DBB11DR2)
                                        (0035) ;  Instance name PWM8LED, User Module PWM8
                                        (0036) ;       Instance name PWM8LED, Block Name PWM8(DBB20)
                                        (0037) 	db		43h, 00h		;PWM8LED_CONTROL_REG(DBB20CR0)
                                        (0038) 	db		41h, ffh		;PWM8LED_PERIOD_REG(DBB20DR1)
                                        (0039) 	db		42h, 7fh		;PWM8LED_COMPARE_REG(DBB20DR2)
                                        (0040) ;  Instance name PWMPiano1, User Module PWM16
                                        (0041) ;       Instance name PWMPiano1, Block Name PWM16_LSB(DCB22)
                                        (0042) 	db		4bh, 00h		;PWMPiano1_CONTROL_LSB_REG(DCB22CR0)
                                        (0043) 	db		49h, 00h		;PWMPiano1_PERIOD_LSB_REG(DCB22DR1)
                                        (0044) 	db		4ah, 00h		;PWMPiano1_COMPARE_LSB_REG(DCB22DR2)
                                        (0045) ;       Instance name PWMPiano1, Block Name PWM16_MSB(DCB23)
                                        (0046) 	db		4fh, 00h		;PWMPiano1_CONTROL_MSB_REG(DCB23CR0)
                                        (0047) 	db		4dh, 00h		;PWMPiano1_PERIOD_MSB_REG(DCB23DR1)
                                        (0048) 	db		4eh, 00h		;PWMPiano1_COMPARE_MSB_REG(DCB23DR2)
                                        (0049) ;  Instance name PWMPiano2, User Module PWM16
                                        (0050) ;       Instance name PWMPiano2, Block Name PWM16_LSB(DBB00)
                                        (0051) 	db		23h, 00h		;PWMPiano2_CONTROL_LSB_REG(DBB00CR0)
                                        (0052) 	db		21h, 00h		;PWMPiano2_PERIOD_LSB_REG(DBB00DR1)
                                        (0053) 	db		22h, 00h		;PWMPiano2_COMPARE_LSB_REG(DBB00DR2)
                                        (0054) ;       Instance name PWMPiano2, Block Name PWM16_MSB(DBB01)
                                        (0055) 	db		27h, 00h		;PWMPiano2_CONTROL_MSB_REG(DBB01CR0)
                                        (0056) 	db		25h, 00h		;PWMPiano2_PERIOD_MSB_REG(DBB01DR1)
                                        (0057) 	db		26h, 00h		;PWMPiano2_COMPARE_MSB_REG(DBB01DR2)
                                        (0058) ;  Instance name PWMPiano3, User Module PWM16
                                        (0059) ;       Instance name PWMPiano3, Block Name PWM16_LSB(DCB02)
                                        (0060) 	db		2bh, 00h		;PWMPiano3_CONTROL_LSB_REG(DCB02CR0)
                                        (0061) 	db		29h, 00h		;PWMPiano3_PERIOD_LSB_REG(DCB02DR1)
                                        (0062) 	db		2ah, 00h		;PWMPiano3_COMPARE_LSB_REG(DCB02DR2)
                                        (0063) ;       Instance name PWMPiano3, Block Name PWM16_MSB(DCB03)
                                        (0064) 	db		2fh, 00h		;PWMPiano3_CONTROL_MSB_REG(DCB03CR0)
                                        (0065) 	db		2dh, 00h		;PWMPiano3_PERIOD_MSB_REG(DCB03DR1)
                                        (0066) 	db		2eh, 00h		;PWMPiano3_COMPARE_MSB_REG(DCB03DR2)
                                        (0067) ;  Instance name TenMicroSecTimer, User Module Timer16
                                        (0068) ;       Instance name TenMicroSecTimer, Block Name TIMER16_LSB(DCB12)
                                        (0069) 	db		3bh, 00h		;TenMicroSecTimer_CONTROL_LSB_REG(DCB12CR0)
                                        (0070) 	db		39h, 00h		;TenMicroSecTimer_PERIOD_LSB_REG(DCB12DR1)
                                        (0071) 	db		3ah, 00h		;TenMicroSecTimer_COMPARE_LSB_REG(DCB12DR2)
                                        (0072) ;       Instance name TenMicroSecTimer, Block Name TIMER16_MSB(DCB13)
                                        (0073) 	db		3fh, 04h		;TenMicroSecTimer_CONTROL_MSB_REG(DCB13CR0)
                                        (0074) 	db		3dh, 00h		;TenMicroSecTimer_PERIOD_MSB_REG(DCB13DR1)
                                        (0075) 	db		3eh, 00h		;TenMicroSecTimer_COMPARE_MSB_REG(DCB13DR2)
                                        (0076) ;  Instance name UART, User Module UART
                                        (0077) ;       Instance name UART, Block Name RX(DCB33)
                                        (0078) 	db		5fh, 00h		;UART_RX_CONTROL_REG(DCB33CR0)
                                        (0079) 	db		5dh, 00h		;UART_(DCB33DR1)
                                        (0080) 	db		5eh, 00h		;UART_RX_BUFFER_REG (DCB33DR2)
                                        (0081) ;       Instance name UART, Block Name TX(DCB32)
                                        (0082) 	db		5bh, 00h		;UART_TX_CONTROL_REG(DCB32CR0)
                                        (0083) 	db		59h, 00h		;UART_TX_BUFFER_REG (DCB32DR1)
                                        (0084) 	db		5ah, 00h		;UART_(DCB32DR2)
                                        (0085) ;  Instance name UARTClock, User Module Counter16
                                        (0086) ;       Instance name UARTClock, Block Name CNTR16_LSB(DBB30)
                                        (0087) 	db		53h, 00h		;UARTClock_CONTROL_LSB_REG(DBB30CR0)
                                        (0088) 	db		51h, 33h		;UARTClock_PERIOD_LSB_REG(DBB30DR1)
                                        (0089) 	db		52h, 19h		;UARTClock_COMPARE_LSB_REG(DBB30DR2)
                                        (0090) ;       Instance name UARTClock, Block Name CNTR16_MSB(DBB31)
                                        (0091) 	db		57h, 00h		;UARTClock_CONTROL_MSB_REG(DBB31CR0)
                                        (0092) 	db		55h, 00h		;UARTClock_PERIOD_MSB_REG(DBB31DR1)
                                        (0093) 	db		56h, 00h		;UARTClock_COMPARE_MSB_REG(DBB31DR2)
                                        (0094) ;  Global Register values Bank 0
                                        (0095) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0096) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0097) 	db		63h, 57h		; AnalogReferenceControl register (ARF_CR)
                                        (0098) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0099) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0100) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0101) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0102) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0103) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0104) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0105) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0106) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0107) 	db		b5h, 10h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0108) 	db		b6h, 01h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0109) 	db		b8h, 65h		; Row_1_InputMux register (RDI1RI)
                                        (0110) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0111) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0112) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0113) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0114) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0115) 	db		beh, 80h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0116) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0117) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0118) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0119) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0120) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0121) 	db		c5h, 41h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0122) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0123) 	db		c8h, 75h		; Row_3_InputMux register (RDI3RI)
                                        (0124) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0125) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0126) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0127) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0128) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0129) 	db		ceh, 20h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0130) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0131) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0132) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0133) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0134) 	db		ffh
                                        (0135) LoadConfigTBL_ps2bitbang_Bank1:
                                        (0136) ;  Instance name LCD, User Module LCD
                                        (0137) ;  Instance name PORT1SHADOWREG, User Module SHADOWREGS
                                        (0138) ;  Instance name PS2DigBuf, User Module DigBuf
                                        (0139) ;       Instance name PS2DigBuf, Block Name DigBuf(DBB10)
                                        (0140) 	db		30h, a2h		;PS2DigBuf_FUNC_REG(DBB10FN)
                                        (0141) 	db		31h, e0h		;PS2DigBuf_INPUT_REG(DBB10IN)
                                        (0142) 	db		32h, 40h		;PS2DigBuf_OUTPUT_REG(DBB10OU)
                                        (0143) ;  Instance name PS2OneShot, User Module OneShot
                                        (0144) ;       Instance name PS2OneShot, Block Name OneShot8(DBB11)
                                        (0145) 	db		34h, 22h		;PS2OneShot_FUNC_REG   (DBB11FN)
                                        (0146) 	db		35h, e1h		;PS2OneShot_INPUT_REG  (DBB11IN)
                                        (0147) 	db		36h, 40h		;PS2OneShot_OUTPUT_REG (DBB11OU)
                                        (0148) ;  Instance name PWM8LED, User Module PWM8
                                        (0149) ;       Instance name PWM8LED, Block Name PWM8(DBB20)
                                        (0150) 	db		40h, 21h		;PWM8LED_FUNC_REG(DBB20FN)
                                        (0151) 	db		41h, 11h		;PWM8LED_INPUT_REG(DBA20IN)
                                        (0152) 	db		42h, 45h		;PWM8LED_OUTPUT_REG(DBA20OU)
                                        (0153) ;  Instance name PWMPiano1, User Module PWM16
                                        (0154) ;       Instance name PWMPiano1, Block Name PWM16_LSB(DCB22)
                                        (0155) 	db		48h, 01h		;PWMPiano1_FUNC_LSB_REG(DCB22FN)
                                        (0156) 	db		49h, 15h		;PWMPiano1_INPUT_LSB_REG(DCB22IN)
                                        (0157) 	db		4ah, 40h		;PWMPiano1_OUTPUT_LSB_REG(DCB22OU)
                                        (0158) ;       Instance name PWMPiano1, Block Name PWM16_MSB(DCB23)
                                        (0159) 	db		4ch, 21h		;PWMPiano1_FUNC_MSB_REG(DCB23FN)
                                        (0160) 	db		4dh, 35h		;PWMPiano1_INPUT_MSB_REG(DCB23IN)
                                        (0161) 	db		4eh, 44h		;PWMPiano1_OUTPUT_MSB_REG(DCB23OU)
                                        (0162) ;  Instance name PWMPiano2, User Module PWM16
                                        (0163) ;       Instance name PWMPiano2, Block Name PWM16_LSB(DBB00)
                                        (0164) 	db		20h, 01h		;PWMPiano2_FUNC_LSB_REG(DBB00FN)
                                        (0165) 	db		21h, 15h		;PWMPiano2_INPUT_LSB_REG(DBB00IN)
                                        (0166) 	db		22h, 40h		;PWMPiano2_OUTPUT_LSB_REG(DBB00OU)
                                        (0167) ;       Instance name PWMPiano2, Block Name PWM16_MSB(DBB01)
                                        (0168) 	db		24h, 21h		;PWMPiano2_FUNC_MSB_REG(DBB01FN)
                                        (0169) 	db		25h, 35h		;PWMPiano2_INPUT_MSB_REG(DBB01IN)
                                        (0170) 	db		26h, 45h		;PWMPiano2_OUTPUT_MSB_REG(DBB01OU)
                                        (0171) ;  Instance name PWMPiano3, User Module PWM16
                                        (0172) ;       Instance name PWMPiano3, Block Name PWM16_LSB(DCB02)
                                        (0173) 	db		28h, 01h		;PWMPiano3_FUNC_LSB_REG(DCB02FN)
                                        (0174) 	db		29h, 15h		;PWMPiano3_INPUT_LSB_REG(DCB02IN)
                                        (0175) 	db		2ah, 40h		;PWMPiano3_OUTPUT_LSB_REG(DCB02OU)
                                        (0176) ;       Instance name PWMPiano3, Block Name PWM16_MSB(DCB03)
                                        (0177) 	db		2ch, 21h		;PWMPiano3_FUNC_MSB_REG(DCB03FN)
                                        (0178) 	db		2dh, 35h		;PWMPiano3_INPUT_MSB_REG(DCB03IN)
                                        (0179) 	db		2eh, 46h		;PWMPiano3_OUTPUT_MSB_REG(DCB03OU)
                                        (0180) ;  Instance name TenMicroSecTimer, User Module Timer16
                                        (0181) ;       Instance name TenMicroSecTimer, Block Name TIMER16_LSB(DCB12)
                                        (0182) 	db		38h, 10h		;TenMicroSecTimer_FUNC_LSB_REG(DCB12FN)
                                        (0183) 	db		39h, 01h		;TenMicroSecTimer_INPUT_LSB_REG(DCB12IN)
                                        (0184) 	db		3ah, 40h		;TenMicroSecTimer_OUTPUT_LSB_REG(DCB12OU)
                                        (0185) ;       Instance name TenMicroSecTimer, Block Name TIMER16_MSB(DCB13)
                                        (0186) 	db		3ch, 30h		;TenMicroSecTimer_FUNC_MSB_REG(DCB13FN)
                                        (0187) 	db		3dh, 31h		;TenMicroSecTimer_INPUT_MSB_REG(DCB13IN)
                                        (0188) 	db		3eh, 40h		;TenMicroSecTimer_OUTPUT_MSB_REG(DCB13OU)
                                        (0189) ;  Instance name UART, User Module UART
                                        (0190) ;       Instance name UART, Block Name RX(DCB33)
                                        (0191) 	db		5ch, 05h		;UART_RX_FUNC_REG   (DCB33FN)
                                        (0192) 	db		5dh, e2h		;UART_RX_INPUT_REG  (DCB33IN)
                                        (0193) 	db		5eh, 40h		;UART_RX_OUTPUT_REG (DCB33OU)
                                        (0194) ;       Instance name UART, Block Name TX(DCB32)
                                        (0195) 	db		58h, 0dh		;UART_TX_FUNC_REG   (DCB32FN)
                                        (0196) 	db		59h, 02h		;UART_TX_INPUT_REG  (DCB32IN)
                                        (0197) 	db		5ah, 47h		;UART_TX_OUTPUT_REG (DCB32OU)
                                        (0198) ;  Instance name UARTClock, User Module Counter16
                                        (0199) ;       Instance name UARTClock, Block Name CNTR16_LSB(DBB30)
                                        (0200) 	db		50h, 01h		;UARTClock_FUNC_LSB_REG(DBB30FN)
                                        (0201) 	db		51h, 10h		;UARTClock_INPUT_LSB_REG(DBB30IN)
                                        (0202) 	db		52h, c0h		;UARTClock_OUTPUT_LSB_REG(DBB30OU)
                                        (0203) ;       Instance name UARTClock, Block Name CNTR16_MSB(DBB31)
                                        (0204) 	db		54h, 61h		;UARTClock_FUNC_MSB_REG(DBB31FN)
                                        (0205) 	db		55h, 30h		;UARTClock_INPUT_MSB_REG(DBB31IN)
                                        (0206) 	db		56h, c0h		;UARTClock_OUTPUT_MSB_REG(DBB31OU)
                                        (0207) ;  Global Register values Bank 1
                                        (0208) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0209) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0210) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0211) 	db		62h, 01h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0212) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0213) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0214) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0215) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0216) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0217) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0218) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0219) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0220) 	db		e1h, 27h		; OscillatorControl_1 register (OSC_CR1)
                                        (0221) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0222) 	db		dfh, efh		; OscillatorControl_3 register (OSC_CR3)
                                        (0223) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0224) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0225) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0226) 	db		ffh
                                        (0227) AREA psoc_config(rom, rel)
                                        (0228) LoadConfigTBL_ps2bitbang_Ordered:
                                        (0229) ;  Ordered Global Register values
                                        (0230) 	M8C_SetBank0
063E: 62 00 00 MOV   REG[0x0],0x0       (0231) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0641: 71 10    OR    F,0x10             
                                        (0232) 	M8C_SetBank1
0643: 62 00 07 MOV   REG[0x0],0x7       (0233) 	mov	reg[00h], 07h		; Port_0_DriveMode_0 register (PRT0DM0)
0646: 62 01 F8 MOV   REG[0x1],0xF8      (0234) 	mov	reg[01h], f8h		; Port_0_DriveMode_1 register (PRT0DM1)
0649: 70 EF    AND   F,0xEF             
                                        (0235) 	M8C_SetBank0
064B: 62 03 F8 MOV   REG[0x3],0xF8      (0236) 	mov	reg[03h], f8h		; Port_0_DriveMode_2 register (PRT0DM2)
064E: 62 02 07 MOV   REG[0x2],0x7       (0237) 	mov	reg[02h], 07h		; Port_0_GlobalSelect register (PRT0GS)
0651: 71 10    OR    F,0x10             
                                        (0238) 	M8C_SetBank1
0653: 62 02 00 MOV   REG[0x2],0x0       (0239) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0656: 62 03 00 MOV   REG[0x3],0x0       (0240) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0659: 70 EF    AND   F,0xEF             
                                        (0241) 	M8C_SetBank0
065B: 62 01 00 MOV   REG[0x1],0x0       (0242) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
065E: 62 04 18 MOV   REG[0x4],0x18      (0243) 	mov	reg[04h], 18h		; Port_1_Data register (PRT1DR)
0661: 71 10    OR    F,0x10             
                                        (0244) 	M8C_SetBank1
0663: 62 04 3B MOV   REG[0x4],0x3B      (0245) 	mov	reg[04h], 3bh		; Port_1_DriveMode_0 register (PRT1DM0)
0666: 62 05 DC MOV   REG[0x5],0xDC      (0246) 	mov	reg[05h], dch		; Port_1_DriveMode_1 register (PRT1DM1)
0669: 70 EF    AND   F,0xEF             
                                        (0247) 	M8C_SetBank0
066B: 62 07 98 MOV   REG[0x7],0x98      (0248) 	mov	reg[07h], 98h		; Port_1_DriveMode_2 register (PRT1DM2)
066E: 62 06 46 MOV   REG[0x6],0x46      (0249) 	mov	reg[06h], 46h		; Port_1_GlobalSelect register (PRT1GS)
0671: 71 10    OR    F,0x10             
                                        (0250) 	M8C_SetBank1
0673: 62 06 00 MOV   REG[0x6],0x0       (0251) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0676: 62 07 00 MOV   REG[0x7],0x0       (0252) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0679: 70 EF    AND   F,0xEF             
                                        (0253) 	M8C_SetBank0
067B: 62 05 00 MOV   REG[0x5],0x0       (0254) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
067E: 62 08 00 MOV   REG[0x8],0x0       (0255) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0681: 71 10    OR    F,0x10             
                                        (0256) 	M8C_SetBank1
0683: 62 08 FF MOV   REG[0x8],0xFF      (0257) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
0686: 62 09 00 MOV   REG[0x9],0x0       (0258) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
0689: 70 EF    AND   F,0xEF             
                                        (0259) 	M8C_SetBank0
068B: 62 0B 00 MOV   REG[0xB],0x0       (0260) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
068E: 62 0A 80 MOV   REG[0xA],0x80      (0261) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
0691: 71 10    OR    F,0x10             
                                        (0262) 	M8C_SetBank1
0693: 62 0A 00 MOV   REG[0xA],0x0       (0263) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0696: 62 0B 00 MOV   REG[0xB],0x0       (0264) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0699: 70 EF    AND   F,0xEF             
                                        (0265) 	M8C_SetBank0
069B: 62 09 00 MOV   REG[0x9],0x0       (0266) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
069E: 62 0C 00 MOV   REG[0xC],0x0       (0267) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
06A1: 71 10    OR    F,0x10             
                                        (0268) 	M8C_SetBank1
06A3: 62 0C 00 MOV   REG[0xC],0x0       (0269) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
06A6: 62 0D 00 MOV   REG[0xD],0x0       (0270) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
06A9: 70 EF    AND   F,0xEF             
                                        (0271) 	M8C_SetBank0
06AB: 62 0F 00 MOV   REG[0xF],0x0       (0272) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
06AE: 62 0E 00 MOV   REG[0xE],0x0       (0273) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
06B1: 71 10    OR    F,0x10             
                                        (0274) 	M8C_SetBank1
06B3: 62 0E 00 MOV   REG[0xE],0x0       (0275) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
06B6: 62 0F 00 MOV   REG[0xF],0x0       (0276) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
06B9: 70 EF    AND   F,0xEF             
                                        (0277) 	M8C_SetBank0
06BB: 62 0D 00 MOV   REG[0xD],0x0       (0278) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
06BE: 62 10 00 MOV   REG[0x10],0x0      (0279) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
06C1: 71 10    OR    F,0x10             
                                        (0280) 	M8C_SetBank1
06C3: 62 10 00 MOV   REG[0x10],0x0      (0281) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
06C6: 62 11 00 MOV   REG[0x11],0x0      (0282) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
06C9: 70 EF    AND   F,0xEF             
                                        (0283) 	M8C_SetBank0
06CB: 62 13 00 MOV   REG[0x13],0x0      (0284) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
06CE: 62 12 00 MOV   REG[0x12],0x0      (0285) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
06D1: 71 10    OR    F,0x10             
                                        (0286) 	M8C_SetBank1
06D3: 62 12 00 MOV   REG[0x12],0x0      (0287) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
06D6: 62 13 00 MOV   REG[0x13],0x0      (0288) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
06D9: 70 EF    AND   F,0xEF             
                                        (0289) 	M8C_SetBank0
06DB: 62 11 00 MOV   REG[0x11],0x0      (0290) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
06DE: 62 14 00 MOV   REG[0x14],0x0      (0291) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
06E1: 71 10    OR    F,0x10             
                                        (0292) 	M8C_SetBank1
06E3: 62 14 00 MOV   REG[0x14],0x0      (0293) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
06E6: 62 15 00 MOV   REG[0x15],0x0      (0294) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
06E9: 70 EF    AND   F,0xEF             
                                        (0295) 	M8C_SetBank0
06EB: 62 17 00 MOV   REG[0x17],0x0      (0296) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
06EE: 62 16 00 MOV   REG[0x16],0x0      (0297) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
06F1: 71 10    OR    F,0x10             
                                        (0298) 	M8C_SetBank1
06F3: 62 16 00 MOV   REG[0x16],0x0      (0299) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
06F6: 62 17 00 MOV   REG[0x17],0x0      (0300) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
06F9: 70 EF    AND   F,0xEF             
                                        (0301) 	M8C_SetBank0
06FB: 62 15 00 MOV   REG[0x15],0x0      (0302) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
06FE: 62 18 00 MOV   REG[0x18],0x0      (0303) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0701: 71 10    OR    F,0x10             
                                        (0304) 	M8C_SetBank1
0703: 62 18 00 MOV   REG[0x18],0x0      (0305) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0706: 62 19 00 MOV   REG[0x19],0x0      (0306) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0709: 70 EF    AND   F,0xEF             
                                        (0307) 	M8C_SetBank0
070B: 62 1B 00 MOV   REG[0x1B],0x0      (0308) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
070E: 62 1A 00 MOV   REG[0x1A],0x0      (0309) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0711: 71 10    OR    F,0x10             
                                        (0310) 	M8C_SetBank1
0713: 62 1A 00 MOV   REG[0x1A],0x0      (0311) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0716: 62 1B 00 MOV   REG[0x1B],0x0      (0312) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0719: 70 EF    AND   F,0xEF             
                                        (0313) 	M8C_SetBank0
071B: 62 19 00 MOV   REG[0x19],0x0      (0314) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
071E: 62 1C 00 MOV   REG[0x1C],0x0      (0315) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0721: 71 10    OR    F,0x10             
                                        (0316) 	M8C_SetBank1
0723: 62 1C 00 MOV   REG[0x1C],0x0      (0317) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0726: 62 1D 00 MOV   REG[0x1D],0x0      (0318) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0729: 70 EF    AND   F,0xEF             
                                        (0319) 	M8C_SetBank0
072B: 62 1F 00 MOV   REG[0x1F],0x0      (0320) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
072E: 62 1E 00 MOV   REG[0x1E],0x0      (0321) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0731: 71 10    OR    F,0x10             
                                        (0322) 	M8C_SetBank1
0733: 62 1E 00 MOV   REG[0x1E],0x0      (0323) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0736: 62 1F 00 MOV   REG[0x1F],0x0      (0324) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0739: 70 EF    AND   F,0xEF             
                                        (0325) 	M8C_SetBank0
073B: 62 1D 00 MOV   REG[0x1D],0x0      (0326) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
073E: 70 EF    AND   F,0xEF             
                                        (0327) 	M8C_SetBank0
0740: 7F       RET                      (0328) 	ret
                                        (0329) 
                                        (0330) 
                                        (0331) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_ps2bitbang
                                        (0026) export _LoadConfig_ps2bitbang
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) export Port_2_Data_SHADE
                                        (0030) export _Port_2_Data_SHADE
                                        (0031) export Port_2_DriveMode_0_SHADE
                                        (0032) export _Port_2_DriveMode_0_SHADE
                                        (0033) export Port_2_DriveMode_1_SHADE
                                        (0034) export _Port_2_DriveMode_1_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
0741: 55 00 18 MOV   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x18(0067) 	mov		[Port_1_Data_SHADE], 18h
0744: 55 01 00 MOV   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x0(0068) 	mov		[Port_2_Data_SHADE], 0h
0747: 55 02 FF MOV   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2],0xFF(0069) 	mov		[Port_2_DriveMode_0_SHADE], ffh
074A: 55 03 00 MOV   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+3],0x0(0070) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0071) 
074D: 7C 07 54 LCALL 0x0754             (0072) 	lcall	LoadConfig_ps2bitbang
0750: 7C 06 3C LCALL 0x063C             (0073) 	lcall	LoadConfigTBL_ps2bitbang_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
0753: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration ps2bitbang
                                        (0081) ;
                                        (0082) ;    Load configuration registers for ps2bitbang.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_ps2bitbang:
                                        (0099)  LoadConfig_ps2bitbang:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
0754: 10       PUSH  X                  (0102) 	push	x
0755: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
0757: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
0759: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
075A: 50 04    MOV   A,0x4              (0107)     mov     A, >LoadConfigTBL_ps2bitbang_Bank0
075C: 57 E4    MOV   X,0xE4             (0108)     mov     X, <LoadConfigTBL_ps2bitbang_Bank0
075E: 7C 07 6F LCALL 0x076F             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
0761: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
0763: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
0764: 50 05    MOV   A,0x5              (0114)     mov     A, >LoadConfigTBL_ps2bitbang_Bank1
0766: 57 8D    MOV   X,0x8D             (0115)     mov     X, <LoadConfigTBL_ps2bitbang_Bank1
0768: 7C 07 6F LCALL 0x076F             (0116)     lcall   LoadConfig              ; Load the bank 1 values
076B: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
076D: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
076E: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
076F: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
0771: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
0772: 08       PUSH  A                  (0146)     push    A
0773: 4F       MOV   X,SP               (0147)     mov     X, SP
0774: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
0777: D0 04    JNC   0x077C             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0779: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
077C: 18       POP   A                  (0152)     pop     A
077D: 20       POP   X                  (0153)     pop     X
077E: 70 EF    AND   F,0xEF             
0780: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0783: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
0784: 08       PUSH  A                  (0159)     push    A
0785: 28       ROMX                     (0160)     romx                            ; Load register address from table
0786: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
0788: A0 1F    JZ    0x07A8             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
078A: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
078B: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
078E: A0 03    JZ    0x0792             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0790: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
0792: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
0794: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
0795: 20       POP   X                  (0170)     pop     X
0796: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
0797: 09 00    ADC   A,0x0              (0172)     adc     A, 0
0799: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
079A: 08       PUSH  A                  (0174)     push    A
079B: 28       ROMX                     (0175)     romx                            ; load config data from the table
079C: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
079D: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
079F: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
07A1: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
07A2: 20       POP   X                  (0180)     pop     X
07A3: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
07A4: 09 00    ADC   A,0x0              (0182)     adc     A, 0
07A6: 8F D7    JMP   0x077E             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
07A8: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
07AA: 70 3F    AND   F,0x3F             
07AC: 71 C0    OR    F,0xC0             
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
07AE: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_1_Data_SHADE:
                                        (0195) Port_1_Data_SHADE:	BLK	1
                                        (0196) _Port_2_Data_SHADE:
                                        (0197) Port_2_Data_SHADE:	BLK	1
                                        (0198) _Port_2_DriveMode_0_SHADE:
                                        (0199) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_2_DriveMode_1_SHADE:
                                        (0201) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
07AF: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
07B0: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uartclockint.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: UARTClockINT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "UARTClock.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UARTClock_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _UARTClock_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _UARTClock_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
07B1: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file UARTClockINT.asm
FILE: lib\uartclock.asm                 (0001) ;;*****************************************************************************
07B2: 43 DF 20 OR    REG[0xDF],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: UARTClock.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "UARTClock.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  UARTClock_EnableInt
                                        (0030) export _UARTClock_EnableInt
                                        (0031) export  UARTClock_DisableInt
                                        (0032) export _UARTClock_DisableInt
                                        (0033) export  UARTClock_Start
                                        (0034) export _UARTClock_Start
                                        (0035) export  UARTClock_Stop
                                        (0036) export _UARTClock_Stop
                                        (0037) export  UARTClock_WritePeriod
                                        (0038) export _UARTClock_WritePeriod
                                        (0039) export  UARTClock_WriteCompareValue
                                        (0040) export _UARTClock_WriteCompareValue
                                        (0041) export  UARTClock_wReadCompareValue
                                        (0042) export _UARTClock_wReadCompareValue
                                        (0043) export  UARTClock_wReadCounter
                                        (0044) export _UARTClock_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wUARTClock_ReadCompareValue  ; deprecated
                                        (0049) export _wUARTClock_ReadCompareValue  ; deprecated
                                        (0050) export  wUARTClock_ReadCounter       ; deprecated
                                        (0051) export _wUARTClock_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: UARTClock_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  UARTClock_EnableInt:
                                        (0082) _UARTClock_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    UARTClock_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
07B5: 7F       RET                      (0086)    ret
07B6: 41 DF DF AND   REG[0xDF],0xDF     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: UARTClock_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  UARTClock_DisableInt:
                                        (0109) _UARTClock_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    UARTClock_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
07B9: 7F       RET                      (0113)    ret
07BA: 43 53 01 OR    REG[0x53],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: UARTClock_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  UARTClock_Start:
                                        (0138) _UARTClock_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    UARTClock_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
07BD: 7F       RET                      (0142)    ret
07BE: 41 53 FE AND   REG[0x53],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: UARTClock_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register of the LSB block.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  UARTClock_Stop:
                                        (0166) _UARTClock_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    UARTClock_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
07C1: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: UARTClock_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count registers (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  UARTClock_WritePeriod:
                                        (0196) _UARTClock_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
07C2: 60 51    MOV   REG[0x51],A        (0198)    mov   reg[UARTClock_PERIOD_LSB_REG], A
07C4: 5B       MOV   A,X                (0199)    mov   A, X
07C5: 60 55    MOV   REG[0x55],A        (0200)    mov   reg[UARTClock_PERIOD_MSB_REG], A
                                        (0201)    RAM_EPILOGUE RAM_USE_CLASS_1
07C7: 7F       RET                      (0202)    ret
                                        (0203) 
                                        (0204) 
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: UARTClock_WriteCompareValue
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Writes compare value into the Compare register (DR2).
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;
                                        (0215) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0216) ;  RETURNS:      Nothing
                                        (0217) ;  SIDE EFFECTS: 
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;
                                        (0224)  UARTClock_WriteCompareValue:
                                        (0225) _UARTClock_WriteCompareValue:
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_1
07C8: 60 52    MOV   REG[0x52],A        (0227)    mov   reg[UARTClock_COMPARE_LSB_REG], A
07CA: 5B       MOV   A,X                (0228)    mov   A, X
07CB: 60 56    MOV   REG[0x56],A        (0229)    mov   reg[UARTClock_COMPARE_MSB_REG], A
                                        (0230)    RAM_EPILOGUE RAM_USE_CLASS_1
07CD: 7F       RET                      (0231)    ret
                                        (0232) 
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) .SECTION
                                        (0237) ;-----------------------------------------------------------------------------
                                        (0238) ;  FUNCTION NAME: UARTClock_wReadCompareValue
                                        (0239) ;
                                        (0240) ;  DESCRIPTION:
                                        (0241) ;     Reads the Compare registers.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS:    None
                                        (0245) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  UARTClock_wReadCompareValue:
                                        (0254) _UARTClock_wReadCompareValue:
                                        (0255)  wUARTClock_ReadCompareValue:                    ; this name deprecated
                                        (0256) _wUARTClock_ReadCompareValue:                    ; this name deprecated
                                        (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
07CE: 5D 56    MOV   A,REG[0x56]        (0258)    mov   A, reg[UARTClock_COMPARE_MSB_REG]
07D0: 5C       MOV   X,A                (0259)    mov   X, A
07D1: 5D 52    MOV   A,REG[0x52]        (0260)    mov   A, reg[UARTClock_COMPARE_LSB_REG]
                                        (0261)    RAM_EPILOGUE RAM_USE_CLASS_1
07D3: 7F       RET                      (0262)    ret
                                        (0263) 
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: UARTClock_wReadCounter
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0273) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0274) ;     from the Count to the Compare registers by holding the clock low in
                                        (0275) ;     the MSB PSoC block.
                                        (0276) ;-----------------------------------------------------------------------------
                                        (0277) ;
                                        (0278) ;  ARGUMENTS: None
                                        (0279) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0280) ;  SIDE EFFECTS:
                                        (0281) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0282) ;     2) The A and X registers may be modified by this or future implementations
                                        (0283) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0284) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0285) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0286) ;        functions.
                                        (0287) ;
                                        (0288)  UARTClock_wReadCounter:
                                        (0289) _UARTClock_wReadCounter:
                                        (0290)  wUARTClock_ReadCounter:                         ; this name deprecated
                                        (0291) _wUARTClock_ReadCounter:                         ; this name deprecated
                                        (0292) 
                                        (0293)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0294)    bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
                                        (0295)    bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
                                        (0296)    wCounter:               EQU   4                  ; Frame offset to temp Count   store
                                        (0297)    STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
                                        (0298) 
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
07D4: 4F       MOV   X,SP               (0300)    mov   X, SP                                      ; X <-  stack frame pointer
07D5: 5D 56    MOV   A,REG[0x56]        (0301)    mov   A, reg[UARTClock_COMPARE_MSB_REG]       ; Save the Compare register on the stack
07D7: 08       PUSH  A                  (0302)    push  A                                          ;
07D8: 5D 52    MOV   A,REG[0x52]        (0303)    mov   A, reg[UARTClock_COMPARE_LSB_REG]       ;
07DA: 08       PUSH  A                  (0304)    push  A                                          ;   -stack frame now 2 bytes-
07DB: 5D 53    MOV   A,REG[0x53]        (0305)    mov   A, reg[UARTClock_CONTROL_LSB_REG]       ; Save CR0 (running or stopped state)
07DD: 08       PUSH  A                  (0306)    push  A                                          ;   -stack frame now 3 bytes-
07DE: 41 53 FE AND   REG[0x53],0xFE     
07E1: 71 10    OR    F,0x10             
                                        (0307)    UARTClock_Stop_M                              ; Disable (stop) the Counter if running
                                        (0308)    M8C_SetBank1                                     ;
07E3: 5D 51    MOV   A,REG[0x51]        (0309)    mov   A, reg[UARTClock_INPUT_LSB_REG]         ; save the LSB clock input setting
07E5: 08       PUSH  A                  (0310)    push  A                                          ;   on the stack (now 4 bytes) and ...
                                        (0311)                                                     ;   hold the clock low:
07E6: 62 51 00 MOV   REG[0x51],0x0      (0312)    mov   reg[UARTClock_INPUT_LSB_REG], INPUT_REG_NULL
07E9: 70 EF    AND   F,0xEF             
                                        (0313)    M8C_SetBank0                                     ; Extract the Count via DR2 register
07EB: 5D 54    MOV   A,REG[0x54]        (0314)    mov   A, reg[UARTClock_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
07ED: 5D 56    MOV   A,REG[0x56]        (0315)    mov   A, reg[UARTClock_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
07EF: 08       PUSH  A                  (0316)    push  A                                          ;   -stack frame is now 5 bytes
07F0: 5D 50    MOV   A,REG[0x50]        (0317)    mov   A, reg[UARTClock_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
07F2: 5D 52    MOV   A,REG[0x52]        (0318)    mov   A, reg[UARTClock_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
07F4: 08       PUSH  A                  (0319)    push  A                                          ;   -stack frame is now 6 bytes-
07F5: 52 00    MOV   A,[X+0]            (0320)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
07F7: 60 56    MOV   REG[0x56],A        (0321)    mov   reg[UARTClock_COMPARE_MSB_REG], A       ;
07F9: 52 01    MOV   A,[X+1]            (0322)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
07FB: 60 52    MOV   REG[0x52],A        (0323)    mov   reg[UARTClock_COMPARE_LSB_REG], A       ;
07FD: 71 10    OR    F,0x10             
                                        (0324)    M8C_SetBank1                                     ; ---Restore the counter operation
07FF: 52 03    MOV   A,[X+3]            (0325)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0801: 60 51    MOV   REG[0x51],A        (0326)    mov   reg[UARTClock_INPUT_LSB_REG], A         ;   and restore it
0803: 70 EF    AND   F,0xEF             
                                        (0327)    M8C_SetBank0                                     ; Now re-enable (start) the counter
0805: 52 02    MOV   A,[X+2]            (0328)    mov   A, [X+bOrigControlReg]                     ;   if it was running when
0807: 60 53    MOV   REG[0x53],A        (0329)    mov   reg[UARTClock_CONTROL_LSB_REG], A       ;   this function was first called
0809: 18       POP   A                  (0330)    pop   A                                          ; Setup the return value
080A: 20       POP   X                  (0331)    pop   X                                          ;
080B: 38 FC    ADD   SP,0xFC            (0332)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
080D: 70 3F    AND   F,0x3F             
080F: 71 C0    OR    F,0xC0             
                                        (0333)    RAM_EPILOGUE RAM_USE_CLASS_2
0811: 7F       RET                      (0334)    ret
                                        (0335) 
                                        (0336) .ENDSECTION
                                        (0337) 
                                        (0338) ; End of File UARTClock.asm
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
0812: 43 DF 40 OR    REG[0xDF],0x40     (0002) ;;*****************************************************************************
0815: 43 DF 80 OR    REG[0xDF],0x80     
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0818: 7F       RET                      (0182)    ret
0819: 41 DF BF AND   REG[0xDF],0xBF     
081C: 41 DF 7F AND   REG[0xDF],0x7F     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
081F: 7F       RET                      (0214)    ret
0820: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
0822: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
0824: A0 07    JZ    0x082C             (0249)    jz    .SetModeRegEmpty
0826: 43 58 10 OR    REG[0x58],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0829: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
082B: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
082C: 41 58 EF AND   REG[0x58],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
082F: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
0831: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
0832: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0834: 60 5B    MOV   REG[0x5B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
0836: 60 5F    MOV   REG[0x5F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0838: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0839: 41 5B FE AND   REG[0x5B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
083C: 41 5F FE AND   REG[0x5F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
083F: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0840: 60 59    MOV   REG[0x59],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0842: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0843: 5D 5B    MOV   A,REG[0x5B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0845: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0846: 5D 5E    MOV   A,REG[0x5E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0848: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0849: 5D 5F    MOV   A,REG[0x5F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
084B: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
084C: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
084E: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
0850: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
0852: A0 06    JZ    0x0859             (0492)    jz   .SetTxCmpMode
                                        (0493) 
0854: 41 58 EF AND   REG[0x58],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
0857: 80 04    JMP   0x085C             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0859: 43 58 10 OR    REG[0x58],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
085C: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
085E: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
085F: 08       PUSH  A                  (0536)    push A
0860: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
0862: A0 06    JZ    0x0869             (0538)    jz   .DisRxInt
0864: 43 DF 80 OR    REG[0xDF],0x80     
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
0867: 80 04    JMP   0x086C             (0541)    jmp  .CheckTxInt
0869: 41 DF 7F AND   REG[0xDF],0x7F     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
086C: 18       POP   A                  (0547)    pop  A
086D: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
086F: A0 06    JZ    0x0876             (0549)    jz   .DisTxInt
0871: 43 DF 40 OR    REG[0xDF],0x40     
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0874: 80 04    JMP   0x0879             (0552)    jmp  .End_IntCntl
0876: 41 DF BF AND   REG[0xDF],0xBF     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0879: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
088A: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
088B: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
088C: 67       ASR   A                  (0603)    asr   A
088D: 67       ASR   A                  (0604)    asr   A
088E: 67       ASR   A                  (0605)    asr   A
088F: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0891: FF E7    INDEX 0x087A             (0607)    index UART_HEX_STR                  ; Get Hex value
0893: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
0895: 18       POP   A                  (0609)    pop   A                             ; Restore value
0896: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0898: FF E0    INDEX 0x087A             (0611)    index UART_HEX_STR                  ; Get Hex value
089A: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
089C: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
089D: 4B       SWAP  A,X                (0645)    swap  A,X
089E: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
08A0: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
08A1: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
08A3: 7F       RET                      (0650)    ret
08A4: 49 5B 10 TST   REG[0x5B],0x10     
08A7: AF FC    JZ    _UART_PutChar      
08A9: 60 59    MOV   REG[0x59],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
08AB: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
08AC: 49 5F 08 TST   REG[0x5F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
08AF: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
08B1: 5D 5E    MOV   A,REG[0x5E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
08B3: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
08B4: 5D 5F    MOV   A,REG[0x5F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
08B6: 08       PUSH  A                  (0756)    push A
08B7: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
08B9: B0 04    JNZ   0x08BE             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
08BB: 18       POP   A                  (0759)    pop  A
08BC: 80 0B    JMP   0x08C8             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
08BE: 5D 5E    MOV   A,REG[0x5E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
08C0: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
08C1: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
08C2: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
08C4: B0 03    JNZ   0x08C8             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
08C6: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
08C7: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
08C8: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
08CA: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
08CB: 5D 5F    MOV   A,REG[0x5F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
08CD: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
08CF: 08       PUSH  A                  (0819)    push A
08D0: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
08D2: B0 07    JNZ   0x08DA             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
08D4: 18       POP   A                  (0822)    pop  A
08D5: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
08D7: 4B       SWAP  A,X                (0824)    swap A,X
08D8: 80 07    JMP   0x08E0             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
08DA: 18       POP   A                  (0828)    pop  A
08DB: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
08DD: 4B       SWAP  A,X                (0830)    swap A,X
08DE: 5D 5E    MOV   A,REG[0x5E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
08E0: 7F       RET                      (0836)    ret
08E1: 70 BF    AND   F,0xBF             
08E3: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
08E5: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
08E7: A0 06    JZ    0x08EE             (0872)    jz    End_PutString                           ; Check for end of string
08E9: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
08EB: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
08EC: 8F F8    JMP   0x08E5             (0875)    jmp   .PutStringLoop                          ; Get next character
08EE: 70 3F    AND   F,0x3F             
08F0: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
08F2: 7F       RET                      (0879)    ret
08F3: 70 BF    AND   F,0xBF             
08F5: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
08F8: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
08F9: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
08FB: A0 1A    JZ    0x0916             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
08FD: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
08FF: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0901: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
0903: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0905: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0907: 49 5B 10 TST   REG[0x5B],0x10     
090A: AF FC    JZ    0x0907             
090C: 60 59    MOV   REG[0x59],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
090E: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
090F: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0912: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0914: 8F E4    JMP   0x08F9             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
0916: 70 3F    AND   F,0x3F             
0918: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
091A: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
091B: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
091C: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
091F: B0 06    JNZ   0x0926             (0980)    jnz   .CW_WRITEIT
0921: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
0924: A0 1D    JZ    0x0942             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0926: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0927: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0929: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
092B: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
092C: 49 5B 10 TST   REG[0x5B],0x10     
092F: AF FC    JZ    0x092C             
0931: 60 59    MOV   REG[0x59],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
0933: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0934: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0937: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
093A: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
093D: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0940: 8F DB    JMP   0x091C             (0995)    jmp   .CW_Loop
0942: 70 3F    AND   F,0x3F             
0944: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0946: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0947: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0948: 10       PUSH  X                  (1030)    push  X
0949: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
094A: A0 0B    JZ    0x0956             (1032)    jz    .End_CPutString
094C: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
094E: 20       POP   X                  (1034)    pop   X
094F: 18       POP   A                  (1035)    pop   A
0950: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0951: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
0953: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
0954: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
0956: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0958: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0959: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
095B: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
095D: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
095F: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0961: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\tenmicrosectimer.asm          (0001) ;;*****************************************************************************
0962: 43 E1 80 OR    REG[0xE1],0x80     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TenMicroSecTimer.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "TenMicroSecTimer.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  TenMicroSecTimer_EnableInt
                                        (0030) export _TenMicroSecTimer_EnableInt
                                        (0031) export  TenMicroSecTimer_DisableInt
                                        (0032) export _TenMicroSecTimer_DisableInt
                                        (0033) export  TenMicroSecTimer_Start
                                        (0034) export _TenMicroSecTimer_Start
                                        (0035) export  TenMicroSecTimer_Stop
                                        (0036) export _TenMicroSecTimer_Stop
                                        (0037) export  TenMicroSecTimer_WritePeriod
                                        (0038) export _TenMicroSecTimer_WritePeriod
                                        (0039) export  TenMicroSecTimer_WriteCompareValue
                                        (0040) export _TenMicroSecTimer_WriteCompareValue
                                        (0041) export  TenMicroSecTimer_wReadCompareValue
                                        (0042) export _TenMicroSecTimer_wReadCompareValue
                                        (0043) export  TenMicroSecTimer_wReadTimer
                                        (0044) export _TenMicroSecTimer_wReadTimer
                                        (0045) export  TenMicroSecTimer_wReadTimerSaveCV
                                        (0046) export _TenMicroSecTimer_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTenMicroSecTimer_ReadCompareValue  ; deprecated
                                        (0051) export _wTenMicroSecTimer_ReadCompareValue  ; deprecated
                                        (0052) export  wTenMicroSecTimer_ReadTimer         ; deprecated
                                        (0053) export _wTenMicroSecTimer_ReadTimer         ; deprecated
                                        (0054) export  wTenMicroSecTimer_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTenMicroSecTimer_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTenMicroSecTimer_ReadCounter       ; obsolete
                                        (0058) export _wTenMicroSecTimer_ReadCounter       ; obsolete
                                        (0059) export  wTenMicroSecTimer_CaptureCounter    ; obsolete
                                        (0060) export _wTenMicroSecTimer_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA ps2bitbang_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: TenMicroSecTimer_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  TenMicroSecTimer_EnableInt:
                                        (0098) _TenMicroSecTimer_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    TenMicroSecTimer_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0965: 7F       RET                      (0102)    ret
0966: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: TenMicroSecTimer_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  TenMicroSecTimer_DisableInt:
                                        (0126) _TenMicroSecTimer_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    TenMicroSecTimer_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0969: 7F       RET                      (0130)    ret
096A: 43 3B 01 OR    REG[0x3B],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: TenMicroSecTimer_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  TenMicroSecTimer_Start:
                                        (0154) _TenMicroSecTimer_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    TenMicroSecTimer_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
096D: 7F       RET                      (0158)    ret
096E: 41 3B FE AND   REG[0x3B],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: TenMicroSecTimer_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  TenMicroSecTimer_Stop:
                                        (0182) _TenMicroSecTimer_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    TenMicroSecTimer_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0971: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: TenMicroSecTimer_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  TenMicroSecTimer_WritePeriod:
                                        (0211) _TenMicroSecTimer_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0972: 60 39    MOV   REG[0x39],A        (0213)    mov   reg[TenMicroSecTimer_PERIOD_LSB_REG], A
0974: 5B       MOV   A,X                (0214)    mov   A, X
0975: 60 3D    MOV   REG[0x3D],A        (0215)    mov   reg[TenMicroSecTimer_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
0977: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: TenMicroSecTimer_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call TenMicroSecTimer_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  TenMicroSecTimer_WriteCompareValue:
                                        (0243) _TenMicroSecTimer_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
0978: 60 3A    MOV   REG[0x3A],A        (0245)    mov   reg[TenMicroSecTimer_COMPARE_LSB_REG], A
097A: 5B       MOV   A,X                (0246)    mov   A, X
097B: 60 3E    MOV   REG[0x3E],A        (0247)    mov   reg[TenMicroSecTimer_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
097D: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: TenMicroSecTimer_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  TenMicroSecTimer_wReadCompareValue:
                                        (0272) _TenMicroSecTimer_wReadCompareValue:
                                        (0273)  wTenMicroSecTimer_ReadCompareValue:                ; this name deprecated
                                        (0274) _wTenMicroSecTimer_ReadCompareValue:                ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
097E: 5D 3E    MOV   A,REG[0x3E]        (0276)    mov   A, reg[TenMicroSecTimer_COMPARE_MSB_REG]
0980: 5C       MOV   X,A                (0277)    mov   X, A
0981: 5D 3A    MOV   A,REG[0x3A]        (0278)    mov   A, reg[TenMicroSecTimer_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
0983: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: TenMicroSecTimer_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  TenMicroSecTimer_wReadTimerSaveCV:
                                        (0321) _TenMicroSecTimer_wReadTimerSaveCV:
                                        (0322)  wTenMicroSecTimer_ReadTimerSaveCV:                ; this name deprecated
                                        (0323) _wTenMicroSecTimer_ReadTimerSaveCV:                ; this name deprecated
                                        (0324)  wTenMicroSecTimer_ReadCounter:                    ; this name deprecated
                                        (0325) _wTenMicroSecTimer_ReadCounter:                    ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
0984: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
0985: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
0987: 5D 3B    MOV   A,REG[0x3B]        (0334)    mov   A, reg[TenMicroSecTimer_CONTROL_LSB_REG]; save the Control register
0989: 08       PUSH  A                  (0335)    push  A
098A: 5D 3A    MOV   A,REG[0x3A]        (0336)    mov   A, reg[TenMicroSecTimer_COMPARE_LSB_REG]; save the Compare register
098C: 08       PUSH  A                  (0337)    push  A
098D: 5D 3E    MOV   A,REG[0x3E]        (0338)    mov   A, reg[TenMicroSecTimer_COMPARE_MSB_REG]
098F: 08       PUSH  A                  (0339)    push  A
0990: 5D 38    MOV   A,REG[0x38]        (0340)    mov   A, reg[TenMicroSecTimer_COUNTER_LSB_REG]; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
0992: 5D 3E    MOV   A,REG[0x3E]        (0342)    mov   A, reg[TenMicroSecTimer_COMPARE_MSB_REG]; Now grab DR2 (DR0) and save
0994: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
0996: 5D 3A    MOV   A,REG[0x3A]        (0344)    mov   A, reg[TenMicroSecTimer_COMPARE_LSB_REG]
0998: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
099A: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
099C: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
099F: A0 03    JZ    0x09A3             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
09A1: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
09A3: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
09A5: 70 FE    AND   F,0xFE             
09A7: 41 3B FE AND   REG[0x3B],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    TenMicroSecTimer_Stop_M                       ; Disable (stop) the timer
09AA: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
09AB: 60 3E    MOV   REG[0x3E],A        (0355)    mov   reg[TenMicroSecTimer_COMPARE_MSB_REG], A
09AD: 18       POP   A                  (0356)    pop   A
09AE: 60 3A    MOV   REG[0x3A],A        (0357)    mov   reg[TenMicroSecTimer_COMPARE_LSB_REG], A
09B0: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
09B1: 60 3B    MOV   REG[0x3B],A        (0359)    mov   reg[TenMicroSecTimer_CONTROL_LSB_REG], A
09B3: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
09B4: 20       POP   X                  (0361)    pop   X
09B5: 70 3F    AND   F,0x3F             
09B7: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
09B9: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: TenMicroSecTimer_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  TenMicroSecTimer_wReadTimer:
                                        (0397) _TenMicroSecTimer_wReadTimer:
                                        (0398)  wTenMicroSecTimer_ReadTimer:                    ; this name deprecated
                                        (0399) _wTenMicroSecTimer_ReadTimer:                    ; this name deprecated
                                        (0400)  wTenMicroSecTimer_CaptureCounter:               ; this name deprecated
                                        (0401) _wTenMicroSecTimer_CaptureCounter:               ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
09BA: 5D 38    MOV   A,REG[0x38]        (0404)    mov   A, reg[TenMicroSecTimer_COUNTER_LSB_REG]; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
09BC: 5D 3E    MOV   A,REG[0x3E]        (0407)    mov   A, reg[TenMicroSecTimer_COMPARE_MSB_REG]; Return DR2 (actually DR0)
09BE: 5C       MOV   X,A                (0408)    mov   X, A
09BF: 5D 3A    MOV   A,REG[0x3A]        (0409)    mov   A, reg[TenMicroSecTimer_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
09C1: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File TenMicroSecTimer.asm
FILE: lib\pwmpiano3int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMPiano3INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWMPiano3.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWMPiano3_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWMPiano3_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWMPiano3_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
09C2: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWMPiano3INT.asm
FILE: lib\pwmpiano3.asm                 (0001) ;;*****************************************************************************
09C3: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMPiano3.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWMPiano3.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWMPiano3_EnableInt
                                        (0030) export _PWMPiano3_EnableInt
                                        (0031) export  PWMPiano3_DisableInt
                                        (0032) export _PWMPiano3_DisableInt
                                        (0033) export  PWMPiano3_Start
                                        (0034) export _PWMPiano3_Start
                                        (0035) export  PWMPiano3_Stop
                                        (0036) export _PWMPiano3_Stop
                                        (0037) export  PWMPiano3_WritePeriod
                                        (0038) export _PWMPiano3_WritePeriod
                                        (0039) export  PWMPiano3_WritePulseWidth
                                        (0040) export _PWMPiano3_WritePulseWidth
                                        (0041) export  PWMPiano3_wReadPulseWidth
                                        (0042) export _PWMPiano3_wReadPulseWidth
                                        (0043) export  PWMPiano3_wReadCounter
                                        (0044) export _PWMPiano3_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWMPiano3_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWMPiano3_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWMPiano3_ReadCounter       ; deprecated
                                        (0051) export _wPWMPiano3_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ps2bitbang_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWMPiano3_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWMPiano3_EnableInt:
                                        (0091) _PWMPiano3_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWMPiano3_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
09C6: 7F       RET                      (0095)    ret
09C7: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWMPiano3_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWMPiano3_DisableInt:
                                        (0119) _PWMPiano3_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWMPiano3_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
09CA: 7F       RET                      (0123)    ret
09CB: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWMPiano3_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWMPiano3_Start:
                                        (0148) _PWMPiano3_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWMPiano3_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
09CE: 7F       RET                      (0152)    ret
09CF: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWMPiano3_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWMPiano3_Stop:
                                        (0176) _PWMPiano3_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWMPiano3_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
09D2: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWMPiano3_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWMPiano3_WritePeriod:
                                        (0206) _PWMPiano3_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
09D3: 60 29    MOV   REG[0x29],A        (0208)    mov   reg[PWMPiano3_PERIOD_LSB_REG], A
09D5: 5B       MOV   A,X                (0209)    mov   A, X
09D6: 60 2D    MOV   REG[0x2D],A        (0210)    mov   reg[PWMPiano3_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
09D8: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWMPiano3_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWMPiano3_WritePulseWidth:
                                        (0235) _PWMPiano3_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
09D9: 60 2A    MOV   REG[0x2A],A        (0237)    mov   reg[PWMPiano3_COMPARE_LSB_REG], A
09DB: 5B       MOV   A,X                (0238)    mov   A, X
09DC: 60 2E    MOV   REG[0x2E],A        (0239)    mov   reg[PWMPiano3_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
09DE: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWMPiano3_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWMPiano3_wReadPulseWidth:
                                        (0264) _PWMPiano3_wReadPulseWidth:
                                        (0265)  wPWMPiano3_ReadPulseWidth:                      ; this name deprecated
                                        (0266) _wPWMPiano3_ReadPulseWidth:                      ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
09DF: 5D 2E    MOV   A,REG[0x2E]        (0268)    mov   A, reg[PWMPiano3_COMPARE_MSB_REG]
09E1: 5C       MOV   X,A                (0269)    mov   X, A
09E2: 5D 2A    MOV   A,REG[0x2A]        (0270)    mov   A, reg[PWMPiano3_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
09E4: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWMPiano3_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWMPiano3_wReadCounter:
                                        (0299) _PWMPiano3_wReadCounter:
                                        (0300)  wPWMPiano3_ReadCounter:                         ; this name deprecated
                                        (0301) _wPWMPiano3_ReadCounter:                         ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
09E5: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
09E6: 5D 2E    MOV   A,REG[0x2E]        (0310)    mov   A, reg[PWMPiano3_COMPARE_MSB_REG]       ; Save the Compare register on the stack
09E8: 08       PUSH  A                  (0311)    push  A                                          ;
09E9: 5D 2A    MOV   A,REG[0x2A]        (0312)    mov   A, reg[PWMPiano3_COMPARE_LSB_REG]       ;
09EB: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
09EC: 41 2B FE AND   REG[0x2B],0xFE     
09EF: 71 10    OR    F,0x10             
                                        (0314)    PWMPiano3_Stop_M                              ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
09F1: 5D 29    MOV   A,REG[0x29]        (0316)    mov   A, reg[PWMPiano3_INPUT_LSB_REG]         ; save the LSB clock input setting
09F3: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
09F4: 62 29 00 MOV   REG[0x29],0x0      (0319)    mov   reg[PWMPiano3_INPUT_LSB_REG], INPUT_REG_NULL
09F7: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
09F9: 5D 2C    MOV   A,REG[0x2C]        (0321)    mov   A, reg[PWMPiano3_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
09FB: 5D 2E    MOV   A,REG[0x2E]        (0322)    mov   A, reg[PWMPiano3_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
09FD: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
09FE: 5D 28    MOV   A,REG[0x28]        (0324)    mov   A, reg[PWMPiano3_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
0A00: 5D 2A    MOV   A,REG[0x2A]        (0325)    mov   A, reg[PWMPiano3_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
0A02: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0A03: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0A05: 60 2E    MOV   REG[0x2E],A        (0328)    mov   reg[PWMPiano3_COMPARE_MSB_REG], A       ;
0A07: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0A09: 60 2A    MOV   REG[0x2A],A        (0330)    mov   reg[PWMPiano3_COMPARE_LSB_REG], A       ;
0A0B: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0A0D: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0A0F: 60 29    MOV   REG[0x29],A        (0333)    mov   reg[PWMPiano3_INPUT_LSB_REG], A         ;    and restore it
0A11: 70 EF    AND   F,0xEF             
0A13: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWMPiano3_Start_M                             ; Now re-enable the PWM function
0A16: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0A17: 20       POP   X                  (0337)    pop   X                                          ;
0A18: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0A1A: 70 3F    AND   F,0x3F             
0A1C: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0A1E: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWMPiano3.asm
FILE: lib\pwmpiano2int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMPiano2INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWMPiano2.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWMPiano2_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWMPiano2_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWMPiano2_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0A1F: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWMPiano2INT.asm
FILE: lib\pwmpiano2.asm                 (0001) ;;*****************************************************************************
0A20: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMPiano2.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWMPiano2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWMPiano2_EnableInt
                                        (0030) export _PWMPiano2_EnableInt
                                        (0031) export  PWMPiano2_DisableInt
                                        (0032) export _PWMPiano2_DisableInt
                                        (0033) export  PWMPiano2_Start
                                        (0034) export _PWMPiano2_Start
                                        (0035) export  PWMPiano2_Stop
                                        (0036) export _PWMPiano2_Stop
                                        (0037) export  PWMPiano2_WritePeriod
                                        (0038) export _PWMPiano2_WritePeriod
                                        (0039) export  PWMPiano2_WritePulseWidth
                                        (0040) export _PWMPiano2_WritePulseWidth
                                        (0041) export  PWMPiano2_wReadPulseWidth
                                        (0042) export _PWMPiano2_wReadPulseWidth
                                        (0043) export  PWMPiano2_wReadCounter
                                        (0044) export _PWMPiano2_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWMPiano2_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWMPiano2_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWMPiano2_ReadCounter       ; deprecated
                                        (0051) export _wPWMPiano2_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ps2bitbang_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWMPiano2_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWMPiano2_EnableInt:
                                        (0091) _PWMPiano2_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWMPiano2_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0A23: 7F       RET                      (0095)    ret
0A24: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWMPiano2_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWMPiano2_DisableInt:
                                        (0119) _PWMPiano2_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWMPiano2_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0A27: 7F       RET                      (0123)    ret
0A28: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWMPiano2_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWMPiano2_Start:
                                        (0148) _PWMPiano2_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWMPiano2_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0A2B: 7F       RET                      (0152)    ret
0A2C: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWMPiano2_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWMPiano2_Stop:
                                        (0176) _PWMPiano2_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWMPiano2_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0A2F: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWMPiano2_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWMPiano2_WritePeriod:
                                        (0206) _PWMPiano2_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0A30: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWMPiano2_PERIOD_LSB_REG], A
0A32: 5B       MOV   A,X                (0209)    mov   A, X
0A33: 60 25    MOV   REG[0x25],A        (0210)    mov   reg[PWMPiano2_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0A35: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWMPiano2_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWMPiano2_WritePulseWidth:
                                        (0235) _PWMPiano2_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0A36: 60 22    MOV   REG[0x22],A        (0237)    mov   reg[PWMPiano2_COMPARE_LSB_REG], A
0A38: 5B       MOV   A,X                (0238)    mov   A, X
0A39: 60 26    MOV   REG[0x26],A        (0239)    mov   reg[PWMPiano2_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0A3B: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWMPiano2_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWMPiano2_wReadPulseWidth:
                                        (0264) _PWMPiano2_wReadPulseWidth:
                                        (0265)  wPWMPiano2_ReadPulseWidth:                      ; this name deprecated
                                        (0266) _wPWMPiano2_ReadPulseWidth:                      ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0A3C: 5D 26    MOV   A,REG[0x26]        (0268)    mov   A, reg[PWMPiano2_COMPARE_MSB_REG]
0A3E: 5C       MOV   X,A                (0269)    mov   X, A
0A3F: 5D 22    MOV   A,REG[0x22]        (0270)    mov   A, reg[PWMPiano2_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0A41: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWMPiano2_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWMPiano2_wReadCounter:
                                        (0299) _PWMPiano2_wReadCounter:
                                        (0300)  wPWMPiano2_ReadCounter:                         ; this name deprecated
                                        (0301) _wPWMPiano2_ReadCounter:                         ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0A42: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
0A43: 5D 26    MOV   A,REG[0x26]        (0310)    mov   A, reg[PWMPiano2_COMPARE_MSB_REG]       ; Save the Compare register on the stack
0A45: 08       PUSH  A                  (0311)    push  A                                          ;
0A46: 5D 22    MOV   A,REG[0x22]        (0312)    mov   A, reg[PWMPiano2_COMPARE_LSB_REG]       ;
0A48: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0A49: 41 23 FE AND   REG[0x23],0xFE     
0A4C: 71 10    OR    F,0x10             
                                        (0314)    PWMPiano2_Stop_M                              ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0A4E: 5D 21    MOV   A,REG[0x21]        (0316)    mov   A, reg[PWMPiano2_INPUT_LSB_REG]         ; save the LSB clock input setting
0A50: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0A51: 62 21 00 MOV   REG[0x21],0x0      (0319)    mov   reg[PWMPiano2_INPUT_LSB_REG], INPUT_REG_NULL
0A54: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0A56: 5D 24    MOV   A,REG[0x24]        (0321)    mov   A, reg[PWMPiano2_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
0A58: 5D 26    MOV   A,REG[0x26]        (0322)    mov   A, reg[PWMPiano2_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
0A5A: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0A5B: 5D 20    MOV   A,REG[0x20]        (0324)    mov   A, reg[PWMPiano2_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
0A5D: 5D 22    MOV   A,REG[0x22]        (0325)    mov   A, reg[PWMPiano2_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
0A5F: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0A60: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0A62: 60 26    MOV   REG[0x26],A        (0328)    mov   reg[PWMPiano2_COMPARE_MSB_REG], A       ;
0A64: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0A66: 60 22    MOV   REG[0x22],A        (0330)    mov   reg[PWMPiano2_COMPARE_LSB_REG], A       ;
0A68: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0A6A: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0A6C: 60 21    MOV   REG[0x21],A        (0333)    mov   reg[PWMPiano2_INPUT_LSB_REG], A         ;    and restore it
0A6E: 70 EF    AND   F,0xEF             
0A70: 43 23 01 OR    REG[0x23],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWMPiano2_Start_M                             ; Now re-enable the PWM function
0A73: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0A74: 20       POP   X                  (0337)    pop   X                                          ;
0A75: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0A77: 70 3F    AND   F,0x3F             
0A79: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0A7B: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWMPiano2.asm
FILE: lib\pwmpiano1int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMPiano1INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWMPiano1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWMPiano1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWMPiano1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWMPiano1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0A7C: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWMPiano1INT.asm
FILE: lib\pwmpiano1.asm                 (0001) ;;*****************************************************************************
0A7D: 43 DF 08 OR    REG[0xDF],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMPiano1.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWMPiano1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWMPiano1_EnableInt
                                        (0030) export _PWMPiano1_EnableInt
                                        (0031) export  PWMPiano1_DisableInt
                                        (0032) export _PWMPiano1_DisableInt
                                        (0033) export  PWMPiano1_Start
                                        (0034) export _PWMPiano1_Start
                                        (0035) export  PWMPiano1_Stop
                                        (0036) export _PWMPiano1_Stop
                                        (0037) export  PWMPiano1_WritePeriod
                                        (0038) export _PWMPiano1_WritePeriod
                                        (0039) export  PWMPiano1_WritePulseWidth
                                        (0040) export _PWMPiano1_WritePulseWidth
                                        (0041) export  PWMPiano1_wReadPulseWidth
                                        (0042) export _PWMPiano1_wReadPulseWidth
                                        (0043) export  PWMPiano1_wReadCounter
                                        (0044) export _PWMPiano1_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWMPiano1_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWMPiano1_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWMPiano1_ReadCounter       ; deprecated
                                        (0051) export _wPWMPiano1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ps2bitbang_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWMPiano1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWMPiano1_EnableInt:
                                        (0091) _PWMPiano1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWMPiano1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0A80: 7F       RET                      (0095)    ret
0A81: 41 DF F7 AND   REG[0xDF],0xF7     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWMPiano1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWMPiano1_DisableInt:
                                        (0119) _PWMPiano1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWMPiano1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0A84: 7F       RET                      (0123)    ret
0A85: 43 4B 01 OR    REG[0x4B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWMPiano1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWMPiano1_Start:
                                        (0148) _PWMPiano1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWMPiano1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0A88: 7F       RET                      (0152)    ret
0A89: 41 4B FE AND   REG[0x4B],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWMPiano1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWMPiano1_Stop:
                                        (0176) _PWMPiano1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWMPiano1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0A8C: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWMPiano1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWMPiano1_WritePeriod:
                                        (0206) _PWMPiano1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0A8D: 60 49    MOV   REG[0x49],A        (0208)    mov   reg[PWMPiano1_PERIOD_LSB_REG], A
0A8F: 5B       MOV   A,X                (0209)    mov   A, X
0A90: 60 4D    MOV   REG[0x4D],A        (0210)    mov   reg[PWMPiano1_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0A92: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWMPiano1_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWMPiano1_WritePulseWidth:
                                        (0235) _PWMPiano1_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0A93: 60 4A    MOV   REG[0x4A],A        (0237)    mov   reg[PWMPiano1_COMPARE_LSB_REG], A
0A95: 5B       MOV   A,X                (0238)    mov   A, X
0A96: 60 4E    MOV   REG[0x4E],A        (0239)    mov   reg[PWMPiano1_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0A98: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWMPiano1_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWMPiano1_wReadPulseWidth:
                                        (0264) _PWMPiano1_wReadPulseWidth:
                                        (0265)  wPWMPiano1_ReadPulseWidth:                      ; this name deprecated
                                        (0266) _wPWMPiano1_ReadPulseWidth:                      ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0A99: 5D 4E    MOV   A,REG[0x4E]        (0268)    mov   A, reg[PWMPiano1_COMPARE_MSB_REG]
0A9B: 5C       MOV   X,A                (0269)    mov   X, A
0A9C: 5D 4A    MOV   A,REG[0x4A]        (0270)    mov   A, reg[PWMPiano1_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0A9E: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWMPiano1_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWMPiano1_wReadCounter:
                                        (0299) _PWMPiano1_wReadCounter:
                                        (0300)  wPWMPiano1_ReadCounter:                         ; this name deprecated
                                        (0301) _wPWMPiano1_ReadCounter:                         ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0A9F: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
0AA0: 5D 4E    MOV   A,REG[0x4E]        (0310)    mov   A, reg[PWMPiano1_COMPARE_MSB_REG]       ; Save the Compare register on the stack
0AA2: 08       PUSH  A                  (0311)    push  A                                          ;
0AA3: 5D 4A    MOV   A,REG[0x4A]        (0312)    mov   A, reg[PWMPiano1_COMPARE_LSB_REG]       ;
0AA5: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0AA6: 41 4B FE AND   REG[0x4B],0xFE     
0AA9: 71 10    OR    F,0x10             
                                        (0314)    PWMPiano1_Stop_M                              ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0AAB: 5D 49    MOV   A,REG[0x49]        (0316)    mov   A, reg[PWMPiano1_INPUT_LSB_REG]         ; save the LSB clock input setting
0AAD: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0AAE: 62 49 00 MOV   REG[0x49],0x0      (0319)    mov   reg[PWMPiano1_INPUT_LSB_REG], INPUT_REG_NULL
0AB1: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0AB3: 5D 4C    MOV   A,REG[0x4C]        (0321)    mov   A, reg[PWMPiano1_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
0AB5: 5D 4E    MOV   A,REG[0x4E]        (0322)    mov   A, reg[PWMPiano1_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
0AB7: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0AB8: 5D 48    MOV   A,REG[0x48]        (0324)    mov   A, reg[PWMPiano1_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
0ABA: 5D 4A    MOV   A,REG[0x4A]        (0325)    mov   A, reg[PWMPiano1_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
0ABC: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0ABD: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0ABF: 60 4E    MOV   REG[0x4E],A        (0328)    mov   reg[PWMPiano1_COMPARE_MSB_REG], A       ;
0AC1: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0AC3: 60 4A    MOV   REG[0x4A],A        (0330)    mov   reg[PWMPiano1_COMPARE_LSB_REG], A       ;
0AC5: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0AC7: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0AC9: 60 49    MOV   REG[0x49],A        (0333)    mov   reg[PWMPiano1_INPUT_LSB_REG], A         ;    and restore it
0ACB: 70 EF    AND   F,0xEF             
0ACD: 43 4B 01 OR    REG[0x4B],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWMPiano1_Start_M                             ; Now re-enable the PWM function
0AD0: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0AD1: 20       POP   X                  (0337)    pop   X                                          ;
0AD2: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0AD4: 70 3F    AND   F,0x3F             
0AD6: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0AD8: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWMPiano1.asm
FILE: lib\pwm8ledint.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8LEDINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8LED.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8LED_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8LED_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8LED_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0AD9: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8LEDINT.asm
FILE: lib\pwm8led.asm                   (0001) ;;*****************************************************************************
0ADA: 43 DF 01 OR    REG[0xDF],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8LED.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8LED.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8LED_EnableInt
                                        (0030) export _PWM8LED_EnableInt
                                        (0031) export  PWM8LED_DisableInt
                                        (0032) export _PWM8LED_DisableInt
                                        (0033) export  PWM8LED_Start
                                        (0034) export _PWM8LED_Start
                                        (0035) export  PWM8LED_Stop
                                        (0036) export _PWM8LED_Stop
                                        (0037) export  PWM8LED_WritePeriod
                                        (0038) export _PWM8LED_WritePeriod
                                        (0039) export  PWM8LED_WritePulseWidth
                                        (0040) export _PWM8LED_WritePulseWidth
                                        (0041) export  PWM8LED_bReadPulseWidth
                                        (0042) export _PWM8LED_bReadPulseWidth
                                        (0043) export  PWM8LED_bReadCounter
                                        (0044) export _PWM8LED_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8LED_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8LED_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8LED_ReadCounter       ; deprecated
                                        (0051) export _bPWM8LED_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ps2bitbang_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8LED_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8LED_EnableInt:
                                        (0091) _PWM8LED_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8LED_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0ADD: 7F       RET                      (0095)    ret
0ADE: 41 DF FE AND   REG[0xDF],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8LED_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8LED_DisableInt:
                                        (0119) _PWM8LED_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8LED_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0AE1: 7F       RET                      (0123)    ret
0AE2: 43 43 01 OR    REG[0x43],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8LED_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8LED_Start:
                                        (0148) _PWM8LED_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8LED_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0AE5: 7F       RET                      (0152)    ret
0AE6: 41 43 FE AND   REG[0x43],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8LED_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8LED_Stop:
                                        (0176) _PWM8LED_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8LED_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0AE9: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8LED_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8LED_WritePeriod:
                                        (0206) _PWM8LED_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0AEA: 60 41    MOV   REG[0x41],A        (0208)    mov   reg[PWM8LED_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0AEC: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8LED_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8LED_WritePulseWidth:
                                        (0233) _PWM8LED_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0AED: 60 42    MOV   REG[0x42],A        (0235)    mov   reg[PWM8LED_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0AEF: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8LED_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8LED_bReadPulseWidth:
                                        (0260) _PWM8LED_bReadPulseWidth:
                                        (0261)  bPWM8LED_ReadPulseWidth:                        ; this name deprecated
                                        (0262) _bPWM8LED_ReadPulseWidth:                        ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0AF0: 5D 42    MOV   A,REG[0x42]        (0264)    mov   A, reg[PWM8LED_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0AF2: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8LED_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8LED_bReadCounter:
                                        (0293) _PWM8LED_bReadCounter:
                                        (0294)  bPWM8LED_ReadCounter:                           ; this name deprecated
                                        (0295) _bPWM8LED_ReadCounter:                           ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0AF3: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0AF4: 5D 42    MOV   A,REG[0x42]        (0304)    mov   A, reg[PWM8LED_COMPARE_REG]             ; Save the Compare register on the stack
0AF6: 08       PUSH  A                  (0305)    push  A                                       ;
0AF7: 41 43 FE AND   REG[0x43],0xFE     
0AFA: 71 10    OR    F,0x10             
                                        (0306)    PWM8LED_Stop_M                                ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0AFC: 5D 41    MOV   A,REG[0x41]        (0308)    mov   A, reg[PWM8LED_INPUT_REG]               ; save the clock input setting
0AFE: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0AFF: 62 41 00 MOV   REG[0x41],0x0      (0311)    mov   reg[PWM8LED_INPUT_REG], INPUT_REG_NULL
0B02: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0B04: 5D 40    MOV   A,REG[0x40]        (0314)    mov   A, reg[PWM8LED_COUNTER_REG]             ; DR2 <- DR0
0B06: 5D 42    MOV   A,REG[0x42]        (0315)    mov   A, reg[PWM8LED_COMPARE_REG]             ; Stash the Count on the stack
0B08: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0B09: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0B0B: 60 42    MOV   REG[0x42],A        (0318)    mov   reg[PWM8LED_COMPARE_REG], A
0B0D: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0B0F: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0B11: 60 41    MOV   REG[0x41],A        (0321)    mov   reg[PWM8LED_INPUT_REG], A               ;
0B13: 70 EF    AND   F,0xEF             
0B15: 43 43 01 OR    REG[0x43],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8LED_Start_M                               ;   then re-enable the PWM.
0B18: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0B19: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0B1B: 70 3F    AND   F,0x3F             
0B1D: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0B1F: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8LED.asm
FILE: lib\ps2oneshot.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PS2OneShot.asm
                                        (0004) ;;  Version: 1.0, Updated on 2015/3/4 at 22:26:45
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: OneShot8 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "PS2OneShot.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   PS2OneShot_Start
                                        (0030) export  _PS2OneShot_Start
                                        (0031) export   PS2OneShot_Stop
                                        (0032) export  _PS2OneShot_Stop
                                        (0033) export   PS2OneShot_EnableInt
                                        (0034) export  _PS2OneShot_EnableInt
                                        (0035) export   PS2OneShot_DisableInt
                                        (0036) export  _PS2OneShot_DisableInt
                                        (0037) export   PS2OneShot_ClearInt
                                        (0038) export  _PS2OneShot_ClearInt
                                        (0039) 
                                        (0040) ;-----------------------------------------------
                                        (0041) ;  Constant Definitions
                                        (0042) ;-----------------------------------------------
                                        (0043) bfCONTROL_REG_START_BIT:   equ   1        ; Control register start bit
                                        (0044) 
                                        (0045) AREA UserModules (ROM, REL)
                                        (0046) 
                                        (0047) .SECTION
                                        (0048) ;-----------------------------------------------------------------------------
                                        (0049) ;  FUNCTION NAME: PS2OneShot_Start
                                        (0050) ;
                                        (0051) ;  DESCRIPTION:
                                        (0052) ;     Starts the OneShot user module.  
                                        (0053) ;
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;
                                        (0056) ;  ARGUMENTS: None
                                        (0057) ;
                                        (0058) ;  RETURNS:   None
                                        (0059) ;
                                        (0060) ;  SIDE EFFECTS:
                                        (0061) ;    The A and X registers may be modified by this or future implementations
                                        (0062) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0063) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0064) ;    responsibility to perserve their values across calls to fastcall16
                                        (0065) ;    functions.
                                        (0066) ;
                                        (0067) ;
                                        (0068)  PS2OneShot_Start:
                                        (0069) _PS2OneShot_Start:
                                        (0070)    RAM_PROLOGUE RAM_USE_CLASS_1
0B20: 43 37 01 OR    REG[0x37],0x1      (0071)    or    REG[PS2OneShot_CONTROL_REG], bfCONTROL_REG_START_BIT
                                        (0072)    RAM_EPILOGUE RAM_USE_CLASS_1
0B23: 7F       RET                      (0073)    ret
                                        (0074) .ENDSECTION
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: PS2OneShot_Stop
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Disables OneShot operation.
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS: None
                                        (0086) ;
                                        (0087) ;  RETURNS:   None
                                        (0088) ;
                                        (0089) ;  SIDE EFFECTS:
                                        (0090) ;    The A and X registers may be modified by this or future implementations
                                        (0091) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0092) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0093) ;    responsibility to perserve their values across calls to fastcall16
                                        (0094) ;    functions.
                                        (0095) ;
                                        (0096) ;
                                        (0097)  PS2OneShot_Stop:
                                        (0098) _PS2OneShot_Stop:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
0B24: 41 37 FE AND   REG[0x37],0xFE     (0100)    and   REG[PS2OneShot_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0B27: 7F       RET                      (0102)    ret
0B28: 43 E1 20 OR    REG[0xE1],0x20     
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105) .SECTION
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;  FUNCTION NAME: PS2OneShot_EnableInt
                                        (0108) ;
                                        (0109) ;  DESCRIPTION:
                                        (0110) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0111) ;     associated with this User Module. This function has no effect until and
                                        (0112) ;     unless the global interrupts are enabled (for example by using the
                                        (0113) ;     macro M8C_EnableGInt).
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None.
                                        (0117) ;
                                        (0118) ;  RETURNS:      Nothing.
                                        (0119) ;
                                        (0120) ;  SIDE EFFECTS: 
                                        (0121) ;    The A and X registers may be modified by this or future implementations
                                        (0122) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0123) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0124) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0125) ;    functions.
                                        (0126) ;
                                        (0127)  PS2OneShot_EnableInt:
                                        (0128) _PS2OneShot_EnableInt:
                                        (0129)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0130)    M8C_EnableIntMask PS2OneShot_INT_REG, PS2OneShot_INT_MASK
                                        (0131)    RAM_EPILOGUE RAM_USE_CLASS_1
0B2B: 7F       RET                      (0132)    ret
0B2C: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0133) .ENDSECTION
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: PS2OneShot_DisableInt
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0141) ;     mask bit associated with this User Module.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;
                                        (0146) ;  RETURNS:      Nothing
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS: 
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155)  PS2OneShot_DisableInt:
                                        (0156) _PS2OneShot_DisableInt:
                                        (0157)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0158)    M8C_DisableIntMask PS2OneShot_INT_REG, PS2OneShot_INT_MASK
                                        (0159)    RAM_EPILOGUE RAM_USE_CLASS_1
0B2F: 7F       RET                      (0160)    ret
0B30: 62 DB DF MOV   REG[0xDB],0xDF     
                                        (0161) .ENDSECTION
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: PS2OneShot_ClearInt
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Clear the pending interrupt from OneShot user module.
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;
                                        (0171) ;  ARGUMENTS:    None
                                        (0172) ;
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;
                                        (0175) ;  SIDE EFFECTS: 
                                        (0176) ;    The A and X registers may be modified by this or future implementations
                                        (0177) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0178) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0179) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0180) ;    functions.
                                        (0181) ;
                                        (0182)  PS2OneShot_ClearInt:
                                        (0183) _PS2OneShot_ClearInt:
                                        (0184)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0185)    M8C_ClearIntFlag PS2OneShot_INT_CLR, PS2OneShot_INT_MASK  ; Clear the interrupt
                                        (0186)    RAM_EPILOGUE RAM_USE_CLASS_1
0B33: 7F       RET                      (0187)    ret
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) ; End of File PS2OneShot.asm
FILE: lib\ps2digbuf.asm                 (0001) ;;*****************************************************************************
0B34: 43 E1 10 OR    REG[0xE1],0x10     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PS2DigBuf.asm
                                        (0004) ;;  Version: 1.3, Updated on 2015/3/4 at 22:26:4
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DigitalBuffers User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "PS2DigBuf.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PS2DigBuf_EnableInt
                                        (0030) export _PS2DigBuf_EnableInt
                                        (0031) export  PS2DigBuf_DisableInt
                                        (0032) export _PS2DigBuf_DisableInt
                                        (0033) export  PS2DigBuf_Start
                                        (0034) export _PS2DigBuf_Start
                                        (0035) export  PS2DigBuf_Stop
                                        (0036) export _PS2DigBuf_Stop
                                        (0037) 
                                        (0038) AREA bss (RAM,REL)
                                        (0039) 
                                        (0040) ;-----------------------------------------------
                                        (0041) ;  Constant Definitions
                                        (0042) ;-----------------------------------------------
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------
                                        (0046) ; Variable Allocation
                                        (0047) ;-----------------------------------------------
                                        (0048) 
                                        (0049) 
                                        (0050) AREA UserModules (ROM, REL)
                                        (0051) 
                                        (0052) .SECTION
                                        (0053) ;-----------------------------------------------------------------------------
                                        (0054) ;  FUNCTION NAME: PS2DigBuf_EnableInt
                                        (0055) ;
                                        (0056) ;  DESCRIPTION:
                                        (0057) ;     Enables the DigBuf's interrupt by setting the interrupt enable mask bit
                                        (0058) ;     associated with this User Module. This function has no effect until and
                                        (0059) ;     unless the global interrupts are enabled (for example by using the
                                        (0060) ;     macro M8C_EnableGInt).
                                        (0061) ;-----------------------------------------------------------------------------
                                        (0062) ;
                                        (0063) ;  ARGUMENTS:    None.
                                        (0064) ;  RETURNS:      Nothing.
                                        (0065) ;  SIDE EFFECTS:
                                        (0066) ;    The A and X registers may be modified by this or future implementations
                                        (0067) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0068) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0069) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0070) ;    functions.
                                        (0071) ;
                                        (0072)  PS2DigBuf_EnableInt:
                                        (0073) _PS2DigBuf_EnableInt:
                                        (0074)    RAM_PROLOGUE RAM_USE_CLASS_1   
                                        (0075)    PS2DigBuf_EnableInt_M
                                        (0076)    RAM_EPILOGUE RAM_USE_CLASS_1
0B37: 7F       RET                      (0077)    ret
0B38: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0078) 
                                        (0079) .ENDSECTION
                                        (0080) 
                                        (0081) .SECTION
                                        (0082) ;-----------------------------------------------------------------------------
                                        (0083) ;  FUNCTION NAME: PS2DigBuf_DisableInt
                                        (0084) ;
                                        (0085) ;  DESCRIPTION:
                                        (0086) ;     Disables the DigBuf's interrupt by clearing the interrupt enable mask bit
                                        (0087) ;     associated with this User Module. 
                                        (0088) ;-----------------------------------------------------------------------------
                                        (0089) ;
                                        (0090) ;  ARGUMENTS:    None.
                                        (0091) ;  RETURNS:      Nothing.
                                        (0092) ;  SIDE EFFECTS:
                                        (0093) ;    The A and X registers may be modified by this or future implementations
                                        (0094) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0095) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0096) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0097) ;    functions.
                                        (0098) ;
                                        (0099)  PS2DigBuf_DisableInt:
                                        (0100) _PS2DigBuf_DisableInt:
                                        (0101)    RAM_PROLOGUE RAM_USE_CLASS_1   
                                        (0102)    PS2DigBuf_DisableInt_M
                                        (0103)    RAM_EPILOGUE RAM_USE_CLASS_1
0B3B: 7F       RET                      (0104)    ret
0B3C: 43 33 01 OR    REG[0x33],0x1      
                                        (0105) 
                                        (0106) .ENDSECTION
                                        (0107) 
                                        (0108) .SECTION
                                        (0109) ;-----------------------------------------------------------------------------
                                        (0110) ;  FUNCTION NAME: PS2DigBuf_Start
                                        (0111) ;
                                        (0112) ;  DESCRIPTION:
                                        (0113) ;     Starts the Digital Buffers within the block.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS:
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  PS2DigBuf_Start:
                                        (0126) _PS2DigBuf_Start:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    PS2DigBuf_Start_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0B3F: 7F       RET                      (0130)    ret
0B40: 41 33 FE AND   REG[0x33],0xFE     
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: PS2DigBuf_Stop
                                        (0137) ;
                                        (0138) ;  DESCRIPTION:
                                        (0139) ;     Stops the Digital Buffers within the block. The outputs are driven low.
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;
                                        (0142) ;  ARGUMENTS:    None
                                        (0143) ;  RETURNS:      Nothing
                                        (0144) ;  SIDE EFFECTS:
                                        (0145) ;    The A and X registers may be modified by this or future implementations
                                        (0146) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0147) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0148) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0149) ;    functions.
                                        (0150) ;
                                        (0151)  PS2DigBuf_Stop:
                                        (0152) _PS2DigBuf_Stop:
                                        (0153)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0154)    PS2DigBuf_Stop_M
                                        (0155)    RAM_EPILOGUE RAM_USE_CLASS_1
0B43: 7F       RET                      (0156)    ret
                                        (0157) 
                                        (0158) .ENDSECTION
                                        (0159) 
                                        (0160) 
                                        (0161) ; End of File PS2DigBuf.asm
                                        (0162) 
                                        (0163) 
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0B44: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0B45: 10       PUSH  X                  (0209)     push  X
0B46: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0B47: B0 04    JNZ   0x0B4C             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0B49: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0B4A: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0B4B: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0B4C: 90 44    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
0B4E: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0B4F: 18       POP   A                  (0220)     pop   A
0B50: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0B51: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0B53: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0B54: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0B66: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0B67: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0B68: 67       ASR   A                  (0262)     asr   A
0B69: 67       ASR   A                  (0263)     asr   A
0B6A: 67       ASR   A                  (0264)     asr   A
0B6B: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0B6D: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0B6F: 90 21    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
0B71: 18       POP   A                  (0268)     pop   A                            ; Restore value
0B72: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0B74: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0B76: 90 1A    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0B78: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0B79: 4B       SWAP  A,X                (0305)     swap  A,X
0B7A: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0B7C: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0B7D: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0B7F: 7F       RET                      (0310)     ret
0B80: 70 BF    AND   F,0xBF             
0B82: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0B84: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0B86: A0 06    JZ    0x0B8D             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0B88: 90 08    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
0B8A: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0B8B: 8F F8    JMP   0x0B84             (0351)     jmp   .Loop_PrString               ; Go get next character
0B8D: 70 3F    AND   F,0x3F             
0B8F: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0B91: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0B92: 90 65    CALL  0x0BF9             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0B94: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0B95: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0B96: 67       ASR   A                  (0390)     asr   A
0B97: 67       ASR   A                  (0391)     asr   A
0B98: 67       ASR   A                  (0392)     asr   A
0B99: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0B9B: 90 3B    CALL  0x0BD8             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0B9D: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0B9E: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0BA0: 40       NOP                      (0397)     nop
0BA1: 40       NOP                      (0398)     nop
0BA2: 40       NOP                      (0399)     nop
0BA3: 90 33    CALL  0x0BD8             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0BA5: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0BA6: 90 51    CALL  0x0BF9             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0BA8: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0BA9: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0BAA: 67       ASR   A                  (0436)     asr   A
0BAB: 67       ASR   A                  (0437)     asr   A
0BAC: 67       ASR   A                  (0438)     asr   A
0BAD: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0BAF: 90 09    CALL  0x0BBA             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0BB1: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0BB2: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0BB4: 40       NOP                      (0443)     nop
0BB5: 40       NOP                      (0444)     nop
0BB6: 40       NOP                      (0445)     nop
0BB7: 90 01    CALL  0x0BBA             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0BB9: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0BBA: 08       PUSH  A                  (0477)     push  A
0BBB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0BBE: 26 01 80 AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x80(0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0BC1: 51 01    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0480)     mov   A,[Port_2_Data_SHADE]
0BC3: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0BC5: 18       POP   A                  (0483)     pop   A
0BC6: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0BC8: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0BCA: 2A 01    OR    A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0BCC: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0BCE: 53 01    MOV   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],A(0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0BD0: 40       NOP                      (0489)     nop
0BD1: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0BD3: 53 01    MOV   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],A(0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0BD5: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0BD7: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0BD8: 08       PUSH  A                  (0523)     push  A
0BD9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0BDC: 26 01 80 AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x80(0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0BDF: 2E 01 20 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x20(0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0BE2: 51 01    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0527)     mov   A,[Port_2_Data_SHADE]
0BE4: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0BE6: 18       POP   A                  (0530)     pop   A
0BE7: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0BE9: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0BEB: 2A 01    OR    A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0BED: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0BEF: 53 01    MOV   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],A(0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0BF1: 40       NOP                      (0536)     NOP
0BF2: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0BF4: 53 01    MOV   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],A(0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0BF6: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0BF8: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0BF9: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0BFA: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0BFD: 26 01 80 AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x80(0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0C00: 51 01    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0574)     mov   A,[Port_2_Data_SHADE]
0C02: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0C04: 26 02 F0 AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2],0xF0(0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0C07: 51 02    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2](0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0C09: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0C0B: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0C0D: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0C0F: 2E 01 40 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x40(0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0C12: 51 01    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0584)     mov   A,[Port_2_Data_SHADE]
0C14: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0C16: 40       NOP                      (0586)     NOP
                                        (0587) 
0C17: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0C18: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0C1A: 2E 01 50 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x50(0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0C1D: 51 01    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0593)     mov   A,[Port_2_Data_SHADE]
0C1F: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0C21: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0C22: 40       NOP                      (0597)     nop
0C23: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0C25: 08       PUSH  A                  (0610)     push  A
0C26: 26 01 C0 AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0xC0(0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0C29: 51 01    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0612)     mov   A,[Port_2_Data_SHADE]
0C2B: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0C2D: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0C2E: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0C2F: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0C30: 2E 01 50 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x50(0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0C33: 51 01    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0620)     mov   A,[Port_2_Data_SHADE]
0C35: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0C37: 40       NOP                      (0623)     nop
0C38: 40       NOP                      (0624)     nop
                                        (0625) 
0C39: 26 01 C0 AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0xC0(0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0C3C: 51 01    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0627)     mov   A,[Port_2_Data_SHADE]
0C3E: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0C40: 18       POP   A                  (0630)     pop   A
0C41: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0C43: A0 04    JZ    0x0C48             (0633)     jz    .UNLOCK
0C45: 79       DEC   X                  (0634)     dec   X
0C46: BF D3    JNZ   0x0C1A             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0C48: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0C49: 2E 02 7F OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2],0x7F(0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0C4C: 51 02    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2](0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0C4E: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0C50: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0C52: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0C54: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0C55: 7F       RET                      (0646)     ret
0C56: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0C59: 26 02 80 AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2],0x80(0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0C5C: 2E 02 7F OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2],0x7F(0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0C5F: 26 03 80 AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+3],0x80(0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
0C62: 51 02    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2](0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0C64: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0C66: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0C68: 51 03    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+3](0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0C6A: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0C6C: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0C6E: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0C70: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
0C72: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0C74: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0C76: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0C78: 9F 40    CALL  0x0BBA             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0C7A: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0C7C: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0C7E: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0C80: 9F 38    CALL  0x0BBA             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0C82: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0C84: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0C86: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0C88: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0C8A: 9F 2E    CALL  0x0BBA             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0C8C: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0C8E: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0C90: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0C92: 9F 26    CALL  0x0BBA             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0C94: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0C96: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0C98: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0C9A: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0C9C: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0C9E: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0CA0: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0CA2: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
0CA4: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0CA6: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0CA8: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0CAA: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0CAC: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0CAE: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0CB0: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0CB2: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0CB4: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0CB6: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0CB8: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0CBA: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0CBC: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0CBE: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0CC0: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0CC2: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0CC4: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0CC9: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0CCB: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0CCC: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0CCE: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0CCF: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0CD1: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0CD2: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0CD4: 70 3F    AND   F,0x3F             
0CD6: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0CD8: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0CD9: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0CDB: 78       DEC   A                  (0828)     dec   A
0CDC: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0CDE: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0CE7: 08       PUSH  A                  (0871)     push  A
0CE8: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0CEA: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0CEC: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0CEE: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0CF0: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0CF2: D0 06    JNC   0x0CF9             (0877)     jnc   .Delay50u_End
0CF4: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0CF6: 78       DEC   A                  (0880)     dec   A                              ; [4]
0CF7: BF FE    JNZ   0x0CF6             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0CF9: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0CFA: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: C:\Users\Jacob\Desktop\ECE381\PS2BIT~1\PS2BIT~1\keyboard.c
(0001) //----------------------------------------------------------------------------
(0002) // XXX - Create the comments for this.
(0003) //
(0004) // B. Noble - 18 October 2010
(0005) //----------------------------------------------------------------------------
(0006) 
(0007) #include <m8c.h>        // part specific constants and macros
(0008) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0009) #include "PSoCGPIOINT.h"
(0010) #include "ps2.h"
(0011) #include "keyboard.h"
(0012) #include "math.h"
(0013) 
(0014) //// State names used in the KeyboardDecodeData() function
(0015) #define KBD_START_SEQ	0
(0016) #define KBD_BREAK_SEQ	1
(0017) #define KBD_E0_SEQ		2
(0018) #define	KBD_E0_F0_SEQ	3
(0019) #define KBD_PAUSE_A		4
(0020) #define KBD_PAUSE_B		5
(0021) #define	KBD_PAUSE_C		6
(0022) #define KBD_PAUSE_D		7
(0023) 
(0024) //// All external global variables (identified by names in LeadingCaps)
(0025) extern BYTE NumLock;
(0026) extern BYTE CapsLock;
(0027) extern BYTE ScrollLock;
(0028) extern BYTE ShiftDown;
(0029) extern BYTE CtrlDown;
(0030) extern BYTE AltDown;
(0031) extern BYTE PianoMode;
(0032) extern const unsigned char LEDBrightness[];
(0033) 
(0034) //----------------------------------------------------------------------------
(0035) // PS/2 Keyboard Scan Code Mapping Arrays
(0036) //
(0037) // NOTE: by making theses arrays constant (const) the compiler will place
(0038) // them in the PSoC's EEPROM so we don't waste RAM space on things that
(0039) // won't be changing.
(0040) //
(0041) // B. Noble - 18 October 2010
(0042) //----------------------------------------------------------------------------
(0043) 
(0044) //----------------------------------------------------------------------------
(0045) // Scan Code to printable ASCII mapping
(0046) //
(0047) // Defines an array variable that maps all single-byte scan codes to their
(0048) // respective ASCII values.
(0049) //
(0050) // The 1st column is the the scan code value.
(0051) // The 2nd column gives the ASCII scan code value with Shift pressed.
(0052) // The 3rd column gives the ASCII scan code value without Shift pressed.
(0053) //----------------------------------------------------------------------------
(0054) unsigned char const ShiftableScancode[ ][3] = {
(0055) 	'`',	'~',	0x0E,
(0056) 	'1',	'!',	0x16,
(0057) 	'2',	'@',	0x1E,
(0058) 	'3',	'#',	0x26,
(0059) 	'4',	'$',	0x25,
(0060) 	'5',	'%',	0x2E,
(0061) 	'6',	'^',	0x36,
(0062) 	'7',	'&',	0x3D,
(0063) 	'8',	'*',	0x3E,
(0064) 	'9',	'(',	0x46,
(0065) 	'0',	')',	0x45,
(0066) 	'-',	'_',	0x4E,
(0067) 	'=',	'+',	0X55,
(0068) 	'[',	'{',	0x54,
(0069) 	']',	'}',	0x5B,
(0070) 	'\\',	'|',	0x5D,
(0071) 	';',	':',	0x4C,
(0072) 	'\'',	'\"',	0x52,
(0073) 	',',	'<',	0x41,
(0074) 	'.',	'>',	0x49,
(0075) 	'/',	'?',	0x4A,
(0076) 	' ',	' ',	0x29, // Space
(0077) 	0x09,	0x09,	0x0D, // Tab
(0078) 	0x00,	0x00,	0x00  // Indicates end of this array while searching
(0079) };
(0080) 
(0081) //----------------------------------------------------------------------------
(0082) // Scan Code to printable alphabet ASCII mapping
(0083) //
(0084) // Defines an array variable that maps all single-byte scan codes to their
(0085) // respective ASCII values.
(0086) //
(0087) // The 1st column is the the scan code value.
(0088) // The 2nd column gives the ASCII scan code value with Shift pressed.
(0089) // The 3rd column gives the ASCII scan code value without Shift pressed.
(0090) //----------------------------------------------------------------------------
(0091) unsigned char const AlphabetScancode[ ][3] = {
(0092) 	'a',	'A',	0x1C,
(0093) 	'b',	'B',	0x32,
(0094) 	'c',	'C',	0x21,
(0095) 	'd',	'D',	0x23,
(0096) 	'e',	'E',	0x24,
(0097) 	'f',	'F',	0x2B,
(0098) 	'g',	'G',	0x34,
(0099) 	'h',	'H',	0x33,
(0100) 	'i',	'I',	0x43,
(0101) 	'j',	'J',	0x3B,
(0102) 	'k',	'K',	0x42,
(0103) 	'l',	'L',	0x4B,
(0104) 	'm',	'M',	0x3A,
(0105) 	'n',	'N',	0x31,
(0106) 	'o',	'O',	0x44,
(0107) 	'p',	'P',	0x4D,
(0108) 	'q',	'Q',	0x15,
(0109) 	'r',	'R',	0x2D,
(0110) 	's',	'S',	0x1B,
(0111) 	't',	'T',	0x2C,
(0112) 	'u',	'U',	0x3C,
(0113) 	'v',	'V',	0x2A,
(0114) 	'w',	'W',	0x1D,
(0115) 	'x',	'X',	0x22,
(0116) 	'y',	'Y',	0x35,
(0117) 	'z',	'Z',	0x1A,
(0118) 	0x00,	0x00,	0x00  // Indicates end of this array while searching
(0119) };
(0120) 
(0121) //----------------------------------------------------------------------------
(0122) // Scan Code to control character ASCII mapping
(0123) //
(0124) // Defines an array variable that maps all single-byte scan codes to their
(0125) // respective ASCII values.
(0126) //
(0127) // The 1st column is the the scan code value.
(0128) // The 2nd column gives the ASCII scan code value with Shift pressed.
(0129) // The 3rd column gives the ASCII scan code value without Shift pressed.
(0130) //----------------------------------------------------------------------------
(0131) unsigned char const ControlScancode[ ][2] = {
(0132) 	0x01,	0x1C, // ^A, SOH
(0133) 	0x02,	0x32, // ^B, STX
(0134) 	0x03,	0x21, // ^C, ETX
(0135) 	0x04,	0x23, // ^D, EOT
(0136) 	0x05,	0x24, // ^E, ENQ
(0137) 	0x06,	0x2B, // ^F, ACK
(0138) 	0x07,	0x34, // ^G, BEL
(0139) 	0x08,	0x33, // ^H, BS
(0140) 	0x09,	0x43, // ^I, HT
(0141) 	0x0A,	0x3B, // ^J, NL
(0142) 	0x0B,	0x42, // ^K, VT
(0143) 	0x0C,	0x4B, // ^L, NP
(0144) 	0x0D,	0x3A, // ^M, CR
(0145) 	0x0E,	0x31, // ^N, SO
(0146) 	0x0F,	0x44, // ^O, SI
(0147) 	0x10,	0x4D, // ^P, DLE
(0148) 	0x11,	0x15, // ^Q, DC1
(0149) 	0x12,	0x2D, // ^R, DC2
(0150) 	0x13,	0x1B, // ^S, DC3
(0151) 	0x14,	0x2C, // ^T, DC4
(0152) 	0x15,	0x3C, // ^U, NAK
(0153) 	0x16,	0x2A, // ^V, SYN
(0154) 	0x17,	0x1D, // ^W, ETB
(0155) 	0x18,	0x22, // ^X, CAN
(0156) 	0x19,	0x35, // ^Y, EM
(0157) 	0x1A,	0x1A, // ^Z, SUB
(0158) 	0x1B,	0x54, // ^[, ESC
(0159) 	0x1C,	0x5D, // ^\, FS
(0160) 	0x1D,	0x5B, // ^], GS
(0161) 	0x1E,	0x36, // ^^, RS
(0162) 	0x1F,	0x4E, // ^_, US
(0163) 	0x00,	0x00  // Indicates end of this array while searching
(0164) };
(0165) 
(0166) //----------------------------------------------------------------------------
(0167) // Scan Code to control character ASCII mapping
(0168) //
(0169) // Defines an array variable that maps all single-byte scan codes to their
(0170) // respective ASCII values.
(0171) //
(0172) // The 1st column is the the scan code value.
(0173) // The 2nd column gives the ASCII scan code value with Shift pressed.
(0174) //----------------------------------------------------------------------------
(0175) unsigned char const KeypadScancode[ ][2] = {
(0176) 	'0',	0x70,
(0177) 	'1',	0x69,
(0178) 	'2',	0x72,
(0179) 	'3',	0x7A,
(0180) 	'4',	0x6B,
(0181) 	'5',	0x73,
(0182) 	'6',	0x74,
(0183) 	'7',	0x6C,
(0184) 	'8',	0x75,
(0185) 	'9',	0x7D,
(0186) 	'.',	0x71,
(0187) 	0x00,	0x00  // Indicates end of this array while searching
(0188) };
(0189) 
(0190) //----------------------------------------------------------------------------
(0191) // Scan Code to 3-octave diatonic musical scale.
(0192) //
(0193) // Defines an array variable that maps all single-byte scan codes to their
(0194) // respective period and pulse widths for a 16-bit PWM User Module utilizing
(0195) // an 8MHz clock .
(0196) //
(0197) // The 1st column is the the scan code value.
(0198) // The 2nd column gives the 16-bit PWM Period.
(0199) // The 3rd column gives the 16-bit PWM Pulse Width.
(0200) //----------------------------------------------------------------------------
(0201) unsigned int const PianoScancode[ ][3] = {
(0202) 	//// Lower Octave
(0203) 	0x1A,	61155,	30577,	// 'z' C3 Low C
(0204) 	0x22,	54483,	27241,	// 'x' D3
(0205) 	0x21,	48539,	24269,	// 'c' E3
(0206) 	0x2A,	45814,	22907,	// 'v' F3
(0207) 	0x32,	40816,	20407,	// 'b' G3
(0208) 	0x31,	36363,	18181,	// 'n' A3
(0209) 	0x3A,	32395,	16197,	// 'm' B3
(0210) 	0x41,	30577,	15288,	// ',' C4 Middle C
(0211) 	//// Middle Octave
(0212) 	0x1C,	30577,	15288,	// 'a' C4 Middle C
(0213) 	0x1B,	27241,	13620,	// 's' D4
(0214) 	0x23,	24269,	12134,	// 'd' E4
(0215) 	0x2B,	22907,	11453,	// 'f' F4
(0216) 	0x34,	20407,	10203,	// 'g' G4
(0217) 	0x33,	18181,	9090,	// 'h' A4
(0218) 	0x3B,	16197,	8098,	// 'j' B4
(0219) 	0x42,	15288,	7644,	// 'k' C5 Tenor C
(0220) 	//// Tenor Octave
(0221) 	0x15,	15288,	7644,	// 'q' C5 Tenor C
(0222) 	0x1D,	13620,	6809,	// 'w' D5
(0223) 	0x24,	12134,	6066,	// 'e' E5
(0224) 	0x2D,	11453,	5726,	// 'r' F5
(0225) 	0x2C,	10203,	5101,	// 't' G5
(0226) 	0x35,	9090,	4544,	// 'y' A5
(0227) 	0x3C,	8098,	4049,	// 'u' B5
(0228) 	0x43,	7644,	3821,	// 'i' C6 Soprano C
(0229) 	//// End of array
(0230) 	0x00,	0x00,	0x00	// Indicates end of this array while searching
(0231) };
(0232) 
(0233) //-----------------------------------------------------------------------------
(0234) // Software state machine to decode the PS/2 keyboard scan codes into
(0235) // meaningful actions. See the state diagram in the lab description.
(0236) //
(0237) // XXX - The shift keys have a special response when they are held down
(0238) //       and one of the "gray" (Insert, Delete, Pg Up, Pg Dn, Home, End, etc.)
(0239) //       keys are pressed.
(0240) //       As soon as a gray key is pressed, the shift key pressed gets an E0F0 break
(0241) //       sequence, followed by the gray key (autorepeated if necessary).
(0242) //       When the gray key is released, the keyboard generates an E0 followed
(0243) //       by the scancode for the shift key still down.
(0244) //       Example: This is what happens when Left Shift then Page Down
(0245) //       are pressed, followed by Page Down and then Left Shift being released
(0246) //       12 E0 F0 12 E0 7A E0 F0 7A E0 12 F0 12
(0247) //       Note: This behavior is only true when Num Lock LED is off.
(0248) //       When Num Lock LED is on, they Shift Key behaves normally.
(0249) //
(0250) // XXX - Document PRNT_SCRN's weirdness: PRNT_SCRN's sequence "E0 12" only occurs if no other key is pressed
(0251) // PRNT_SCRN's sequence "E0 F0 12" occurs either at the end of the
(0252) // PRNT_SCRN sequence if there were no other keys pressed -OR- if
(0253) // another key was pressed while PRNT_SCRN was held down.
(0254) // PRNT_SCRN's "E0 12" is basically a fake-shift
(0255) //
(0256) // Note: This function assumes all keyboard-to-host commands have been handled!
(0257) //-----------------------------------------------------------------------------
(0258) BYTE KeyboardDecodeData(BYTE scancode)
(0259) {
__UserModules_end|__text_start|_KeyboardDecodeData|_KeyboardDecodeData:
  codetype             --> X+0
  scancode             --> X-4
    0CFB: 10       PUSH  X
    0CFC: 4F       MOV   X,SP
    0CFD: 38 03    ADD   SP,0x3
(0260) 	static BYTE state = 0;
(0261) 	BYTE codetype = 0;
    0CFF: 56 00 00 MOV   [X+0],0x0
(0262) 	
(0263) 	switch(state) {
    0D02: 62 D0 00 MOV   REG[0xD0],0x0
    0D05: 51 62    MOV   A,[IsMouse+2]
    0D07: 54 02    MOV   [X+2],A
    0D09: 56 01 00 MOV   [X+1],0x0
    0D0C: 3D 01 00 CMP   [X+1],0x0
    0D0F: B0 06    JNZ   0x0D16
    0D11: 3D 02 00 CMP   [X+2],0x0
    0D14: A0 49    JZ    0x0D5E
    0D16: 3D 01 00 CMP   [X+1],0x0
    0D19: B0 06    JNZ   0x0D20
    0D1B: 3D 02 01 CMP   [X+2],0x1
    0D1E: A0 6B    JZ    0x0D8A
    0D20: 3D 01 00 CMP   [X+1],0x0
    0D23: B0 06    JNZ   0x0D2A
    0D25: 3D 02 02 CMP   [X+2],0x2
    0D28: A0 6C    JZ    0x0D95
    0D2A: 3D 01 00 CMP   [X+1],0x0
    0D2D: B0 06    JNZ   0x0D34
    0D2F: 3D 02 03 CMP   [X+2],0x3
    0D32: A0 89    JZ    0x0DBC
    0D34: 3D 01 00 CMP   [X+1],0x0
    0D37: B0 06    JNZ   0x0D3E
    0D39: 3D 02 04 CMP   [X+2],0x4
    0D3C: A0 99    JZ    0x0DD6
    0D3E: 3D 01 00 CMP   [X+1],0x0
    0D41: B0 06    JNZ   0x0D48
    0D43: 3D 02 05 CMP   [X+2],0x5
    0D46: A0 B1    JZ    0x0DF8
    0D48: 3D 01 00 CMP   [X+1],0x0
    0D4B: B0 06    JNZ   0x0D52
    0D4D: 3D 02 06 CMP   [X+2],0x6
    0D50: A0 C9    JZ    0x0E1A
    0D52: 3D 01 00 CMP   [X+1],0x0
    0D55: B0 06    JNZ   0x0D5C
    0D57: 3D 02 07 CMP   [X+2],0x7
    0D5A: A0 D4    JZ    0x0E2F
    0D5C: 80 ED    JMP   0x0E4A
(0264) 	case KBD_START_SEQ:
(0265) 		if (scancode == 0xF0) {
    0D5E: 3D FC F0 CMP   [X-4],0xF0
    0D61: B0 09    JNZ   0x0D6B
(0266) 			state = KBD_BREAK_SEQ;
    0D63: 62 D0 00 MOV   REG[0xD0],0x0
    0D66: 55 62 01 MOV   [IsMouse+2],0x1
(0267) 			break;
    0D69: 80 E0    JMP   0x0E4A
(0268) 		}
(0269) 		if (scancode == 0xE0) {
    0D6B: 3D FC E0 CMP   [X-4],0xE0
    0D6E: B0 09    JNZ   0x0D78
(0270) 			state = KBD_E0_SEQ;
    0D70: 62 D0 00 MOV   REG[0xD0],0x0
    0D73: 55 62 02 MOV   [IsMouse+2],0x2
(0271) 			break;
    0D76: 80 D3    JMP   0x0E4A
(0272) 		}
(0273) 		if (scancode == 0xE1) {
    0D78: 3D FC E1 CMP   [X-4],0xE1
    0D7B: B0 09    JNZ   0x0D85
(0274) 			state = KBD_PAUSE_A;
    0D7D: 62 D0 00 MOV   REG[0xD0],0x0
    0D80: 55 62 04 MOV   [IsMouse+2],0x4
(0275) 			break;
    0D83: 80 C6    JMP   0x0E4A
(0276) 		}
(0277) 		codetype = KEY_MAKE;
    0D85: 56 00 01 MOV   [X+0],0x1
(0278) 		break;
    0D88: 80 C1    JMP   0x0E4A
(0279) 	case KBD_BREAK_SEQ:
(0280) 		state = KBD_START_SEQ;
    0D8A: 62 D0 00 MOV   REG[0xD0],0x0
    0D8D: 55 62 00 MOV   [IsMouse+2],0x0
(0281) 		codetype = KEY_BREAK;
    0D90: 56 00 02 MOV   [X+0],0x2
(0282) 		break;
    0D93: 80 B6    JMP   0x0E4A
(0283) 	case KBD_E0_SEQ:
(0284) 		if (scancode == 0xF0) {
    0D95: 3D FC F0 CMP   [X-4],0xF0
    0D98: B0 09    JNZ   0x0DA2
(0285) 			state = KBD_E0_F0_SEQ;
    0D9A: 62 D0 00 MOV   REG[0xD0],0x0
    0D9D: 55 62 03 MOV   [IsMouse+2],0x3
(0286) 			break;
    0DA0: 80 A9    JMP   0x0E4A
(0287) 		}
(0288) 		state = KBD_START_SEQ;
    0DA2: 62 D0 00 MOV   REG[0xD0],0x0
    0DA5: 55 62 00 MOV   [IsMouse+2],0x0
(0289) 		// See if this is a fake-shift MAKE.
(0290) 		if ((scancode == 0x12)||(scancode == 0x59)) {
    0DA8: 3D FC 12 CMP   [X-4],0x12
    0DAB: A0 06    JZ    0x0DB2
    0DAD: 3D FC 59 CMP   [X-4],0x59
    0DB0: B0 06    JNZ   0x0DB7
(0291) 				codetype = KEY_FAKE_SHIFT|KEY_MAKE;
    0DB2: 56 00 11 MOV   [X+0],0x11
(0292) 				break;
    0DB5: 80 94    JMP   0x0E4A
(0293) 		}
(0294) 		codetype = KEY_E0|KEY_MAKE;
    0DB7: 56 00 05 MOV   [X+0],0x5
(0295) 		break;
    0DBA: 80 8F    JMP   0x0E4A
(0296) 	case KBD_E0_F0_SEQ:
(0297) 		state = KBD_START_SEQ;
    0DBC: 62 D0 00 MOV   REG[0xD0],0x0
    0DBF: 55 62 00 MOV   [IsMouse+2],0x0
(0298) 		// See if this is a fake-shift BREAK.
(0299) 		if ((scancode == 0x12)||(scancode == 0x59)) {
    0DC2: 3D FC 12 CMP   [X-4],0x12
    0DC5: A0 06    JZ    0x0DCC
    0DC7: 3D FC 59 CMP   [X-4],0x59
    0DCA: B0 06    JNZ   0x0DD1
(0300) 			codetype = KEY_FAKE_SHIFT|KEY_BREAK;
    0DCC: 56 00 12 MOV   [X+0],0x12
(0301) 			break;
    0DCF: 80 7A    JMP   0x0E4A
(0302) 		}
(0303) 		codetype = KEY_E0|KEY_BREAK;
    0DD1: 56 00 06 MOV   [X+0],0x6
(0304) 		break;
    0DD4: 80 75    JMP   0x0E4A
(0305) 	case KBD_PAUSE_A:
(0306) 		if (scancode == 0x14) {
    0DD6: 3D FC 14 CMP   [X-4],0x14
    0DD9: B0 09    JNZ   0x0DE3
(0307) 			state = KBD_PAUSE_B;
    0DDB: 62 D0 00 MOV   REG[0xD0],0x0
    0DDE: 55 62 05 MOV   [IsMouse+2],0x5
(0308) 			break;
    0DE1: 80 68    JMP   0x0E4A
(0309) 		}
(0310) 		if (scancode == 0xF0) {
    0DE3: 3D FC F0 CMP   [X-4],0xF0
    0DE6: B0 09    JNZ   0x0DF0
(0311) 			state = KBD_PAUSE_D;
    0DE8: 62 D0 00 MOV   REG[0xD0],0x0
    0DEB: 55 62 07 MOV   [IsMouse+2],0x7
(0312) 			break;
    0DEE: 80 5B    JMP   0x0E4A
(0313) 		}
(0314) 		state = KBD_START_SEQ;
    0DF0: 62 D0 00 MOV   REG[0xD0],0x0
    0DF3: 55 62 00 MOV   [IsMouse+2],0x0
(0315) 		break;
    0DF6: 80 53    JMP   0x0E4A
(0316) 	case KBD_PAUSE_B:
(0317) 		if (scancode == 0x77) {
    0DF8: 3D FC 77 CMP   [X-4],0x77
    0DFB: B0 09    JNZ   0x0E05
(0318) 			state = KBD_PAUSE_C;
    0DFD: 62 D0 00 MOV   REG[0xD0],0x0
    0E00: 55 62 06 MOV   [IsMouse+2],0x6
(0319) 			break;
    0E03: 80 46    JMP   0x0E4A
(0320) 		}
(0321) 		if (scancode == 0xF0) {
    0E05: 3D FC F0 CMP   [X-4],0xF0
    0E08: B0 09    JNZ   0x0E12
(0322) 			state = KBD_PAUSE_D;
    0E0A: 62 D0 00 MOV   REG[0xD0],0x0
    0E0D: 55 62 07 MOV   [IsMouse+2],0x7
(0323) 			break;
    0E10: 80 39    JMP   0x0E4A
(0324) 		}
(0325) 		state = KBD_START_SEQ;
    0E12: 62 D0 00 MOV   REG[0xD0],0x0
    0E15: 55 62 00 MOV   [IsMouse+2],0x0
(0326) 		break;
    0E18: 80 31    JMP   0x0E4A
(0327) 	case KBD_PAUSE_C:
(0328) 		if (scancode == 0xE1) {
    0E1A: 3D FC E1 CMP   [X-4],0xE1
    0E1D: B0 09    JNZ   0x0E27
(0329) 			state = KBD_PAUSE_A;
    0E1F: 62 D0 00 MOV   REG[0xD0],0x0
    0E22: 55 62 04 MOV   [IsMouse+2],0x4
(0330) 			break;
    0E25: 80 24    JMP   0x0E4A
(0331) 		}
(0332) 		state = KBD_START_SEQ;
    0E27: 62 D0 00 MOV   REG[0xD0],0x0
    0E2A: 55 62 00 MOV   [IsMouse+2],0x0
(0333) 		break;
    0E2D: 80 1C    JMP   0x0E4A
(0334) 	case KBD_PAUSE_D:
(0335) 		if (scancode == 0x14) {
    0E2F: 3D FC 14 CMP   [X-4],0x14
    0E32: B0 09    JNZ   0x0E3C
(0336) 			state = KBD_PAUSE_B;
    0E34: 62 D0 00 MOV   REG[0xD0],0x0
    0E37: 55 62 05 MOV   [IsMouse+2],0x5
(0337) 			break;
    0E3A: 80 0F    JMP   0x0E4A
(0338) 		}
(0339) 		if (scancode == 0x77) {
    0E3C: 3D FC 77 CMP   [X-4],0x77
    0E3F: B0 04    JNZ   0x0E44
(0340) 			codetype = KEY_PAUSE;
    0E41: 56 00 08 MOV   [X+0],0x8
(0341) 		}
(0342) 		state = KBD_START_SEQ;
    0E44: 62 D0 00 MOV   REG[0xD0],0x0
    0E47: 55 62 00 MOV   [IsMouse+2],0x0
(0343) 		break;
(0344) 	}
(0345) 	return(codetype);
    0E4A: 52 00    MOV   A,[X+0]
    0E4C: 62 D0 00 MOV   REG[0xD0],0x0
    0E4F: 38 FD    ADD   SP,0xFD
    0E51: 20       POP   X
    0E52: 7F       RET   
(0346) }
(0347) 
(0348) BYTE KeyboardTotalPressed(BYTE scancode, BYTE codetype)
(0349) {
_KeyboardTotalPressed:
  found                --> X+2
  j                    --> X+1
  i                    --> X+0
  codetype             --> X-5
  scancode             --> X-4
    0E53: 10       PUSH  X
    0E54: 4F       MOV   X,SP
    0E55: 38 03    ADD   SP,0x3
(0350) 	static BYTE keys[12];
(0351) 	static BYTE types[12];
(0352) 	static BYTE pressed = 0;
(0353) 	BYTE i,j;
(0354) 	BYTE found=0;
    0E57: 56 02 00 MOV   [X+2],0x0
(0355) 
(0356) 	//// If this is a fake-shift it is not an actual key change.
(0357) 	if (codetype & KEY_FAKE_SHIFT) {
    0E5A: 48 FB 10 TST   [X-5],0x10
    0E5D: A0 0B    JZ    0x0E69
(0358) 		return(pressed);
    0E5F: 62 D0 00 MOV   REG[0xD0],0x0
    0E62: 51 61    MOV   A,[IsMouse+1]
    0E64: 62 D0 00 MOV   REG[0xD0],0x0
    0E67: 81 B9    JMP   0x1021
(0359) 	}
(0360) 	//// If this is the Pause key, it won't change the number of keys held down.
(0361) 	if (codetype & KEY_PAUSE) {
    0E69: 48 FB 08 TST   [X-5],0x8
    0E6C: A0 0B    JZ    0x0E78
(0362) 		return(pressed);
    0E6E: 62 D0 00 MOV   REG[0xD0],0x0
    0E71: 51 61    MOV   A,[IsMouse+1]
    0E73: 62 D0 00 MOV   REG[0xD0],0x0
    0E76: 81 AA    JMP   0x1021
(0363) 	}
(0364) 	//// If this is a key-make, check if it is on the list and add it if not.
(0365) 	if (codetype & KEY_MAKE) {
    0E78: 48 FB 01 TST   [X-5],0x1
    0E7B: A0 DD    JZ    0x0F59
(0366) 		if (pressed == 0) {
    0E7D: 62 D0 00 MOV   REG[0xD0],0x0
    0E80: 3C 61 00 CMP   [IsMouse+1],0x0
    0E83: B0 42    JNZ   0x0EC6
(0367) 			keys[pressed] = scancode;
    0E85: 51 61    MOV   A,[IsMouse+1]
    0E87: 62 D0 00 MOV   REG[0xD0],0x0
    0E8A: 53 21    MOV   [__r1],A
    0E8C: 55 22 00 MOV   [__r0],0x0
    0E8F: 06 21 23 ADD   [__r1],0x23
    0E92: 0E 22 00 ADC   [__r0],0x0
    0E95: 51 22    MOV   A,[__r0]
    0E97: 60 D5    MOV   REG[0xD5],A
    0E99: 52 FC    MOV   A,[X-4]
    0E9B: 3F 21    MVI   [__r1],A
(0368) 			types[pressed] = codetype & KEY_E0;
    0E9D: 52 FB    MOV   A,[X-5]
    0E9F: 21 04    AND   A,0x4
    0EA1: 53 22    MOV   [__r0],A
    0EA3: 62 D0 00 MOV   REG[0xD0],0x0
    0EA6: 51 61    MOV   A,[IsMouse+1]
    0EA8: 62 D0 00 MOV   REG[0xD0],0x0
    0EAB: 53 1F    MOV   [__r3],A
    0EAD: 55 20 00 MOV   [__r2],0x0
    0EB0: 06 1F 2F ADD   [__r3],0x2F
    0EB3: 0E 20 00 ADC   [__r2],0x0
    0EB6: 51 20    MOV   A,[__r2]
    0EB8: 60 D5    MOV   REG[0xD5],A
    0EBA: 51 22    MOV   A,[__r0]
    0EBC: 3F 1F    MVI   [__r3],A
(0369) 			pressed = 1;
    0EBE: 62 D0 00 MOV   REG[0xD0],0x0
    0EC1: 55 61 01 MOV   [IsMouse+1],0x1
(0370) 		}
    0EC4: 80 94    JMP   0x0F59
(0371) 		else {
(0372) 			found = 0;
    0EC6: 56 02 00 MOV   [X+2],0x0
(0373) 			for (i=0 ; i<pressed ; i++) { 
    0EC9: 56 00 00 MOV   [X+0],0x0
    0ECC: 80 3D    JMP   0x0F0A
(0374) 				if (keys[i] == scancode) {
    0ECE: 62 D0 00 MOV   REG[0xD0],0x0
    0ED1: 52 00    MOV   A,[X+0]
    0ED3: 53 21    MOV   [__r1],A
    0ED5: 55 22 00 MOV   [__r0],0x0
    0ED8: 06 21 23 ADD   [__r1],0x23
    0EDB: 0E 22 00 ADC   [__r0],0x0
    0EDE: 51 22    MOV   A,[__r0]
    0EE0: 60 D4    MOV   REG[0xD4],A
    0EE2: 3E 21    MVI   A,[__r1]
    0EE4: 3B FC    CMP   A,[X-4]
    0EE6: B0 21    JNZ   0x0F08
(0375) 					if (types[i] == (codetype & KEY_E0)) {
    0EE8: 52 FB    MOV   A,[X-5]
    0EEA: 21 04    AND   A,0x4
    0EEC: 53 22    MOV   [__r0],A
    0EEE: 52 00    MOV   A,[X+0]
    0EF0: 53 1F    MOV   [__r3],A
    0EF2: 55 20 00 MOV   [__r2],0x0
    0EF5: 06 1F 2F ADD   [__r3],0x2F
    0EF8: 0E 20 00 ADC   [__r2],0x0
    0EFB: 51 20    MOV   A,[__r2]
    0EFD: 60 D4    MOV   REG[0xD4],A
    0EFF: 3E 1F    MVI   A,[__r3]
    0F01: 3A 22    CMP   A,[__r0]
    0F03: B0 04    JNZ   0x0F08
(0376) 						found=1;
    0F05: 56 02 01 MOV   [X+2],0x1
(0377) 					}
(0378) 				}
(0379) 			}
    0F08: 77 00    INC   [X+0]
    0F0A: 62 D0 00 MOV   REG[0xD0],0x0
    0F0D: 52 00    MOV   A,[X+0]
    0F0F: 3A 61    CMP   A,[IsMouse+1]
    0F11: CF BC    JC    0x0ECE
(0380) 			if (found==0) {
    0F13: 3D 02 00 CMP   [X+2],0x0
    0F16: B0 42    JNZ   0x0F59
(0381) 				keys[pressed] = scancode;
    0F18: 62 D0 00 MOV   REG[0xD0],0x0
    0F1B: 51 61    MOV   A,[IsMouse+1]
    0F1D: 62 D0 00 MOV   REG[0xD0],0x0
    0F20: 53 21    MOV   [__r1],A
    0F22: 55 22 00 MOV   [__r0],0x0
    0F25: 06 21 23 ADD   [__r1],0x23
    0F28: 0E 22 00 ADC   [__r0],0x0
    0F2B: 51 22    MOV   A,[__r0]
    0F2D: 60 D5    MOV   REG[0xD5],A
    0F2F: 52 FC    MOV   A,[X-4]
    0F31: 3F 21    MVI   [__r1],A
(0382) 				types[pressed] = codetype & KEY_E0;
    0F33: 52 FB    MOV   A,[X-5]
    0F35: 21 04    AND   A,0x4
    0F37: 53 22    MOV   [__r0],A
    0F39: 62 D0 00 MOV   REG[0xD0],0x0
    0F3C: 51 61    MOV   A,[IsMouse+1]
    0F3E: 62 D0 00 MOV   REG[0xD0],0x0
    0F41: 53 1F    MOV   [__r3],A
    0F43: 55 20 00 MOV   [__r2],0x0
    0F46: 06 1F 2F ADD   [__r3],0x2F
    0F49: 0E 20 00 ADC   [__r2],0x0
    0F4C: 51 20    MOV   A,[__r2]
    0F4E: 60 D5    MOV   REG[0xD5],A
    0F50: 51 22    MOV   A,[__r0]
    0F52: 3F 1F    MVI   [__r3],A
(0383) 				pressed++;
    0F54: 62 D0 00 MOV   REG[0xD0],0x0
    0F57: 76 61    INC   [IsMouse+1]
(0384) 			}
(0385) 		}
(0386) 	}
(0387) 	//// If this is a key-break:
(0388) 	//// "pressed" should never be zero when we receive a KEY_BREAK
(0389) 	//// but, since some keyboards may have debouncing problems which
(0390) 	//// can generate multiple breaks, we will check anyway.
(0391) 	if (codetype & KEY_BREAK) {
    0F59: 48 FB 02 TST   [X-5],0x2
    0F5C: A0 BC    JZ    0x1019
(0392) 		if (!pressed) {
    0F5E: 62 D0 00 MOV   REG[0xD0],0x0
    0F61: 3C 61 00 CMP   [IsMouse+1],0x0
    0F64: B0 08    JNZ   0x0F6D
(0393) 			return(0);
    0F66: 62 D0 00 MOV   REG[0xD0],0x0
    0F69: 50 00    MOV   A,0x0
    0F6B: 80 B5    JMP   0x1021
(0394) 		}
(0395) 		// Remove the key from the list
(0396) 		for (i=0,j=0 ; i<pressed ; i++) {
    0F6D: 56 00 00 MOV   [X+0],0x0
    0F70: 56 01 00 MOV   [X+1],0x0
    0F73: 80 95    JMP   0x1009
(0397) 			// if the key & type matches, skip it
(0398) 			if (keys[i] == scancode) {
    0F75: 62 D0 00 MOV   REG[0xD0],0x0
    0F78: 52 00    MOV   A,[X+0]
    0F7A: 53 21    MOV   [__r1],A
    0F7C: 55 22 00 MOV   [__r0],0x0
    0F7F: 06 21 23 ADD   [__r1],0x23
    0F82: 0E 22 00 ADC   [__r0],0x0
    0F85: 51 22    MOV   A,[__r0]
    0F87: 60 D4    MOV   REG[0xD4],A
    0F89: 3E 21    MVI   A,[__r1]
    0F8B: 3B FC    CMP   A,[X-4]
    0F8D: B0 20    JNZ   0x0FAE
(0399) 				if (types[i] == (codetype & KEY_E0)) {
    0F8F: 52 FB    MOV   A,[X-5]
    0F91: 21 04    AND   A,0x4
    0F93: 53 22    MOV   [__r0],A
    0F95: 52 00    MOV   A,[X+0]
    0F97: 53 1F    MOV   [__r3],A
    0F99: 55 20 00 MOV   [__r2],0x0
    0F9C: 06 1F 2F ADD   [__r3],0x2F
    0F9F: 0E 20 00 ADC   [__r2],0x0
    0FA2: 51 20    MOV   A,[__r2]
    0FA4: 60 D4    MOV   REG[0xD4],A
    0FA6: 3E 1F    MVI   A,[__r3]
    0FA8: 3A 22    CMP   A,[__r0]
    0FAA: B0 03    JNZ   0x0FAE
(0400) 					continue;
    0FAC: 80 5A    JMP   0x1007
(0401) 				}
(0402) 			}
(0403) 			keys[j]=keys[i];
    0FAE: 62 D0 00 MOV   REG[0xD0],0x0
    0FB1: 52 00    MOV   A,[X+0]
    0FB3: 53 21    MOV   [__r1],A
    0FB5: 55 22 00 MOV   [__r0],0x0
    0FB8: 06 21 23 ADD   [__r1],0x23
    0FBB: 0E 22 00 ADC   [__r0],0x0
    0FBE: 51 22    MOV   A,[__r0]
    0FC0: 60 D4    MOV   REG[0xD4],A
    0FC2: 3E 21    MVI   A,[__r1]
    0FC4: 53 22    MOV   [__r0],A
    0FC6: 52 01    MOV   A,[X+1]
    0FC8: 53 1F    MOV   [__r3],A
    0FCA: 55 20 00 MOV   [__r2],0x0
    0FCD: 06 1F 23 ADD   [__r3],0x23
    0FD0: 0E 20 00 ADC   [__r2],0x0
    0FD3: 51 20    MOV   A,[__r2]
    0FD5: 60 D5    MOV   REG[0xD5],A
    0FD7: 51 22    MOV   A,[__r0]
    0FD9: 3F 1F    MVI   [__r3],A
(0404) 			types[j]=types[i];
    0FDB: 52 00    MOV   A,[X+0]
    0FDD: 53 21    MOV   [__r1],A
    0FDF: 55 22 00 MOV   [__r0],0x0
    0FE2: 06 21 2F ADD   [__r1],0x2F
    0FE5: 0E 22 00 ADC   [__r0],0x0
    0FE8: 51 22    MOV   A,[__r0]
    0FEA: 60 D4    MOV   REG[0xD4],A
    0FEC: 3E 21    MVI   A,[__r1]
    0FEE: 53 22    MOV   [__r0],A
    0FF0: 52 01    MOV   A,[X+1]
    0FF2: 53 1F    MOV   [__r3],A
    0FF4: 55 20 00 MOV   [__r2],0x0
    0FF7: 06 1F 2F ADD   [__r3],0x2F
    0FFA: 0E 20 00 ADC   [__r2],0x0
    0FFD: 51 20    MOV   A,[__r2]
    0FFF: 60 D5    MOV   REG[0xD5],A
    1001: 51 22    MOV   A,[__r0]
    1003: 3F 1F    MVI   [__r3],A
(0405) 			j++;
    1005: 77 01    INC   [X+1]
(0406) 		}
    1007: 77 00    INC   [X+0]
    1009: 62 D0 00 MOV   REG[0xD0],0x0
    100C: 52 00    MOV   A,[X+0]
    100E: 3A 61    CMP   A,[IsMouse+1]
    1010: CF 64    JC    0x0F75
(0407) 		pressed = j;
    1012: 52 01    MOV   A,[X+1]
    1014: 62 D0 00 MOV   REG[0xD0],0x0
    1017: 53 61    MOV   [IsMouse+1],A
(0408) 	}
(0409) 	///////////////////////////////////////////////////////////////////////////
(0410) 	return(pressed);
    1019: 62 D0 00 MOV   REG[0xD0],0x0
    101C: 51 61    MOV   A,[IsMouse+1]
    101E: 62 D0 00 MOV   REG[0xD0],0x0
    1021: 38 FD    ADD   SP,0xFD
    1023: 20       POP   X
    1024: 7F       RET   
(0411) }
(0412) 
(0413) char KeyboardToASCII(BYTE scancode, BYTE codetype)
(0414) {
_KeyboardToASCII:
  i                    --> X+0
  codetype             --> X-5
  scancode             --> X-4
    1025: 10       PUSH  X
    1026: 4F       MOV   X,SP
    1027: 38 02    ADD   SP,0x2
(0415) 	int i;
(0416) 
(0417) 	//// Ignore fake-shifts
(0418) 	if (codetype & KEY_FAKE_SHIFT) {
    1029: 48 FB 10 TST   [X-5],0x10
    102C: A0 08    JZ    0x1035
(0419) 		return(0);
    102E: 62 D0 00 MOV   REG[0xD0],0x0
    1031: 50 00    MOV   A,0x0
    1033: 83 4D    JMP   0x1381
(0420) 	}
(0421) 	if (codetype & KEY_MAKE) {
    1035: 48 FB 01 TST   [X-5],0x1
    1038: A3 43    JZ    0x137C
(0422) 		//// Convert any two byte (E0) scancodes to their ASCII equivalent
(0423) 		if (codetype & KEY_E0) {
    103A: 48 FB 04 TST   [X-5],0x4
    103D: A0 44    JZ    0x1082
(0424) 			if (scancode == 0x71 && !CtrlDown && !AltDown) return(0x08);	// Delete (return backspace)
    103F: 3D FC 71 CMP   [X-4],0x71
    1042: B0 18    JNZ   0x105B
    1044: 62 D0 00 MOV   REG[0xD0],0x0
    1047: 3C 5D 00 CMP   [CtrlDown],0x0
    104A: B0 10    JNZ   0x105B
    104C: 62 D0 00 MOV   REG[0xD0],0x0
    104F: 3C 5E 00 CMP   [AltDown],0x0
    1052: B0 08    JNZ   0x105B
    1054: 62 D0 00 MOV   REG[0xD0],0x0
    1057: 50 08    MOV   A,0x8
    1059: 83 27    JMP   0x1381
(0425) 			if (scancode == 0x4A) return('/');	// Keypad /
    105B: 3D FC 4A CMP   [X-4],0x4A
    105E: B0 08    JNZ   0x1067
    1060: 62 D0 00 MOV   REG[0xD0],0x0
    1063: 50 2F    MOV   A,0x2F
    1065: 83 1B    JMP   0x1381
(0426) 			if (scancode == 0x5A) { // Keypad Enter
    1067: 3D FC 5A CMP   [X-4],0x5A
    106A: B3 11    JNZ   0x137C
(0427) 				if (CtrlDown) return(0x0A);	// ^Enter (return line-feed)
    106C: 62 D0 00 MOV   REG[0xD0],0x0
    106F: 3C 5D 00 CMP   [CtrlDown],0x0
    1072: A0 08    JZ    0x107B
    1074: 62 D0 00 MOV   REG[0xD0],0x0
    1077: 50 0A    MOV   A,0xA
    1079: 83 07    JMP   0x1381
(0428) 				else return(0x0D); // (return carriage-return)
    107B: 62 D0 00 MOV   REG[0xD0],0x0
    107E: 50 0D    MOV   A,0xD
    1080: 83 00    JMP   0x1381
(0429) 			}
(0430) 		}
(0431) 		//// Convert any single byte scancodes to their ASCII equivalent
(0432) 		else {
(0433) 			//// Check for special case keys
(0434) 			if (scancode == 0x5A) { // Enter
    1082: 3D FC 5A CMP   [X-4],0x5A
    1085: B0 17    JNZ   0x109D
(0435) 				if (CtrlDown) return(0x0A);	// ^Enter (return line-feed)
    1087: 62 D0 00 MOV   REG[0xD0],0x0
    108A: 3C 5D 00 CMP   [CtrlDown],0x0
    108D: A0 08    JZ    0x1096
    108F: 62 D0 00 MOV   REG[0xD0],0x0
    1092: 50 0A    MOV   A,0xA
    1094: 82 EC    JMP   0x1381
(0436) 				else return(0x0D); // (return carriage-return)
    1096: 62 D0 00 MOV   REG[0xD0],0x0
    1099: 50 0D    MOV   A,0xD
    109B: 82 E5    JMP   0x1381
(0437) 			}
(0438) 			if (scancode == 0x76) return(0x1B);	// ESC key returns ASCII ESC
    109D: 3D FC 76 CMP   [X-4],0x76
    10A0: B0 08    JNZ   0x10A9
    10A2: 62 D0 00 MOV   REG[0xD0],0x0
    10A5: 50 1B    MOV   A,0x1B
    10A7: 82 D9    JMP   0x1381
(0439) 			if (scancode == 0x7C) return('*');	// KP *
    10A9: 3D FC 7C CMP   [X-4],0x7C
    10AC: B0 08    JNZ   0x10B5
    10AE: 62 D0 00 MOV   REG[0xD0],0x0
    10B1: 50 2A    MOV   A,0x2A
    10B3: 82 CD    JMP   0x1381
(0440) 			if (scancode == 0x7B) return('-');	// KP -
    10B5: 3D FC 7B CMP   [X-4],0x7B
    10B8: B0 08    JNZ   0x10C1
    10BA: 62 D0 00 MOV   REG[0xD0],0x0
    10BD: 50 2D    MOV   A,0x2D
    10BF: 82 C1    JMP   0x1381
(0441) 			if (scancode == 0x79) return('+');	// KP +
    10C1: 3D FC 79 CMP   [X-4],0x79
    10C4: B0 08    JNZ   0x10CD
    10C6: 62 D0 00 MOV   REG[0xD0],0x0
    10C9: 50 2B    MOV   A,0x2B
    10CB: 82 B5    JMP   0x1381
(0442) 			if (scancode == 0x66) return (0x08); // BkSP
    10CD: 3D FC 66 CMP   [X-4],0x66
    10D0: B0 08    JNZ   0x10D9
    10D2: 62 D0 00 MOV   REG[0xD0],0x0
    10D5: 50 08    MOV   A,0x8
    10D7: 82 A9    JMP   0x1381
(0443) 			//// If one of the Control keys is down, return their ASCII value
(0444) 			if (CtrlDown) {
    10D9: 62 D0 00 MOV   REG[0xD0],0x0
    10DC: 3C 5D 00 CMP   [CtrlDown],0x0
    10DF: A0 83    JZ    0x1163
(0445) 				i = 0;
    10E1: 56 01 00 MOV   [X+1],0x0
    10E4: 56 00 00 MOV   [X+0],0x0
    10E7: 80 06    JMP   0x10EE
(0446) 				while((ControlScancode[i][1] != scancode) && (ControlScancode[i][1] != 0)) {
(0447) 					i++;
    10E9: 77 01    INC   [X+1]
    10EB: 0F 00 00 ADC   [X+0],0x0
(0448) 				}
    10EE: 62 D0 00 MOV   REG[0xD0],0x0
    10F1: 52 01    MOV   A,[X+1]
    10F3: 53 21    MOV   [__r1],A
    10F5: 52 00    MOV   A,[X+0]
    10F7: 53 22    MOV   [__r0],A
    10F9: 65 21    ASL   [__r1]
    10FB: 6B 22    RLC   [__r0]
    10FD: 51 21    MOV   A,[__r1]
    10FF: 01 3A    ADD   A,0x3A
    1101: 53 1F    MOV   [__r3],A
    1103: 51 22    MOV   A,[__r0]
    1105: 09 02    ADC   A,0x2
    1107: 10       PUSH  X
    1108: 58 1F    MOV   X,[__r3]
    110A: 28       ROMX  
    110B: 20       POP   X
    110C: 3B FC    CMP   A,[X-4]
    110E: A0 12    JZ    0x1121
    1110: 06 21 3A ADD   [__r1],0x3A
    1113: 0E 22 02 ADC   [__r0],0x2
    1116: 51 22    MOV   A,[__r0]
    1118: 10       PUSH  X
    1119: 58 21    MOV   X,[__r1]
    111B: 28       ROMX  
    111C: 20       POP   X
    111D: 39 00    CMP   A,0x0
    111F: BF C9    JNZ   0x10E9
(0449) 				if (ControlScancode[i][1] > 0) {
    1121: 62 D0 00 MOV   REG[0xD0],0x0
    1124: 52 01    MOV   A,[X+1]
    1126: 53 21    MOV   [__r1],A
    1128: 52 00    MOV   A,[X+0]
    112A: 53 22    MOV   [__r0],A
    112C: 65 21    ASL   [__r1]
    112E: 6B 22    RLC   [__r0]
    1130: 06 21 3A ADD   [__r1],0x3A
    1133: 0E 22 02 ADC   [__r0],0x2
    1136: 51 22    MOV   A,[__r0]
    1138: 10       PUSH  X
    1139: 58 21    MOV   X,[__r1]
    113B: 28       ROMX  
    113C: 20       POP   X
    113D: 53 22    MOV   [__r0],A
    113F: 50 00    MOV   A,0x0
    1141: 3A 22    CMP   A,[__r0]
    1143: D0 1F    JNC   0x1163
(0450) 					return(ControlScancode[i][0]);
    1145: 62 D0 00 MOV   REG[0xD0],0x0
    1148: 52 01    MOV   A,[X+1]
    114A: 53 21    MOV   [__r1],A
    114C: 52 00    MOV   A,[X+0]
    114E: 53 22    MOV   [__r0],A
    1150: 65 21    ASL   [__r1]
    1152: 6B 22    RLC   [__r0]
    1154: 06 21 39 ADD   [__r1],0x39
    1157: 0E 22 02 ADC   [__r0],0x2
    115A: 51 22    MOV   A,[__r0]
    115C: 10       PUSH  X
    115D: 58 21    MOV   X,[__r1]
    115F: 28       ROMX  
    1160: 20       POP   X
    1161: 82 1F    JMP   0x1381
(0451) 				}
(0452) 			}
(0453) 			//// If NumLock is on, return any appropriate key pad ASCII values
(0454) 			if (NumLock) {
    1163: 62 D0 00 MOV   REG[0xD0],0x0
    1166: 3C 59 00 CMP   [NumLock],0x0
    1169: A0 83    JZ    0x11ED
(0455) 				i = 0;
    116B: 56 01 00 MOV   [X+1],0x0
    116E: 56 00 00 MOV   [X+0],0x0
    1171: 80 06    JMP   0x1178
(0456) 				while((KeypadScancode[i][1] != scancode) && (KeypadScancode[i][1] != 0)) {
(0457) 					i++;
    1173: 77 01    INC   [X+1]
    1175: 0F 00 00 ADC   [X+0],0x0
(0458) 				}
    1178: 62 D0 00 MOV   REG[0xD0],0x0
    117B: 52 01    MOV   A,[X+1]
    117D: 53 21    MOV   [__r1],A
    117F: 52 00    MOV   A,[X+0]
    1181: 53 22    MOV   [__r0],A
    1183: 65 21    ASL   [__r1]
    1185: 6B 22    RLC   [__r0]
    1187: 51 21    MOV   A,[__r1]
    1189: 01 7A    ADD   A,0x7A
    118B: 53 1F    MOV   [__r3],A
    118D: 51 22    MOV   A,[__r0]
    118F: 09 02    ADC   A,0x2
    1191: 10       PUSH  X
    1192: 58 1F    MOV   X,[__r3]
    1194: 28       ROMX  
    1195: 20       POP   X
    1196: 3B FC    CMP   A,[X-4]
    1198: A0 12    JZ    0x11AB
    119A: 06 21 7A ADD   [__r1],0x7A
    119D: 0E 22 02 ADC   [__r0],0x2
    11A0: 51 22    MOV   A,[__r0]
    11A2: 10       PUSH  X
    11A3: 58 21    MOV   X,[__r1]
    11A5: 28       ROMX  
    11A6: 20       POP   X
    11A7: 39 00    CMP   A,0x0
    11A9: BF C9    JNZ   0x1173
(0459) 				if (KeypadScancode[i][1] > 0) {
    11AB: 62 D0 00 MOV   REG[0xD0],0x0
    11AE: 52 01    MOV   A,[X+1]
    11B0: 53 21    MOV   [__r1],A
    11B2: 52 00    MOV   A,[X+0]
    11B4: 53 22    MOV   [__r0],A
    11B6: 65 21    ASL   [__r1]
    11B8: 6B 22    RLC   [__r0]
    11BA: 06 21 7A ADD   [__r1],0x7A
    11BD: 0E 22 02 ADC   [__r0],0x2
    11C0: 51 22    MOV   A,[__r0]
    11C2: 10       PUSH  X
    11C3: 58 21    MOV   X,[__r1]
    11C5: 28       ROMX  
    11C6: 20       POP   X
    11C7: 53 22    MOV   [__r0],A
    11C9: 50 00    MOV   A,0x0
    11CB: 3A 22    CMP   A,[__r0]
    11CD: D0 2B    JNC   0x11F9
(0460) 					return(KeypadScancode[i][0]);
    11CF: 62 D0 00 MOV   REG[0xD0],0x0
    11D2: 52 01    MOV   A,[X+1]
    11D4: 53 21    MOV   [__r1],A
    11D6: 52 00    MOV   A,[X+0]
    11D8: 53 22    MOV   [__r0],A
    11DA: 65 21    ASL   [__r1]
    11DC: 6B 22    RLC   [__r0]
    11DE: 06 21 79 ADD   [__r1],0x79
    11E1: 0E 22 02 ADC   [__r0],0x2
    11E4: 51 22    MOV   A,[__r0]
    11E6: 10       PUSH  X
    11E7: 58 21    MOV   X,[__r1]
    11E9: 28       ROMX  
    11EA: 20       POP   X
    11EB: 81 95    JMP   0x1381
(0461) 				}
(0462) 			}
(0463) 			//// Keypad ./DEL returns backspace if NumLock is off
(0464) 			else {
(0465) 				if (scancode == 0x71) return(0x08);	// KP ./Del (return backspace)
    11ED: 3D FC 71 CMP   [X-4],0x71
    11F0: B0 08    JNZ   0x11F9
    11F2: 62 D0 00 MOV   REG[0xD0],0x0
    11F5: 50 08    MOV   A,0x8
    11F7: 81 89    JMP   0x1381
(0466) 			}
(0467) 			//// Search for all others in their shifted or CapsLock form
(0468) 			i = 0;
    11F9: 56 01 00 MOV   [X+1],0x0
    11FC: 56 00 00 MOV   [X+0],0x0
    11FF: 80 06    JMP   0x1206
(0469) 			while((AlphabetScancode[i][2] != scancode) && (AlphabetScancode[i][2] != 0)) {
(0470) 				i++;
    1201: 77 01    INC   [X+1]
    1203: 0F 00 00 ADC   [X+0],0x0
(0471) 			}
    1206: 62 D0 00 MOV   REG[0xD0],0x0
    1209: 52 00    MOV   A,[X+0]
    120B: 08       PUSH  A
    120C: 52 01    MOV   A,[X+1]
    120E: 08       PUSH  A
    120F: 50 00    MOV   A,0x0
    1211: 08       PUSH  A
    1212: 50 03    MOV   A,0x3
    1214: 08       PUSH  A
    1215: 7C 31 7A LCALL 0x317A
    1218: 38 FC    ADD   SP,0xFC
    121A: 51 16    MOV   A,[__rX]
    121C: 53 21    MOV   [__r1],A
    121E: 51 15    MOV   A,[__rY]
    1220: 53 22    MOV   [__r0],A
    1222: 51 21    MOV   A,[__r1]
    1224: 01 EA    ADD   A,0xEA
    1226: 53 1F    MOV   [__r3],A
    1228: 51 22    MOV   A,[__r0]
    122A: 09 01    ADC   A,0x1
    122C: 10       PUSH  X
    122D: 58 1F    MOV   X,[__r3]
    122F: 28       ROMX  
    1230: 20       POP   X
    1231: 3B FC    CMP   A,[X-4]
    1233: A0 12    JZ    0x1246
    1235: 06 21 EA ADD   [__r1],0xEA
    1238: 0E 22 01 ADC   [__r0],0x1
    123B: 51 22    MOV   A,[__r0]
    123D: 10       PUSH  X
    123E: 58 21    MOV   X,[__r1]
    1240: 28       ROMX  
    1241: 20       POP   X
    1242: 39 00    CMP   A,0x0
    1244: BF BC    JNZ   0x1201
(0472) 			if (AlphabetScancode[i][2] > 0) {
    1246: 62 D0 00 MOV   REG[0xD0],0x0
    1249: 52 00    MOV   A,[X+0]
    124B: 08       PUSH  A
    124C: 52 01    MOV   A,[X+1]
    124E: 08       PUSH  A
    124F: 50 00    MOV   A,0x0
    1251: 08       PUSH  A
    1252: 50 03    MOV   A,0x3
    1254: 08       PUSH  A
    1255: 7C 31 7A LCALL 0x317A
    1258: 38 FC    ADD   SP,0xFC
    125A: 51 16    MOV   A,[__rX]
    125C: 53 21    MOV   [__r1],A
    125E: 51 15    MOV   A,[__rY]
    1260: 53 22    MOV   [__r0],A
    1262: 06 21 EA ADD   [__r1],0xEA
    1265: 0E 22 01 ADC   [__r0],0x1
    1268: 51 22    MOV   A,[__r0]
    126A: 10       PUSH  X
    126B: 58 21    MOV   X,[__r1]
    126D: 28       ROMX  
    126E: 20       POP   X
    126F: 53 22    MOV   [__r0],A
    1271: 50 00    MOV   A,0x0
    1273: 3A 22    CMP   A,[__r0]
    1275: D0 4B    JNC   0x12C1
(0473) 				return(AlphabetScancode[i][ShiftDown^CapsLock]);
    1277: 62 D0 00 MOV   REG[0xD0],0x0
    127A: 51 5C    MOV   A,[ShiftDown]
    127C: 62 D0 00 MOV   REG[0xD0],0x0
    127F: 53 21    MOV   [__r1],A
    1281: 55 22 00 MOV   [__r0],0x0
    1284: 62 D0 00 MOV   REG[0xD0],0x0
    1287: 51 5A    MOV   A,[CapsLock]
    1289: 62 D0 00 MOV   REG[0xD0],0x0
    128C: 34 21    XOR   [__r1],A
    128E: 36 22 00 XOR   [__r0],0x0
    1291: 52 00    MOV   A,[X+0]
    1293: 08       PUSH  A
    1294: 52 01    MOV   A,[X+1]
    1296: 08       PUSH  A
    1297: 50 00    MOV   A,0x0
    1299: 08       PUSH  A
    129A: 50 03    MOV   A,0x3
    129C: 08       PUSH  A
    129D: 7C 31 7A LCALL 0x317A
    12A0: 38 FC    ADD   SP,0xFC
    12A2: 51 16    MOV   A,[__rX]
    12A4: 53 1F    MOV   [__r3],A
    12A6: 51 15    MOV   A,[__rY]
    12A8: 53 20    MOV   [__r2],A
    12AA: 06 1F E8 ADD   [__r3],0xE8
    12AD: 0E 20 01 ADC   [__r2],0x1
    12B0: 51 1F    MOV   A,[__r3]
    12B2: 04 21    ADD   [__r1],A
    12B4: 51 20    MOV   A,[__r2]
    12B6: 0C 22    ADC   [__r0],A
    12B8: 51 22    MOV   A,[__r0]
    12BA: 10       PUSH  X
    12BB: 58 21    MOV   X,[__r1]
    12BD: 28       ROMX  
    12BE: 20       POP   X
    12BF: 80 C1    JMP   0x1381
(0474) 			}
(0475) 			else {
(0476) 				i = 0;
    12C1: 56 01 00 MOV   [X+1],0x0
    12C4: 56 00 00 MOV   [X+0],0x0
    12C7: 80 06    JMP   0x12CE
(0477) 				while((ShiftableScancode[i][2] != scancode) && (ShiftableScancode[i][2] != 0)) {
(0478) 					i++;
    12C9: 77 01    INC   [X+1]
    12CB: 0F 00 00 ADC   [X+0],0x0
(0479) 				}
    12CE: 62 D0 00 MOV   REG[0xD0],0x0
    12D1: 52 00    MOV   A,[X+0]
    12D3: 08       PUSH  A
    12D4: 52 01    MOV   A,[X+1]
    12D6: 08       PUSH  A
    12D7: 50 00    MOV   A,0x0
    12D9: 08       PUSH  A
    12DA: 50 03    MOV   A,0x3
    12DC: 08       PUSH  A
    12DD: 7C 31 7A LCALL 0x317A
    12E0: 38 FC    ADD   SP,0xFC
    12E2: 51 16    MOV   A,[__rX]
    12E4: 53 21    MOV   [__r1],A
    12E6: 51 15    MOV   A,[__rY]
    12E8: 53 22    MOV   [__r0],A
    12EA: 51 21    MOV   A,[__r1]
    12EC: 01 A2    ADD   A,0xA2
    12EE: 53 1F    MOV   [__r3],A
    12F0: 51 22    MOV   A,[__r0]
    12F2: 09 01    ADC   A,0x1
    12F4: 10       PUSH  X
    12F5: 58 1F    MOV   X,[__r3]
    12F7: 28       ROMX  
    12F8: 20       POP   X
    12F9: 3B FC    CMP   A,[X-4]
    12FB: A0 12    JZ    0x130E
    12FD: 06 21 A2 ADD   [__r1],0xA2
    1300: 0E 22 01 ADC   [__r0],0x1
    1303: 51 22    MOV   A,[__r0]
    1305: 10       PUSH  X
    1306: 58 21    MOV   X,[__r1]
    1308: 28       ROMX  
    1309: 20       POP   X
    130A: 39 00    CMP   A,0x0
    130C: BF BC    JNZ   0x12C9
(0480) 				if (ShiftableScancode[i][2] > 0) {
    130E: 62 D0 00 MOV   REG[0xD0],0x0
    1311: 52 00    MOV   A,[X+0]
    1313: 08       PUSH  A
    1314: 52 01    MOV   A,[X+1]
    1316: 08       PUSH  A
    1317: 50 00    MOV   A,0x0
    1319: 08       PUSH  A
    131A: 50 03    MOV   A,0x3
    131C: 08       PUSH  A
    131D: 7C 31 7A LCALL 0x317A
    1320: 38 FC    ADD   SP,0xFC
    1322: 51 16    MOV   A,[__rX]
    1324: 53 21    MOV   [__r1],A
    1326: 51 15    MOV   A,[__rY]
    1328: 53 22    MOV   [__r0],A
    132A: 06 21 A2 ADD   [__r1],0xA2
    132D: 0E 22 01 ADC   [__r0],0x1
    1330: 51 22    MOV   A,[__r0]
    1332: 10       PUSH  X
    1333: 58 21    MOV   X,[__r1]
    1335: 28       ROMX  
    1336: 20       POP   X
    1337: 53 22    MOV   [__r0],A
    1339: 50 00    MOV   A,0x0
    133B: 3A 22    CMP   A,[__r0]
    133D: D0 3E    JNC   0x137C
(0481) 					return(ShiftableScancode[i][ShiftDown]);
    133F: 62 D0 00 MOV   REG[0xD0],0x0
    1342: 51 5C    MOV   A,[ShiftDown]
    1344: 62 D0 00 MOV   REG[0xD0],0x0
    1347: 53 21    MOV   [__r1],A
    1349: 55 22 00 MOV   [__r0],0x0
    134C: 52 00    MOV   A,[X+0]
    134E: 08       PUSH  A
    134F: 52 01    MOV   A,[X+1]
    1351: 08       PUSH  A
    1352: 50 00    MOV   A,0x0
    1354: 08       PUSH  A
    1355: 50 03    MOV   A,0x3
    1357: 08       PUSH  A
    1358: 7C 31 7A LCALL 0x317A
    135B: 38 FC    ADD   SP,0xFC
    135D: 51 16    MOV   A,[__rX]
    135F: 53 1F    MOV   [__r3],A
    1361: 51 15    MOV   A,[__rY]
    1363: 53 20    MOV   [__r2],A
    1365: 06 1F A0 ADD   [__r3],0xA0
    1368: 0E 20 01 ADC   [__r2],0x1
    136B: 51 1F    MOV   A,[__r3]
    136D: 04 21    ADD   [__r1],A
    136F: 51 20    MOV   A,[__r2]
    1371: 0C 22    ADC   [__r0],A
    1373: 51 22    MOV   A,[__r0]
    1375: 10       PUSH  X
    1376: 58 21    MOV   X,[__r1]
    1378: 28       ROMX  
    1379: 20       POP   X
    137A: 80 06    JMP   0x1381
(0482) 				}
(0483) 			}
(0484) 		}
(0485) 	}
(0486) 	//// No ASCII match returns zero
(0487) 	return(0);
    137C: 62 D0 00 MOV   REG[0xD0],0x0
    137F: 50 00    MOV   A,0x0
    1381: 38 FE    ADD   SP,0xFE
    1383: 20       POP   X
    1384: 7F       RET   
(0488) }
(0489) 
(0490) void KeyboardAlt(BYTE *str, BYTE index)
(0491) {
_KeyboardAlt:
  index                --> X-6
  str                  --> X-5
    1385: 10       PUSH  X
    1386: 4F       MOV   X,SP
(0492) 	if (index == 3)
    1387: 3D FA 03 CMP   [X-6],0x3
    138A: B0 C8    JNZ   0x1453
(0493) 	{
(0494) 		if (str[0] == '3' && str[1] == '1' && str[2] == '4') UART_CPutString("3.1415926535897932386\r\n");
    138C: 62 D0 00 MOV   REG[0xD0],0x0
    138F: 52 FC    MOV   A,[X-4]
    1391: 53 21    MOV   [__r1],A
    1393: 52 FB    MOV   A,[X-5]
    1395: 60 D4    MOV   REG[0xD4],A
    1397: 3E 21    MVI   A,[__r1]
    1399: 39 33    CMP   A,0x33
    139B: B0 33    JNZ   0x13CF
    139D: 52 FC    MOV   A,[X-4]
    139F: 01 01    ADD   A,0x1
    13A1: 53 21    MOV   [__r1],A
    13A3: 52 FB    MOV   A,[X-5]
    13A5: 09 00    ADC   A,0x0
    13A7: 60 D4    MOV   REG[0xD4],A
    13A9: 3E 21    MVI   A,[__r1]
    13AB: 39 31    CMP   A,0x31
    13AD: B0 21    JNZ   0x13CF
    13AF: 52 FC    MOV   A,[X-4]
    13B1: 01 02    ADD   A,0x2
    13B3: 53 21    MOV   [__r1],A
    13B5: 52 FB    MOV   A,[X-5]
    13B7: 09 00    ADC   A,0x0
    13B9: 60 D4    MOV   REG[0xD4],A
    13BB: 3E 21    MVI   A,[__r1]
    13BD: 39 34    CMP   A,0x34
    13BF: B0 0F    JNZ   0x13CF
    13C1: 10       PUSH  X
    13C2: 50 03    MOV   A,0x3
    13C4: 08       PUSH  A
    13C5: 50 BC    MOV   A,0xBC
    13C7: 5C       MOV   X,A
    13C8: 18       POP   A
    13C9: 7C 09 47 LCALL _UART_CPutString
    13CC: 20       POP   X
    13CD: 80 85    JMP   0x1453
(0495) 		else if (str[0] == '0' && str[1] == '0' && str[2] == '0') UART_CPutString("I love ECE381\r\n");
    13CF: 62 D0 00 MOV   REG[0xD0],0x0
    13D2: 52 FC    MOV   A,[X-4]
    13D4: 53 21    MOV   [__r1],A
    13D6: 52 FB    MOV   A,[X-5]
    13D8: 60 D4    MOV   REG[0xD4],A
    13DA: 3E 21    MVI   A,[__r1]
    13DC: 39 30    CMP   A,0x30
    13DE: B0 33    JNZ   0x1412
    13E0: 52 FC    MOV   A,[X-4]
    13E2: 01 01    ADD   A,0x1
    13E4: 53 21    MOV   [__r1],A
    13E6: 52 FB    MOV   A,[X-5]
    13E8: 09 00    ADC   A,0x0
    13EA: 60 D4    MOV   REG[0xD4],A
    13EC: 3E 21    MVI   A,[__r1]
    13EE: 39 30    CMP   A,0x30
    13F0: B0 21    JNZ   0x1412
    13F2: 52 FC    MOV   A,[X-4]
    13F4: 01 02    ADD   A,0x2
    13F6: 53 21    MOV   [__r1],A
    13F8: 52 FB    MOV   A,[X-5]
    13FA: 09 00    ADC   A,0x0
    13FC: 60 D4    MOV   REG[0xD4],A
    13FE: 3E 21    MVI   A,[__r1]
    1400: 39 30    CMP   A,0x30
    1402: B0 0F    JNZ   0x1412
    1404: 10       PUSH  X
    1405: 50 03    MOV   A,0x3
    1407: 08       PUSH  A
    1408: 50 AC    MOV   A,0xAC
    140A: 5C       MOV   X,A
    140B: 18       POP   A
    140C: 7C 09 47 LCALL _UART_CPutString
    140F: 20       POP   X
    1410: 80 42    JMP   0x1453
(0496) 		else if (str[0] == '1' && str[1] == '2' && str[2] == '3') UART_CPutString("The quick brown fox jumps over the lazy dog\r\n");
    1412: 62 D0 00 MOV   REG[0xD0],0x0
    1415: 52 FC    MOV   A,[X-4]
    1417: 53 21    MOV   [__r1],A
    1419: 52 FB    MOV   A,[X-5]
    141B: 60 D4    MOV   REG[0xD4],A
    141D: 3E 21    MVI   A,[__r1]
    141F: 39 31    CMP   A,0x31
    1421: B0 31    JNZ   0x1453
    1423: 52 FC    MOV   A,[X-4]
    1425: 01 01    ADD   A,0x1
    1427: 53 21    MOV   [__r1],A
    1429: 52 FB    MOV   A,[X-5]
    142B: 09 00    ADC   A,0x0
    142D: 60 D4    MOV   REG[0xD4],A
    142F: 3E 21    MVI   A,[__r1]
    1431: 39 32    CMP   A,0x32
    1433: B0 1F    JNZ   0x1453
    1435: 52 FC    MOV   A,[X-4]
    1437: 01 02    ADD   A,0x2
    1439: 53 21    MOV   [__r1],A
    143B: 52 FB    MOV   A,[X-5]
    143D: 09 00    ADC   A,0x0
    143F: 60 D4    MOV   REG[0xD4],A
    1441: 3E 21    MVI   A,[__r1]
    1443: 39 33    CMP   A,0x33
    1445: B0 0D    JNZ   0x1453
    1447: 10       PUSH  X
    1448: 50 03    MOV   A,0x3
    144A: 08       PUSH  A
    144B: 50 7E    MOV   A,0x7E
    144D: 5C       MOV   X,A
    144E: 18       POP   A
    144F: 7C 09 47 LCALL _UART_CPutString
    1452: 20       POP   X
(0497) 	}
    1453: 20       POP   X
    1454: 7F       RET   
(0498) }
(0499) 
(0500) void KeyboardAction(BYTE scancode, BYTE codetype, BYTE keyspressed)
(0501) {
_KeyboardAction:
  status               --> X+2
  i                    --> X+0
  keyspressed          --> X-6
  codetype             --> X-5
  scancode             --> X-4
    1455: 10       PUSH  X
    1456: 4F       MOV   X,SP
    1457: 38 07    ADD   SP,0x7
(0502) 	//// Keyboard variables below
(0503) 	BYTE status;
(0504) 	int i;
(0505) 	static BYTE brightindex = 127;	// PWM LED brightness index
(0506) 	static BYTE pwm_on = 1;		// PWM User Module on or off
(0507) 	static BYTE statusLEDs=0;
(0508) 	static BYTE shiftstatus = 0;
(0509) 	static BYTE ctrlstatus = 0;
(0510) 	static BYTE altstatus = 0;
(0511) 	static int pianoPeriod = 0;
(0512) 	static BYTE altStr[12];
(0513) 	static BYTE altIndex = 0;
(0514) 	
(0515) 	//// Ignore fake-shifts (unless you care about them)
(0516) 	if (codetype & KEY_FAKE_SHIFT) {
    1459: 48 FB 10 TST   [X-5],0x10
    145C: A0 04    JZ    0x1461
(0517) 		return;
    145E: 7D 1E 77 LJMP  0x1E77
(0518) 	}
(0519) 	//// Every other code type is a key change
(0520) 	if (codetype) {
    1461: 3D FB 00 CMP   [X-5],0x0
    1464: B0 04    JNZ   0x1469
    1466: 7D 1E 77 LJMP  0x1E77
(0521) 		//// If the Pause key is pressed, switch to Piano mode
(0522) 		if (codetype == KEY_PAUSE) {
    1469: 3D FB 08 CMP   [X-5],0x8
    146C: B0 43    JNZ   0x14B0
(0523) 			PianoMode ^= 0x01;
    146E: 62 D0 00 MOV   REG[0xD0],0x0
    1471: 51 5F    MOV   A,[PianoMode]
    1473: 31 01    XOR   A,0x1
    1475: 53 5F    MOV   [PianoMode],A
(0524) 			pianoPeriod = 0;
    1477: 62 D0 00 MOV   REG[0xD0],0x0
    147A: 55 4E 00 MOV   [0x4E],0x0
    147D: 55 4D 00 MOV   [0x4D],0x0
(0525) 			if (PianoMode) {
    1480: 62 D0 00 MOV   REG[0xD0],0x0
    1483: 3C 5F 00 CMP   [PianoMode],0x0
    1486: A0 1A    JZ    0x14A1
(0526) 				UART_CPutString("\r\nPiano mode on.\r\n");
    1488: 10       PUSH  X
    1489: 50 03    MOV   A,0x3
    148B: 08       PUSH  A
    148C: 50 6B    MOV   A,0x6B
    148E: 5C       MOV   X,A
    148F: 18       POP   A
    1490: 7C 09 47 LCALL _UART_CPutString
(0527) 				UART_CPutString("\tPress [ZXCVBNM,], [ASDFGHJK], or [QWERTYUI].\r\n");
    1493: 50 03    MOV   A,0x3
    1495: 08       PUSH  A
    1496: 50 3B    MOV   A,0x3B
    1498: 5C       MOV   X,A
    1499: 18       POP   A
    149A: 7C 09 47 LCALL _UART_CPutString
    149D: 20       POP   X
(0528) 			}
    149E: 7D 1E 77 LJMP  0x1E77
(0529) 			else
(0530) 				UART_CPutString("\r\nPiano mode off.\r\n");
    14A1: 10       PUSH  X
    14A2: 50 03    MOV   A,0x3
    14A4: 08       PUSH  A
    14A5: 50 27    MOV   A,0x27
    14A7: 5C       MOV   X,A
    14A8: 18       POP   A
    14A9: 7C 09 47 LCALL _UART_CPutString
    14AC: 20       POP   X
(0531) 			return;
    14AD: 7D 1E 77 LJMP  0x1E77
(0532) 		}
(0533) 		//// Things to do when one of the E0 keys is pressed
(0534) 		if ((codetype & KEY_E0)&&(codetype & KEY_MAKE)) {
    14B0: 48 FB 04 TST   [X-5],0x4
    14B3: A0 8B    JZ    0x153F
    14B5: 48 FB 01 TST   [X-5],0x1
    14B8: A0 86    JZ    0x153F
(0535) 			switch(scancode) {
    14BA: 52 FC    MOV   A,[X-4]
    14BC: 54 04    MOV   [X+4],A
    14BE: 56 03 00 MOV   [X+3],0x0
    14C1: 3D 03 00 CMP   [X+3],0x0
    14C4: B0 06    JNZ   0x14CB
    14C6: 3D 04 11 CMP   [X+4],0x11
    14C9: A0 66    JZ    0x1530
    14CB: 3D 03 00 CMP   [X+3],0x0
    14CE: B0 06    JNZ   0x14D5
    14D0: 3D 04 14 CMP   [X+4],0x14
    14D3: A0 4D    JZ    0x1521
    14D5: 52 04    MOV   A,[X+4]
    14D7: 11 11    SUB   A,0x11
    14D9: 52 03    MOV   A,[X+3]
    14DB: 31 80    XOR   A,0x80
    14DD: 19 80    SBB   A,0x80
    14DF: D0 04    JNC   0x14E4
    14E1: 7D 1E 77 LJMP  0x1E77
    14E4: 3D 03 00 CMP   [X+3],0x0
    14E7: B0 06    JNZ   0x14EE
    14E9: 3D 04 7C CMP   [X+4],0x7C
    14EC: A0 04    JZ    0x14F1
    14EE: 7D 1E 77 LJMP  0x1E77
(0536) 			case 0x7C:	// E0 7C - PRNT SCRN
(0537) 				// If we successfully send and receive an echo, toggle the PWM LED
(0538) 				if (!PS2_Send_Command_Process_Response(0xEE)) {
    14F1: 50 EE    MOV   A,0xEE
    14F3: 08       PUSH  A
    14F4: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    14F7: 38 FF    ADD   SP,0xFF
    14F9: 39 00    CMP   A,0x0
    14FB: A0 04    JZ    0x1500
    14FD: 7D 1E 77 LJMP  0x1E77
(0539) 					if (pwm_on) {
    1500: 62 D0 00 MOV   REG[0xD0],0x0
    1503: 3C 53 00 CMP   [0x53],0x0
    1506: A0 0C    JZ    0x1513
(0540) 						pwm_on = 0;
    1508: 55 53 00 MOV   [0x53],0x0
(0541) 						PWM8LED_Stop();
    150B: 10       PUSH  X
    150C: 7C 0A E6 LCALL _PWM8LED_Stop
    150F: 20       POP   X
(0542) 					}
    1510: 7D 1E 77 LJMP  0x1E77
(0543) 					else {
(0544) 						pwm_on = 1;
    1513: 62 D0 00 MOV   REG[0xD0],0x0
    1516: 55 53 01 MOV   [0x53],0x1
(0545) 						PWM8LED_Start();
    1519: 10       PUSH  X
    151A: 7C 0A E2 LCALL _PWM8LED_Start
    151D: 20       POP   X
(0546) 					}
(0547) 				}
(0548) 				break;
    151E: 7D 1E 77 LJMP  0x1E77
(0549) 			case 0x14:	// E0 14 - Right Control
(0550) 				ctrlstatus |= 0x01;
    1521: 62 D0 00 MOV   REG[0xD0],0x0
    1524: 2E 50 01 OR    [0x50],0x1
(0551) 				CtrlDown = 1;
    1527: 62 D0 00 MOV   REG[0xD0],0x0
    152A: 55 5D 01 MOV   [CtrlDown],0x1
(0552) 				break;
    152D: 7D 1E 77 LJMP  0x1E77
(0553) 			case 0x11:	// E0 11 - Right Alt
(0554) 				altstatus |= 0x01;
    1530: 62 D0 00 MOV   REG[0xD0],0x0
    1533: 2E 51 01 OR    [0x51],0x1
(0555) 				AltDown = 1;
    1536: 62 D0 00 MOV   REG[0xD0],0x0
    1539: 55 5E 01 MOV   [AltDown],0x1
(0556) 				break;
(0557) 			//// Any scan codes not handled specially in the above case statements are
(0558) 			//// handled here:
(0559) 			default:
(0560) 				break;
(0561) 			}
(0562) 			return;
    153C: 7D 1E 77 LJMP  0x1E77
(0563) 		}
(0564) 		//
(0565) 		//// Things to do when one of the E0 keys is released
(0566) 		if ((codetype & KEY_E0)&&(codetype & KEY_BREAK)) {
    153F: 48 FB 04 TST   [X-5],0x4
    1542: A0 A9    JZ    0x15EC
    1544: 48 FB 02 TST   [X-5],0x2
    1547: A0 A4    JZ    0x15EC
(0567) 			switch(scancode) {
    1549: 52 FC    MOV   A,[X-4]
    154B: 54 04    MOV   [X+4],A
    154D: 56 03 00 MOV   [X+3],0x0
    1550: 52 04    MOV   A,[X+4]
    1552: 11 71    SUB   A,0x71
    1554: 62 D0 00 MOV   REG[0xD0],0x0
    1557: 53 15    MOV   [__rY],A
    1559: 52 03    MOV   A,[X+3]
    155B: 31 80    XOR   A,0x80
    155D: 19 80    SBB   A,0x80
    155F: 2A 15    OR    A,[__rY]
    1561: A0 6E    JZ    0x15D0
    1563: D0 18    JNC   0x157C
    1565: 3D 03 00 CMP   [X+3],0x0
    1568: B0 06    JNZ   0x156F
    156A: 3D 04 11 CMP   [X+4],0x11
    156D: A0 35    JZ    0x15A3
    156F: 3D 03 00 CMP   [X+3],0x0
    1572: B0 06    JNZ   0x1579
    1574: 3D 04 14 CMP   [X+4],0x14
    1577: A0 14    JZ    0x158C
    1579: 7D 1E 77 LJMP  0x1E77
    157C: 3D 03 00 CMP   [X+3],0x0
    157F: B0 09    JNZ   0x1589
    1581: 3D 04 7C CMP   [X+4],0x7C
    1584: B0 04    JNZ   0x1589
    1586: 7D 1E 77 LJMP  0x1E77
    1589: 7D 1E 77 LJMP  0x1E77
(0568) 			case 0x7C:	// E0 F0 7C - PRNT SCRN
(0569) 				break;
(0570) 			case 0x14:	// E0 F0 14 - Right Control
(0571) 				ctrlstatus &= ~0x01;
    158C: 62 D0 00 MOV   REG[0xD0],0x0
    158F: 26 50 FE AND   [0x50],0xFE
(0572) 				if (!ctrlstatus) CtrlDown = 0;
    1592: 3C 50 00 CMP   [0x50],0x0
    1595: A0 04    JZ    0x159A
    1597: 7D 1E 77 LJMP  0x1E77
    159A: 62 D0 00 MOV   REG[0xD0],0x0
    159D: 55 5D 00 MOV   [CtrlDown],0x0
(0573) 				break;
    15A0: 7D 1E 77 LJMP  0x1E77
(0574) 			case 0x11:	// E0 F0 11 - Right Alt
(0575) 				altstatus &= ~0x01;
    15A3: 62 D0 00 MOV   REG[0xD0],0x0
    15A6: 26 51 FE AND   [0x51],0xFE
(0576) 				if (!altstatus)
    15A9: 3C 51 00 CMP   [0x51],0x0
    15AC: A0 04    JZ    0x15B1
    15AE: 7D 1E 77 LJMP  0x1E77
(0577) 				{	
(0578) 					KeyboardAlt(altStr, altIndex);
    15B1: 62 D0 00 MOV   REG[0xD0],0x0
    15B4: 51 54    MOV   A,[0x54]
    15B6: 08       PUSH  A
    15B7: 50 00    MOV   A,0x0
    15B9: 08       PUSH  A
    15BA: 50 3B    MOV   A,0x3B
    15BC: 08       PUSH  A
    15BD: 9D C6    CALL  _KeyboardAlt
    15BF: 38 FD    ADD   SP,0xFD
(0579) 					AltDown = 0;
    15C1: 62 D0 00 MOV   REG[0xD0],0x0
    15C4: 55 5E 00 MOV   [AltDown],0x0
(0580) 					altIndex = 0;
    15C7: 62 D0 00 MOV   REG[0xD0],0x0
    15CA: 55 54 00 MOV   [0x54],0x0
(0581) 				}
(0582) 				break;
    15CD: 7D 1E 77 LJMP  0x1E77
(0583) 			case 0x71:	// E0 F0 71 - Delete
(0584) 				if (CtrlDown && AltDown)
    15D0: 62 D0 00 MOV   REG[0xD0],0x0
    15D3: 3C 5D 00 CMP   [CtrlDown],0x0
    15D6: B0 04    JNZ   0x15DB
    15D8: 7D 1E 77 LJMP  0x1E77
    15DB: 62 D0 00 MOV   REG[0xD0],0x0
    15DE: 3C 5E 00 CMP   [AltDown],0x0
    15E1: B0 04    JNZ   0x15E6
    15E3: 7D 1E 77 LJMP  0x1E77
(0585) 					M8C_Reset;	
    15E6: 50 00    MOV   A,0x0
    15E8: 00       SWI   
(0586) 				break;		
(0587) 				
(0588) 			//// Any scan codes not handled specially in the above case statements are
(0589) 			//// handled here:
(0590) 			default:
(0591) 				break;
(0592) 			}
(0593) 			return;
    15E9: 7D 1E 77 LJMP  0x1E77
(0594) 		}
(0595) 		//
(0596) 		//// Things to do when one of the single byte "make" scan code keys is pressed
(0597) 		if (codetype & KEY_MAKE) {
    15EC: 48 FB 01 TST   [X-5],0x1
    15EF: A6 CC    JZ    0x1CBC
(0598) 			if (AltDown){
    15F1: 62 D0 00 MOV   REG[0xD0],0x0
    15F4: 3C 5E 00 CMP   [AltDown],0x0
    15F7: A1 96    JZ    0x178E
(0599) 				//// If NumLock is on, return any appropriate key pad ASCII values
(0600) 				if (!NumLock) {
    15F9: 62 D0 00 MOV   REG[0xD0],0x0
    15FC: 3C 59 00 CMP   [NumLock],0x0
    15FF: B0 AD    JNZ   0x16AD
(0601) 					i = 0;
    1601: 56 01 00 MOV   [X+1],0x0
    1604: 56 00 00 MOV   [X+0],0x0
    1607: 80 06    JMP   0x160E
(0602) 					while((KeypadScancode[i][1] != scancode) && (KeypadScancode[i][1] != 0)) {
(0603) 						i++;
    1609: 77 01    INC   [X+1]
    160B: 0F 00 00 ADC   [X+0],0x0
(0604) 					}
    160E: 62 D0 00 MOV   REG[0xD0],0x0
    1611: 52 01    MOV   A,[X+1]
    1613: 53 21    MOV   [__r1],A
    1615: 52 00    MOV   A,[X+0]
    1617: 53 22    MOV   [__r0],A
    1619: 65 21    ASL   [__r1]
    161B: 6B 22    RLC   [__r0]
    161D: 51 21    MOV   A,[__r1]
    161F: 01 7A    ADD   A,0x7A
    1621: 53 1F    MOV   [__r3],A
    1623: 51 22    MOV   A,[__r0]
    1625: 09 02    ADC   A,0x2
    1627: 10       PUSH  X
    1628: 58 1F    MOV   X,[__r3]
    162A: 28       ROMX  
    162B: 20       POP   X
    162C: 3B FC    CMP   A,[X-4]
    162E: A0 12    JZ    0x1641
    1630: 06 21 7A ADD   [__r1],0x7A
    1633: 0E 22 02 ADC   [__r0],0x2
    1636: 51 22    MOV   A,[__r0]
    1638: 10       PUSH  X
    1639: 58 21    MOV   X,[__r1]
    163B: 28       ROMX  
    163C: 20       POP   X
    163D: 39 00    CMP   A,0x0
    163F: BF C9    JNZ   0x1609
(0605) 					if (KeypadScancode[i][1] > 0 && altIndex < 11) {
    1641: 62 D0 00 MOV   REG[0xD0],0x0
    1644: 52 01    MOV   A,[X+1]
    1646: 53 21    MOV   [__r1],A
    1648: 52 00    MOV   A,[X+0]
    164A: 53 22    MOV   [__r0],A
    164C: 65 21    ASL   [__r1]
    164E: 6B 22    RLC   [__r0]
    1650: 06 21 7A ADD   [__r1],0x7A
    1653: 0E 22 02 ADC   [__r0],0x2
    1656: 51 22    MOV   A,[__r0]
    1658: 10       PUSH  X
    1659: 58 21    MOV   X,[__r1]
    165B: 28       ROMX  
    165C: 20       POP   X
    165D: 53 22    MOV   [__r0],A
    165F: 50 00    MOV   A,0x0
    1661: 3A 22    CMP   A,[__r0]
    1663: D0 49    JNC   0x16AD
    1665: 62 D0 00 MOV   REG[0xD0],0x0
    1668: 3C 54 0B CMP   [0x54],0xB
    166B: D0 41    JNC   0x16AD
(0606) 						altStr[altIndex++] = KeypadScancode[i][0];
    166D: 62 D0 00 MOV   REG[0xD0],0x0
    1670: 51 54    MOV   A,[0x54]
    1672: 62 D0 00 MOV   REG[0xD0],0x0
    1675: 53 21    MOV   [__r1],A
    1677: 55 22 00 MOV   [__r0],0x0
    167A: 01 01    ADD   A,0x1
    167C: 62 D0 00 MOV   REG[0xD0],0x0
    167F: 53 54    MOV   [0x54],A
    1681: 62 D0 00 MOV   REG[0xD0],0x0
    1684: 52 01    MOV   A,[X+1]
    1686: 53 1F    MOV   [__r3],A
    1688: 52 00    MOV   A,[X+0]
    168A: 53 20    MOV   [__r2],A
    168C: 65 1F    ASL   [__r3]
    168E: 6B 20    RLC   [__r2]
    1690: 06 1F 79 ADD   [__r3],0x79
    1693: 0E 20 02 ADC   [__r2],0x2
    1696: 51 20    MOV   A,[__r2]
    1698: 10       PUSH  X
    1699: 58 1F    MOV   X,[__r3]
    169B: 28       ROMX  
    169C: 20       POP   X
    169D: 53 20    MOV   [__r2],A
    169F: 06 21 3B ADD   [__r1],0x3B
    16A2: 0E 22 00 ADC   [__r0],0x0
    16A5: 51 22    MOV   A,[__r0]
    16A7: 60 D5    MOV   REG[0xD5],A
    16A9: 51 20    MOV   A,[__r2]
    16AB: 3F 21    MVI   [__r1],A
(0607) 					}
(0608) 				}
(0609) 				i = 0;
    16AD: 56 01 00 MOV   [X+1],0x0
    16B0: 56 00 00 MOV   [X+0],0x0
    16B3: 80 06    JMP   0x16BA
(0610) 				while((ShiftableScancode[i][2] != scancode) && (ShiftableScancode[i][2] != 0)) {
(0611) 					i++;
    16B5: 77 01    INC   [X+1]
    16B7: 0F 00 00 ADC   [X+0],0x0
(0612) 				}
    16BA: 62 D0 00 MOV   REG[0xD0],0x0
    16BD: 52 00    MOV   A,[X+0]
    16BF: 08       PUSH  A
    16C0: 52 01    MOV   A,[X+1]
    16C2: 08       PUSH  A
    16C3: 50 00    MOV   A,0x0
    16C5: 08       PUSH  A
    16C6: 50 03    MOV   A,0x3
    16C8: 08       PUSH  A
    16C9: 7C 31 7A LCALL 0x317A
    16CC: 38 FC    ADD   SP,0xFC
    16CE: 51 16    MOV   A,[__rX]
    16D0: 53 21    MOV   [__r1],A
    16D2: 51 15    MOV   A,[__rY]
    16D4: 53 22    MOV   [__r0],A
    16D6: 51 21    MOV   A,[__r1]
    16D8: 01 A2    ADD   A,0xA2
    16DA: 53 1F    MOV   [__r3],A
    16DC: 51 22    MOV   A,[__r0]
    16DE: 09 01    ADC   A,0x1
    16E0: 10       PUSH  X
    16E1: 58 1F    MOV   X,[__r3]
    16E3: 28       ROMX  
    16E4: 20       POP   X
    16E5: 3B FC    CMP   A,[X-4]
    16E7: A0 12    JZ    0x16FA
    16E9: 06 21 A2 ADD   [__r1],0xA2
    16EC: 0E 22 01 ADC   [__r0],0x1
    16EF: 51 22    MOV   A,[__r0]
    16F1: 10       PUSH  X
    16F2: 58 21    MOV   X,[__r1]
    16F4: 28       ROMX  
    16F5: 20       POP   X
    16F6: 39 00    CMP   A,0x0
    16F8: BF BC    JNZ   0x16B5
(0613) 				if (ShiftableScancode[i][2] > 0 && altIndex < 11) {
    16FA: 62 D0 00 MOV   REG[0xD0],0x0
    16FD: 52 00    MOV   A,[X+0]
    16FF: 08       PUSH  A
    1700: 52 01    MOV   A,[X+1]
    1702: 08       PUSH  A
    1703: 50 00    MOV   A,0x0
    1705: 08       PUSH  A
    1706: 50 03    MOV   A,0x3
    1708: 08       PUSH  A
    1709: 7C 31 7A LCALL 0x317A
    170C: 38 FC    ADD   SP,0xFC
    170E: 51 16    MOV   A,[__rX]
    1710: 53 21    MOV   [__r1],A
    1712: 51 15    MOV   A,[__rY]
    1714: 53 22    MOV   [__r0],A
    1716: 06 21 A2 ADD   [__r1],0xA2
    1719: 0E 22 01 ADC   [__r0],0x1
    171C: 51 22    MOV   A,[__r0]
    171E: 10       PUSH  X
    171F: 58 21    MOV   X,[__r1]
    1721: 28       ROMX  
    1722: 20       POP   X
    1723: 53 22    MOV   [__r0],A
    1725: 50 00    MOV   A,0x0
    1727: 3A 22    CMP   A,[__r0]
    1729: D0 64    JNC   0x178E
    172B: 62 D0 00 MOV   REG[0xD0],0x0
    172E: 3C 54 0B CMP   [0x54],0xB
    1731: D0 5C    JNC   0x178E
(0614) 					altStr[altIndex++] = ShiftableScancode[i][ShiftDown];
    1733: 62 D0 00 MOV   REG[0xD0],0x0
    1736: 51 54    MOV   A,[0x54]
    1738: 62 D0 00 MOV   REG[0xD0],0x0
    173B: 53 21    MOV   [__r1],A
    173D: 55 22 00 MOV   [__r0],0x0
    1740: 01 01    ADD   A,0x1
    1742: 62 D0 00 MOV   REG[0xD0],0x0
    1745: 53 54    MOV   [0x54],A
    1747: 62 D0 00 MOV   REG[0xD0],0x0
    174A: 52 00    MOV   A,[X+0]
    174C: 08       PUSH  A
    174D: 52 01    MOV   A,[X+1]
    174F: 08       PUSH  A
    1750: 50 00    MOV   A,0x0
    1752: 08       PUSH  A
    1753: 50 03    MOV   A,0x3
    1755: 08       PUSH  A
    1756: 7C 31 7A LCALL 0x317A
    1759: 38 FC    ADD   SP,0xFC
    175B: 51 16    MOV   A,[__rX]
    175D: 53 1F    MOV   [__r3],A
    175F: 51 15    MOV   A,[__rY]
    1761: 53 20    MOV   [__r2],A
    1763: 06 1F A0 ADD   [__r3],0xA0
    1766: 0E 20 01 ADC   [__r2],0x1
    1769: 62 D0 00 MOV   REG[0xD0],0x0
    176C: 51 5C    MOV   A,[ShiftDown]
    176E: 62 D0 00 MOV   REG[0xD0],0x0
    1771: 02 1F    ADD   A,[__r3]
    1773: 53 1F    MOV   [__r3],A
    1775: 50 00    MOV   A,0x0
    1777: 0A 20    ADC   A,[__r2]
    1779: 10       PUSH  X
    177A: 58 1F    MOV   X,[__r3]
    177C: 28       ROMX  
    177D: 20       POP   X
    177E: 53 20    MOV   [__r2],A
    1780: 06 21 3B ADD   [__r1],0x3B
    1783: 0E 22 00 ADC   [__r0],0x0
    1786: 51 22    MOV   A,[__r0]
    1788: 60 D5    MOV   REG[0xD5],A
    178A: 51 20    MOV   A,[__r2]
    178C: 3F 21    MVI   [__r1],A
(0615) 				}
(0616) 			}
(0617) 			switch(scancode) {
    178E: 52 FC    MOV   A,[X-4]
    1790: 54 04    MOV   [X+4],A
    1792: 56 03 00 MOV   [X+3],0x0
    1795: 3D 03 00 CMP   [X+3],0x0
    1798: B0 06    JNZ   0x179F
    179A: 3D 04 58 CMP   [X+4],0x58
    179D: A1 05    JZ    0x18A3
    179F: 52 04    MOV   A,[X+4]
    17A1: 11 59    SUB   A,0x59
    17A3: 62 D0 00 MOV   REG[0xD0],0x0
    17A6: 53 15    MOV   [__rY],A
    17A8: 52 03    MOV   A,[X+3]
    17AA: 31 80    XOR   A,0x80
    17AC: 19 80    SBB   A,0x80
    17AE: 2A 15    OR    A,[__rY]
    17B0: A0 64    JZ    0x1815
    17B2: D0 41    JNC   0x17F4
    17B4: 3D 03 00 CMP   [X+3],0x0
    17B7: B0 06    JNZ   0x17BE
    17B9: 3D 04 05 CMP   [X+4],0x5
    17BC: A1 92    JZ    0x194F
    17BE: 3D 03 00 CMP   [X+3],0x0
    17C1: B0 06    JNZ   0x17C8
    17C3: 3D 04 06 CMP   [X+4],0x6
    17C6: A1 BE    JZ    0x1985
    17C8: 52 04    MOV   A,[X+4]
    17CA: 11 05    SUB   A,0x5
    17CC: 52 03    MOV   A,[X+3]
    17CE: 31 80    XOR   A,0x80
    17D0: 19 80    SBB   A,0x80
    17D2: C1 F7    JC    0x19CA
    17D4: 3D 03 00 CMP   [X+3],0x0
    17D7: B0 06    JNZ   0x17DE
    17D9: 3D 04 11 CMP   [X+4],0x11
    17DC: A0 62    JZ    0x183F
    17DE: 3D 03 00 CMP   [X+3],0x0
    17E1: B0 06    JNZ   0x17E8
    17E3: 3D 04 12 CMP   [X+4],0x12
    17E6: A0 3C    JZ    0x1823
    17E8: 3D 03 00 CMP   [X+3],0x0
    17EB: B0 06    JNZ   0x17F2
    17ED: 3D 04 14 CMP   [X+4],0x14
    17F0: A0 40    JZ    0x1831
    17F2: 81 D7    JMP   0x19CA
    17F4: 52 04    MOV   A,[X+4]
    17F6: 11 77    SUB   A,0x77
    17F8: 62 D0 00 MOV   REG[0xD0],0x0
    17FB: 53 15    MOV   [__rY],A
    17FD: 52 03    MOV   A,[X+3]
    17FF: 31 80    XOR   A,0x80
    1801: 19 80    SBB   A,0x80
    1803: C1 C6    JC    0x19CA
    1805: 2A 15    OR    A,[__rY]
    1807: A0 45    JZ    0x184D
    1809: 3D 03 00 CMP   [X+3],0x0
    180C: B0 06    JNZ   0x1813
    180E: 3D 04 7E CMP   [X+4],0x7E
    1811: A0 E7    JZ    0x18F9
    1813: 81 B6    JMP   0x19CA
(0618) 			case 0x59:	// Right Shift
(0619) 				shiftstatus |= 0x01;
    1815: 62 D0 00 MOV   REG[0xD0],0x0
    1818: 2E 4F 01 OR    [0x4F],0x1
(0620) 				ShiftDown = 1;
    181B: 62 D0 00 MOV   REG[0xD0],0x0
    181E: 55 5C 01 MOV   [ShiftDown],0x1
(0621) 				break;
    1821: 86 55    JMP   0x1E77
(0622) 			case 0x12:	// Left Shift
(0623) 				shiftstatus |= 0x02;
    1823: 62 D0 00 MOV   REG[0xD0],0x0
    1826: 2E 4F 02 OR    [0x4F],0x2
(0624) 				ShiftDown = 1;
    1829: 62 D0 00 MOV   REG[0xD0],0x0
    182C: 55 5C 01 MOV   [ShiftDown],0x1
(0625) 				break;
    182F: 86 47    JMP   0x1E77
(0626) 			case 0x14:	// Left Control
(0627) 				ctrlstatus |= 0x02;
    1831: 62 D0 00 MOV   REG[0xD0],0x0
    1834: 2E 50 02 OR    [0x50],0x2
(0628) 				CtrlDown = 1;
    1837: 62 D0 00 MOV   REG[0xD0],0x0
    183A: 55 5D 01 MOV   [CtrlDown],0x1
(0629) 				break;
    183D: 86 39    JMP   0x1E77
(0630) 			case 0x11:	// Left Alt
(0631) 				altstatus |= 0x02;
    183F: 62 D0 00 MOV   REG[0xD0],0x0
    1842: 2E 51 02 OR    [0x51],0x2
(0632) 				AltDown = 1;
    1845: 62 D0 00 MOV   REG[0xD0],0x0
    1848: 55 5E 01 MOV   [AltDown],0x1
(0633) 				break;
    184B: 86 2B    JMP   0x1E77
(0634) 			case 0x77:	// Num Lock
(0635) 				NumLock ^= 0x01;
    184D: 62 D0 00 MOV   REG[0xD0],0x0
    1850: 51 59    MOV   A,[NumLock]
    1852: 31 01    XOR   A,0x1
    1854: 53 59    MOV   [NumLock],A
(0636) 				if (NumLock) {
    1856: 3C 59 00 CMP   [NumLock],0x0
    1859: A0 25    JZ    0x187F
(0637) 					status = PS2_Send_Command_Process_Response(0xED);
    185B: 50 ED    MOV   A,0xED
    185D: 08       PUSH  A
    185E: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    1861: 38 FF    ADD   SP,0xFF
    1863: 54 02    MOV   [X+2],A
(0638) 					if (!status) {
    1865: 3D 02 00 CMP   [X+2],0x0
    1868: B6 0E    JNZ   0x1E77
(0639) 						statusLEDs |= 0x02;
    186A: 62 D0 00 MOV   REG[0xD0],0x0
    186D: 2E 52 02 OR    [0x52],0x2
(0640) 						status = PS2_Send_Command_Process_Response(statusLEDs);
    1870: 51 52    MOV   A,[0x52]
    1872: 08       PUSH  A
    1873: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    1876: 38 FF    ADD   SP,0xFF
    1878: 62 D0 00 MOV   REG[0xD0],0x0
    187B: 54 02    MOV   [X+2],A
(0641) 					}
(0642) 				}
    187D: 85 F9    JMP   0x1E77
(0643) 				else {
(0644) 					status = PS2_Send_Command_Process_Response(0xED);
    187F: 50 ED    MOV   A,0xED
    1881: 08       PUSH  A
    1882: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    1885: 38 FF    ADD   SP,0xFF
    1887: 54 02    MOV   [X+2],A
(0645) 					if (!status) {
    1889: 3D 02 00 CMP   [X+2],0x0
    188C: B5 EA    JNZ   0x1E77
(0646) 						statusLEDs &= ~0x02;
    188E: 62 D0 00 MOV   REG[0xD0],0x0
    1891: 26 52 FD AND   [0x52],0xFD
(0647) 						status = PS2_Send_Command_Process_Response(statusLEDs);
    1894: 51 52    MOV   A,[0x52]
    1896: 08       PUSH  A
    1897: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    189A: 38 FF    ADD   SP,0xFF
    189C: 62 D0 00 MOV   REG[0xD0],0x0
    189F: 54 02    MOV   [X+2],A
(0648) 					}
(0649) 				}
(0650) 				break;
    18A1: 85 D5    JMP   0x1E77
(0651) 			case 0x58:	// Caps Lock
(0652) 				//// Send to the keyboard
(0653) 				CapsLock ^= 0x01;
    18A3: 62 D0 00 MOV   REG[0xD0],0x0
    18A6: 51 5A    MOV   A,[CapsLock]
    18A8: 31 01    XOR   A,0x1
    18AA: 53 5A    MOV   [CapsLock],A
(0654) 				if (CapsLock) {
    18AC: 3C 5A 00 CMP   [CapsLock],0x0
    18AF: A0 25    JZ    0x18D5
(0655) 					status = PS2_Send_Command_Process_Response(0xED);
    18B1: 50 ED    MOV   A,0xED
    18B3: 08       PUSH  A
    18B4: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    18B7: 38 FF    ADD   SP,0xFF
    18B9: 54 02    MOV   [X+2],A
(0656) 					if (!status) {
    18BB: 3D 02 00 CMP   [X+2],0x0
    18BE: B5 B8    JNZ   0x1E77
(0657) 						statusLEDs |= 0x04;
    18C0: 62 D0 00 MOV   REG[0xD0],0x0
    18C3: 2E 52 04 OR    [0x52],0x4
(0658) 						status = PS2_Send_Command_Process_Response(statusLEDs);
    18C6: 51 52    MOV   A,[0x52]
    18C8: 08       PUSH  A
    18C9: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    18CC: 38 FF    ADD   SP,0xFF
    18CE: 62 D0 00 MOV   REG[0xD0],0x0
    18D1: 54 02    MOV   [X+2],A
(0659) 					}
(0660) 				}
    18D3: 85 A3    JMP   0x1E77
(0661) 				else {
(0662) 					status = PS2_Send_Command_Process_Response(0xED);
    18D5: 50 ED    MOV   A,0xED
    18D7: 08       PUSH  A
    18D8: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    18DB: 38 FF    ADD   SP,0xFF
    18DD: 54 02    MOV   [X+2],A
(0663) 					if (!status) {
    18DF: 3D 02 00 CMP   [X+2],0x0
    18E2: B5 94    JNZ   0x1E77
(0664) 						statusLEDs &= ~0x04;
    18E4: 62 D0 00 MOV   REG[0xD0],0x0
    18E7: 26 52 FB AND   [0x52],0xFB
(0665) 						status = PS2_Send_Command_Process_Response(statusLEDs);
    18EA: 51 52    MOV   A,[0x52]
    18EC: 08       PUSH  A
    18ED: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    18F0: 38 FF    ADD   SP,0xFF
    18F2: 62 D0 00 MOV   REG[0xD0],0x0
    18F5: 54 02    MOV   [X+2],A
(0666) 					}
(0667) 				}
(0668) 				break;
    18F7: 85 7F    JMP   0x1E77
(0669) 			case 0x7E:	// Scroll Lock
(0670) 				//// Send to the keyboard
(0671) 				ScrollLock ^= 0x01;
    18F9: 62 D0 00 MOV   REG[0xD0],0x0
    18FC: 51 64    MOV   A,[ScrollLock]
    18FE: 31 01    XOR   A,0x1
    1900: 53 64    MOV   [ScrollLock],A
(0672) 				if (ScrollLock) {
    1902: 3C 64 00 CMP   [ScrollLock],0x0
    1905: A0 25    JZ    0x192B
(0673) 					status = PS2_Send_Command_Process_Response(0xED);
    1907: 50 ED    MOV   A,0xED
    1909: 08       PUSH  A
    190A: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    190D: 38 FF    ADD   SP,0xFF
    190F: 54 02    MOV   [X+2],A
(0674) 					if (!status) {
    1911: 3D 02 00 CMP   [X+2],0x0
    1914: B5 62    JNZ   0x1E77
(0675) 						statusLEDs |= 0x01;
    1916: 62 D0 00 MOV   REG[0xD0],0x0
    1919: 2E 52 01 OR    [0x52],0x1
(0676) 						status = PS2_Send_Command_Process_Response(statusLEDs);
    191C: 51 52    MOV   A,[0x52]
    191E: 08       PUSH  A
    191F: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    1922: 38 FF    ADD   SP,0xFF
    1924: 62 D0 00 MOV   REG[0xD0],0x0
    1927: 54 02    MOV   [X+2],A
(0677) 					}
(0678) 				}
    1929: 85 4D    JMP   0x1E77
(0679) 				else {
(0680) 					status = PS2_Send_Command_Process_Response(0xED);
    192B: 50 ED    MOV   A,0xED
    192D: 08       PUSH  A
    192E: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    1931: 38 FF    ADD   SP,0xFF
    1933: 54 02    MOV   [X+2],A
(0681) 					if (!status) {
    1935: 3D 02 00 CMP   [X+2],0x0
    1938: B5 3E    JNZ   0x1E77
(0682) 						statusLEDs &= ~0x01;
    193A: 62 D0 00 MOV   REG[0xD0],0x0
    193D: 26 52 FE AND   [0x52],0xFE
(0683) 						status = PS2_Send_Command_Process_Response(statusLEDs);
    1940: 51 52    MOV   A,[0x52]
    1942: 08       PUSH  A
    1943: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    1946: 38 FF    ADD   SP,0xFF
    1948: 62 D0 00 MOV   REG[0xD0],0x0
    194B: 54 02    MOV   [X+2],A
(0684) 					}
(0685) 				}
(0686) 				break;
    194D: 85 29    JMP   0x1E77
(0687) 			case 0x05:	// F1 - Dim the LED
(0688) 				if (brightindex > 32) {
    194F: 62 D0 00 MOV   REG[0xD0],0x0
    1952: 50 20    MOV   A,0x20
    1954: 3A 55    CMP   A,[0x55]
    1956: D0 13    JNC   0x196A
(0689) 					brightindex -= 32;
    1958: 62 D0 00 MOV   REG[0xD0],0x0
    195B: 51 55    MOV   A,[0x55]
    195D: 11 20    SUB   A,0x20
    195F: 53 55    MOV   [0x55],A
(0690) 					PWM8LED_WritePulseWidth(brightindex);
    1961: 10       PUSH  X
    1962: 51 55    MOV   A,[0x55]
    1964: 7C 0A ED LCALL _PWM8LED_WritePulseWidth
    1967: 20       POP   X
(0691) 				}
    1968: 85 0E    JMP   0x1E77
(0692) 				else if (brightindex <= 32 && brightindex != 0){
    196A: 62 D0 00 MOV   REG[0xD0],0x0
    196D: 50 20    MOV   A,0x20
    196F: 3A 55    CMP   A,[0x55]
    1971: C5 05    JC    0x1E77
    1973: 62 D0 00 MOV   REG[0xD0],0x0
    1976: 3C 55 00 CMP   [0x55],0x0
    1979: A4 FD    JZ    0x1E77
(0693) 					brightindex = 0;
    197B: 55 55 00 MOV   [0x55],0x0
(0694) 					PWM8LED_Stop();
    197E: 10       PUSH  X
    197F: 7C 0A E6 LCALL _PWM8LED_Stop
    1982: 20       POP   X
(0695) 				}
(0696) 				break;
    1983: 84 F3    JMP   0x1E77
(0697) 			case 0x06:	// F2 - Brighten the LED
(0698) 				if (brightindex == 0) {
    1985: 62 D0 00 MOV   REG[0xD0],0x0
    1988: 3C 55 00 CMP   [0x55],0x0
    198B: B0 10    JNZ   0x199C
(0699) 					brightindex += 32;
    198D: 06 55 20 ADD   [0x55],0x20
(0700) 					PWM8LED_WritePulseWidth(brightindex);
    1990: 10       PUSH  X
    1991: 51 55    MOV   A,[0x55]
    1993: 7C 0A ED LCALL _PWM8LED_WritePulseWidth
(0701) 					PWM8LED_Start();
    1996: 7C 0A E2 LCALL _PWM8LED_Start
    1999: 20       POP   X
(0702) 				}
    199A: 84 DC    JMP   0x1E77
(0703) 				else if (brightindex < (255 - 32)) {
    199C: 62 D0 00 MOV   REG[0xD0],0x0
    199F: 3C 55 DF CMP   [0x55],0xDF
    19A2: D0 10    JNC   0x19B3
(0704) 					brightindex += 32; 
    19A4: 62 D0 00 MOV   REG[0xD0],0x0
    19A7: 06 55 20 ADD   [0x55],0x20
(0705) 					PWM8LED_WritePulseWidth(brightindex);
    19AA: 10       PUSH  X
    19AB: 51 55    MOV   A,[0x55]
    19AD: 7C 0A ED LCALL _PWM8LED_WritePulseWidth
    19B0: 20       POP   X
(0706) 				}
    19B1: 84 C5    JMP   0x1E77
(0707) 				else if (brightindex < 255){
    19B3: 62 D0 00 MOV   REG[0xD0],0x0
    19B6: 3C 55 FF CMP   [0x55],0xFF
    19B9: D4 BD    JNC   0x1E77
(0708) 					brightindex = 255; 
    19BB: 62 D0 00 MOV   REG[0xD0],0x0
    19BE: 55 55 FF MOV   [0x55],0xFF
(0709) 					PWM8LED_WritePulseWidth(brightindex);
    19C1: 10       PUSH  X
    19C2: 51 55    MOV   A,[0x55]
    19C4: 7C 0A ED LCALL _PWM8LED_WritePulseWidth
    19C7: 20       POP   X
(0710) 				}
(0711) 				break;
    19C8: 84 AE    JMP   0x1E77
(0712) 			//// Any single-byte scan codes not handled specially in the above switch statement
(0713) 			//// are handled here:
(0714) 			default:
(0715) 				if (PianoMode) {
    19CA: 62 D0 00 MOV   REG[0xD0],0x0
    19CD: 3C 5F 00 CMP   [PianoMode],0x0
    19D0: A4 A6    JZ    0x1E77
(0716) 					i = 0;
    19D2: 56 01 00 MOV   [X+1],0x0
    19D5: 56 00 00 MOV   [X+0],0x0
    19D8: 80 06    JMP   0x19DF
(0717) 					while((PianoScancode[i][0] != scancode) && (PianoScancode[i][0] != 0)) {
(0718) 						i++;
    19DA: 77 01    INC   [X+1]
    19DC: 0F 00 00 ADC   [X+0],0x0
(0719) 					}
    19DF: 62 D0 00 MOV   REG[0xD0],0x0
    19E2: 52 00    MOV   A,[X+0]
    19E4: 08       PUSH  A
    19E5: 52 01    MOV   A,[X+1]
    19E7: 08       PUSH  A
    19E8: 50 00    MOV   A,0x0
    19EA: 08       PUSH  A
    19EB: 50 06    MOV   A,0x6
    19ED: 08       PUSH  A
    19EE: 7C 31 7A LCALL 0x317A
    19F1: 38 FC    ADD   SP,0xFC
    19F3: 51 16    MOV   A,[__rX]
    19F5: 53 21    MOV   [__r1],A
    19F7: 51 15    MOV   A,[__rY]
    19F9: 53 22    MOV   [__r0],A
    19FB: 06 21 91 ADD   [__r1],0x91
    19FE: 0E 22 02 ADC   [__r0],0x2
    1A01: 51 22    MOV   A,[__r0]
    1A03: 10       PUSH  X
    1A04: 58 21    MOV   X,[__r1]
    1A06: 08       PUSH  A
    1A07: 28       ROMX  
    1A08: 53 22    MOV   [__r0],A
    1A0A: 18       POP   A
    1A0B: 75       INC   X
    1A0C: 09 00    ADC   A,0x0
    1A0E: 28       ROMX  
    1A0F: 53 21    MOV   [__r1],A
    1A11: 20       POP   X
    1A12: 52 FC    MOV   A,[X-4]
    1A14: 53 1F    MOV   [__r3],A
    1A16: 55 20 00 MOV   [__r2],0x0
    1A19: 51 22    MOV   A,[__r0]
    1A1B: 3A 20    CMP   A,[__r2]
    1A1D: B0 07    JNZ   0x1A25
    1A1F: 51 21    MOV   A,[__r1]
    1A21: 3A 1F    CMP   A,[__r3]
    1A23: A0 0E    JZ    0x1A32
    1A25: 62 D0 00 MOV   REG[0xD0],0x0
    1A28: 3C 22 00 CMP   [__r0],0x0
    1A2B: BF AE    JNZ   0x19DA
    1A2D: 3C 21 00 CMP   [__r1],0x0
    1A30: BF A9    JNZ   0x19DA
(0720) 					if (PianoScancode[i][0] > 0) {
    1A32: 62 D0 00 MOV   REG[0xD0],0x0
    1A35: 52 00    MOV   A,[X+0]
    1A37: 08       PUSH  A
    1A38: 52 01    MOV   A,[X+1]
    1A3A: 08       PUSH  A
    1A3B: 50 00    MOV   A,0x0
    1A3D: 08       PUSH  A
    1A3E: 50 06    MOV   A,0x6
    1A40: 08       PUSH  A
    1A41: 7C 31 7A LCALL 0x317A
    1A44: 38 FC    ADD   SP,0xFC
    1A46: 51 16    MOV   A,[__rX]
    1A48: 53 21    MOV   [__r1],A
    1A4A: 51 15    MOV   A,[__rY]
    1A4C: 53 22    MOV   [__r0],A
    1A4E: 06 21 91 ADD   [__r1],0x91
    1A51: 0E 22 02 ADC   [__r0],0x2
    1A54: 51 22    MOV   A,[__r0]
    1A56: 10       PUSH  X
    1A57: 58 21    MOV   X,[__r1]
    1A59: 08       PUSH  A
    1A5A: 28       ROMX  
    1A5B: 53 22    MOV   [__r0],A
    1A5D: 18       POP   A
    1A5E: 75       INC   X
    1A5F: 09 00    ADC   A,0x0
    1A61: 28       ROMX  
    1A62: 20       POP   X
    1A63: 3C 22 00 CMP   [__r0],0x0
    1A66: B0 05    JNZ   0x1A6C
    1A68: 39 00    CMP   A,0x0
    1A6A: A4 0C    JZ    0x1E77
(0721) 						switch ((int)floor(i / 8))
    1A6C: 62 D0 00 MOV   REG[0xD0],0x0
    1A6F: 50 00    MOV   A,0x0
    1A71: 08       PUSH  A
    1A72: 50 08    MOV   A,0x8
    1A74: 08       PUSH  A
    1A75: 52 00    MOV   A,[X+0]
    1A77: 08       PUSH  A
    1A78: 52 01    MOV   A,[X+1]
    1A7A: 08       PUSH  A
    1A7B: 7C 2F BD LCALL 0x2FBD
    1A7E: 18       POP   A
    1A7F: 53 21    MOV   [__r1],A
    1A81: 18       POP   A
    1A82: 53 22    MOV   [__r0],A
    1A84: 38 FE    ADD   SP,0xFE
    1A86: 51 21    MOV   A,[__r1]
    1A88: 53 1F    MOV   [__r3],A
    1A8A: 51 22    MOV   A,[__r0]
    1A8C: 53 20    MOV   [__r2],A
    1A8E: 47 20 80 TST   [__r2],0x80
    1A91: A0 09    JZ    0x1A9B
    1A93: 55 21 FF MOV   [__r1],0xFF
    1A96: 55 22 FF MOV   [__r0],0xFF
    1A99: 80 0A    JMP   0x1AA4
    1A9B: 62 D0 00 MOV   REG[0xD0],0x0
    1A9E: 55 21 00 MOV   [__r1],0x0
    1AA1: 55 22 00 MOV   [__r0],0x0
    1AA4: 62 D0 00 MOV   REG[0xD0],0x0
    1AA7: 51 22    MOV   A,[__r0]
    1AA9: 08       PUSH  A
    1AAA: 51 21    MOV   A,[__r1]
    1AAC: 08       PUSH  A
    1AAD: 51 20    MOV   A,[__r2]
    1AAF: 08       PUSH  A
    1AB0: 51 1F    MOV   A,[__r3]
    1AB2: 08       PUSH  A
    1AB3: 7C 31 0F LCALL 0x310F
    1AB6: 18       POP   A
    1AB7: 53 1F    MOV   [__r3],A
    1AB9: 18       POP   A
    1ABA: 53 20    MOV   [__r2],A
    1ABC: 18       POP   A
    1ABD: 53 21    MOV   [__r1],A
    1ABF: 18       POP   A
    1AC0: 08       PUSH  A
    1AC1: 51 21    MOV   A,[__r1]
    1AC3: 08       PUSH  A
    1AC4: 51 20    MOV   A,[__r2]
    1AC6: 08       PUSH  A
    1AC7: 51 1F    MOV   A,[__r3]
    1AC9: 08       PUSH  A
    1ACA: 7C 31 B8 LCALL _floorf
    1ACD: 38 FC    ADD   SP,0xFC
    1ACF: 62 D0 00 MOV   REG[0xD0],0x0
    1AD2: 51 22    MOV   A,[__r0]
    1AD4: 08       PUSH  A
    1AD5: 51 21    MOV   A,[__r1]
    1AD7: 08       PUSH  A
    1AD8: 51 20    MOV   A,[__r2]
    1ADA: 08       PUSH  A
    1ADB: 51 1F    MOV   A,[__r3]
    1ADD: 08       PUSH  A
    1ADE: 7C 30 0B LCALL 0x300B
    1AE1: 18       POP   A
    1AE2: 54 06    MOV   [X+6],A
    1AE4: 18       POP   A
    1AE5: 54 05    MOV   [X+5],A
    1AE7: 38 FE    ADD   SP,0xFE
    1AE9: 3D 05 00 CMP   [X+5],0x0
    1AEC: B0 06    JNZ   0x1AF3
    1AEE: 3D 06 00 CMP   [X+6],0x0
    1AF1: A0 17    JZ    0x1B09
    1AF3: 3D 05 00 CMP   [X+5],0x0
    1AF6: B0 06    JNZ   0x1AFD
    1AF8: 3D 06 01 CMP   [X+6],0x1
    1AFB: A0 8A    JZ    0x1B86
    1AFD: 3D 05 00 CMP   [X+5],0x0
    1B00: B0 06    JNZ   0x1B07
    1B02: 3D 06 02 CMP   [X+6],0x2
    1B05: A0 FD    JZ    0x1C03
    1B07: 81 76    JMP   0x1C7E
(0722) 						{
(0723) 							case 0:
(0724) 								PWMPiano1_WritePeriod(PianoScancode[i][1]);
    1B09: 62 D0 00 MOV   REG[0xD0],0x0
    1B0C: 52 00    MOV   A,[X+0]
    1B0E: 08       PUSH  A
    1B0F: 52 01    MOV   A,[X+1]
    1B11: 08       PUSH  A
    1B12: 50 00    MOV   A,0x0
    1B14: 08       PUSH  A
    1B15: 50 06    MOV   A,0x6
    1B17: 08       PUSH  A
    1B18: 7C 31 7A LCALL 0x317A
    1B1B: 38 FC    ADD   SP,0xFC
    1B1D: 51 16    MOV   A,[__rX]
    1B1F: 53 21    MOV   [__r1],A
    1B21: 51 15    MOV   A,[__rY]
    1B23: 53 22    MOV   [__r0],A
    1B25: 06 21 93 ADD   [__r1],0x93
    1B28: 0E 22 02 ADC   [__r0],0x2
    1B2B: 51 22    MOV   A,[__r0]
    1B2D: 10       PUSH  X
    1B2E: 58 21    MOV   X,[__r1]
    1B30: 08       PUSH  A
    1B31: 28       ROMX  
    1B32: 53 22    MOV   [__r0],A
    1B34: 18       POP   A
    1B35: 75       INC   X
    1B36: 09 00    ADC   A,0x0
    1B38: 28       ROMX  
    1B39: 53 21    MOV   [__r1],A
    1B3B: 51 22    MOV   A,[__r0]
    1B3D: 08       PUSH  A
    1B3E: 51 21    MOV   A,[__r1]
    1B40: 20       POP   X
    1B41: 7C 0A 8D LCALL _PWMPiano1_WritePeriod
    1B44: 20       POP   X
(0725) 								PWMPiano1_WritePulseWidth(PianoScancode[i][2]);
    1B45: 62 D0 00 MOV   REG[0xD0],0x0
    1B48: 52 00    MOV   A,[X+0]
    1B4A: 08       PUSH  A
    1B4B: 52 01    MOV   A,[X+1]
    1B4D: 08       PUSH  A
    1B4E: 50 00    MOV   A,0x0
    1B50: 08       PUSH  A
    1B51: 50 06    MOV   A,0x6
    1B53: 08       PUSH  A
    1B54: 7C 31 7A LCALL 0x317A
    1B57: 38 FC    ADD   SP,0xFC
    1B59: 51 16    MOV   A,[__rX]
    1B5B: 53 21    MOV   [__r1],A
    1B5D: 51 15    MOV   A,[__rY]
    1B5F: 53 22    MOV   [__r0],A
    1B61: 06 21 95 ADD   [__r1],0x95
    1B64: 0E 22 02 ADC   [__r0],0x2
    1B67: 51 22    MOV   A,[__r0]
    1B69: 10       PUSH  X
    1B6A: 58 21    MOV   X,[__r1]
    1B6C: 08       PUSH  A
    1B6D: 28       ROMX  
    1B6E: 53 22    MOV   [__r0],A
    1B70: 18       POP   A
    1B71: 75       INC   X
    1B72: 09 00    ADC   A,0x0
    1B74: 28       ROMX  
    1B75: 53 21    MOV   [__r1],A
    1B77: 51 22    MOV   A,[__r0]
    1B79: 08       PUSH  A
    1B7A: 51 21    MOV   A,[__r1]
    1B7C: 20       POP   X
    1B7D: 7C 0A 93 LCALL _PWMPiano1_WritePulseWidth
(0726) 								PWMPiano1_Start();
    1B80: 7C 0A 85 LCALL _PWMPiano1_Start
    1B83: 20       POP   X
(0727) 								break;
    1B84: 80 F9    JMP   0x1C7E
(0728) 								
(0729) 							case 1:
(0730) 								PWMPiano2_WritePeriod(PianoScancode[i][1]);
    1B86: 62 D0 00 MOV   REG[0xD0],0x0
    1B89: 52 00    MOV   A,[X+0]
    1B8B: 08       PUSH  A
    1B8C: 52 01    MOV   A,[X+1]
    1B8E: 08       PUSH  A
    1B8F: 50 00    MOV   A,0x0
    1B91: 08       PUSH  A
    1B92: 50 06    MOV   A,0x6
    1B94: 08       PUSH  A
    1B95: 7C 31 7A LCALL 0x317A
    1B98: 38 FC    ADD   SP,0xFC
    1B9A: 51 16    MOV   A,[__rX]
    1B9C: 53 21    MOV   [__r1],A
    1B9E: 51 15    MOV   A,[__rY]
    1BA0: 53 22    MOV   [__r0],A
    1BA2: 06 21 93 ADD   [__r1],0x93
    1BA5: 0E 22 02 ADC   [__r0],0x2
    1BA8: 51 22    MOV   A,[__r0]
    1BAA: 10       PUSH  X
    1BAB: 58 21    MOV   X,[__r1]
    1BAD: 08       PUSH  A
    1BAE: 28       ROMX  
    1BAF: 53 22    MOV   [__r0],A
    1BB1: 18       POP   A
    1BB2: 75       INC   X
    1BB3: 09 00    ADC   A,0x0
    1BB5: 28       ROMX  
    1BB6: 53 21    MOV   [__r1],A
    1BB8: 51 22    MOV   A,[__r0]
    1BBA: 08       PUSH  A
    1BBB: 51 21    MOV   A,[__r1]
    1BBD: 20       POP   X
    1BBE: 7C 0A 30 LCALL _PWMPiano2_WritePeriod
    1BC1: 20       POP   X
(0731) 								PWMPiano2_WritePulseWidth(PianoScancode[i][2]);
    1BC2: 62 D0 00 MOV   REG[0xD0],0x0
    1BC5: 52 00    MOV   A,[X+0]
    1BC7: 08       PUSH  A
    1BC8: 52 01    MOV   A,[X+1]
    1BCA: 08       PUSH  A
    1BCB: 50 00    MOV   A,0x0
    1BCD: 08       PUSH  A
    1BCE: 50 06    MOV   A,0x6
    1BD0: 08       PUSH  A
    1BD1: 7C 31 7A LCALL 0x317A
    1BD4: 38 FC    ADD   SP,0xFC
    1BD6: 51 16    MOV   A,[__rX]
    1BD8: 53 21    MOV   [__r1],A
    1BDA: 51 15    MOV   A,[__rY]
    1BDC: 53 22    MOV   [__r0],A
    1BDE: 06 21 95 ADD   [__r1],0x95
    1BE1: 0E 22 02 ADC   [__r0],0x2
    1BE4: 51 22    MOV   A,[__r0]
    1BE6: 10       PUSH  X
    1BE7: 58 21    MOV   X,[__r1]
    1BE9: 08       PUSH  A
    1BEA: 28       ROMX  
    1BEB: 53 22    MOV   [__r0],A
    1BED: 18       POP   A
    1BEE: 75       INC   X
    1BEF: 09 00    ADC   A,0x0
    1BF1: 28       ROMX  
    1BF2: 53 21    MOV   [__r1],A
    1BF4: 51 22    MOV   A,[__r0]
    1BF6: 08       PUSH  A
    1BF7: 51 21    MOV   A,[__r1]
    1BF9: 20       POP   X
    1BFA: 7C 0A 36 LCALL _PWMPiano2_WritePulseWidth
(0732) 								PWMPiano2_Start();
    1BFD: 7C 0A 28 LCALL _PWMPiano2_Start
    1C00: 20       POP   X
(0733) 								break;
    1C01: 80 7C    JMP   0x1C7E
(0734) 								
(0735) 							case 2:
(0736) 								PWMPiano3_WritePeriod(PianoScancode[i][1]);
    1C03: 62 D0 00 MOV   REG[0xD0],0x0
    1C06: 52 00    MOV   A,[X+0]
    1C08: 08       PUSH  A
    1C09: 52 01    MOV   A,[X+1]
    1C0B: 08       PUSH  A
    1C0C: 50 00    MOV   A,0x0
    1C0E: 08       PUSH  A
    1C0F: 50 06    MOV   A,0x6
    1C11: 08       PUSH  A
    1C12: 7C 31 7A LCALL 0x317A
    1C15: 38 FC    ADD   SP,0xFC
    1C17: 51 16    MOV   A,[__rX]
    1C19: 53 21    MOV   [__r1],A
    1C1B: 51 15    MOV   A,[__rY]
    1C1D: 53 22    MOV   [__r0],A
    1C1F: 06 21 93 ADD   [__r1],0x93
    1C22: 0E 22 02 ADC   [__r0],0x2
    1C25: 51 22    MOV   A,[__r0]
    1C27: 10       PUSH  X
    1C28: 58 21    MOV   X,[__r1]
    1C2A: 08       PUSH  A
    1C2B: 28       ROMX  
    1C2C: 53 22    MOV   [__r0],A
    1C2E: 18       POP   A
    1C2F: 75       INC   X
    1C30: 09 00    ADC   A,0x0
    1C32: 28       ROMX  
    1C33: 53 21    MOV   [__r1],A
    1C35: 51 22    MOV   A,[__r0]
    1C37: 08       PUSH  A
    1C38: 51 21    MOV   A,[__r1]
    1C3A: 20       POP   X
    1C3B: 7C 09 D3 LCALL _PWMPiano3_WritePeriod
    1C3E: 20       POP   X
(0737) 								PWMPiano3_WritePulseWidth(PianoScancode[i][2]);
    1C3F: 62 D0 00 MOV   REG[0xD0],0x0
    1C42: 52 00    MOV   A,[X+0]
    1C44: 08       PUSH  A
    1C45: 52 01    MOV   A,[X+1]
    1C47: 08       PUSH  A
    1C48: 50 00    MOV   A,0x0
    1C4A: 08       PUSH  A
    1C4B: 50 06    MOV   A,0x6
    1C4D: 08       PUSH  A
    1C4E: 7C 31 7A LCALL 0x317A
    1C51: 38 FC    ADD   SP,0xFC
    1C53: 51 16    MOV   A,[__rX]
    1C55: 53 21    MOV   [__r1],A
    1C57: 51 15    MOV   A,[__rY]
    1C59: 53 22    MOV   [__r0],A
    1C5B: 06 21 95 ADD   [__r1],0x95
    1C5E: 0E 22 02 ADC   [__r0],0x2
    1C61: 51 22    MOV   A,[__r0]
    1C63: 10       PUSH  X
    1C64: 58 21    MOV   X,[__r1]
    1C66: 08       PUSH  A
    1C67: 28       ROMX  
    1C68: 53 22    MOV   [__r0],A
    1C6A: 18       POP   A
    1C6B: 75       INC   X
    1C6C: 09 00    ADC   A,0x0
    1C6E: 28       ROMX  
    1C6F: 53 21    MOV   [__r1],A
    1C71: 51 22    MOV   A,[__r0]
    1C73: 08       PUSH  A
    1C74: 51 21    MOV   A,[__r1]
    1C76: 20       POP   X
    1C77: 7C 09 D9 LCALL _PWMPiano3_WritePulseWidth
(0738) 								PWMPiano3_Start();
    1C7A: 7C 09 CB LCALL _PWMPiano3_Start
    1C7D: 20       POP   X
(0739) 								break;
(0740) 						}
(0741) 						pianoPeriod = PianoScancode[i][1];
    1C7E: 62 D0 00 MOV   REG[0xD0],0x0
    1C81: 52 00    MOV   A,[X+0]
    1C83: 08       PUSH  A
    1C84: 52 01    MOV   A,[X+1]
    1C86: 08       PUSH  A
    1C87: 50 00    MOV   A,0x0
    1C89: 08       PUSH  A
    1C8A: 50 06    MOV   A,0x6
    1C8C: 08       PUSH  A
    1C8D: 7C 31 7A LCALL 0x317A
    1C90: 38 FC    ADD   SP,0xFC
    1C92: 51 16    MOV   A,[__rX]
    1C94: 53 21    MOV   [__r1],A
    1C96: 51 15    MOV   A,[__rY]
    1C98: 53 22    MOV   [__r0],A
    1C9A: 06 21 93 ADD   [__r1],0x93
    1C9D: 0E 22 02 ADC   [__r0],0x2
    1CA0: 51 22    MOV   A,[__r0]
    1CA2: 10       PUSH  X
    1CA3: 58 21    MOV   X,[__r1]
    1CA5: 08       PUSH  A
    1CA6: 28       ROMX  
    1CA7: 53 22    MOV   [__r0],A
    1CA9: 18       POP   A
    1CAA: 75       INC   X
    1CAB: 09 00    ADC   A,0x0
    1CAD: 28       ROMX  
    1CAE: 20       POP   X
    1CAF: 08       PUSH  A
    1CB0: 51 22    MOV   A,[__r0]
    1CB2: 62 D0 00 MOV   REG[0xD0],0x0
    1CB5: 53 4D    MOV   [0x4D],A
    1CB7: 18       POP   A
    1CB8: 53 4E    MOV   [0x4E],A
(0742) 					}
(0743) 				}
(0744) 			}
(0745) 			return;
    1CBA: 81 BC    JMP   0x1E77
(0746) 		}
(0747) 		//// Things to do when one of the single byte "make" scan code keys is released
(0748) 		if (codetype & KEY_BREAK) {
    1CBC: 48 FB 02 TST   [X-5],0x2
    1CBF: A1 B7    JZ    0x1E77
(0749) 			switch(scancode) {
    1CC1: 52 FC    MOV   A,[X-4]
    1CC3: 54 04    MOV   [X+4],A
    1CC5: 56 03 00 MOV   [X+3],0x0
    1CC8: 3D 03 00 CMP   [X+3],0x0
    1CCB: B0 06    JNZ   0x1CD2
    1CCD: 3D 04 11 CMP   [X+4],0x11
    1CD0: A0 64    JZ    0x1D35
    1CD2: 3D 03 00 CMP   [X+3],0x0
    1CD5: B0 06    JNZ   0x1CDC
    1CD7: 3D 04 12 CMP   [X+4],0x12
    1CDA: A0 36    JZ    0x1D11
    1CDC: 3D 03 00 CMP   [X+3],0x0
    1CDF: B0 06    JNZ   0x1CE6
    1CE1: 3D 04 14 CMP   [X+4],0x14
    1CE4: A0 3D    JZ    0x1D22
    1CE6: 52 04    MOV   A,[X+4]
    1CE8: 11 11    SUB   A,0x11
    1CEA: 52 03    MOV   A,[X+3]
    1CEC: 31 80    XOR   A,0x80
    1CEE: 19 80    SBB   A,0x80
    1CF0: C0 6E    JC    0x1D5F
    1CF2: 3D 03 00 CMP   [X+3],0x0
    1CF5: B0 06    JNZ   0x1CFC
    1CF7: 3D 04 59 CMP   [X+4],0x59
    1CFA: A0 03    JZ    0x1CFE
    1CFC: 80 62    JMP   0x1D5F
(0750) 			case 0x59:	// Right Shift
(0751) 				shiftstatus &= ~0x01;
    1CFE: 62 D0 00 MOV   REG[0xD0],0x0
    1D01: 26 4F FE AND   [0x4F],0xFE
(0752) 				if (!shiftstatus) ShiftDown = 0;
    1D04: 3C 4F 00 CMP   [0x4F],0x0
    1D07: B1 6F    JNZ   0x1E77
    1D09: 62 D0 00 MOV   REG[0xD0],0x0
    1D0C: 55 5C 00 MOV   [ShiftDown],0x0
(0753) 				break;
    1D0F: 81 67    JMP   0x1E77
(0754) 			case 0x12:	// Left Shift
(0755) 				shiftstatus &= ~0x02;
    1D11: 62 D0 00 MOV   REG[0xD0],0x0
    1D14: 26 4F FD AND   [0x4F],0xFD
(0756) 				if (!shiftstatus) ShiftDown = 0;
    1D17: 3C 4F 00 CMP   [0x4F],0x0
    1D1A: B0 07    JNZ   0x1D22
    1D1C: 62 D0 00 MOV   REG[0xD0],0x0
    1D1F: 55 5C 00 MOV   [ShiftDown],0x0
(0757) 			case 0x14:	// Left Control
(0758) 				ctrlstatus &= ~0x02;
    1D22: 62 D0 00 MOV   REG[0xD0],0x0
    1D25: 26 50 FD AND   [0x50],0xFD
(0759) 				if (!ctrlstatus) CtrlDown = 0;
    1D28: 3C 50 00 CMP   [0x50],0x0
    1D2B: B1 4B    JNZ   0x1E77
    1D2D: 62 D0 00 MOV   REG[0xD0],0x0
    1D30: 55 5D 00 MOV   [CtrlDown],0x0
(0760) 				break;
    1D33: 81 43    JMP   0x1E77
(0761) 			case 0x11:	// Left Alt
(0762) 				altstatus &= ~0x02;
    1D35: 62 D0 00 MOV   REG[0xD0],0x0
    1D38: 26 51 FD AND   [0x51],0xFD
(0763) 				if (!altstatus) 
    1D3B: 3C 51 00 CMP   [0x51],0x0
    1D3E: B1 38    JNZ   0x1E77
(0764) 				{	
(0765) 					KeyboardAlt(altStr, altIndex);
    1D40: 62 D0 00 MOV   REG[0xD0],0x0
    1D43: 51 54    MOV   A,[0x54]
    1D45: 08       PUSH  A
    1D46: 50 00    MOV   A,0x0
    1D48: 08       PUSH  A
    1D49: 50 3B    MOV   A,0x3B
    1D4B: 08       PUSH  A
    1D4C: 7C 13 85 LCALL _KeyboardAlt
    1D4F: 38 FD    ADD   SP,0xFD
(0766) 					AltDown = 0;
    1D51: 62 D0 00 MOV   REG[0xD0],0x0
    1D54: 55 5E 00 MOV   [AltDown],0x0
(0767) 					altIndex = 0;
    1D57: 62 D0 00 MOV   REG[0xD0],0x0
    1D5A: 55 54 00 MOV   [0x54],0x0
(0768) 				}
(0769) 				break;
    1D5D: 81 19    JMP   0x1E77
(0770) 			//// Any single-byte scan codes not handled specially in the above switch statement
(0771) 			//// are handled here:
(0772) 			default:
(0773) 				if (PianoMode) {
    1D5F: 62 D0 00 MOV   REG[0xD0],0x0
    1D62: 3C 5F 00 CMP   [PianoMode],0x0
    1D65: A1 11    JZ    0x1E77
(0774) 					i = 0;
    1D67: 56 01 00 MOV   [X+1],0x0
    1D6A: 56 00 00 MOV   [X+0],0x0
    1D6D: 80 06    JMP   0x1D74
(0775) 					while((PianoScancode[i][0] != scancode) && (PianoScancode[i][0] != 0)) {
(0776) 						i++;
    1D6F: 77 01    INC   [X+1]
    1D71: 0F 00 00 ADC   [X+0],0x0
(0777) 					}
    1D74: 62 D0 00 MOV   REG[0xD0],0x0
    1D77: 52 00    MOV   A,[X+0]
    1D79: 08       PUSH  A
    1D7A: 52 01    MOV   A,[X+1]
    1D7C: 08       PUSH  A
    1D7D: 50 00    MOV   A,0x0
    1D7F: 08       PUSH  A
    1D80: 50 06    MOV   A,0x6
    1D82: 08       PUSH  A
    1D83: 7C 31 7A LCALL 0x317A
    1D86: 38 FC    ADD   SP,0xFC
    1D88: 51 16    MOV   A,[__rX]
    1D8A: 53 21    MOV   [__r1],A
    1D8C: 51 15    MOV   A,[__rY]
    1D8E: 53 22    MOV   [__r0],A
    1D90: 06 21 91 ADD   [__r1],0x91
    1D93: 0E 22 02 ADC   [__r0],0x2
    1D96: 51 22    MOV   A,[__r0]
    1D98: 10       PUSH  X
    1D99: 58 21    MOV   X,[__r1]
    1D9B: 08       PUSH  A
    1D9C: 28       ROMX  
    1D9D: 53 22    MOV   [__r0],A
    1D9F: 18       POP   A
    1DA0: 75       INC   X
    1DA1: 09 00    ADC   A,0x0
    1DA3: 28       ROMX  
    1DA4: 53 21    MOV   [__r1],A
    1DA6: 20       POP   X
    1DA7: 52 FC    MOV   A,[X-4]
    1DA9: 53 1F    MOV   [__r3],A
    1DAB: 55 20 00 MOV   [__r2],0x0
    1DAE: 51 22    MOV   A,[__r0]
    1DB0: 3A 20    CMP   A,[__r2]
    1DB2: B0 07    JNZ   0x1DBA
    1DB4: 51 21    MOV   A,[__r1]
    1DB6: 3A 1F    CMP   A,[__r3]
    1DB8: A0 0E    JZ    0x1DC7
    1DBA: 62 D0 00 MOV   REG[0xD0],0x0
    1DBD: 3C 22 00 CMP   [__r0],0x0
    1DC0: BF AE    JNZ   0x1D6F
    1DC2: 3C 21 00 CMP   [__r1],0x0
    1DC5: BF A9    JNZ   0x1D6F
(0778) 					switch ((int)floor(i / 8))
    1DC7: 62 D0 00 MOV   REG[0xD0],0x0
    1DCA: 50 00    MOV   A,0x0
    1DCC: 08       PUSH  A
    1DCD: 50 08    MOV   A,0x8
    1DCF: 08       PUSH  A
    1DD0: 52 00    MOV   A,[X+0]
    1DD2: 08       PUSH  A
    1DD3: 52 01    MOV   A,[X+1]
    1DD5: 08       PUSH  A
    1DD6: 7C 2F BD LCALL 0x2FBD
    1DD9: 18       POP   A
    1DDA: 53 21    MOV   [__r1],A
    1DDC: 18       POP   A
    1DDD: 53 22    MOV   [__r0],A
    1DDF: 38 FE    ADD   SP,0xFE
    1DE1: 51 21    MOV   A,[__r1]
    1DE3: 53 1F    MOV   [__r3],A
    1DE5: 51 22    MOV   A,[__r0]
    1DE7: 53 20    MOV   [__r2],A
    1DE9: 47 20 80 TST   [__r2],0x80
    1DEC: A0 09    JZ    0x1DF6
    1DEE: 55 21 FF MOV   [__r1],0xFF
    1DF1: 55 22 FF MOV   [__r0],0xFF
    1DF4: 80 0A    JMP   0x1DFF
    1DF6: 62 D0 00 MOV   REG[0xD0],0x0
    1DF9: 55 21 00 MOV   [__r1],0x0
    1DFC: 55 22 00 MOV   [__r0],0x0
    1DFF: 62 D0 00 MOV   REG[0xD0],0x0
    1E02: 51 22    MOV   A,[__r0]
    1E04: 08       PUSH  A
    1E05: 51 21    MOV   A,[__r1]
    1E07: 08       PUSH  A
    1E08: 51 20    MOV   A,[__r2]
    1E0A: 08       PUSH  A
    1E0B: 51 1F    MOV   A,[__r3]
    1E0D: 08       PUSH  A
    1E0E: 7C 31 0F LCALL 0x310F
    1E11: 18       POP   A
    1E12: 53 1F    MOV   [__r3],A
    1E14: 18       POP   A
    1E15: 53 20    MOV   [__r2],A
    1E17: 18       POP   A
    1E18: 53 21    MOV   [__r1],A
    1E1A: 18       POP   A
    1E1B: 08       PUSH  A
    1E1C: 51 21    MOV   A,[__r1]
    1E1E: 08       PUSH  A
    1E1F: 51 20    MOV   A,[__r2]
    1E21: 08       PUSH  A
    1E22: 51 1F    MOV   A,[__r3]
    1E24: 08       PUSH  A
    1E25: 7C 31 B8 LCALL _floorf
    1E28: 38 FC    ADD   SP,0xFC
    1E2A: 62 D0 00 MOV   REG[0xD0],0x0
    1E2D: 51 22    MOV   A,[__r0]
    1E2F: 08       PUSH  A
    1E30: 51 21    MOV   A,[__r1]
    1E32: 08       PUSH  A
    1E33: 51 20    MOV   A,[__r2]
    1E35: 08       PUSH  A
    1E36: 51 1F    MOV   A,[__r3]
    1E38: 08       PUSH  A
    1E39: 7C 30 0B LCALL 0x300B
    1E3C: 18       POP   A
    1E3D: 54 06    MOV   [X+6],A
    1E3F: 18       POP   A
    1E40: 54 05    MOV   [X+5],A
    1E42: 38 FE    ADD   SP,0xFE
    1E44: 3D 05 00 CMP   [X+5],0x0
    1E47: B0 06    JNZ   0x1E4E
    1E49: 3D 06 00 CMP   [X+6],0x0
    1E4C: A0 17    JZ    0x1E64
    1E4E: 3D 05 00 CMP   [X+5],0x0
    1E51: B0 06    JNZ   0x1E58
    1E53: 3D 06 01 CMP   [X+6],0x1
    1E56: A0 14    JZ    0x1E6B
    1E58: 3D 05 00 CMP   [X+5],0x0
    1E5B: B0 06    JNZ   0x1E62
    1E5D: 3D 06 02 CMP   [X+6],0x2
    1E60: A0 11    JZ    0x1E72
    1E62: 80 14    JMP   0x1E77
(0779) 					{
(0780) 						case 0:
(0781) 							PWMPiano1_Stop();
    1E64: 10       PUSH  X
    1E65: 7C 0A 89 LCALL _PWMPiano1_Stop
    1E68: 20       POP   X
(0782) 							break;
    1E69: 80 0D    JMP   0x1E77
(0783) 							
(0784) 						case 1:
(0785) 							PWMPiano2_Stop();
    1E6B: 10       PUSH  X
    1E6C: 7C 0A 2C LCALL _PWMPiano2_Stop
    1E6F: 20       POP   X
(0786) 							break;
    1E70: 80 06    JMP   0x1E77
(0787) 							
(0788) 						case 2:
(0789) 							PWMPiano3_Stop();
    1E72: 10       PUSH  X
    1E73: 7C 09 CF LCALL _PWMPiano3_Stop
    1E76: 20       POP   X
(0790) 							break;
(0791) 					}
(0792) 				}
(0793) 			}
(0794) 		}
(0795) 	}
(0796) 	return;
    1E77: 38 F9    ADD   SP,0xF9
    1E79: 20       POP   X
    1E7A: 7F       RET   
FILE: C:\Users\Jacob\Desktop\ECE381\PS2BIT~1\PS2BIT~1\main.c
(0001) //-----------------------------------------------------------------------------
(0002) // PS/2 Keyboard Bit-Banging Interface
(0003) //
(0004) // Uses the bit-banging technique to receive PS/2 frames from a PS/2 keyboard
(0005) // and decode them to extract the key scan codes sent from the keyboard.
(0006) //
(0007) // Uses a software state machine to decode the frames and verify that the
(0008) // Start, Parity, and Stop bits inside the frame have the correct values.
(0009) //
(0010) // The bit-banging interface is interrupt-driven and a DigBuf User Module is
(0011) // used to generate interrupts on the falling-edge of the PS/2 clock. The
(0012) // DigBuf ISR contains the frame decoding state machine which sets a global
(0013) // variable to indicate that a valid frame has been decoded and a scan code
(0014) // is ready for processing. In addition, a OneShot User Module is used to
(0015) // reset the state machine if the PS/2 clock line has remained high for 80us.
(0016) // This prevents any glitches on the clock line from causing the state machine
(0017) // to incorrectly start processing the glitch as a frame.
(0018) //
(0019) // Another software state machine is used to decode the keyboard scan codes
(0020) // to indicate which keys have been pressed or released.
(0021) //
(0022) // Raw scan codes read from the keyboard are printed on the LCD display.
(0023) //
(0024) // Scan codes corresponding to printable ASCII characters are sent to the
(0025) // UART for display on a terminal program.
(0026) //
(0027) // Some non-printable scan codes take specific actions. Examine this program
(0028) // for more details.
(0029) //
(0030) // Hardware Note: The PS/2 Clock and Data lines must both have pull-up
(0031) // resistors at the PSoC end in case the device is not attached.
(0032) //
(0033) // NOTE: Comments with an XXX in them refer to either things to be fixed/changed
(0034) //       or items I don't have enough information on.
(0035) //
(0036) // XXX - Some of the comments, including these in the introduction, have not
(0037) //       been updated to reflect that host-to-keyboard communication has been
(0038) //       implemented.
(0039) //
(0040) // Pretty-print this with:
(0041) // enscript -r -G -T4 -Ec -fCourier7 main.c
(0042) //
(0043) // B. Noble - 12 October 2011
(0044) //-----------------------------------------------------------------------------
(0045) 
(0046) #include <m8c.h>        // part specific constants and macros
(0047) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0048) #include "PSoCGPIOINT.h"
(0049) #include "ps2.h"
(0050) #include "keyboard.h"
(0051) #include "mouse.h"
(0052) 
(0053) 
(0054) //// Common Baud Rates for a 16-bit UART clock with a 24MHz clock source.
(0055) #define BAUD_57600_PERIOD	52
(0056) #define BAUD_38400_PERIOD	78
(0057) #define	BAUD_19200_PERIOD	156
(0058) #define	BAUD_9600_PERIOD	312
(0059) 
(0060) //// Global Variables (identified by names in LeadingCaps)
(0061) BYTE PS2FrameStatus = 0; // Note: This only changes at the end of a complete frame or when the PS2OneShot fires (due to incomplete clock)
(0062) BYTE PS2RxBuffer[16]; // Receive buffer. We save only up to 16 unprocessed scan codes.
(0063) BYTE PS2RxBufIn = 0; // Index of where we insert bytes in receive buffer
(0064) BYTE PS2RxBufOut = 0; // Index of where we read bytes out of the receive buffer
(0065) BYTE TenMicroSecTimerReps = 0; // Number of repetitions of the 10-microsecond timer
(0066) BYTE NumLock = 0; // 0-NumLock is off, 1-NumLock is on
(0067) BYTE CapsLock = 0; // 0-CapsLock is off, 1-CapsLock is on
(0068) BYTE ScrollLock = 0; // 0-ScrollLock is off, 1-ScrollLock is on
(0069) BYTE ShiftDown = 0; // 0-No Shift keys are pressed, 1-At least one Shift key is pressed
(0070) BYTE CtrlDown = 0; // 0-No Ctrl keys are pressed, 1-At least one Ctrl key is pressed
(0071) BYTE AltDown = 0; // 0-No Alt keys are pressed, 1-At least one Alt key is pressed
(0072) BYTE PianoMode = 0; // 0-The keyboard is in regular mode, 1-The keyboard is in piano mode
(0073) BYTE IsMouse = 0; // 0-The device is a keyboard, 1-The devices is a mouse
(0074) 
(0075) //// Port/Shadow Register Control Macros
(0076) #define LED1_ON			{LED1_DataShadow |=  LED1_MASK; LED1_Data_ADDR = LED1_DataShadow;}
(0077) #define LED1_OFF		{LED1_DataShadow &= ~LED1_MASK; LED1_Data_ADDR = LED1_DataShadow;}
(0078) #define LED1_TOGGLE		{LED1_DataShadow ^=  LED1_MASK; LED1_Data_ADDR = LED1_DataShadow;}
(0079) #define TRIGGER_HIGH	{TRIGGER_DataShadow |=  TRIGGER_MASK; TRIGGER_Data_ADDR = TRIGGER_DataShadow;}
(0080) #define TRIGGER_LOW		{TRIGGER_DataShadow &= ~TRIGGER_MASK; TRIGGER_Data_ADDR = TRIGGER_DataShadow;}
(0081) #define TRIGGER_TOGGLE	{TRIGGER_DataShadow ^=  TRIGGER_MASK; TRIGGER_Data_ADDR = TRIGGER_DataShadow;}
(0082) 
(0083) void main(void)
(0084) {
_main:
  c                    --> X+5
  keyspressed          --> X+4
  codetype             --> X+3
  cursor               --> X+2
  scancode             --> X+1
  status               --> X+0
    1E7B: 10       PUSH  X
    1E7C: 4F       MOV   X,SP
    1E7D: 38 06    ADD   SP,0x6
(0085) 	char c;					// Generic character variable
(0086) 	BYTE status = 0;		// Generic status byte
    1E7F: 56 00 00 MOV   [X+0],0x0
(0087) 	BYTE cursor = 0;		// LCD cursor position for printing of scan codes
    1E82: 56 02 00 MOV   [X+2],0x0
(0088) 	BYTE codetype = 0;		// Contains the type of keyboard scancode
    1E85: 56 03 00 MOV   [X+3],0x0
(0089) 	BYTE keyspressed = 0;	// Count of the total number of keys currently held down
    1E88: 56 04 00 MOV   [X+4],0x0
(0090) 	BYTE scancode;			// Keyboard scan code to process
(0091) 
(0092) 	/////////////////////////////////////////////////////////////////////////////////
(0093) 	// Since we use a shadow register for Port 1, we need to set all bits in it,
(0094) 	// controlled by StdCPU, to match the state we want them to be in initially.
(0095) 	// Write a 1 to our PS/2 Clock Out and Data pins which, in Open Drain Low mode,
(0096) 	// will let the PS/2 bus be pulled high. Also, turn off the Frame Error LED.
(0097) 	/////////////////////////////////////////////////////////////////////////////////
(0098) 	PS2CLOCK_HIGH;
    1E8B: 62 D0 00 MOV   REG[0xD0],0x0
    1E8E: 2E 00 08 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x8
    1E91: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    1E93: 60 04    MOV   REG[0x4],A
(0099) 	PS2DATA_HIGH;
    1E95: 2E 00 10 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    1E98: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    1E9A: 60 04    MOV   REG[0x4],A
(0100) 	LED1_OFF;
    1E9C: 26 00 FE AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xFE
    1E9F: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    1EA1: 60 04    MOV   REG[0x4],A
(0101) 	//TRIGGER_HIGH; //// XXX - Diagnostics
(0102) 	//
(0103) 	/////////////////////////////////////////////////////////////////////////////////
(0104) 	// Start the UART clock and the UART
(0105) 	/////////////////////////////////////////////////////////////////////////////////
(0106) 	UARTClock_WritePeriod(BAUD_57600_PERIOD-1);
    1EA3: 10       PUSH  X
    1EA4: 57 00    MOV   X,0x0
    1EA6: 50 33    MOV   A,0x33
    1EA8: 7C 07 C2 LCALL _UARTClock_WritePeriod
(0107) 	UARTClock_WriteCompareValue((BAUD_57600_PERIOD>>1)-1);
    1EAB: 57 00    MOV   X,0x0
    1EAD: 50 19    MOV   A,0x19
    1EAF: 7C 07 C8 LCALL _UARTClock_WriteCompareValue
(0108) 	UARTClock_Start();
    1EB2: 7C 07 BA LCALL _UARTClock_Start
(0109) 	UART_Start(UART_PARITY_NONE);
    1EB5: 50 00    MOV   A,0x0
    1EB7: 7C 08 32 LCALL _UART_Start
(0110) 	//
(0111) 	/////////////////////////////////////////////////////////////////////////////////
(0112) 	// Start the User Modules that will bit-bang the PS/2 frames in from the keyboard
(0113) 	/////////////////////////////////////////////////////////////////////////////////
(0114) 	PS2DigBuf_EnableInt();
    1EBA: 7C 0B 34 LCALL _PS2DigBuf_EnableInt
(0115) 	PS2DigBuf_Start();
    1EBD: 7C 0B 3C LCALL _PS2DigBuf_Start
(0116) 	PS2OneShot_Start();
    1EC0: 7C 0B 20 LCALL _PS2OneShot_Start
(0117) 	TenMicroSecTimer_EnableInt();
    1EC3: 7C 09 62 LCALL _TenMicroSecTimer_EnableInt
(0118) 	//
(0119) 	/////////////////////////////////////////////////////////////////////////////////
(0120) 	// Start the LCD, print an informational message and get it ready to print scan codes
(0121) 	/////////////////////////////////////////////////////////////////////////////////
(0122) 	LCD_Start();
    1EC6: 7C 0C 56 LCALL _LCD_Start|LCD_Init|LCD_Start|_LCD_Init
(0123) 	LCD_Position(0,0);	
    1EC9: 50 00    MOV   A,0x0
    1ECB: 57 00    MOV   X,0x0
    1ECD: 7C 0C C9 LCALL _LCD_Position
(0124) 	LCD_PrCString("PS/2 Bit-Banging");
    1ED0: 50 04    MOV   A,0x4
    1ED2: 08       PUSH  A
    1ED3: 50 C1    MOV   A,0xC1
    1ED5: 5C       MOV   X,A
    1ED6: 18       POP   A
    1ED7: 7C 0B 44 LCALL _LCD_PrCString
(0125) 	LCD_Position(1,0);	// Print the PS/2 keyboard scan codes on the second line.
    1EDA: 57 00    MOV   X,0x0
    1EDC: 50 01    MOV   A,0x1
    1EDE: 7C 0C C9 LCALL _LCD_Position
(0126) //	LCD_Control(LCD_CURSOR_WINK);	// Turn on the LCD cursor. See LCD.h.
(0127) 	LCD_Control(LCD_CURSOR_BLINK);	// Turn on the LCD cursor. See LCD.h.
    1EE1: 50 0F    MOV   A,0xF
    1EE3: 7C 0B A6 LCALL _LCD_Control
    1EE6: 20       POP   X
(0128) 	//
(0129) 	/////////////////////////////////////////////////////////////////////////////////
(0130) 	// Enable Global Interrupts
(0131) 	// Needed by the PS/2 bit-banging user modules PS2DigBuf and PS2OneShot
(0132) 	// and TenMicroSecTimer
(0133) 	/////////////////////////////////////////////////////////////////////////////////
(0134) 	M8C_EnableGInt;
    1EE7: 71 01    OR    F,0x1
(0135) 	//
(0136) 	/////////////////////////////////////////////////////////////////////////////////
(0137) 	// Print an informational message out to the host computer via the UART
(0138) 	/////////////////////////////////////////////////////////////////////////////////
(0139) 	UART_CPutString("\r\nPSoC PS/2 Bit-Banging Interface test program.\r\n");
    1EE9: 10       PUSH  X
    1EEA: 50 04    MOV   A,0x4
    1EEC: 08       PUSH  A
    1EED: 50 8F    MOV   A,0x8F
    1EEF: 5C       MOV   X,A
    1EF0: 18       POP   A
    1EF1: 7C 09 47 LCALL _UART_CPutString
    1EF4: 20       POP   X
    1EF5: 81 2C    JMP   0x2022
(0140) 	//
(0141) 	/////////////////////////////////////////////////////////////////////////////////
(0142) 	// Loop here until we detect a working PS/2 device.
(0143) 	/////////////////////////////////////////////////////////////////////////////////
(0144) 	while(1) {
(0145) 		LCD_Position(1,0);
    1EF7: 10       PUSH  X
    1EF8: 57 00    MOV   X,0x0
    1EFA: 50 01    MOV   A,0x1
    1EFC: 7C 0C C9 LCALL _LCD_Position
(0146) 		LCD_PrCString("Detecting Device");
    1EFF: 50 04    MOV   A,0x4
    1F01: 08       PUSH  A
    1F02: 50 7E    MOV   A,0x7E
    1F04: 5C       MOV   X,A
    1F05: 18       POP   A
    1F06: 7C 0B 44 LCALL _LCD_PrCString
    1F09: 20       POP   X
(0147) 		status = PS2_Detect_Device();
    1F0A: 7C 29 43 LCALL _PS2_Detect_Device
    1F0D: 54 00    MOV   [X+0],A
(0148) 		if (!status) {
    1F0F: 3D 00 00 CMP   [X+0],0x0
    1F12: B0 1C    JNZ   0x1F2F
(0149) 			IsMouse = 0;
    1F14: 62 D0 00 MOV   REG[0xD0],0x0
    1F17: 55 60 00 MOV   [IsMouse],0x0
(0150) 			LCD_Position(1,0);
    1F1A: 10       PUSH  X
    1F1B: 57 00    MOV   X,0x0
    1F1D: 50 01    MOV   A,0x1
    1F1F: 7C 0C C9 LCALL _LCD_Position
(0151) 			LCD_PrCString(" Keyboard Ready ");
    1F22: 50 04    MOV   A,0x4
    1F24: 08       PUSH  A
    1F25: 50 6D    MOV   A,0x6D
    1F27: 5C       MOV   X,A
    1F28: 18       POP   A
    1F29: 7C 0B 44 LCALL _LCD_PrCString
    1F2C: 20       POP   X
(0152) 			break;
    1F2D: 80 F6    JMP   0x2024
(0153) 		}
(0154) 		if (status == DEVICE_IS_MOUSE) {
    1F2F: 3D 00 80 CMP   [X+0],0x80
    1F32: B0 1C    JNZ   0x1F4F
(0155) 			IsMouse = 1;
    1F34: 62 D0 00 MOV   REG[0xD0],0x0
    1F37: 55 60 01 MOV   [IsMouse],0x1
(0156) 			LCD_Position(1,0);
    1F3A: 10       PUSH  X
    1F3B: 57 00    MOV   X,0x0
    1F3D: 50 01    MOV   A,0x1
    1F3F: 7C 0C C9 LCALL _LCD_Position
(0157) 			LCD_PrCString("  Mouse Ready   ");
    1F42: 50 04    MOV   A,0x4
    1F44: 08       PUSH  A
    1F45: 50 5C    MOV   A,0x5C
    1F47: 5C       MOV   X,A
    1F48: 18       POP   A
    1F49: 7C 0B 44 LCALL _LCD_PrCString
    1F4C: 20       POP   X
(0158) 			break;
    1F4D: 80 D6    JMP   0x2024
(0159) 		}
(0160) 		//// No device if the transmission timed-out.
(0161) 		if (status & DEVICE_TX_TIMEOUT) {
    1F4F: 48 00 01 TST   [X+0],0x1
    1F52: A0 16    JZ    0x1F69
(0162) 			LCD_Position(1,0);
    1F54: 10       PUSH  X
    1F55: 57 00    MOV   X,0x0
    1F57: 50 01    MOV   A,0x1
    1F59: 7C 0C C9 LCALL _LCD_Position
(0163) 			LCD_PrCString("   No Device    ");
    1F5C: 50 04    MOV   A,0x4
    1F5E: 08       PUSH  A
    1F5F: 50 4B    MOV   A,0x4B
    1F61: 5C       MOV   X,A
    1F62: 18       POP   A
    1F63: 7C 0B 44 LCALL _LCD_PrCString
    1F66: 20       POP   X
(0164) 		}
    1F67: 80 9B    JMP   0x2003
(0165) 		//// A framing error occured while transmitting to the device. (XXX - Force test this)
(0166) 		else if (status & DEVICE_TX_FRAME_ERROR) {
    1F69: 48 00 04 TST   [X+0],0x4
    1F6C: A0 16    JZ    0x1F83
(0167) 			LCD_Position(1,0);
    1F6E: 10       PUSH  X
    1F6F: 57 00    MOV   X,0x0
    1F71: 50 01    MOV   A,0x1
    1F73: 7C 0C C9 LCALL _LCD_Position
(0168) 			LCD_PrCString(" TX Frame Error ");
    1F76: 50 04    MOV   A,0x4
    1F78: 08       PUSH  A
    1F79: 50 3A    MOV   A,0x3A
    1F7B: 5C       MOV   X,A
    1F7C: 18       POP   A
    1F7D: 7C 0B 44 LCALL _LCD_PrCString
    1F80: 20       POP   X
(0169) 		}
    1F81: 80 81    JMP   0x2003
(0170) 		//// A framing error occured while receiving from the device. (XXX - Force test this)
(0171) 		else if (status & DEVICE_RX_FRAME_ERROR) {
    1F83: 48 00 08 TST   [X+0],0x8
    1F86: A0 16    JZ    0x1F9D
(0172) 			LCD_Position(1,0);
    1F88: 10       PUSH  X
    1F89: 57 00    MOV   X,0x0
    1F8B: 50 01    MOV   A,0x1
    1F8D: 7C 0C C9 LCALL _LCD_Position
(0173) 			LCD_PrCString(" RX Frame Error ");
    1F90: 50 04    MOV   A,0x4
    1F92: 08       PUSH  A
    1F93: 50 29    MOV   A,0x29
    1F95: 5C       MOV   X,A
    1F96: 18       POP   A
    1F97: 7C 0B 44 LCALL _LCD_PrCString
    1F9A: 20       POP   X
(0174) 		}
    1F9B: 80 67    JMP   0x2003
(0175) 		//// We should probably consider an RX Timeout to be a device error. (XXX - Force test this)
(0176) 		else if (status & DEVICE_RX_TIMEOUT) {
    1F9D: 48 00 02 TST   [X+0],0x2
    1FA0: A0 16    JZ    0x1FB7
(0177) 			LCD_Position(1,0);
    1FA2: 10       PUSH  X
    1FA3: 57 00    MOV   X,0x0
    1FA5: 50 01    MOV   A,0x1
    1FA7: 7C 0C C9 LCALL _LCD_Position
(0178) 			LCD_PrCString("Receive Timeout ");
    1FAA: 50 04    MOV   A,0x4
    1FAC: 08       PUSH  A
    1FAD: 50 18    MOV   A,0x18
    1FAF: 5C       MOV   X,A
    1FB0: 18       POP   A
    1FB1: 7C 0B 44 LCALL _LCD_PrCString
    1FB4: 20       POP   X
(0179) 		}
    1FB5: 80 4D    JMP   0x2003
(0180) 		//// The response we received from our RESET command was invalid. (XXX - Force test this)
(0181) 		else if (status & DEVICE_INVALID_RESPONSE) {
    1FB7: 48 00 20 TST   [X+0],0x20
    1FBA: A0 16    JZ    0x1FD1
(0182) 			LCD_Position(1,0);
    1FBC: 10       PUSH  X
    1FBD: 57 00    MOV   X,0x0
    1FBF: 50 01    MOV   A,0x1
    1FC1: 7C 0C C9 LCALL _LCD_Position
(0183) 			LCD_PrCString("Invalid Response");
    1FC4: 50 04    MOV   A,0x4
    1FC6: 08       PUSH  A
    1FC7: 50 07    MOV   A,0x7
    1FC9: 5C       MOV   X,A
    1FCA: 18       POP   A
    1FCB: 7C 0B 44 LCALL _LCD_PrCString
    1FCE: 20       POP   X
(0184) 		}
    1FCF: 80 33    JMP   0x2003
(0185) 		//// The device failed a diagnostic self-test (BAT) (XXX - Force test this)
(0186) 		else if (status & DEVICE_BAD_BAT) {
    1FD1: 48 00 10 TST   [X+0],0x10
    1FD4: A0 16    JZ    0x1FEB
(0187) 			LCD_Position(1,0);
    1FD6: 10       PUSH  X
    1FD7: 57 00    MOV   X,0x0
    1FD9: 50 01    MOV   A,0x1
    1FDB: 7C 0C C9 LCALL _LCD_Position
(0188) 			LCD_PrCString("Device BAT Error");
    1FDE: 50 03    MOV   A,0x3
    1FE0: 08       PUSH  A
    1FE1: 50 F6    MOV   A,0xF6
    1FE3: 5C       MOV   X,A
    1FE4: 18       POP   A
    1FE5: 7C 0B 44 LCALL _LCD_PrCString
    1FE8: 20       POP   X
(0189) 		}
    1FE9: 80 19    JMP   0x2003
(0190) 		//// We received a partial frame
(0191) 		else if (status & DEVICE_ERROR) {
    1FEB: 48 00 40 TST   [X+0],0x40
    1FEE: A0 14    JZ    0x2003
(0192) 			LCD_Position(1,0);
    1FF0: 10       PUSH  X
    1FF1: 57 00    MOV   X,0x0
    1FF3: 50 01    MOV   A,0x1
    1FF5: 7C 0C C9 LCALL _LCD_Position
(0193) 			LCD_PrCString("  Device Error  ");
    1FF8: 50 03    MOV   A,0x3
    1FFA: 08       PUSH  A
    1FFB: 50 E5    MOV   A,0xE5
    1FFD: 5C       MOV   X,A
    1FFE: 18       POP   A
    1FFF: 7C 0B 44 LCALL _LCD_PrCString
    2002: 20       POP   X
(0194) 		}
(0195) 		//// If we had an error, wait 1 second and try again.
(0196) 		TenMicroSecTimerReps = 2;
    2003: 62 D0 00 MOV   REG[0xD0],0x0
    2006: 55 58 02 MOV   [TenMicroSecTimerReps],0x2
(0197) 		TenMicroSecTimer_WritePeriod(49999); // 1000ms
    2009: 10       PUSH  X
    200A: 57 C3    MOV   X,0xC3
    200C: 50 4F    MOV   A,0x4F
    200E: 7C 09 72 LCALL _TenMicroSecTimer_WritePeriod
(0198) 		TenMicroSecTimer_Start();
    2011: 7C 09 6A LCALL _TenMicroSecTimer_Start
    2014: 20       POP   X
(0199) 		while(TenMicroSecTimerReps);
    2015: 62 D0 00 MOV   REG[0xD0],0x0
    2018: 3C 58 00 CMP   [TenMicroSecTimerReps],0x0
    201B: BF F9    JNZ   0x2015
(0200) 		TenMicroSecTimer_Stop();
    201D: 10       PUSH  X
    201E: 7C 09 6E LCALL _TenMicroSecTimer_Stop
    2021: 20       POP   X
(0201) 	}
    2022: 8E D4    JMP   0x1EF7
(0202) 	//// The device was detected so wait 1 second before clearing the display.
(0203) 	TenMicroSecTimerReps = 2;
    2024: 62 D0 00 MOV   REG[0xD0],0x0
    2027: 55 58 02 MOV   [TenMicroSecTimerReps],0x2
(0204) 	TenMicroSecTimer_WritePeriod(49999); // 1000ms
    202A: 10       PUSH  X
    202B: 57 C3    MOV   X,0xC3
    202D: 50 4F    MOV   A,0x4F
    202F: 7C 09 72 LCALL _TenMicroSecTimer_WritePeriod
(0205) 	TenMicroSecTimer_Start();
    2032: 7C 09 6A LCALL _TenMicroSecTimer_Start
    2035: 20       POP   X
(0206) 	while(TenMicroSecTimerReps);
    2036: 62 D0 00 MOV   REG[0xD0],0x0
    2039: 3C 58 00 CMP   [TenMicroSecTimerReps],0x0
    203C: BF F9    JNZ   0x2036
(0207) 	TenMicroSecTimer_Stop();
    203E: 10       PUSH  X
    203F: 7C 09 6E LCALL _TenMicroSecTimer_Stop
    2042: 20       POP   X
(0208) 	//
(0209) 	//// XXX - Add capability to both the mouse and keyboard functions that,
(0210) 	////       upon detecting a BAT code from the device, will reinitialize it
(0211) 	////       and resume operation.
(0212) 	//
(0213) 	///////////////////////////////////////////////////////////////////////////
(0214) 	//// - Mouse stuff below
(0215) 	///////////////////////////////////////////////////////////////////////////
(0216) 	// Enter the main loop, printing mouse button and X/Y data to the LCD
(0217) 	// scan codes out to the UART.
(0218) 	///////////////////////////////////////////////////////////////////////////
(0219) 	if (IsMouse) {
    2043: 62 D0 00 MOV   REG[0xD0],0x0
    2046: 3C 60 00 CMP   [IsMouse],0x0
    2049: A0 28    JZ    0x2072
(0220) 		/////////////////////////////////////////////////////////////////////////////////
(0221) 		// Start the PWM8 User Module that controls the brightness of the LED on P[1]1
(0222) 		/////////////////////////////////////////////////////////////////////////////////
(0223) 		PWM8LED_WritePulseWidth(0);
    204B: 10       PUSH  X
    204C: 50 00    MOV   A,0x0
    204E: 7C 0A ED LCALL _PWM8LED_WritePulseWidth
(0224) 		PWM8LED_Start();
    2051: 7C 0A E2 LCALL _PWM8LED_Start
    2054: 20       POP   X
(0225) 		//
(0226) 		MouseInit();
    2055: 7C 21 82 LCALL _MouseInit
(0227) //		//// Print the raw 3-byte mouse data to the LCD
(0228) //		LCD_Position(1,0);
(0229) //		LCD_PrCString("                ");
(0230) //		while(1) {
(0231) //			MousePrintRawData();
(0232) //		}
(0233) 		//// Move the LCD cursor around the LCD and display data
(0234) 		LCD_Position(1,0);
    2058: 10       PUSH  X
    2059: 57 00    MOV   X,0x0
    205B: 50 01    MOV   A,0x1
    205D: 7C 0C C9 LCALL _LCD_Position
(0235) 		LCD_PrCString("   X:0000 Y:0000");
    2060: 50 03    MOV   A,0x3
    2062: 08       PUSH  A
    2063: 50 D4    MOV   A,0xD4
    2065: 5C       MOV   X,A
    2066: 18       POP   A
    2067: 7C 0B 44 LCALL _LCD_PrCString
    206A: 20       POP   X
    206B: 80 04    JMP   0x2070
(0236) 		while(1) {
(0237) 			MouseCursor();
    206D: 7C 22 6D LCALL _MouseCursor
(0238) 		}
    2070: 8F FC    JMP   0x206D
(0239) 	}
(0240) 	else {
(0241) 		/////////////////////////////////////////////////////////////////////////////////
(0242) 		// Start the PWM8 User Module that controls the brightness of the LED on P[1]1
(0243) 		/////////////////////////////////////////////////////////////////////////////////
(0244) 		PWM8LED_WritePulseWidth(127);
    2072: 10       PUSH  X
    2073: 50 7F    MOV   A,0x7F
    2075: 7C 0A ED LCALL _PWM8LED_WritePulseWidth
(0245) 		PWM8LED_Start();
    2078: 7C 0A E2 LCALL _PWM8LED_Start
    207B: 20       POP   X
    207C: 80 FE    JMP   0x217B
(0246) 		//
(0247) 		//// - Keyboard stuff below
(0248) 		/////////////////////////////////////////////////////////////////////////////////
(0249) 		// Enter the main loop, printing received scan codes out on the LCD and printable
(0250) 		// scan codes out to the UART.
(0251) 		/////////////////////////////////////////////////////////////////////////////////
(0252) 		while(1) {
(0253) 			//// If we get a parity error, regardless of where we are in the
(0254) 			//// receive buffer, transmit a resend command
(0255) 			if (PS2FrameStatus & FRAME_RX_PARITY_ERROR) {
    207E: 62 D0 00 MOV   REG[0xD0],0x0
    2081: 47 63 04 TST   [PS2FrameStatus],0x4
    2084: A0 13    JZ    0x2098
(0256) 				PS2FrameStatus = 0x00;
    2086: 55 63 00 MOV   [PS2FrameStatus],0x0
(0257) 				PS2_Write_Byte(0xFE);
    2089: 50 FE    MOV   A,0xFE
    208B: 08       PUSH  A
    208C: 7C 27 32 LCALL _PS2_Write_Byte
    208F: 38 FF    ADD   SP,0xFF
    2091: 62 D0 00 MOV   REG[0xD0],0x0
    2094: 53 22    MOV   [__r0],A
(0258) 				continue;
    2096: 80 E4    JMP   0x217B
(0259) 			}
(0260) 			//// XXX - We should probably check for other frame error types.
(0261) 			//// XXX - If we get a FRAME_RX_FRAME_ERROR, lets send a resend
(0262) 			//// XXX - If we get a FRAME_INCOMPLETE, the keyboard may have
(0263) 			////       been unplugged so send an ECHO. If we don't get a
(0264) 			////       valid response, reset the keyboard and restart.
(0265) 			if (PS2RxBufOut != PS2RxBufIn) {
    2098: 62 D0 00 MOV   REG[0xD0],0x0
    209B: 51 57    MOV   A,[PS2RxBufOut]
    209D: 62 D0 00 MOV   REG[0xD0],0x0
    20A0: 3A 56    CMP   A,[PS2RxBufIn]
    20A2: A0 D8    JZ    0x217B
(0266) 				scancode = PS2RxBuffer[PS2RxBufOut];
    20A4: 62 D0 00 MOV   REG[0xD0],0x0
    20A7: 51 57    MOV   A,[PS2RxBufOut]
    20A9: 62 D0 00 MOV   REG[0xD0],0x0
    20AC: 53 21    MOV   [__r1],A
    20AE: 55 22 00 MOV   [__r0],0x0
    20B1: 06 21 04 ADD   [__r1],0x4
    20B4: 0E 22 00 ADC   [__r0],0x0
    20B7: 51 22    MOV   A,[__r0]
    20B9: 60 D4    MOV   REG[0xD4],A
    20BB: 3E 21    MVI   A,[__r1]
    20BD: 54 01    MOV   [X+1],A
(0267) 				PS2RxBufOut++;
    20BF: 62 D0 00 MOV   REG[0xD0],0x0
    20C2: 76 57    INC   [PS2RxBufOut]
(0268) 				// Wrap around the circular buffer pointer at 16 
(0269) 				if (PS2RxBufOut & 0x10) PS2RxBufOut = 0;
    20C4: 47 57 10 TST   [PS2RxBufOut],0x10
    20C7: A0 04    JZ    0x20CC
    20C9: 55 57 00 MOV   [PS2RxBufOut],0x0
(0270) 				//// Wrap the cursor around on the second line when printing scan codes.
(0271) 				if (cursor > 15) cursor = 0;
    20CC: 50 0F    MOV   A,0xF
    20CE: 3B 02    CMP   A,[X+2]
    20D0: D0 04    JNC   0x20D5
    20D2: 56 02 00 MOV   [X+2],0x0
(0272) 				LCD_Position(1,cursor);
    20D5: 10       PUSH  X
    20D6: 59 02    MOV   X,[X+2]
    20D8: 50 01    MOV   A,0x1
    20DA: 7C 0C C9 LCALL _LCD_Position
    20DD: 20       POP   X
(0273) 				LCD_PrHexByte(scancode);
    20DE: 10       PUSH  X
    20DF: 52 01    MOV   A,[X+1]
    20E1: 7C 0B 66 LCALL _LCD_PrHexByte
(0274) 				//// Keep the LCD CURSOR on top of the last character written
(0275) 				LCD_Control(LCD_CURSOR_SH_LEFT);
    20E4: 50 10    MOV   A,0x10
    20E6: 7C 0B A6 LCALL _LCD_Control
    20E9: 20       POP   X
(0276) 				cursor+=2;
    20EA: 07 02 02 ADD   [X+2],0x2
(0277) 				//// Process any keyboard commands
(0278) 				// Getting a 0x00 from the keyboard means there is either a
(0279) 				// keyboard buffer overrun or a key detection error.
(0280) 				if (scancode == 0x00) {
    20ED: 3D 01 00 CMP   [X+1],0x0
    20F0: B0 03    JNZ   0x20F4
(0281) 					// XXX - Should we indicate to the user that there is a problem?
(0282) 					continue;
    20F2: 80 88    JMP   0x217B
(0283) 				}
(0284) 				// If we get a BAT, assume the keyboard has been powered-on
(0285) 				// again and reset any appropriate state variables.
(0286) 				// XXX - Maybe we should handle a bad BAT (0xFC) too.
(0287) 				if (scancode == 0xAA) { // Power-on BAT
    20F4: 3D 01 AA CMP   [X+1],0xAA
    20F7: B0 03    JNZ   0x20FB
(0288) 					// XXX - Implement the keyboard power-on sequence
(0289) 					continue;
    20F9: 80 81    JMP   0x217B
(0290) 				}
(0291) 				// If we find a Resend in our input buffer, ignore it since
(0292) 				// we handle resends in PS2_Send_Command_Process_Response().
(0293) 				// Note: This should never happen.
(0294) 				if (scancode == 0xFE) {
    20FB: 3D 01 FE CMP   [X+1],0xFE
    20FE: B0 03    JNZ   0x2102
(0295) 					continue;
    2100: 80 7A    JMP   0x217B
(0296) 				}
(0297) 				//// Convert the individual scan codes into meaningful key actions
(0298) 				codetype = KeyboardDecodeData(scancode);
    2102: 52 01    MOV   A,[X+1]
    2104: 08       PUSH  A
    2105: 7C 0C FB LCALL __UserModules_end|__text_start|_KeyboardDecodeData|_KeyboardDecodeData
    2108: 38 FF    ADD   SP,0xFF
    210A: 62 D0 00 MOV   REG[0xD0],0x0
    210D: 54 03    MOV   [X+3],A
(0299) 				//// Keep track of how many keys are pressed
(0300) 				keyspressed = KeyboardTotalPressed(scancode,codetype);
    210F: 52 03    MOV   A,[X+3]
    2111: 08       PUSH  A
    2112: 52 01    MOV   A,[X+1]
    2114: 08       PUSH  A
    2115: 7C 0E 53 LCALL _KeyboardTotalPressed
    2118: 62 D0 00 MOV   REG[0xD0],0x0
    211B: 54 04    MOV   [X+4],A
(0301) 				KeyboardAction(scancode,codetype,keyspressed);
    211D: 52 04    MOV   A,[X+4]
    211F: 08       PUSH  A
    2120: 52 03    MOV   A,[X+3]
    2122: 08       PUSH  A
    2123: 52 01    MOV   A,[X+1]
    2125: 08       PUSH  A
    2126: 7C 14 55 LCALL _KeyboardAction
    2129: 38 FB    ADD   SP,0xFB
(0302) 				if (!PianoMode) {
    212B: 62 D0 00 MOV   REG[0xD0],0x0
    212E: 3C 5F 00 CMP   [PianoMode],0x0
    2131: B0 49    JNZ   0x217B
(0303) 					c = KeyboardToASCII(scancode,codetype);
    2133: 52 03    MOV   A,[X+3]
    2135: 08       PUSH  A
    2136: 52 01    MOV   A,[X+1]
    2138: 08       PUSH  A
    2139: 7C 10 25 LCALL _KeyboardToASCII
    213C: 38 FE    ADD   SP,0xFE
    213E: 62 D0 00 MOV   REG[0xD0],0x0
    2141: 54 05    MOV   [X+5],A
(0304) 					if (!c) continue;
    2143: 3D 05 00 CMP   [X+5],0x0
    2146: B0 03    JNZ   0x214A
    2148: 80 32    JMP   0x217B
(0305) 					if (c == 0x0d) {
    214A: 3D 05 0D CMP   [X+5],0xD
    214D: B0 06    JNZ   0x2154
(0306) 						UART_PutCRLF();
    214F: 10       PUSH  X
    2150: 7C 09 59 LCALL _UART_PutCRLF
    2153: 20       POP   X
(0307) 					}
(0308) 					if (c == 0x08) {
    2154: 3D 05 08 CMP   [X+5],0x8
    2157: B0 14    JNZ   0x216C
(0309) 						// Send rubout
(0310) 						UART_PutChar(0x08);
    2159: 10       PUSH  X
    215A: 50 08    MOV   A,0x8
    215C: 7C 08 A4 LCALL _UART_PutChar
(0311) 						UART_PutChar(' ');
    215F: 50 20    MOV   A,0x20
    2161: 7C 08 A4 LCALL _UART_PutChar
(0312) 						UART_PutChar(0x08);
    2164: 50 08    MOV   A,0x8
    2166: 7C 08 A4 LCALL _UART_PutChar
    2169: 20       POP   X
(0313) 					}
    216A: 80 10    JMP   0x217B
(0314) 					else if (!AltDown) UART_PutChar(c);
    216C: 62 D0 00 MOV   REG[0xD0],0x0
    216F: 3C 5E 00 CMP   [AltDown],0x0
    2172: B0 08    JNZ   0x217B
    2174: 10       PUSH  X
    2175: 52 05    MOV   A,[X+5]
    2177: 7C 08 A4 LCALL _UART_PutChar
    217A: 20       POP   X
(0315) 				}
(0316) 			}
(0317) 		}
    217B: 8F 02    JMP   0x207E
(0318) 	}
(0319) }
FILE: C:\Users\Jacob\Desktop\ECE381\PS2BIT~1\PS2BIT~1\mouse.c
(0001) //----------------------------------------------------------------------------
(0002) // XXX - Create the comments for this.
(0003) //
(0004) // B. Noble - 18 October 2010
(0005) //----------------------------------------------------------------------------
(0006) 
(0007) #include <m8c.h>        // part specific constants and macros
(0008) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0009) #include "PSoCGPIOINT.h"
(0010) #include "ps2.h"
(0011) #include "mouse.h"
(0012) 
(0013) extern BYTE PS2RxBuffer[];
(0014) extern BYTE PS2RxBufIn;
(0015) extern BYTE PS2RxBufOut;
(0016) 
(0017) void MouseInit(void)
(0018) {
(0019) 	//// Mouse init stuff
(0020) 	//// XXX - Document these!
(0021) 	PS2_Send_Command_Process_Response(0xF3);
_MouseInit:
    2182: 50 F3    MOV   A,0xF3
    2184: 08       PUSH  A
    2185: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    2188: 62 D0 00 MOV   REG[0xD0],0x0
(0022) 	PS2_Send_Command_Process_Response(0x0A);
    218B: 50 0A    MOV   A,0xA
    218D: 08       PUSH  A
    218E: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    2191: 38 FE    ADD   SP,0xFE
    2193: 62 D0 00 MOV   REG[0xD0],0x0
(0023) 	PS2_Send_Command_Process_Response(0xE8);
    2196: 50 E8    MOV   A,0xE8
    2198: 08       PUSH  A
    2199: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    219C: 62 D0 00 MOV   REG[0xD0],0x0
(0024) 	PS2_Send_Command_Process_Response(0x03);
    219F: 50 03    MOV   A,0x3
    21A1: 08       PUSH  A
    21A2: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    21A5: 38 FE    ADD   SP,0xFE
    21A7: 62 D0 00 MOV   REG[0xD0],0x0
(0025) 	PS2_Send_Command_Process_Response(0xE6);
    21AA: 50 E6    MOV   A,0xE6
    21AC: 08       PUSH  A
    21AD: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    21B0: 62 D0 00 MOV   REG[0xD0],0x0
(0026) 	PS2_Send_Command_Process_Response(0xF4);
    21B3: 50 F4    MOV   A,0xF4
    21B5: 08       PUSH  A
    21B6: 7C 28 28 LCALL _PS2_Send_Command_Process_Response
    21B9: 38 FE    ADD   SP,0xFE
    21BB: 62 D0 00 MOV   REG[0xD0],0x0
    21BE: 7F       RET   
(0027) }
(0028) 
(0029) void MousePrintRawData(void)
(0030) {
_MousePrintRawData:
  scancode             --> X+0
    21BF: 10       PUSH  X
    21C0: 4F       MOV   X,SP
    21C1: 38 01    ADD   SP,0x1
(0031) 	BYTE scancode;
(0032) 	static int i = 0;
(0033) 
(0034) 	while(PS2RxBufOut == PS2RxBufIn); // Spin until we get data
    21C3: 62 D0 00 MOV   REG[0xD0],0x0
    21C6: 51 57    MOV   A,[PS2RxBufOut]
    21C8: 62 D0 00 MOV   REG[0xD0],0x0
    21CB: 3A 56    CMP   A,[PS2RxBufIn]
    21CD: AF F5    JZ    0x21C3
(0035) 	scancode = PS2RxBuffer[PS2RxBufOut];
    21CF: 62 D0 00 MOV   REG[0xD0],0x0
    21D2: 51 57    MOV   A,[PS2RxBufOut]
    21D4: 62 D0 00 MOV   REG[0xD0],0x0
    21D7: 53 21    MOV   [__r1],A
    21D9: 55 22 00 MOV   [__r0],0x0
    21DC: 06 21 04 ADD   [__r1],0x4
    21DF: 0E 22 00 ADC   [__r0],0x0
    21E2: 51 22    MOV   A,[__r0]
    21E4: 60 D4    MOV   REG[0xD4],A
    21E6: 3E 21    MVI   A,[__r1]
    21E8: 54 00    MOV   [X+0],A
(0036) 	PS2RxBufOut++;
    21EA: 62 D0 00 MOV   REG[0xD0],0x0
    21ED: 76 57    INC   [PS2RxBufOut]
(0037) 	// Wrap around the circular buffer pointer at 16 
(0038) 	if (PS2RxBufOut & 0x10) PS2RxBufOut = 0;
    21EF: 47 57 10 TST   [PS2RxBufOut],0x10
    21F2: A0 04    JZ    0x21F7
    21F4: 55 57 00 MOV   [PS2RxBufOut],0x0
(0039) 	// If Bit 3 isn't set, then this isn't Byte 1
(0040) 	if ((i==0)&&(!(scancode & 0x08))) return;
    21F7: 62 D0 00 MOV   REG[0xD0],0x0
    21FA: 3C 49 00 CMP   [0x49],0x0
    21FD: B0 0D    JNZ   0x220B
    21FF: 3C 4A 00 CMP   [0x4A],0x0
    2202: B0 08    JNZ   0x220B
    2204: 48 00 08 TST   [X+0],0x8
    2207: B0 03    JNZ   0x220B
    2209: 80 5F    JMP   0x2269
(0041) 	LCD_Position(1,i);
    220B: 62 D0 00 MOV   REG[0xD0],0x0
    220E: 51 4A    MOV   A,[0x4A]
    2210: 62 D0 00 MOV   REG[0xD0],0x0
    2213: 10       PUSH  X
    2214: 08       PUSH  A
    2215: 50 01    MOV   A,0x1
    2217: 20       POP   X
    2218: 7C 0C C9 LCALL _LCD_Position
    221B: 20       POP   X
(0042) 	LCD_PrHexByte(scancode);
    221C: 10       PUSH  X
    221D: 52 00    MOV   A,[X+0]
    221F: 7C 0B 66 LCALL _LCD_PrHexByte
    2222: 20       POP   X
(0043) 	if (i==0) i=3;
    2223: 62 D0 00 MOV   REG[0xD0],0x0
    2226: 3C 49 00 CMP   [0x49],0x0
    2229: B0 11    JNZ   0x223B
    222B: 3C 4A 00 CMP   [0x4A],0x0
    222E: B0 0C    JNZ   0x223B
    2230: 62 D0 00 MOV   REG[0xD0],0x0
    2233: 55 4A 03 MOV   [0x4A],0x3
    2236: 55 49 00 MOV   [0x49],0x0
    2239: 80 2F    JMP   0x2269
(0044) 	else if (i==3) i=6;
    223B: 62 D0 00 MOV   REG[0xD0],0x0
    223E: 3C 49 00 CMP   [0x49],0x0
    2241: B0 11    JNZ   0x2253
    2243: 3C 4A 03 CMP   [0x4A],0x3
    2246: B0 0C    JNZ   0x2253
    2248: 62 D0 00 MOV   REG[0xD0],0x0
    224B: 55 4A 06 MOV   [0x4A],0x6
    224E: 55 49 00 MOV   [0x49],0x0
    2251: 80 17    JMP   0x2269
(0045) 	else if (i==6) i=0;
    2253: 62 D0 00 MOV   REG[0xD0],0x0
    2256: 3C 49 00 CMP   [0x49],0x0
    2259: B0 0F    JNZ   0x2269
    225B: 3C 4A 06 CMP   [0x4A],0x6
    225E: B0 0A    JNZ   0x2269
    2260: 62 D0 00 MOV   REG[0xD0],0x0
    2263: 55 4A 00 MOV   [0x4A],0x0
    2266: 55 49 00 MOV   [0x49],0x0
(0046) 	return;
    2269: 38 FF    ADD   SP,0xFF
    226B: 20       POP   X
    226C: 7F       RET   
(0047) }
(0048) 
(0049) void MouseCursor(void)
(0050) {
_MouseCursor:
  xov                  --> X+10
  yov                  --> X+9
  mbtn                 --> X+8
  xsign                --> X+7
  ysign                --> X+6
  lbtn                 --> X+5
  rbtn                 --> X+4
  ystep                --> X+3
  xstep                --> X+2
  scancode             --> X+1
  i                    --> X+0
    226D: 10       PUSH  X
    226E: 4F       MOV   X,SP
    226F: 38 0B    ADD   SP,0xB
(0051) 	signed char i;
(0052) 	BYTE scancode;
(0053) 	BYTE yov;
(0054) 	BYTE xov;
(0055) 	BYTE ysign;
(0056) 	BYTE xsign;
(0057) 	BYTE mbtn;
(0058) 	BYTE rbtn;
(0059) 	BYTE lbtn;
(0060) 	BYTE xstep = 0;
    2271: 56 02 00 MOV   [X+2],0x0
(0061) 	BYTE ystep = 0;
    2274: 56 03 00 MOV   [X+3],0x0
(0062) 	static int xcount = 0;
(0063) 	static int ycount = 0;
(0064) 	static BYTE xpos = 0;
(0065) 	static BYTE ypos = 0;
(0066) 	static BYTE xopos = 0;
(0067) 	static BYTE yopos = 0;
(0068) 
(0069) 	//// Byte 1 - X&Y overflow, X&Y sign, and 3-button data
(0070) 	while(PS2RxBufOut == PS2RxBufIn); // Spin until we get data
    2277: 62 D0 00 MOV   REG[0xD0],0x0
    227A: 51 57    MOV   A,[PS2RxBufOut]
    227C: 62 D0 00 MOV   REG[0xD0],0x0
    227F: 3A 56    CMP   A,[PS2RxBufIn]
    2281: AF F5    JZ    0x2277
(0071) 	scancode = PS2RxBuffer[PS2RxBufOut];
    2283: 62 D0 00 MOV   REG[0xD0],0x0
    2286: 51 57    MOV   A,[PS2RxBufOut]
    2288: 62 D0 00 MOV   REG[0xD0],0x0
    228B: 53 21    MOV   [__r1],A
    228D: 55 22 00 MOV   [__r0],0x0
    2290: 06 21 04 ADD   [__r1],0x4
    2293: 0E 22 00 ADC   [__r0],0x0
    2296: 51 22    MOV   A,[__r0]
    2298: 60 D4    MOV   REG[0xD4],A
    229A: 3E 21    MVI   A,[__r1]
    229C: 54 01    MOV   [X+1],A
(0072) 	PS2RxBufOut++;
    229E: 62 D0 00 MOV   REG[0xD0],0x0
    22A1: 76 57    INC   [PS2RxBufOut]
(0073) 	// Wrap around the circular buffer pointer at 16
(0074) 	if (PS2RxBufOut & 0x10) PS2RxBufOut = 0;
    22A3: 47 57 10 TST   [PS2RxBufOut],0x10
    22A6: A0 04    JZ    0x22AB
    22A8: 55 57 00 MOV   [PS2RxBufOut],0x0
(0075) 	//// If Bit 3 isn't set, then this isn't Byte 1
(0076) 	if (!(scancode & 0x08)) return;
    22AB: 48 01 08 TST   [X+1],0x8
    22AE: B0 03    JNZ   0x22B2
    22B0: 84 7D    JMP   0x272E
(0077) 	yov = (scancode & 0x80) >> 7;
    22B2: 62 D0 00 MOV   REG[0xD0],0x0
    22B5: 52 01    MOV   A,[X+1]
    22B7: 21 80    AND   A,0x80
    22B9: 67       ASR   A
    22BA: 67       ASR   A
    22BB: 67       ASR   A
    22BC: 67       ASR   A
    22BD: 67       ASR   A
    22BE: 67       ASR   A
    22BF: 67       ASR   A
    22C0: 21 01    AND   A,0x1
    22C2: 54 09    MOV   [X+9],A
(0078) 	xov = (scancode & 0x40) >> 6;
    22C4: 52 01    MOV   A,[X+1]
    22C6: 21 40    AND   A,0x40
    22C8: 67       ASR   A
    22C9: 67       ASR   A
    22CA: 67       ASR   A
    22CB: 67       ASR   A
    22CC: 67       ASR   A
    22CD: 67       ASR   A
    22CE: 21 03    AND   A,0x3
    22D0: 54 0A    MOV   [X+10],A
(0079) 	ysign = (scancode & 0x20) >> 5;
    22D2: 52 01    MOV   A,[X+1]
    22D4: 21 20    AND   A,0x20
    22D6: 67       ASR   A
    22D7: 67       ASR   A
    22D8: 67       ASR   A
    22D9: 67       ASR   A
    22DA: 67       ASR   A
    22DB: 21 07    AND   A,0x7
    22DD: 54 06    MOV   [X+6],A
(0080) 	xsign = (scancode & 0x10) >> 4;
    22DF: 52 01    MOV   A,[X+1]
    22E1: 21 10    AND   A,0x10
    22E3: 67       ASR   A
    22E4: 67       ASR   A
    22E5: 67       ASR   A
    22E6: 67       ASR   A
    22E7: 21 0F    AND   A,0xF
    22E9: 54 07    MOV   [X+7],A
(0081) 	mbtn = (scancode & 0x04) >> 2;
    22EB: 52 01    MOV   A,[X+1]
    22ED: 21 04    AND   A,0x4
    22EF: 53 22    MOV   [__r0],A
    22F1: 68 22    ASR   [__r0]
    22F3: 68 22    ASR   [__r0]
    22F5: 26 22 3F AND   [__r0],0x3F
    22F8: 51 22    MOV   A,[__r0]
    22FA: 54 08    MOV   [X+8],A
(0082) 	rbtn = (scancode & 0x02) >> 1;
    22FC: 52 01    MOV   A,[X+1]
    22FE: 21 02    AND   A,0x2
    2300: 53 22    MOV   [__r0],A
    2302: 70 FB    AND   F,0xFB
    2304: 6E 22    RRC   [__r0]
    2306: 51 22    MOV   A,[__r0]
    2308: 54 04    MOV   [X+4],A
(0083) 	lbtn = (scancode & 0x01);
    230A: 52 01    MOV   A,[X+1]
    230C: 21 01    AND   A,0x1
    230E: 54 05    MOV   [X+5],A
(0084) 	//// Byte 2 - X Movement
(0085) 	while(PS2RxBufOut == PS2RxBufIn); // Spin until we get data
    2310: 62 D0 00 MOV   REG[0xD0],0x0
    2313: 51 57    MOV   A,[PS2RxBufOut]
    2315: 62 D0 00 MOV   REG[0xD0],0x0
    2318: 3A 56    CMP   A,[PS2RxBufIn]
    231A: AF F5    JZ    0x2310
(0086) 	scancode = PS2RxBuffer[PS2RxBufOut];
    231C: 62 D0 00 MOV   REG[0xD0],0x0
    231F: 51 57    MOV   A,[PS2RxBufOut]
    2321: 62 D0 00 MOV   REG[0xD0],0x0
    2324: 53 21    MOV   [__r1],A
    2326: 55 22 00 MOV   [__r0],0x0
    2329: 06 21 04 ADD   [__r1],0x4
    232C: 0E 22 00 ADC   [__r0],0x0
    232F: 51 22    MOV   A,[__r0]
    2331: 60 D4    MOV   REG[0xD4],A
    2333: 3E 21    MVI   A,[__r1]
    2335: 54 01    MOV   [X+1],A
(0087) 	PS2RxBufOut++;
    2337: 62 D0 00 MOV   REG[0xD0],0x0
    233A: 76 57    INC   [PS2RxBufOut]
(0088) 	// Wrap around the circular buffer pointer at 16 
(0089) 	if (PS2RxBufOut & 0x10) PS2RxBufOut = 0;
    233C: 47 57 10 TST   [PS2RxBufOut],0x10
    233F: A0 04    JZ    0x2344
    2341: 55 57 00 MOV   [PS2RxBufOut],0x0
(0090) 	// Update the X counts
(0091) 	if (xsign) { // Negative
    2344: 3D 07 00 CMP   [X+7],0x0
    2347: A0 51    JZ    0x2399
(0092) 		xstep = (~scancode)+1; // Make the 2s-complement negative a positive
    2349: 62 D0 00 MOV   REG[0xD0],0x0
    234C: 52 01    MOV   A,[X+1]
    234E: 73       CPL   A
    234F: 01 01    ADD   A,0x1
    2351: 54 02    MOV   [X+2],A
(0093) 		if (xcount - xstep > 0)	xcount -= xstep;
    2353: 52 02    MOV   A,[X+2]
    2355: 53 21    MOV   [__r1],A
    2357: 55 22 00 MOV   [__r0],0x0
    235A: 62 D0 00 MOV   REG[0xD0],0x0
    235D: 51 48    MOV   A,[0x48]
    235F: 62 D0 00 MOV   REG[0xD0],0x0
    2362: 12 21    SUB   A,[__r1]
    2364: 53 21    MOV   [__r1],A
    2366: 62 D0 00 MOV   REG[0xD0],0x0
    2369: 51 47    MOV   A,[0x47]
    236B: 62 D0 00 MOV   REG[0xD0],0x0
    236E: 1A 22    SBB   A,[__r0]
    2370: 53 22    MOV   [__r0],A
    2372: 50 00    MOV   A,0x0
    2374: 12 21    SUB   A,[__r1]
    2376: 51 22    MOV   A,[__r0]
    2378: 31 80    XOR   A,0x80
    237A: 53 16    MOV   [__rX],A
    237C: 50 80    MOV   A,0x80
    237E: 1A 16    SBB   A,[__rX]
    2380: D0 0D    JNC   0x238E
    2382: 52 02    MOV   A,[X+2]
    2384: 62 D0 00 MOV   REG[0xD0],0x0
    2387: 14 48    SUB   [0x48],A
    2389: 1E 47 00 SBB   [0x47],0x0
    238C: 80 53    JMP   0x23E0
(0094) 		else xcount = 0;
    238E: 62 D0 00 MOV   REG[0xD0],0x0
    2391: 55 48 00 MOV   [0x48],0x0
    2394: 55 47 00 MOV   [0x47],0x0
(0095) 	}
    2397: 80 48    JMP   0x23E0
(0096) 	else {
(0097) 		xstep = scancode;
    2399: 52 01    MOV   A,[X+1]
    239B: 54 02    MOV   [X+2],A
(0098) 		if (xcount + xstep < 0x01FF) xcount += xstep;
    239D: 62 D0 00 MOV   REG[0xD0],0x0
    23A0: 52 02    MOV   A,[X+2]
    23A2: 53 21    MOV   [__r1],A
    23A4: 55 22 00 MOV   [__r0],0x0
    23A7: 62 D0 00 MOV   REG[0xD0],0x0
    23AA: 51 48    MOV   A,[0x48]
    23AC: 62 D0 00 MOV   REG[0xD0],0x0
    23AF: 02 21    ADD   A,[__r1]
    23B1: 53 21    MOV   [__r1],A
    23B3: 62 D0 00 MOV   REG[0xD0],0x0
    23B6: 51 47    MOV   A,[0x47]
    23B8: 62 D0 00 MOV   REG[0xD0],0x0
    23BB: 0A 22    ADC   A,[__r0]
    23BD: 53 22    MOV   [__r0],A
    23BF: 51 21    MOV   A,[__r1]
    23C1: 11 FF    SUB   A,0xFF
    23C3: 51 22    MOV   A,[__r0]
    23C5: 31 80    XOR   A,0x80
    23C7: 19 81    SBB   A,0x81
    23C9: D0 0D    JNC   0x23D7
    23CB: 52 02    MOV   A,[X+2]
    23CD: 62 D0 00 MOV   REG[0xD0],0x0
    23D0: 04 48    ADD   [0x48],A
    23D2: 0E 47 00 ADC   [0x47],0x0
    23D5: 80 0A    JMP   0x23E0
(0099) 		else xcount = 0x01FF;
    23D7: 62 D0 00 MOV   REG[0xD0],0x0
    23DA: 55 48 FF MOV   [0x48],0xFF
    23DD: 55 47 01 MOV   [0x47],0x1
(0100) 	}
(0101) 	//// Byte 3 - Y Movement
(0102) 	while(PS2RxBufOut == PS2RxBufIn); // Spin until we get data
    23E0: 62 D0 00 MOV   REG[0xD0],0x0
    23E3: 51 57    MOV   A,[PS2RxBufOut]
    23E5: 62 D0 00 MOV   REG[0xD0],0x0
    23E8: 3A 56    CMP   A,[PS2RxBufIn]
    23EA: AF F5    JZ    0x23E0
(0103) 	scancode = PS2RxBuffer[PS2RxBufOut];
    23EC: 62 D0 00 MOV   REG[0xD0],0x0
    23EF: 51 57    MOV   A,[PS2RxBufOut]
    23F1: 62 D0 00 MOV   REG[0xD0],0x0
    23F4: 53 21    MOV   [__r1],A
    23F6: 55 22 00 MOV   [__r0],0x0
    23F9: 06 21 04 ADD   [__r1],0x4
    23FC: 0E 22 00 ADC   [__r0],0x0
    23FF: 51 22    MOV   A,[__r0]
    2401: 60 D4    MOV   REG[0xD4],A
    2403: 3E 21    MVI   A,[__r1]
    2405: 54 01    MOV   [X+1],A
(0104) 	PS2RxBufOut++;
    2407: 62 D0 00 MOV   REG[0xD0],0x0
    240A: 76 57    INC   [PS2RxBufOut]
(0105) 	// Wrap around the circular buffer pointer at 16 
(0106) 	if (PS2RxBufOut & 0x10) PS2RxBufOut = 0;
    240C: 47 57 10 TST   [PS2RxBufOut],0x10
    240F: A0 04    JZ    0x2414
    2411: 55 57 00 MOV   [PS2RxBufOut],0x0
(0107) 	// Update the Y counts
(0108) 	if (ysign) { // Negative
    2414: 3D 06 00 CMP   [X+6],0x0
    2417: A0 51    JZ    0x2469
(0109) 		ystep = (~scancode)+1; // Make the 2s-complement negative a positive
    2419: 62 D0 00 MOV   REG[0xD0],0x0
    241C: 52 01    MOV   A,[X+1]
    241E: 73       CPL   A
    241F: 01 01    ADD   A,0x1
    2421: 54 03    MOV   [X+3],A
(0110) 		if (ycount - ystep > 0)	ycount -= ystep;
    2423: 52 03    MOV   A,[X+3]
    2425: 53 21    MOV   [__r1],A
    2427: 55 22 00 MOV   [__r0],0x0
    242A: 62 D0 00 MOV   REG[0xD0],0x0
    242D: 51 4C    MOV   A,[0x4C]
    242F: 62 D0 00 MOV   REG[0xD0],0x0
    2432: 12 21    SUB   A,[__r1]
    2434: 53 21    MOV   [__r1],A
    2436: 62 D0 00 MOV   REG[0xD0],0x0
    2439: 51 4B    MOV   A,[0x4B]
    243B: 62 D0 00 MOV   REG[0xD0],0x0
    243E: 1A 22    SBB   A,[__r0]
    2440: 53 22    MOV   [__r0],A
    2442: 50 00    MOV   A,0x0
    2444: 12 21    SUB   A,[__r1]
    2446: 51 22    MOV   A,[__r0]
    2448: 31 80    XOR   A,0x80
    244A: 53 16    MOV   [__rX],A
    244C: 50 80    MOV   A,0x80
    244E: 1A 16    SBB   A,[__rX]
    2450: D0 0D    JNC   0x245E
    2452: 52 03    MOV   A,[X+3]
    2454: 62 D0 00 MOV   REG[0xD0],0x0
    2457: 14 4C    SUB   [0x4C],A
    2459: 1E 4B 00 SBB   [0x4B],0x0
    245C: 80 53    JMP   0x24B0
(0111) 		else ycount = 0;
    245E: 62 D0 00 MOV   REG[0xD0],0x0
    2461: 55 4C 00 MOV   [0x4C],0x0
    2464: 55 4B 00 MOV   [0x4B],0x0
(0112) 	}
    2467: 80 48    JMP   0x24B0
(0113) 	else {
(0114) 		ystep = scancode;
    2469: 52 01    MOV   A,[X+1]
    246B: 54 03    MOV   [X+3],A
(0115) 		if (ycount + ystep < 0x07FF) ycount += ystep;
    246D: 62 D0 00 MOV   REG[0xD0],0x0
    2470: 52 03    MOV   A,[X+3]
    2472: 53 21    MOV   [__r1],A
    2474: 55 22 00 MOV   [__r0],0x0
    2477: 62 D0 00 MOV   REG[0xD0],0x0
    247A: 51 4C    MOV   A,[0x4C]
    247C: 62 D0 00 MOV   REG[0xD0],0x0
    247F: 02 21    ADD   A,[__r1]
    2481: 53 21    MOV   [__r1],A
    2483: 62 D0 00 MOV   REG[0xD0],0x0
    2486: 51 4B    MOV   A,[0x4B]
    2488: 62 D0 00 MOV   REG[0xD0],0x0
    248B: 0A 22    ADC   A,[__r0]
    248D: 53 22    MOV   [__r0],A
    248F: 51 21    MOV   A,[__r1]
    2491: 11 FF    SUB   A,0xFF
    2493: 51 22    MOV   A,[__r0]
    2495: 31 80    XOR   A,0x80
    2497: 19 87    SBB   A,0x87
    2499: D0 0D    JNC   0x24A7
    249B: 52 03    MOV   A,[X+3]
    249D: 62 D0 00 MOV   REG[0xD0],0x0
    24A0: 04 4C    ADD   [0x4C],A
    24A2: 0E 4B 00 ADC   [0x4B],0x0
    24A5: 80 0A    JMP   0x24B0
(0116) 		else ycount = 0x07FF;
    24A7: 62 D0 00 MOV   REG[0xD0],0x0
    24AA: 55 4C FF MOV   [0x4C],0xFF
    24AD: 55 4B 07 MOV   [0x4B],0x7
(0117) 	}
(0118) 	//// Print the buttons' status and the X and Y counts to the LCD
(0119) 	LCD_Position(1,0);
    24B0: 10       PUSH  X
    24B1: 57 00    MOV   X,0x0
    24B3: 50 01    MOV   A,0x1
    24B5: 7C 0C C9 LCALL _LCD_Position
    24B8: 20       POP   X
(0120) 	if (lbtn) LCD_PrCString("L"); else LCD_PrCString(" ");
    24B9: 3D 05 00 CMP   [X+5],0x0
    24BC: A0 0F    JZ    0x24CC
    24BE: 10       PUSH  X
    24BF: 50 04    MOV   A,0x4
    24C1: 08       PUSH  A
    24C2: 50 E2    MOV   A,0xE2
    24C4: 5C       MOV   X,A
    24C5: 18       POP   A
    24C6: 7C 0B 44 LCALL _LCD_PrCString
    24C9: 20       POP   X
    24CA: 80 0D    JMP   0x24D8
    24CC: 10       PUSH  X
    24CD: 50 04    MOV   A,0x4
    24CF: 08       PUSH  A
    24D0: 50 E0    MOV   A,0xE0
    24D2: 5C       MOV   X,A
    24D3: 18       POP   A
    24D4: 7C 0B 44 LCALL _LCD_PrCString
    24D7: 20       POP   X
(0121) 	if (mbtn) LCD_PrCString("M"); else LCD_PrCString(" ");
    24D8: 3D 08 00 CMP   [X+8],0x0
    24DB: A0 0F    JZ    0x24EB
    24DD: 10       PUSH  X
    24DE: 50 04    MOV   A,0x4
    24E0: 08       PUSH  A
    24E1: 50 DE    MOV   A,0xDE
    24E3: 5C       MOV   X,A
    24E4: 18       POP   A
    24E5: 7C 0B 44 LCALL _LCD_PrCString
    24E8: 20       POP   X
    24E9: 80 0D    JMP   0x24F7
    24EB: 10       PUSH  X
    24EC: 50 04    MOV   A,0x4
    24EE: 08       PUSH  A
    24EF: 50 E0    MOV   A,0xE0
    24F1: 5C       MOV   X,A
    24F2: 18       POP   A
    24F3: 7C 0B 44 LCALL _LCD_PrCString
    24F6: 20       POP   X
(0122) 	if (rbtn) LCD_PrCString("RX:"); else LCD_PrCString(" X:");
    24F7: 3D 04 00 CMP   [X+4],0x0
    24FA: A0 0F    JZ    0x250A
    24FC: 10       PUSH  X
    24FD: 50 04    MOV   A,0x4
    24FF: 08       PUSH  A
    2500: 50 DA    MOV   A,0xDA
    2502: 5C       MOV   X,A
    2503: 18       POP   A
    2504: 7C 0B 44 LCALL _LCD_PrCString
    2507: 20       POP   X
    2508: 80 0D    JMP   0x2516
    250A: 10       PUSH  X
    250B: 50 04    MOV   A,0x4
    250D: 08       PUSH  A
    250E: 50 D6    MOV   A,0xD6
    2510: 5C       MOV   X,A
    2511: 18       POP   A
    2512: 7C 0B 44 LCALL _LCD_PrCString
    2515: 20       POP   X
(0123) 	LCD_PrHexInt(xcount);
    2516: 10       PUSH  X
    2517: 62 D0 00 MOV   REG[0xD0],0x0
    251A: 51 47    MOV   A,[0x47]
    251C: 08       PUSH  A
    251D: 51 48    MOV   A,[0x48]
    251F: 20       POP   X
    2520: 7C 0B 79 LCALL _LCD_PrHexInt
(0124) 	LCD_PrCString(" Y:");
    2523: 50 04    MOV   A,0x4
    2525: 08       PUSH  A
    2526: 50 D2    MOV   A,0xD2
    2528: 5C       MOV   X,A
    2529: 18       POP   A
    252A: 7C 0B 44 LCALL _LCD_PrCString
(0125) 	LCD_PrHexInt(ycount);
    252D: 62 D0 00 MOV   REG[0xD0],0x0
    2530: 51 4B    MOV   A,[0x4B]
    2532: 08       PUSH  A
    2533: 51 4C    MOV   A,[0x4C]
    2535: 20       POP   X
    2536: 7C 0B 79 LCALL _LCD_PrHexInt
    2539: 20       POP   X
(0126) 	//// Control the brightness of the PWM8LED with the Y-axis
(0127) 	yopos = ypos;
    253A: 62 D0 00 MOV   REG[0xD0],0x0
    253D: 51 66    MOV   A,[ScrollLock+2]
    253F: 62 D0 00 MOV   REG[0xD0],0x0
    2542: 53 68    MOV   [ScrollLock+4],A
(0128) 	ypos = (BYTE)(ycount>>4);
    2544: 62 D0 00 MOV   REG[0xD0],0x0
    2547: 51 4C    MOV   A,[0x4C]
    2549: 08       PUSH  A
    254A: 51 4B    MOV   A,[0x4B]
    254C: 62 D0 00 MOV   REG[0xD0],0x0
    254F: 53 22    MOV   [__r0],A
    2551: 18       POP   A
    2552: 53 21    MOV   [__r1],A
    2554: 68 22    ASR   [__r0]
    2556: 6E 21    RRC   [__r1]
    2558: 68 22    ASR   [__r0]
    255A: 6E 21    RRC   [__r1]
    255C: 68 22    ASR   [__r0]
    255E: 6E 21    RRC   [__r1]
    2560: 68 22    ASR   [__r0]
    2562: 6E 21    RRC   [__r1]
    2564: 51 21    MOV   A,[__r1]
    2566: 62 D0 00 MOV   REG[0xD0],0x0
    2569: 53 66    MOV   [ScrollLock+2],A
(0129) 	if (ypos != yopos) {
    256B: 51 66    MOV   A,[ScrollLock+2]
    256D: 62 D0 00 MOV   REG[0xD0],0x0
    2570: 3A 68    CMP   A,[ScrollLock+4]
    2572: A0 0B    JZ    0x257E
(0130) 		PWM8LED_WritePulseWidth(ypos);
    2574: 10       PUSH  X
    2575: 62 D0 00 MOV   REG[0xD0],0x0
    2578: 51 66    MOV   A,[ScrollLock+2]
    257A: 7C 0A ED LCALL _PWM8LED_WritePulseWidth
    257D: 20       POP   X
(0131) 	}
(0132) 	//// Pilot the cursor around the LCD with the X-axis
(0133) 	xopos = xpos;
    257E: 62 D0 00 MOV   REG[0xD0],0x0
    2581: 51 65    MOV   A,[ScrollLock+1]
    2583: 62 D0 00 MOV   REG[0xD0],0x0
    2586: 53 67    MOV   [ScrollLock+3],A
(0134) 	xpos = (BYTE)(xcount>>5);
    2588: 62 D0 00 MOV   REG[0xD0],0x0
    258B: 51 48    MOV   A,[0x48]
    258D: 08       PUSH  A
    258E: 51 47    MOV   A,[0x47]
    2590: 62 D0 00 MOV   REG[0xD0],0x0
    2593: 53 22    MOV   [__r0],A
    2595: 18       POP   A
    2596: 53 21    MOV   [__r1],A
    2598: 68 22    ASR   [__r0]
    259A: 6E 21    RRC   [__r1]
    259C: 68 22    ASR   [__r0]
    259E: 6E 21    RRC   [__r1]
    25A0: 68 22    ASR   [__r0]
    25A2: 6E 21    RRC   [__r1]
    25A4: 68 22    ASR   [__r0]
    25A6: 6E 21    RRC   [__r1]
    25A8: 68 22    ASR   [__r0]
    25AA: 6E 21    RRC   [__r1]
    25AC: 51 21    MOV   A,[__r1]
    25AE: 62 D0 00 MOV   REG[0xD0],0x0
    25B1: 53 65    MOV   [ScrollLock+1],A
(0135) 	if (lbtn) {
    25B3: 3D 05 00 CMP   [X+5],0x0
    25B6: A0 AC    JZ    0x2663
(0136) 		if (xpos >= xopos) {
    25B8: 51 65    MOV   A,[ScrollLock+1]
    25BA: 62 D0 00 MOV   REG[0xD0],0x0
    25BD: 3A 67    CMP   A,[ScrollLock+3]
    25BF: C0 52    JC    0x2612
(0137) 			for(i=xopos ; i<=xpos ; i++) {
    25C1: 62 D0 00 MOV   REG[0xD0],0x0
    25C4: 51 67    MOV   A,[ScrollLock+3]
    25C6: 54 00    MOV   [X+0],A
    25C8: 80 16    JMP   0x25DF
(0138) 				LCD_Position(0,i);
    25CA: 10       PUSH  X
    25CB: 59 00    MOV   X,[X+0]
    25CD: 50 00    MOV   A,0x0
    25CF: 7C 0C C9 LCALL _LCD_Position
(0139) 				LCD_WriteData(0xDB); // Square
    25D2: 50 DB    MOV   A,0xDB
    25D4: 7C 0B 92 LCALL LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData
(0140) 				LCD_Control(LCD_CURSOR_SH_LEFT);
    25D7: 50 10    MOV   A,0x10
    25D9: 7C 0B A6 LCALL _LCD_Control
    25DC: 20       POP   X
(0141) 			}
    25DD: 77 00    INC   [X+0]
    25DF: 62 D0 00 MOV   REG[0xD0],0x0
    25E2: 51 65    MOV   A,[ScrollLock+1]
    25E4: 62 D0 00 MOV   REG[0xD0],0x0
    25E7: 53 21    MOV   [__r1],A
    25E9: 55 22 00 MOV   [__r0],0x0
    25EC: 52 00    MOV   A,[X+0]
    25EE: 53 1F    MOV   [__r3],A
    25F0: 55 20 00 MOV   [__r2],0x0
    25F3: 47 1F 80 TST   [__r3],0x80
    25F6: A0 04    JZ    0x25FB
    25F8: 55 20 FF MOV   [__r2],0xFF
    25FB: 62 D0 00 MOV   REG[0xD0],0x0
    25FE: 51 21    MOV   A,[__r1]
    2600: 12 1F    SUB   A,[__r3]
    2602: 51 20    MOV   A,[__r2]
    2604: 31 80    XOR   A,0x80
    2606: 53 16    MOV   [__rX],A
    2608: 51 22    MOV   A,[__r0]
    260A: 31 80    XOR   A,0x80
    260C: 1A 16    SBB   A,[__rX]
    260E: DF BB    JNC   0x25CA
(0142) 		}
    2610: 80 5E    JMP   0x266F
(0143) 		else {
(0144) 			for(i=xopos ; i>=xpos ; i--) {
    2612: 62 D0 00 MOV   REG[0xD0],0x0
    2615: 51 67    MOV   A,[ScrollLock+3]
    2617: 54 00    MOV   [X+0],A
    2619: 80 16    JMP   0x2630
(0145) 				LCD_Position(0,i);
    261B: 10       PUSH  X
    261C: 59 00    MOV   X,[X+0]
    261E: 50 00    MOV   A,0x0
    2620: 7C 0C C9 LCALL _LCD_Position
(0146) 				LCD_WriteData(0xDB); // Square
    2623: 50 DB    MOV   A,0xDB
    2625: 7C 0B 92 LCALL LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData
(0147) 				LCD_Control(LCD_CURSOR_SH_LEFT);
    2628: 50 10    MOV   A,0x10
    262A: 7C 0B A6 LCALL _LCD_Control
    262D: 20       POP   X
(0148) 			}
    262E: 7B 00    DEC   [X+0]
    2630: 62 D0 00 MOV   REG[0xD0],0x0
    2633: 51 65    MOV   A,[ScrollLock+1]
    2635: 62 D0 00 MOV   REG[0xD0],0x0
    2638: 53 21    MOV   [__r1],A
    263A: 55 22 00 MOV   [__r0],0x0
    263D: 52 00    MOV   A,[X+0]
    263F: 53 1F    MOV   [__r3],A
    2641: 55 20 00 MOV   [__r2],0x0
    2644: 47 1F 80 TST   [__r3],0x80
    2647: A0 04    JZ    0x264C
    2649: 55 20 FF MOV   [__r2],0xFF
    264C: 62 D0 00 MOV   REG[0xD0],0x0
    264F: 51 1F    MOV   A,[__r3]
    2651: 12 21    SUB   A,[__r1]
    2653: 51 22    MOV   A,[__r0]
    2655: 31 80    XOR   A,0x80
    2657: 53 16    MOV   [__rX],A
    2659: 51 20    MOV   A,[__r2]
    265B: 31 80    XOR   A,0x80
    265D: 1A 16    SBB   A,[__rX]
    265F: DF BB    JNC   0x261B
(0149) 		}
(0150) 	}
    2661: 80 0D    JMP   0x266F
(0151) 	else {
(0152) 		LCD_Position(0,xpos);
    2663: 10       PUSH  X
    2664: 62 D0 00 MOV   REG[0xD0],0x0
    2667: 58 65    MOV   X,[ScrollLock+1]
    2669: 50 00    MOV   A,0x0
    266B: 7C 0C C9 LCALL _LCD_Position
    266E: 20       POP   X
(0153) 	}
(0154) 	if (rbtn) {
    266F: 3D 04 00 CMP   [X+4],0x0
    2672: A0 AF    JZ    0x2722
(0155) 		if (xpos >= xopos) {
    2674: 62 D0 00 MOV   REG[0xD0],0x0
    2677: 51 65    MOV   A,[ScrollLock+1]
    2679: 62 D0 00 MOV   REG[0xD0],0x0
    267C: 3A 67    CMP   A,[ScrollLock+3]
    267E: C0 52    JC    0x26D1
(0156) 			for(i=xopos ; i<=xpos ; i++) {
    2680: 62 D0 00 MOV   REG[0xD0],0x0
    2683: 51 67    MOV   A,[ScrollLock+3]
    2685: 54 00    MOV   [X+0],A
    2687: 80 16    JMP   0x269E
(0157) 				LCD_Position(0,i);
    2689: 10       PUSH  X
    268A: 59 00    MOV   X,[X+0]
    268C: 50 00    MOV   A,0x0
    268E: 7C 0C C9 LCALL _LCD_Position
(0158) 				LCD_WriteData(' ');
    2691: 50 20    MOV   A,0x20
    2693: 7C 0B 92 LCALL LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData
(0159) 				LCD_Control(LCD_CURSOR_SH_LEFT);
    2696: 50 10    MOV   A,0x10
    2698: 7C 0B A6 LCALL _LCD_Control
    269B: 20       POP   X
(0160) 			}
    269C: 77 00    INC   [X+0]
    269E: 62 D0 00 MOV   REG[0xD0],0x0
    26A1: 51 65    MOV   A,[ScrollLock+1]
    26A3: 62 D0 00 MOV   REG[0xD0],0x0
    26A6: 53 21    MOV   [__r1],A
    26A8: 55 22 00 MOV   [__r0],0x0
    26AB: 52 00    MOV   A,[X+0]
    26AD: 53 1F    MOV   [__r3],A
    26AF: 55 20 00 MOV   [__r2],0x0
    26B2: 47 1F 80 TST   [__r3],0x80
    26B5: A0 04    JZ    0x26BA
    26B7: 55 20 FF MOV   [__r2],0xFF
    26BA: 62 D0 00 MOV   REG[0xD0],0x0
    26BD: 51 21    MOV   A,[__r1]
    26BF: 12 1F    SUB   A,[__r3]
    26C1: 51 20    MOV   A,[__r2]
    26C3: 31 80    XOR   A,0x80
    26C5: 53 16    MOV   [__rX],A
    26C7: 51 22    MOV   A,[__r0]
    26C9: 31 80    XOR   A,0x80
    26CB: 1A 16    SBB   A,[__rX]
    26CD: DF BB    JNC   0x2689
(0161) 		}
    26CF: 80 5E    JMP   0x272E
(0162) 		else {
(0163) 			for(i=xopos ; i>=xpos ; i--) {
    26D1: 62 D0 00 MOV   REG[0xD0],0x0
    26D4: 51 67    MOV   A,[ScrollLock+3]
    26D6: 54 00    MOV   [X+0],A
    26D8: 80 16    JMP   0x26EF
(0164) 				LCD_Position(0,i);
    26DA: 10       PUSH  X
    26DB: 59 00    MOV   X,[X+0]
    26DD: 50 00    MOV   A,0x0
    26DF: 7C 0C C9 LCALL _LCD_Position
(0165) 				LCD_WriteData(' ');
    26E2: 50 20    MOV   A,0x20
    26E4: 7C 0B 92 LCALL LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData
(0166) 				LCD_Control(LCD_CURSOR_SH_LEFT);
    26E7: 50 10    MOV   A,0x10
    26E9: 7C 0B A6 LCALL _LCD_Control
    26EC: 20       POP   X
(0167) 			}
    26ED: 7B 00    DEC   [X+0]
    26EF: 62 D0 00 MOV   REG[0xD0],0x0
    26F2: 51 65    MOV   A,[ScrollLock+1]
    26F4: 62 D0 00 MOV   REG[0xD0],0x0
    26F7: 53 21    MOV   [__r1],A
    26F9: 55 22 00 MOV   [__r0],0x0
    26FC: 52 00    MOV   A,[X+0]
    26FE: 53 1F    MOV   [__r3],A
    2700: 55 20 00 MOV   [__r2],0x0
    2703: 47 1F 80 TST   [__r3],0x80
    2706: A0 04    JZ    0x270B
    2708: 55 20 FF MOV   [__r2],0xFF
    270B: 62 D0 00 MOV   REG[0xD0],0x0
    270E: 51 1F    MOV   A,[__r3]
    2710: 12 21    SUB   A,[__r1]
    2712: 51 22    MOV   A,[__r0]
    2714: 31 80    XOR   A,0x80
    2716: 53 16    MOV   [__rX],A
    2718: 51 20    MOV   A,[__r2]
    271A: 31 80    XOR   A,0x80
    271C: 1A 16    SBB   A,[__rX]
    271E: DF BB    JNC   0x26DA
(0168) 		}
(0169) 	}
    2720: 80 0D    JMP   0x272E
(0170) 	else {
(0171) 		LCD_Position(0,xpos);
    2722: 10       PUSH  X
    2723: 62 D0 00 MOV   REG[0xD0],0x0
    2726: 58 65    MOV   X,[ScrollLock+1]
    2728: 50 00    MOV   A,0x0
    272A: 7C 0C C9 LCALL _LCD_Position
    272D: 20       POP   X
(0172) 	}
    272E: 38 F5    ADD   SP,0xF5
    2730: 20       POP   X
    2731: 7F       RET   
FILE: C:\Users\Jacob\Desktop\ECE381\PS2BIT~1\PS2BIT~1\ps2.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "PSoCGPIOINT.h"
(0004) #include "ps2.h"
(0005) 
(0006) //// All external global variables (identified by names in LeadingCaps)
(0007) extern BYTE PS2FrameStatus; // Note: This only changes at the end of a complete frame or when the PS2OneShot fires (due to incomplete clock)
(0008) extern BYTE PS2RxBuffer[16]; // Receive buffer
(0009) extern BYTE PS2RxBufIn; // Bytes in receive buffer
(0010) extern BYTE PS2RxBufOut; // Bytes in receive buffer
(0011) extern BYTE TenMicroSecTimerReps;
(0012) 
(0013) //// Global Variables unique to this file (identified by names in LeadingCaps)
(0014) static BYTE PS2FrameState = 0;
(0015) static BYTE PS2DataIn = 0;
(0016) static BYTE PS2DataOut = 0;
(0017) static BYTE XXXForceBadRxParity = 0; // XXX - Testing
(0018) static BYTE XXXForceBadTxParity = 0; // XXX - Testing
(0019) 
(0020) //// State names used in the PS/2 bit-banging state machine implemented
(0021) //// in PS2DigBuf_ISR and PS2OneShot_ISR.
(0022) #define PS2_START_BIT_IN	0
(0023) #define PS2_D0_BIT_IN		1
(0024) #define PS2_D1_BIT_IN		2
(0025) #define PS2_D2_BIT_IN		3
(0026) #define PS2_D3_BIT_IN		4
(0027) #define PS2_D4_BIT_IN		5
(0028) #define PS2_D5_BIT_IN		6
(0029) #define PS2_D6_BIT_IN		7
(0030) #define PS2_D7_BIT_IN		8
(0031) #define PS2_PARITY_BIT_IN	9
(0032) #define PS2_STOP_BIT_IN		10
(0033) #define PS2_TRANSMIT_BEGIN	11
(0034) #define PS2_D0_BIT_OUT		12
(0035) #define PS2_D1_BIT_OUT		13
(0036) #define PS2_D2_BIT_OUT		14
(0037) #define PS2_D3_BIT_OUT		15
(0038) #define PS2_D4_BIT_OUT		16
(0039) #define PS2_D5_BIT_OUT		17
(0040) #define PS2_D6_BIT_OUT		18
(0041) #define PS2_D7_BIT_OUT		19
(0042) #define PS2_PARITY_BIT_OUT	20
(0043) #define PS2_STOP_BIT_OUT	21
(0044) #define PS2_ACK_BIT_IN		22
(0045) 
(0046) //-----------------------------------------------------------------------------
(0047) // Transmit a byte to the PS/2 device
(0048) //
(0049) // Returns:
(0050) //	0						No error in transmission or reception
(0051) //	DEVICE_TX_TIMEOUT		Timeout in transmission waiting for Clock
(0052) //	DEVICE_TX_FRAME_ERROR	A TX frame error occured while sending
(0053) //	DEVICE_ERROR			The device didn't generate enough clock transitions
(0054) //
(0055) // XXX - Implement this!
(0056) // From http://www.networktechinc.com/ps2-prots.html:
(0057) // The system checks for an PS/2 device transmission in process.
(0058) // If a transmission is in process and beyond the 10th clock, the
(0059) // system must receive the data.
(0060) // XXX - Sort-of implemented in the first line of this function.
(0061) //-----------------------------------------------------------------------------
(0062) BYTE PS2_Write_Byte(BYTE ps2data)
(0063) {
_PS2_Write_Byte:
  delay                --> X+0
  ps2data              --> X-4
    2732: 10       PUSH  X
    2733: 4F       MOV   X,SP
    2734: 38 01    ADD   SP,0x1
(0064) 	BYTE delay;
(0065) 
(0066) 	//// If we're receiving something, wait until the transmission is done.
(0067) 	while(PS2FrameState != PS2_START_BIT_IN);
    2736: 62 D0 00 MOV   REG[0xD0],0x0
    2739: 3C 69 00 CMP   [ps2.c:PS2FrameState],0x0
    273C: BF F9    JNZ   0x2736
(0068) 	//// Copy the byte-to-be-sent to the PS2DataOut global variable used by
(0069) 	//// the PS/2 communication ISR
(0070) 	PS2DataOut = ps2data;
    273E: 52 FC    MOV   A,[X-4]
    2740: 62 D0 00 MOV   REG[0xD0],0x0
    2743: 53 6B    MOV   [ps2.c:PS2DataOut],A
(0071) 	//// XXX - Diagnostics: Make a trigger pulse for the oscilloscope
(0072) 	//TRIGGER_LOW;
(0073) 	//delay = 1;
(0074) 	//while(delay--);
(0075) 	//TRIGGER_HIGH;
(0076) 	//
(0077) 	//// Initialize the state machine to transmit mode.
(0078) 	PS2FrameState = PS2_TRANSMIT_BEGIN;
    2745: 62 D0 00 MOV   REG[0xD0],0x0
    2748: 55 69 0B MOV   [ps2.c:PS2FrameState],0xB
(0079) 	//// Bring the PS/2 Clock line LOW. This will trigger an interrupt
(0080) 	//// on PS2DigBuf which will advance the state machine to PS2_D0_BIT_OUT.
(0081) 	PS2CLOCK_LOW;
    274B: 62 D0 00 MOV   REG[0xD0],0x0
    274E: 26 00 F7 AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xF7
    2751: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2753: 60 04    MOV   REG[0x4],A
(0082) 	//// Hold the clock line LOW for a min/max of 90us/100us total (min 60us)
(0083) 	//// Set up the timer to let us know when 60us have elapsed.
(0084) 	//// Note: Timer setup, polling, and ISR can add up to 10us of latency.
(0085) 	TenMicroSecTimerReps = 1;
    2755: 62 D0 00 MOV   REG[0xD0],0x0
    2758: 55 58 01 MOV   [TenMicroSecTimerReps],0x1
(0086) 	TenMicroSecTimer_WritePeriod(5); // (5+1) * 10us = 60us
    275B: 10       PUSH  X
    275C: 57 00    MOV   X,0x0
    275E: 50 05    MOV   A,0x5
    2760: 7C 09 72 LCALL _TenMicroSecTimer_WritePeriod
(0087) 	TenMicroSecTimer_Start();
    2763: 7C 09 6A LCALL _TenMicroSecTimer_Start
    2766: 20       POP   X
(0088) 	while(TenMicroSecTimerReps);
    2767: 62 D0 00 MOV   REG[0xD0],0x0
    276A: 3C 58 00 CMP   [TenMicroSecTimerReps],0x0
    276D: BF F9    JNZ   0x2767
(0089) 	TenMicroSecTimer_Stop();
    276F: 10       PUSH  X
    2770: 7C 09 6E LCALL _TenMicroSecTimer_Stop
    2773: 20       POP   X
(0090) 	//// Bring the PS/2 Data line LOW (note: this is also the Start bit out)
(0091) 	PS2DATA_LOW;
    2774: 62 D0 00 MOV   REG[0xD0],0x0
    2777: 26 00 EF AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    277A: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    277C: 60 04    MOV   REG[0x4],A
(0092) 	//// Set up the timer to let us know when 30us have elapsed.
(0093) 	//// Note: Timer setup, polling, and ISR can add up to 10us of latency.
(0094) 	TenMicroSecTimerReps = 1;
    277E: 62 D0 00 MOV   REG[0xD0],0x0
    2781: 55 58 01 MOV   [TenMicroSecTimerReps],0x1
(0095) 	TenMicroSecTimer_WritePeriod(2); // (2+1) * 10us = 30us
    2784: 10       PUSH  X
    2785: 57 00    MOV   X,0x0
    2787: 50 02    MOV   A,0x2
    2789: 7C 09 72 LCALL _TenMicroSecTimer_WritePeriod
(0096) 	TenMicroSecTimer_Start();
    278C: 7C 09 6A LCALL _TenMicroSecTimer_Start
    278F: 20       POP   X
(0097) 	while(TenMicroSecTimerReps);
    2790: 62 D0 00 MOV   REG[0xD0],0x0
    2793: 3C 58 00 CMP   [TenMicroSecTimerReps],0x0
    2796: BF F9    JNZ   0x2790
(0098) 	TenMicroSecTimer_Stop();
    2798: 10       PUSH  X
    2799: 7C 09 6E LCALL _TenMicroSecTimer_Stop
    279C: 20       POP   X
(0099) 	//// Bring the clock line HIGH which should cause the device to generate
(0100) 	//// a clock signal.
(0101) 	//// Note: Normally, a HIGH level on the Clock line causes the PS2OneShot
(0102) 	//// to start its relax interval timing, however, interrupts for the
(0103) 	//// PS2OneShot are only enabled when actively transmitting or receiving.
(0104) 	PS2CLOCK_HIGH;
    279D: 62 D0 00 MOV   REG[0xD0],0x0
    27A0: 2E 00 08 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x8
    27A3: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    27A5: 60 04    MOV   REG[0x4],A
(0105) 	//// Per Adam Chapweske: Wait here for 15ms or until we've transitioned
(0106) 	//// out of the PS2_D0_BIT_OUT state. If this time is exceeded, it is a
(0107) 	//// Transmit Timeout.
(0108) 	TenMicroSecTimerReps = 1;
    27A7: 62 D0 00 MOV   REG[0xD0],0x0
    27AA: 55 58 01 MOV   [TenMicroSecTimerReps],0x1
(0109) 	TenMicroSecTimer_WritePeriod(1499); // (1499+1) * 10us = 15ms
    27AD: 10       PUSH  X
    27AE: 57 05    MOV   X,0x5
    27B0: 50 DB    MOV   A,0xDB
    27B2: 7C 09 72 LCALL _TenMicroSecTimer_WritePeriod
(0110) 	TenMicroSecTimer_Start();
    27B5: 7C 09 6A LCALL _TenMicroSecTimer_Start
    27B8: 20       POP   X
(0111) 	while(TenMicroSecTimerReps&&(PS2FrameState == PS2_D0_BIT_OUT));
    27B9: 62 D0 00 MOV   REG[0xD0],0x0
    27BC: 3C 58 00 CMP   [TenMicroSecTimerReps],0x0
    27BF: A0 09    JZ    0x27C9
    27C1: 62 D0 00 MOV   REG[0xD0],0x0
    27C4: 3C 69 0C CMP   [ps2.c:PS2FrameState],0xC
    27C7: AF F1    JZ    0x27B9
(0112) 	TenMicroSecTimer_Stop();
    27C9: 10       PUSH  X
    27CA: 7C 09 6E LCALL _TenMicroSecTimer_Stop
    27CD: 20       POP   X
(0113) 	//// If we've timed out, without moving from the PS2_D0_BIT_OUT state,
(0114) 	//// it means the device never sent us a clock signal after our
(0115) 	//// transmission request. Return a Transmit Timeout Error code.
(0116) 	if (PS2FrameState == PS2_D0_BIT_OUT) {
    27CE: 62 D0 00 MOV   REG[0xD0],0x0
    27D1: 3C 69 0C CMP   [ps2.c:PS2FrameState],0xC
    27D4: B0 18    JNZ   0x27ED
(0117) 		PS2DATA_HIGH; // Since we've timed-out, bring the Data line HIGH again
    27D6: 62 D0 00 MOV   REG[0xD0],0x0
    27D9: 2E 00 10 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    27DC: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    27DE: 60 04    MOV   REG[0x4],A
(0118) 		PS2FrameState = PS2_START_BIT_IN; // Reset the state machine
    27E0: 62 D0 00 MOV   REG[0xD0],0x0
    27E3: 55 69 00 MOV   [ps2.c:PS2FrameState],0x0
(0119) 		return(DEVICE_TX_TIMEOUT);
    27E6: 62 D0 00 MOV   REG[0xD0],0x0
    27E9: 50 01    MOV   A,0x1
    27EB: 80 38    JMP   0x2824
(0120) 	}
(0121) 	//// We've transitioned out of the PS2_D0_BIT_OUT state so wait until
(0122) 	//// we return to the PS2_START_BIT_IN state, either because we completed
(0123) 	//// transmitting a full frame or the PS2OneShot reset us.
(0124) 	while(PS2FrameState != PS2_START_BIT_IN);
    27ED: 62 D0 00 MOV   REG[0xD0],0x0
    27F0: 3C 69 00 CMP   [ps2.c:PS2FrameState],0x0
    27F3: BF F9    JNZ   0x27ED
(0125) 	//// If the transmission was successful, return 0.
(0126) 	if (PS2FrameStatus & FRAME_BYTE_TRANSMITTED) {
    27F5: 62 D0 00 MOV   REG[0xD0],0x0
    27F8: 47 63 02 TST   [PS2FrameStatus],0x2
    27FB: A0 0B    JZ    0x2807
(0127) 		PS2FrameStatus = 0; // Clear PS2FrameStatus
    27FD: 55 63 00 MOV   [PS2FrameStatus],0x0
(0128) 		return(0);
    2800: 62 D0 00 MOV   REG[0xD0],0x0
    2803: 50 00    MOV   A,0x0
    2805: 80 1E    JMP   0x2824
(0129) 	}
(0130) 	//// If the transmission had a frame error, notify the calling function.
(0131) 	if (PS2FrameStatus & FRAME_TX_FRAME_ERROR) {
    2807: 62 D0 00 MOV   REG[0xD0],0x0
    280A: 47 63 10 TST   [PS2FrameStatus],0x10
    280D: A0 0B    JZ    0x2819
(0132) 		PS2FrameStatus = 0; // Clear PS2FrameStatus
    280F: 55 63 00 MOV   [PS2FrameStatus],0x0
(0133) 		return(DEVICE_TX_FRAME_ERROR);
    2812: 62 D0 00 MOV   REG[0xD0],0x0
    2815: 50 04    MOV   A,0x4
    2817: 80 0C    JMP   0x2824
(0134) 	}
(0135) 	//// The only other condition, FRAME_INCOMPLETE, means device error.
(0136) 	PS2FrameStatus = 0; // Clear PS2FrameStatus
    2819: 62 D0 00 MOV   REG[0xD0],0x0
    281C: 55 63 00 MOV   [PS2FrameStatus],0x0
(0137) 	return(DEVICE_ERROR);
    281F: 62 D0 00 MOV   REG[0xD0],0x0
    2822: 50 40    MOV   A,0x40
    2824: 38 FF    ADD   SP,0xFF
    2826: 20       POP   X
    2827: 7F       RET   
(0138) }
(0139) 
(0140) //-----------------------------------------------------------------------------
(0141) // Send a command to the PS/2 device and process the device's response.
(0142) //
(0143) // Returns:
(0144) //	0						No error in transmission or reception
(0145) //	DEVICE_TX_TIMEOUT		Timeout in transmission waiting for Clock
(0146) //	DEVICE_RX_TIMEOUT		No device response to our command
(0147) //	DEVICE_TX_FRAME_ERROR	A TX frame error occured while sending
(0148) //	DEVICE_RX_FRAME_ERROR	An RX frame error occured while receiving
(0149) //	DEVICE_INVALID_RESPONSE	The device response to our command was not valid
(0150) //	DEVICE_ERROR			The device didn't generate enough clock transitions
(0151) //-----------------------------------------------------------------------------
(0152) // From: The AT-PS/2 Keyboard Interface, Copyright 2001, Adam Chapweske:
(0153) //
(0154) // Every byte sent to the keyboard gets a response of 0xFA ("acknowledge")
(0155) // from the keyboard.  The only exceptions to this are the keyboard's response
(0156) // to the "Resend" and "Echo" commands.  The host should wait for an
(0157) // "acknowledge" before sending the next byte to the keyboard.  The keyboard
(0158) // clears its output buffer in response to any command.
(0159) //-----------------------------------------------------------------------------
(0160) BYTE PS2_Send_Command_Process_Response(BYTE ps2data)
(0161) {
_PS2_Send_Command_Process_Response:
  dataout              --> X+1
  txstatus             --> X+0
  ps2data              --> X-4
    2828: 10       PUSH  X
    2829: 4F       MOV   X,SP
    282A: 38 04    ADD   SP,0x4
(0162) 	BYTE dataout;
(0163) 	BYTE txstatus;
(0164) 
(0165) 	//// Loop in case we get a RESEND response from the PS/2 device.
(0166) 	//// XXX - Should we put an upper bound on how many Resends we're willing
(0167) 	//// to do for writing a single byte? (e.g. i=3; while(i--) { ... })
(0168) 	dataout = ps2data;
    282C: 52 FC    MOV   A,[X-4]
    282E: 54 01    MOV   [X+1],A
    2830: 81 01    JMP   0x2932
(0169) 	while(1) {
(0170) 		txstatus = PS2_Write_Byte(dataout);
    2832: 52 01    MOV   A,[X+1]
    2834: 08       PUSH  A
    2835: 9E FB    CALL  _PS2_Write_Byte
    2837: 38 FF    ADD   SP,0xFF
    2839: 62 D0 00 MOV   REG[0xD0],0x0
    283C: 54 00    MOV   [X+0],A
(0171) 		//// A non-zero return value means there was an transmission error:
(0172) 		//// DEVICE_TX_TIMEOUT, DEVICE_TX_FRAME_ERROR, or DEVICE_ERROR
(0173) 		if (txstatus) {
    283E: 3D 00 00 CMP   [X+0],0x0
    2841: A0 05    JZ    0x2847
(0174) 			return(txstatus);
    2843: 52 00    MOV   A,[X+0]
    2845: 80 F9    JMP   0x293F
(0175) 		}
(0176) 		///////////////////////////////////////////////////////////////////////
(0177) 		//// A response should come from the keyboard within 20ms from now.
(0178) 		TenMicroSecTimerReps = 1;
    2847: 62 D0 00 MOV   REG[0xD0],0x0
    284A: 55 58 01 MOV   [TenMicroSecTimerReps],0x1
(0179) 		TenMicroSecTimer_WritePeriod(1999); // (1999+1) * 10us = 20ms
    284D: 10       PUSH  X
    284E: 57 07    MOV   X,0x7
    2850: 50 CF    MOV   A,0xCF
    2852: 7C 09 72 LCALL _TenMicroSecTimer_WritePeriod
(0180) 		TenMicroSecTimer_Start();
    2855: 7C 09 6A LCALL _TenMicroSecTimer_Start
    2858: 20       POP   X
(0181) 		while(TenMicroSecTimerReps&&(!PS2FrameStatus));
    2859: 62 D0 00 MOV   REG[0xD0],0x0
    285C: 3C 58 00 CMP   [TenMicroSecTimerReps],0x0
    285F: A0 09    JZ    0x2869
    2861: 62 D0 00 MOV   REG[0xD0],0x0
    2864: 3C 63 00 CMP   [PS2FrameStatus],0x0
    2867: AF F1    JZ    0x2859
(0182) 		TenMicroSecTimer_Stop();
    2869: 10       PUSH  X
    286A: 7C 09 6E LCALL _TenMicroSecTimer_Stop
    286D: 20       POP   X
(0183) 		//// If the device sent us a response, process it.
(0184) 		if (PS2FrameStatus & FRAME_DATA_AVAILABLE) {
    286E: 62 D0 00 MOV   REG[0xD0],0x0
    2871: 47 63 01 TST   [PS2FrameStatus],0x1
    2874: A0 7F    JZ    0x28F4
(0185) 			//// Clear PS2FrameStatus
(0186) 			PS2FrameStatus = 0x00;
    2876: 55 63 00 MOV   [PS2FrameStatus],0x0
(0187) 			//// Remove the response from the RX Buffer
(0188) 			if (PS2RxBufIn) PS2RxBufIn--; else PS2RxBufIn = 15;
    2879: 62 D0 00 MOV   REG[0xD0],0x0
    287C: 3C 56 00 CMP   [PS2RxBufIn],0x0
    287F: A0 05    JZ    0x2885
    2881: 7A 56    DEC   [PS2RxBufIn]
    2883: 80 07    JMP   0x288B
    2885: 62 D0 00 MOV   REG[0xD0],0x0
    2888: 55 56 0F MOV   [PS2RxBufIn],0xF
(0189) 			//// Valid responses: ACK (0xFA), Resend (0xFE), or Echo (0xEE)
(0190) 			switch(PS2DataIn) {
    288B: 62 D0 00 MOV   REG[0xD0],0x0
    288E: 51 6A    MOV   A,[ps2.c:PS2DataIn]
    2890: 54 03    MOV   [X+3],A
    2892: 56 02 00 MOV   [X+2],0x0
    2895: 52 03    MOV   A,[X+3]
    2897: 11 FA    SUB   A,0xFA
    2899: 62 D0 00 MOV   REG[0xD0],0x0
    289C: 53 15    MOV   [__rY],A
    289E: 52 02    MOV   A,[X+2]
    28A0: 31 80    XOR   A,0x80
    28A2: 19 80    SBB   A,0x80
    28A4: 2A 15    OR    A,[__rY]
    28A6: A0 1B    JZ    0x28C2
    28A8: D0 0D    JNC   0x28B6
    28AA: 3D 02 00 CMP   [X+2],0x0
    28AD: B0 06    JNZ   0x28B4
    28AF: 3D 03 EE CMP   [X+3],0xEE
    28B2: A0 16    JZ    0x28C9
    28B4: 80 27    JMP   0x28DC
    28B6: 3D 02 00 CMP   [X+2],0x0
    28B9: B0 06    JNZ   0x28C0
    28BB: 3D 03 FE CMP   [X+3],0xFE
    28BE: A0 35    JZ    0x28F4
    28C0: 80 1B    JMP   0x28DC
(0191) 			case 0xFA: // ACK: The device correctly received our command
(0192) 				return(0);
    28C2: 62 D0 00 MOV   REG[0xD0],0x0
    28C5: 50 00    MOV   A,0x0
    28C7: 80 77    JMP   0x293F
(0193) 			case 0xFE: // RESEND: The device wants us to resend the last byte
(0194) 				//// Caused by the device getting a parity error.
(0195) 				//// If we break out of this switch, the while() loop we're in
(0196) 				//// will resend our command.
(0197) 				// XXX - Should we keep a count of resend requests received from
(0198) 				// the device? Should we give up after many back-to-back Resends?
(0199) 				break;
(0200) 			case 0xEE: // ECHO: The device responded with an Echo
(0201) 				//// This should be because we sent it an Echo
(0202) 				if (ps2data == 0xEE) {
    28C9: 3D FC EE CMP   [X-4],0xEE
    28CC: B0 08    JNZ   0x28D5
(0203) 					return(0);
    28CE: 62 D0 00 MOV   REG[0xD0],0x0
    28D1: 50 00    MOV   A,0x0
    28D3: 80 6B    JMP   0x293F
(0204) 				}
(0205) 				//// If we received an Echo but didn't send one, it's invalid.
(0206) 				return(DEVICE_INVALID_RESPONSE);
    28D5: 62 D0 00 MOV   REG[0xD0],0x0
    28D8: 50 20    MOV   A,0x20
    28DA: 80 64    JMP   0x293F
(0207) 			//// XXX - What if we get an error code from the device? Can we? 
(0208) 			////       Test what happens when we send a bogus command.
(0209) 			//case 0xFC: // ERROR: The device indicated an error
(0210) 			default:
(0211) 				LCD_Position(0,14);
    28DC: 10       PUSH  X
    28DD: 57 0E    MOV   X,0xE
    28DF: 50 00    MOV   A,0x0
    28E1: 7C 0C C9 LCALL _LCD_Position
(0212) 				LCD_PrHexByte(PS2DataIn);
    28E4: 62 D0 00 MOV   REG[0xD0],0x0
    28E7: 51 6A    MOV   A,[ps2.c:PS2DataIn]
    28E9: 7C 0B 66 LCALL _LCD_PrHexByte
    28EC: 20       POP   X
(0213) 				// We should never get here. This can only happen if the
(0214) 				// device sent us a response to a command that wasn't one
(0215) 				// of the three listed above.
(0216) 				return(DEVICE_INVALID_RESPONSE);
    28ED: 62 D0 00 MOV   REG[0xD0],0x0
    28F0: 50 20    MOV   A,0x20
    28F2: 80 4C    JMP   0x293F
(0217) 			}
(0218) 		}
(0219) 		//// If the response frame from the device had a parity error,
(0220) 		//// send a RESEND command.
(0221) 		if (PS2FrameStatus & FRAME_RX_PARITY_ERROR) {
    28F4: 62 D0 00 MOV   REG[0xD0],0x0
    28F7: 47 63 04 TST   [PS2FrameStatus],0x4
    28FA: A0 09    JZ    0x2904
(0222) 			PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    28FC: 55 63 00 MOV   [PS2FrameStatus],0x0
(0223) 			dataout = 0xFE;
    28FF: 56 01 FE MOV   [X+1],0xFE
(0224) 			continue;
    2902: 80 2F    JMP   0x2932
(0225) 		}
(0226) 		//// If we didn't get any change in frame status in response to our
(0227) 		//// transmission then return a Receive Timeout Error code.
(0228) 		//// Per Adam Chapweske: Device is probably broken.
(0229) 		//// XXX - Then should this return DEVICE_ERROR instead?
(0230) 		////       If so, just change the return() to a break
(0231) 		if (!PS2FrameStatus) {
    2904: 62 D0 00 MOV   REG[0xD0],0x0
    2907: 3C 63 00 CMP   [PS2FrameStatus],0x0
    290A: B0 08    JNZ   0x2913
(0232) 			return(DEVICE_RX_TIMEOUT);
    290C: 62 D0 00 MOV   REG[0xD0],0x0
    290F: 50 02    MOV   A,0x2
    2911: 80 2D    JMP   0x293F
(0233) 		}
(0234) 		//// If we have an incomplete number of clock transitions in the
(0235) 		//// response from the device, it is broken or was unplugged.
(0236) 		if (PS2FrameStatus & FRAME_INCOMPLETE) {
    2913: 62 D0 00 MOV   REG[0xD0],0x0
    2916: 47 63 20 TST   [PS2FrameStatus],0x20
    2919: A0 06    JZ    0x2920
(0237) 			PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    291B: 55 63 00 MOV   [PS2FrameStatus],0x0
(0238) 			break;
    291E: 80 15    JMP   0x2934
(0239) 		}
(0240) 		//// XXX - What should we do if we get an FRAME_RX_FRAME_ERROR?
(0241) 		////       The specs aren't clear on what to do with framing errors.
(0242) 		if (PS2FrameStatus & FRAME_RX_FRAME_ERROR) {
    2920: 62 D0 00 MOV   REG[0xD0],0x0
    2923: 47 63 08 TST   [PS2FrameStatus],0x8
    2926: A0 0B    JZ    0x2932
(0243) 			PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    2928: 55 63 00 MOV   [PS2FrameStatus],0x0
(0244) 			return(DEVICE_RX_FRAME_ERROR);
    292B: 62 D0 00 MOV   REG[0xD0],0x0
    292E: 50 08    MOV   A,0x8
    2930: 80 0E    JMP   0x293F
(0245) 		}
(0246) 	}
    2932: 8E FF    JMP   0x2832
(0247) 	//// If we get here, the device is faulty (incomplete frame).
(0248) 	PS2FrameStatus = 0x00;
    2934: 62 D0 00 MOV   REG[0xD0],0x0
    2937: 55 63 00 MOV   [PS2FrameStatus],0x0
(0249) 	return(DEVICE_ERROR);
    293A: 62 D0 00 MOV   REG[0xD0],0x0
    293D: 50 40    MOV   A,0x40
    293F: 38 FC    ADD   SP,0xFC
    2941: 20       POP   X
    2942: 7F       RET   
(0250) }
(0251) 
(0252) //-----------------------------------------------------------------------------
(0253) // Determines if a PS/2 keyboard or mouse is present by detecting either the
(0254) // Basic Assurance Test (BAT) completion code at power-on or, failing that,
(0255) // sending a RESET command to the device and detecting the subsequent BAT code.
(0256) // Also waits 20ms after receiving a valid BAT code for the device to send a
(0257) // Mouse ID (0x00) code. If this is detected, the function identifies the
(0258) // device as a mouse in the return value.
(0259) //
(0260) //	0						No error in transmission or reception
(0261) //	DEVICE_TX_TIMEOUT		Timeout in transmission waiting for Clock
(0262) //	DEVICE_RX_TIMEOUT		The device didn't respond to our command
(0263) //	DEVICE_TX_FRAME_ERROR	A TX frame error occured while sending
(0264) //	DEVICE_RX_FRAME_ERROR	An RX frame error occured while receiving
(0265) //	DEVICE_IS_MOUSE			A mouse is detected. If not set, assume keyboard
(0266) //	DEVICE_BAD_BAT			Device responded with a bad BAT self-test
(0267) //	DEVICE_INVALID_RESPONSE	The device response to our command was not valid
(0268) //	DEVICE_ERROR			The device didn't generate enough clock transitions
(0269) //-----------------------------------------------------------------------------
(0270) BYTE PS2_Detect_Device(void)
(0271) {
_PS2_Detect_Device:
  power_on_bat         --> X+1
  status               --> X+0
    2943: 10       PUSH  X
    2944: 4F       MOV   X,SP
    2945: 38 02    ADD   SP,0x2
(0272) 	BYTE power_on_bat = 0;
    2947: 56 01 00 MOV   [X+1],0x0
(0273) 	BYTE status;
(0274) 
(0275) 	///////////////////////////////////////////////////////////////////////////
(0276) 	// Determine if the device has just powered on, i.e. we receive an 0xAA
(0277) 	// within 750ms (we'll wait 1000ms).
(0278) 	///////////////////////////////////////////////////////////////////////////
(0279) 	//// Set up the timer to let us know when 1000ms has elapsed.
(0280) 	TenMicroSecTimerReps = 2;
    294A: 62 D0 00 MOV   REG[0xD0],0x0
    294D: 55 58 02 MOV   [TenMicroSecTimerReps],0x2
(0281) 	TenMicroSecTimer_WritePeriod(49999); // 2*((49999+1) * 10us) = 1000ms
    2950: 10       PUSH  X
    2951: 57 C3    MOV   X,0xC3
    2953: 50 4F    MOV   A,0x4F
    2955: 7C 09 72 LCALL _TenMicroSecTimer_WritePeriod
(0282) 	TenMicroSecTimer_Start();
    2958: 7C 09 6A LCALL _TenMicroSecTimer_Start
    295B: 20       POP   X
(0283) 	//// Wait until we either get a change in frame status or the timer elapses
(0284) 	while(TenMicroSecTimerReps&&(!PS2FrameStatus));
    295C: 62 D0 00 MOV   REG[0xD0],0x0
    295F: 3C 58 00 CMP   [TenMicroSecTimerReps],0x0
    2962: A0 09    JZ    0x296C
    2964: 62 D0 00 MOV   REG[0xD0],0x0
    2967: 3C 63 00 CMP   [PS2FrameStatus],0x0
    296A: AF F1    JZ    0x295C
(0285) 	TenMicroSecTimer_Stop();
    296C: 10       PUSH  X
    296D: 7C 09 6E LCALL _TenMicroSecTimer_Stop
    2970: 20       POP   X
(0286) 	//// If we got a valid frame, check to see if it is a BAT code
(0287) 	if (PS2FrameStatus & FRAME_DATA_AVAILABLE) {
    2971: 62 D0 00 MOV   REG[0xD0],0x0
    2974: 47 63 01 TST   [PS2FrameStatus],0x1
    2977: A0 34    JZ    0x29AC
(0288) 		PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    2979: 55 63 00 MOV   [PS2FrameStatus],0x0
(0289) 		if (PS2DataIn == 0xAA) { // Good BAT
    297C: 62 D0 00 MOV   REG[0xD0],0x0
    297F: 3C 6A AA CMP   [ps2.c:PS2DataIn],0xAA
    2982: B0 09    JNZ   0x298C
(0290) 			power_on_bat = 1;
    2984: 56 01 01 MOV   [X+1],0x1
(0291) 			status = 0;
    2987: 56 00 00 MOV   [X+0],0x0
(0292) 		}
    298A: 80 0F    JMP   0x299A
(0293) 		else if (PS2DataIn == 0xFC) { // Bad BAT
    298C: 62 D0 00 MOV   REG[0xD0],0x0
    298F: 3C 6A FC CMP   [ps2.c:PS2DataIn],0xFC
    2992: B0 07    JNZ   0x299A
(0294) 			power_on_bat = 1;
    2994: 56 01 01 MOV   [X+1],0x1
(0295) 			status = DEVICE_BAD_BAT;
    2997: 56 00 10 MOV   [X+0],0x10
(0296) 		}
(0297) 		//// Remove the response from the RX Buffer
(0298) 		if (PS2RxBufIn) PS2RxBufIn--; else PS2RxBufIn = 15;
    299A: 62 D0 00 MOV   REG[0xD0],0x0
    299D: 3C 56 00 CMP   [PS2RxBufIn],0x0
    29A0: A0 05    JZ    0x29A6
    29A2: 7A 56    DEC   [PS2RxBufIn]
    29A4: 80 07    JMP   0x29AC
    29A6: 62 D0 00 MOV   REG[0xD0],0x0
    29A9: 55 56 0F MOV   [PS2RxBufIn],0xF
(0299) 	}
(0300) 	//// If we didn't get a BAT code, got a response that is not a BAT code, or
(0301) 	//// we got a frame with an error status, send the device a RESET command.
(0302) 	if (!power_on_bat) {
    29AC: 3D 01 00 CMP   [X+1],0x0
    29AF: B0 9B    JNZ   0x2A4B
(0303) 		status = PS2_Send_Command_Process_Response(0xFF); // Send RESET
    29B1: 50 FF    MOV   A,0xFF
    29B3: 08       PUSH  A
    29B4: 9E 72    CALL  _PS2_Send_Command_Process_Response
    29B6: 38 FF    ADD   SP,0xFF
    29B8: 62 D0 00 MOV   REG[0xD0],0x0
    29BB: 54 00    MOV   [X+0],A
(0304) 		//// If we get an error, exit and return the error type
(0305) 		if (status) {
    29BD: 3D 00 00 CMP   [X+0],0x0
    29C0: A0 05    JZ    0x29C6
(0306) 			return(status);
    29C2: 52 00    MOV   A,[X+0]
    29C4: 80 FC    JMP   0x2AC1
(0307) 		}
(0308) 		//// Spin until we either get a change in frame status in response to
(0309) 		//// the RESET/ACK, or 1000ms has elapsed, whichever comes first.
(0310) 		TenMicroSecTimerReps = 2;
    29C6: 62 D0 00 MOV   REG[0xD0],0x0
    29C9: 55 58 02 MOV   [TenMicroSecTimerReps],0x2
(0311) 		TenMicroSecTimer_WritePeriod(49999); // 2*((49999+1) * 10us) = 1000ms
    29CC: 10       PUSH  X
    29CD: 57 C3    MOV   X,0xC3
    29CF: 50 4F    MOV   A,0x4F
    29D1: 7C 09 72 LCALL _TenMicroSecTimer_WritePeriod
(0312) 		TenMicroSecTimer_Start();
    29D4: 7C 09 6A LCALL _TenMicroSecTimer_Start
    29D7: 20       POP   X
(0313) 		while(TenMicroSecTimerReps&&(!PS2FrameStatus));
    29D8: 62 D0 00 MOV   REG[0xD0],0x0
    29DB: 3C 58 00 CMP   [TenMicroSecTimerReps],0x0
    29DE: A0 09    JZ    0x29E8
    29E0: 62 D0 00 MOV   REG[0xD0],0x0
    29E3: 3C 63 00 CMP   [PS2FrameStatus],0x0
    29E6: AF F1    JZ    0x29D8
(0314) 		TenMicroSecTimer_Stop();
    29E8: 10       PUSH  X
    29E9: 7C 09 6E LCALL _TenMicroSecTimer_Stop
    29EC: 20       POP   X
(0315) 		//// If we got a response, determine BAT type
(0316) 		if (PS2FrameStatus & FRAME_DATA_AVAILABLE) {
    29ED: 62 D0 00 MOV   REG[0xD0],0x0
    29F0: 47 63 01 TST   [PS2FrameStatus],0x1
    29F3: A0 4A    JZ    0x2A3E
(0317) 			PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    29F5: 55 63 00 MOV   [PS2FrameStatus],0x0
(0318) 			if (PS2DataIn == 0xAA) { // Good BAT
    29F8: 62 D0 00 MOV   REG[0xD0],0x0
    29FB: 3C 6A AA CMP   [ps2.c:PS2DataIn],0xAA
    29FE: B0 06    JNZ   0x2A05
(0319) 				status = 0;
    2A00: 56 00 00 MOV   [X+0],0x0
(0320) 			}
    2A03: 80 26    JMP   0x2A2A
(0321) 			else if (PS2DataIn == 0xFC) { // Bad BAT
    2A05: 62 D0 00 MOV   REG[0xD0],0x0
    2A08: 3C 6A FC CMP   [ps2.c:PS2DataIn],0xFC
    2A0B: B0 06    JNZ   0x2A12
(0322) 				status = DEVICE_BAD_BAT;
    2A0D: 56 00 10 MOV   [X+0],0x10
(0323) 			}
    2A10: 80 19    JMP   0x2A2A
(0324) 			else { // Error: Not a BAT code
(0325) 				LCD_Position(0,12);
    2A12: 10       PUSH  X
    2A13: 57 0C    MOV   X,0xC
    2A15: 50 00    MOV   A,0x0
    2A17: 7C 0C C9 LCALL _LCD_Position
(0326) 				LCD_PrHexByte(PS2DataIn);
    2A1A: 62 D0 00 MOV   REG[0xD0],0x0
    2A1D: 51 6A    MOV   A,[ps2.c:PS2DataIn]
    2A1F: 7C 0B 66 LCALL _LCD_PrHexByte
    2A22: 20       POP   X
(0327) 				return(DEVICE_INVALID_RESPONSE);
    2A23: 62 D0 00 MOV   REG[0xD0],0x0
    2A26: 50 20    MOV   A,0x20
    2A28: 80 98    JMP   0x2AC1
(0328) 			}
(0329) 			//// Remove the response from the RX Buffer
(0330) 			if (PS2RxBufIn) PS2RxBufIn--; else PS2RxBufIn = 15;
    2A2A: 62 D0 00 MOV   REG[0xD0],0x0
    2A2D: 3C 56 00 CMP   [PS2RxBufIn],0x0
    2A30: A0 05    JZ    0x2A36
    2A32: 7A 56    DEC   [PS2RxBufIn]
    2A34: 80 16    JMP   0x2A4B
    2A36: 62 D0 00 MOV   REG[0xD0],0x0
    2A39: 55 56 0F MOV   [PS2RxBufIn],0xF
(0331) 		}
    2A3C: 80 0E    JMP   0x2A4B
(0332) 		//// If we either didn't receive a BAT code or had any frame error,
(0333) 		//// return a DEVICE_ERROR to the calling function; it can try again.
(0334) 		else {
(0335) 			PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    2A3E: 62 D0 00 MOV   REG[0xD0],0x0
    2A41: 55 63 00 MOV   [PS2FrameStatus],0x0
(0336) 			return(DEVICE_ERROR);
    2A44: 62 D0 00 MOV   REG[0xD0],0x0
    2A47: 50 40    MOV   A,0x40
    2A49: 80 77    JMP   0x2AC1
(0337) 		}
(0338) 	}
(0339) 	//// A mouse will send a Mouse ID of 0x00 after the BAT completion code.
(0340) 	//// We assume this should take no more than 20ms; same as an RX timeout.
(0341) 	TenMicroSecTimerReps = 1;
    2A4B: 62 D0 00 MOV   REG[0xD0],0x0
    2A4E: 55 58 01 MOV   [TenMicroSecTimerReps],0x1
(0342) 	TenMicroSecTimer_WritePeriod(1999); // (1999+1) * 10us = 20ms
    2A51: 10       PUSH  X
    2A52: 57 07    MOV   X,0x7
    2A54: 50 CF    MOV   A,0xCF
    2A56: 7C 09 72 LCALL _TenMicroSecTimer_WritePeriod
(0343) 	TenMicroSecTimer_Start();
    2A59: 7C 09 6A LCALL _TenMicroSecTimer_Start
    2A5C: 20       POP   X
(0344) 	while(TenMicroSecTimerReps&&(!PS2FrameStatus));
    2A5D: 62 D0 00 MOV   REG[0xD0],0x0
    2A60: 3C 58 00 CMP   [TenMicroSecTimerReps],0x0
    2A63: A0 09    JZ    0x2A6D
    2A65: 62 D0 00 MOV   REG[0xD0],0x0
    2A68: 3C 63 00 CMP   [PS2FrameStatus],0x0
    2A6B: AF F1    JZ    0x2A5D
(0345) 	TenMicroSecTimer_Stop();
    2A6D: 10       PUSH  X
    2A6E: 7C 09 6E LCALL _TenMicroSecTimer_Stop
    2A71: 20       POP   X
(0346) 	if (!PS2FrameStatus) {
    2A72: 62 D0 00 MOV   REG[0xD0],0x0
    2A75: 3C 63 00 CMP   [PS2FrameStatus],0x0
    2A78: B0 08    JNZ   0x2A81
(0347) 		//// If we didn't receive an additional byte within 20ms after
(0348) 		//// the BAT code, assume the device is a keyboard
(0349) 		return(status);
    2A7A: 52 00    MOV   A,[X+0]
    2A7C: 62 D0 00 MOV   REG[0xD0],0x0
    2A7F: 80 41    JMP   0x2AC1
(0350) 	}
(0351) 	if (PS2FrameStatus & FRAME_DATA_AVAILABLE) {
    2A81: 62 D0 00 MOV   REG[0xD0],0x0
    2A84: 47 63 01 TST   [PS2FrameStatus],0x1
    2A87: A0 2E    JZ    0x2AB6
(0352) 		PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    2A89: 55 63 00 MOV   [PS2FrameStatus],0x0
(0353) 		//// Remove the response from the RX Buffer
(0354) 		if (PS2RxBufIn) PS2RxBufIn--; else PS2RxBufIn = 15;
    2A8C: 62 D0 00 MOV   REG[0xD0],0x0
    2A8F: 3C 56 00 CMP   [PS2RxBufIn],0x0
    2A92: A0 05    JZ    0x2A98
    2A94: 7A 56    DEC   [PS2RxBufIn]
    2A96: 80 07    JMP   0x2A9E
    2A98: 62 D0 00 MOV   REG[0xD0],0x0
    2A9B: 55 56 0F MOV   [PS2RxBufIn],0xF
(0355) 		//// If we got a byte and it is 0x00, the device is a mouse
(0356) 		if (PS2DataIn == 0x00) {
    2A9E: 62 D0 00 MOV   REG[0xD0],0x0
    2AA1: 3C 6A 00 CMP   [ps2.c:PS2DataIn],0x0
    2AA4: B0 0A    JNZ   0x2AAF
(0357) 			return(status|DEVICE_IS_MOUSE);
    2AA6: 62 D0 00 MOV   REG[0xD0],0x0
    2AA9: 52 00    MOV   A,[X+0]
    2AAB: 29 80    OR    A,0x80
    2AAD: 80 13    JMP   0x2AC1
(0358) 		}
(0359) 		//// If it isn't 0x00, the response isn't valid
(0360) 		return(DEVICE_INVALID_RESPONSE);
    2AAF: 62 D0 00 MOV   REG[0xD0],0x0
    2AB2: 50 20    MOV   A,0x20
    2AB4: 80 0C    JMP   0x2AC1
(0361) 	}
(0362) 	//// If we had any frame error in the response, return a DEVICE_ERROR
(0363) 	//// to the calling function; it can try again.
(0364) 	PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    2AB6: 62 D0 00 MOV   REG[0xD0],0x0
    2AB9: 55 63 00 MOV   [PS2FrameStatus],0x0
(0365) 	return(DEVICE_ERROR);
    2ABC: 62 D0 00 MOV   REG[0xD0],0x0
    2ABF: 50 40    MOV   A,0x40
    2AC1: 38 FE    ADD   SP,0xFE
    2AC3: 20       POP   X
    2AC4: 7F       RET   
(0366) }
(0367) 
(0368) //////////////////////////////////////////////////////////////////////////////////////////
(0369) //////////////////////////////////////////////////////////////////////////////////////////
(0370) //// Interrupt Service Routines (ISRs) follow
(0371) //////////////////////////////////////////////////////////////////////////////////////////
(0372) //////////////////////////////////////////////////////////////////////////////////////////
(0373) 
(0374) #pragma interrupt_handler PS2DigBuf_ISR PS2OneShot_ISR TenMicroSecTimer_ISR
(0375) 
(0376) //----------------------------------------------------------------------------------------
(0377) // PS/2 Clock ISR
(0378) //
(0379) // A primary objective in writing this PS/2 bit-banging interface was to make it as general
(0380) // as possible so that it could be incorporated into many different designs that could benefit
(0381) // from a keyboard (or mouse, for that matter).
(0382) //
(0383) // The PS/2 protocol says that the data line is valid on the falling-edge of the clock signal.
(0384) // While using a falling-edge GPIO interrupt would certainly work, the GPIO ISR would have
(0385) // to be shared by any other GPIO interrupts and would require the ISR to determine which
(0386) // pin it was supposed to be handling (e.g. optical encoder interrupt or keyboard interrupt).
(0387) //
(0388) // By passing the PS/2 Clock line into Input 1 of a DigBuf User Module (named PS2DigBuf here),
(0389) // and by setting the InvertInput1 parameter to Invert, the DigBuf User Module will call a
(0390) // unique ISR whenever the PS/2 clock falling-edge occurs. Inside the ISR, we use a simple
(0391) // port pin read operation to get the value of the data line when this occurs.
(0392) //
(0393) // A simple state machine can verify a valid frame is present, extract the data therein,
(0394) // confirm parity is matched, and finally set a global variable indicating a scan code
(0395) // was received.
(0396) //
(0397) // XXX - Update these comments to discuss how this ISR is also used to transmit data.
(0398) //
(0399) // Global variables used:
(0400) //   PS2FrameState - 
(0401) //   PS2DataIn      - where this ISR places a reassembled scan code
(0402) //   PS2GotFrame   - set to 1 in this ISR when a valid PS2 frame is found
(0403) //                   set to 0 by other functions in the program after PS2DataIn is processed
(0404) //----------------------------------------------------------------------------------------
(0405) void PS2DigBuf_ISR(void)
(0406) {
_PS2DigBuf_ISR:
    2AC5: 71 C0    OR    F,0xC0
    2AC7: 08       PUSH  A
    2AC8: 5D D0    MOV   A,REG[0xD0]
    2ACA: 08       PUSH  A
    2ACB: 5D D3    MOV   A,REG[0xD3]
    2ACD: 08       PUSH  A
    2ACE: 5D D4    MOV   A,REG[0xD4]
    2AD0: 08       PUSH  A
    2AD1: 5D D5    MOV   A,REG[0xD5]
    2AD3: 08       PUSH  A
    2AD4: 62 D0 00 MOV   REG[0xD0],0x0
    2AD7: 51 22    MOV   A,[__r0]
    2AD9: 08       PUSH  A
    2ADA: 51 21    MOV   A,[__r1]
    2ADC: 08       PUSH  A
    2ADD: 51 20    MOV   A,[__r2]
    2ADF: 08       PUSH  A
    2AE0: 51 1F    MOV   A,[__r3]
    2AE2: 08       PUSH  A
    2AE3: 51 1E    MOV   A,[__r4]
    2AE5: 08       PUSH  A
    2AE6: 51 1D    MOV   A,[__r5]
    2AE8: 08       PUSH  A
    2AE9: 51 1C    MOV   A,[__r6]
    2AEB: 08       PUSH  A
    2AEC: 51 1B    MOV   A,[__r7]
    2AEE: 08       PUSH  A
    2AEF: 51 1A    MOV   A,[__r8]
    2AF1: 08       PUSH  A
    2AF2: 51 19    MOV   A,[__r9]
    2AF4: 08       PUSH  A
    2AF5: 51 18    MOV   A,[__r10]
    2AF7: 08       PUSH  A
    2AF8: 51 17    MOV   A,[__r11]
    2AFA: 08       PUSH  A
    2AFB: 51 16    MOV   A,[__rX]
    2AFD: 08       PUSH  A
    2AFE: 51 15    MOV   A,[__rY]
    2B00: 08       PUSH  A
    2B01: 51 14    MOV   A,[__rZ]
    2B03: 08       PUSH  A
    2B04: 10       PUSH  X
    2B05: 4F       MOV   X,SP
    2B06: 38 02    ADD   SP,0x2
(0407) 	static BYTE data;	// Note: declaring a variable as static in a function causes the
(0408) 	static BYTE bit;	// compiler to keep it in RAM and not the stack. This means it
(0409) 	static BYTE parity;	// retains its value between calls to the function.
(0410) 
(0411) 	//// Read the PS/2 Data bit every time we enter this ISR
(0412) 	if (PS2DATA_Data_ADDR & PS2DATA_MASK)
    2B08: 5D 04    MOV   A,REG[0x4]
    2B0A: 62 D0 00 MOV   REG[0xD0],0x0
    2B0D: 53 22    MOV   [__r0],A
    2B0F: 47 22 10 TST   [__r0],0x10
    2B12: A0 09    JZ    0x2B1C
(0413) 		bit = 0x01;
    2B14: 62 D0 00 MOV   REG[0xD0],0x0
    2B17: 55 6F 01 MOV   [ps2.c:XXXForceBadTxParity+2],0x1
    2B1A: 80 07    JMP   0x2B22
(0414) 	else
(0415) 		bit = 0x00;
    2B1C: 62 D0 00 MOV   REG[0xD0],0x0
    2B1F: 55 6F 00 MOV   [ps2.c:XXXForceBadTxParity+2],0x0
(0416) 	//// Step through the state machine to decode the frame
(0417) 	switch (PS2FrameState) {
    2B22: 62 D0 00 MOV   REG[0xD0],0x0
    2B25: 51 69    MOV   A,[ps2.c:PS2FrameState]
    2B27: 54 01    MOV   [X+1],A
    2B29: 56 00 00 MOV   [X+0],0x0
    2B2C: 52 01    MOV   A,[X+1]
    2B2E: 11 00    SUB   A,0x0
    2B30: 52 00    MOV   A,[X+0]
    2B32: 31 80    XOR   A,0x80
    2B34: 19 80    SBB   A,0x80
    2B36: C4 0C    JC    0x2F43
    2B38: 50 16    MOV   A,0x16
    2B3A: 13 01    SUB   A,[X+1]
    2B3C: 52 00    MOV   A,[X+0]
    2B3E: 31 80    XOR   A,0x80
    2B40: 62 D0 00 MOV   REG[0xD0],0x0
    2B43: 53 16    MOV   [__rX],A
    2B45: 50 80    MOV   A,0x80
    2B47: 1A 16    SBB   A,[__rX]
    2B49: C3 F9    JC    0x2F43
    2B4B: 62 D0 00 MOV   REG[0xD0],0x0
    2B4E: 52 01    MOV   A,[X+1]
    2B50: 53 21    MOV   [__r1],A
    2B52: 52 00    MOV   A,[X+0]
    2B54: 53 22    MOV   [__r0],A
    2B56: 65 21    ASL   [__r1]
    2B58: 6B 22    RLC   [__r0]
    2B5A: 06 21 0E ADD   [__r1],0xE
    2B5D: 0E 22 06 ADC   [__r0],0x6
    2B60: 51 22    MOV   A,[__r0]
    2B62: 10       PUSH  X
    2B63: 58 21    MOV   X,[__r1]
    2B65: 08       PUSH  A
    2B66: 28       ROMX  
    2B67: 53 22    MOV   [__r0],A
    2B69: 18       POP   A
    2B6A: 75       INC   X
    2B6B: 09 00    ADC   A,0x0
    2B6D: 28       ROMX  
    2B6E: 53 21    MOV   [__r1],A
    2B70: 20       POP   X
    2B71: 51 22    MOV   A,[__r0]
    2B73: 08       PUSH  A
    2B74: 51 21    MOV   A,[__r1]
    2B76: 08       PUSH  A
    2B77: 7F       RET   
(0418) 	case PS2_START_BIT_IN: // Start of PS/2 frame
(0419) 		// Reset the frame status
(0420) 		PS2FrameStatus = 0x00;
    2B78: 62 D0 00 MOV   REG[0xD0],0x0
    2B7B: 55 63 00 MOV   [PS2FrameStatus],0x0
(0421) 		// Clear the frame data reassembly byte
(0422) 		data = 0;
    2B7E: 62 D0 00 MOV   REG[0xD0],0x0
    2B81: 55 6E 00 MOV   [ps2.c:XXXForceBadTxParity+1],0x0
(0423) 		//// If this bit is 0, assume this is the Start bit of the frame and go to the state 1
(0424) 		if (bit == 0) {
    2B84: 62 D0 00 MOV   REG[0xD0],0x0
    2B87: 3C 6F 00 CMP   [ps2.c:XXXForceBadTxParity+2],0x0
    2B8A: B3 B8    JNZ   0x2F43
(0425) 			// Reset our computed parity to 1
(0426) 			parity = 1;
    2B8C: 62 D0 00 MOV   REG[0xD0],0x0
    2B8F: 55 5B 01 MOV   [CapsLock+1],0x1
(0427) 			// Enable interrupts on the OneShot so that if we don't get enough
(0428) 			// clock transistions for a valid frame, the OneShot will reset
(0429) 			// this state machine and report a FRAME_INCOMPLETE error.
(0430) 			PS2OneShot_ClearInt();
    2B92: 10       PUSH  X
    2B93: 7C 0B 30 LCALL _PS2OneShot_ClearInt
(0431) 			PS2OneShot_EnableInt();
    2B96: 7C 0B 28 LCALL _PS2OneShot_EnableInt
    2B99: 20       POP   X
(0432) 			// Look for the D0 bit.
(0433) 			PS2FrameState = PS2_D0_BIT_IN;
    2B9A: 62 D0 00 MOV   REG[0xD0],0x0
    2B9D: 55 69 01 MOV   [ps2.c:PS2FrameState],0x1
(0434) 		}
(0435) 		// If this bit is 1, it cannot be the Start bit so remain in this state.
(0436) 		// Treat it as a glitch and ignore it (don't even bother reporting it).
(0437) 		break;
    2BA0: 83 A2    JMP   0x2F43
(0438) 	case PS2_D0_BIT_IN: // Get D0
(0439) 		data|=bit; parity^=bit; PS2FrameState=PS2_D1_BIT_IN; break;
    2BA2: 62 D0 00 MOV   REG[0xD0],0x0
    2BA5: 51 6F    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    2BA7: 62 D0 00 MOV   REG[0xD0],0x0
    2BAA: 2C 6E    OR    [ps2.c:XXXForceBadTxParity+1],A
    2BAC: 62 D0 00 MOV   REG[0xD0],0x0
    2BAF: 51 5B    MOV   A,[CapsLock+1]
    2BB1: 62 D0 00 MOV   REG[0xD0],0x0
    2BB4: 32 6F    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2BB6: 62 D0 00 MOV   REG[0xD0],0x0
    2BB9: 53 5B    MOV   [CapsLock+1],A
    2BBB: 62 D0 00 MOV   REG[0xD0],0x0
    2BBE: 55 69 02 MOV   [ps2.c:PS2FrameState],0x2
    2BC1: 83 81    JMP   0x2F43
(0440) 	case PS2_D1_BIT_IN: // Get D1
(0441) 		data|=bit<<1; parity^=bit; PS2FrameState=PS2_D2_BIT_IN; break;
    2BC3: 62 D0 00 MOV   REG[0xD0],0x0
    2BC6: 51 6F    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    2BC8: 62 D0 00 MOV   REG[0xD0],0x0
    2BCB: 53 22    MOV   [__r0],A
    2BCD: 65 22    ASL   [__r0]
    2BCF: 51 22    MOV   A,[__r0]
    2BD1: 62 D0 00 MOV   REG[0xD0],0x0
    2BD4: 2C 6E    OR    [ps2.c:XXXForceBadTxParity+1],A
    2BD6: 62 D0 00 MOV   REG[0xD0],0x0
    2BD9: 51 5B    MOV   A,[CapsLock+1]
    2BDB: 62 D0 00 MOV   REG[0xD0],0x0
    2BDE: 32 6F    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2BE0: 62 D0 00 MOV   REG[0xD0],0x0
    2BE3: 53 5B    MOV   [CapsLock+1],A
    2BE5: 62 D0 00 MOV   REG[0xD0],0x0
    2BE8: 55 69 03 MOV   [ps2.c:PS2FrameState],0x3
    2BEB: 83 57    JMP   0x2F43
(0442) 	case PS2_D2_BIT_IN: // Get D2
(0443) 		data|=bit<<2; parity^=bit; PS2FrameState=PS2_D3_BIT_IN; break;
    2BED: 62 D0 00 MOV   REG[0xD0],0x0
    2BF0: 51 6F    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    2BF2: 62 D0 00 MOV   REG[0xD0],0x0
    2BF5: 53 22    MOV   [__r0],A
    2BF7: 65 22    ASL   [__r0]
    2BF9: 65 22    ASL   [__r0]
    2BFB: 51 22    MOV   A,[__r0]
    2BFD: 62 D0 00 MOV   REG[0xD0],0x0
    2C00: 2C 6E    OR    [ps2.c:XXXForceBadTxParity+1],A
    2C02: 62 D0 00 MOV   REG[0xD0],0x0
    2C05: 51 5B    MOV   A,[CapsLock+1]
    2C07: 62 D0 00 MOV   REG[0xD0],0x0
    2C0A: 32 6F    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2C0C: 62 D0 00 MOV   REG[0xD0],0x0
    2C0F: 53 5B    MOV   [CapsLock+1],A
    2C11: 62 D0 00 MOV   REG[0xD0],0x0
    2C14: 55 69 04 MOV   [ps2.c:PS2FrameState],0x4
    2C17: 83 2B    JMP   0x2F43
(0444) 	case PS2_D3_BIT_IN: // Get D3
(0445) 		data|=bit<<3; parity^=bit; PS2FrameState=PS2_D4_BIT_IN; break;
    2C19: 62 D0 00 MOV   REG[0xD0],0x0
    2C1C: 51 6F    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    2C1E: 64       ASL   A
    2C1F: 64       ASL   A
    2C20: 64       ASL   A
    2C21: 62 D0 00 MOV   REG[0xD0],0x0
    2C24: 2C 6E    OR    [ps2.c:XXXForceBadTxParity+1],A
    2C26: 62 D0 00 MOV   REG[0xD0],0x0
    2C29: 51 5B    MOV   A,[CapsLock+1]
    2C2B: 62 D0 00 MOV   REG[0xD0],0x0
    2C2E: 32 6F    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2C30: 62 D0 00 MOV   REG[0xD0],0x0
    2C33: 53 5B    MOV   [CapsLock+1],A
    2C35: 62 D0 00 MOV   REG[0xD0],0x0
    2C38: 55 69 05 MOV   [ps2.c:PS2FrameState],0x5
    2C3B: 83 07    JMP   0x2F43
(0446) 	case PS2_D4_BIT_IN: // Get D4
(0447) 		data|=bit<<4; parity^=bit; PS2FrameState=PS2_D5_BIT_IN; break;
    2C3D: 62 D0 00 MOV   REG[0xD0],0x0
    2C40: 51 6F    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    2C42: 64       ASL   A
    2C43: 64       ASL   A
    2C44: 64       ASL   A
    2C45: 64       ASL   A
    2C46: 62 D0 00 MOV   REG[0xD0],0x0
    2C49: 2C 6E    OR    [ps2.c:XXXForceBadTxParity+1],A
    2C4B: 62 D0 00 MOV   REG[0xD0],0x0
    2C4E: 51 5B    MOV   A,[CapsLock+1]
    2C50: 62 D0 00 MOV   REG[0xD0],0x0
    2C53: 32 6F    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2C55: 62 D0 00 MOV   REG[0xD0],0x0
    2C58: 53 5B    MOV   [CapsLock+1],A
    2C5A: 62 D0 00 MOV   REG[0xD0],0x0
    2C5D: 55 69 06 MOV   [ps2.c:PS2FrameState],0x6
    2C60: 82 E2    JMP   0x2F43
(0448) 	case PS2_D5_BIT_IN: // Get D5
(0449) 		data|=bit<<5; parity^=bit; PS2FrameState=PS2_D6_BIT_IN; break;
    2C62: 62 D0 00 MOV   REG[0xD0],0x0
    2C65: 51 6F    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    2C67: 64       ASL   A
    2C68: 64       ASL   A
    2C69: 64       ASL   A
    2C6A: 64       ASL   A
    2C6B: 64       ASL   A
    2C6C: 62 D0 00 MOV   REG[0xD0],0x0
    2C6F: 2C 6E    OR    [ps2.c:XXXForceBadTxParity+1],A
    2C71: 62 D0 00 MOV   REG[0xD0],0x0
    2C74: 51 5B    MOV   A,[CapsLock+1]
    2C76: 62 D0 00 MOV   REG[0xD0],0x0
    2C79: 32 6F    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2C7B: 62 D0 00 MOV   REG[0xD0],0x0
    2C7E: 53 5B    MOV   [CapsLock+1],A
    2C80: 62 D0 00 MOV   REG[0xD0],0x0
    2C83: 55 69 07 MOV   [ps2.c:PS2FrameState],0x7
    2C86: 82 BC    JMP   0x2F43
(0450) 	case PS2_D6_BIT_IN: // Get D6
(0451) 		data|=bit<<6; parity^=bit; PS2FrameState=PS2_D7_BIT_IN; break;
    2C88: 62 D0 00 MOV   REG[0xD0],0x0
    2C8B: 51 6F    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    2C8D: 64       ASL   A
    2C8E: 64       ASL   A
    2C8F: 64       ASL   A
    2C90: 64       ASL   A
    2C91: 64       ASL   A
    2C92: 64       ASL   A
    2C93: 62 D0 00 MOV   REG[0xD0],0x0
    2C96: 2C 6E    OR    [ps2.c:XXXForceBadTxParity+1],A
    2C98: 62 D0 00 MOV   REG[0xD0],0x0
    2C9B: 51 5B    MOV   A,[CapsLock+1]
    2C9D: 62 D0 00 MOV   REG[0xD0],0x0
    2CA0: 32 6F    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2CA2: 62 D0 00 MOV   REG[0xD0],0x0
    2CA5: 53 5B    MOV   [CapsLock+1],A
    2CA7: 62 D0 00 MOV   REG[0xD0],0x0
    2CAA: 55 69 08 MOV   [ps2.c:PS2FrameState],0x8
    2CAD: 82 95    JMP   0x2F43
(0452) 	case PS2_D7_BIT_IN: // Get D7
(0453) 		data|=bit<<7; parity^=bit; PS2FrameState=PS2_PARITY_BIT_IN; break;
    2CAF: 62 D0 00 MOV   REG[0xD0],0x0
    2CB2: 51 6F    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    2CB4: 64       ASL   A
    2CB5: 64       ASL   A
    2CB6: 64       ASL   A
    2CB7: 64       ASL   A
    2CB8: 64       ASL   A
    2CB9: 64       ASL   A
    2CBA: 64       ASL   A
    2CBB: 62 D0 00 MOV   REG[0xD0],0x0
    2CBE: 2C 6E    OR    [ps2.c:XXXForceBadTxParity+1],A
    2CC0: 62 D0 00 MOV   REG[0xD0],0x0
    2CC3: 51 5B    MOV   A,[CapsLock+1]
    2CC5: 62 D0 00 MOV   REG[0xD0],0x0
    2CC8: 32 6F    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2CCA: 62 D0 00 MOV   REG[0xD0],0x0
    2CCD: 53 5B    MOV   [CapsLock+1],A
    2CCF: 62 D0 00 MOV   REG[0xD0],0x0
    2CD2: 55 69 09 MOV   [ps2.c:PS2FrameState],0x9
    2CD5: 82 6D    JMP   0x2F43
(0454) 	case PS2_PARITY_BIT_IN: // Get parity. ODD:parity=0, EVEN:parity=1
(0455) 		parity^=bit; PS2FrameState=PS2_STOP_BIT_IN; break;
    2CD7: 62 D0 00 MOV   REG[0xD0],0x0
    2CDA: 51 5B    MOV   A,[CapsLock+1]
    2CDC: 62 D0 00 MOV   REG[0xD0],0x0
    2CDF: 32 6F    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2CE1: 62 D0 00 MOV   REG[0xD0],0x0
    2CE4: 53 5B    MOV   [CapsLock+1],A
    2CE6: 62 D0 00 MOV   REG[0xD0],0x0
    2CE9: 55 69 0A MOV   [ps2.c:PS2FrameState],0xA
    2CEC: 82 56    JMP   0x2F43
(0456) //		//// XXX - Force a bad receive parity bit periodically for testing.
(0457) //		if (XXXForceBadRxParity++ > 3) { // bad parity every N+1 transmissions
(0458) //			XXXForceBadRxParity = 0;
(0459) //			parity = 1;
(0460) //		}
(0461) //		PS2FrameState=PS2_STOP_BIT_IN;
(0462) //		break;
(0463) 	case PS2_STOP_BIT_IN: // Check the Stop bit
(0464) 		//// If Stop bit is 0, this is a framing error
(0465) 		//// Note: A frame error overrides a parity error
(0466) 		//// XXX - Unresolved issue: If the Stop bit is wrong, did we really
(0467) 		////       get a complete frame? Until I learn more, I'm going to
(0468) 		////       report we've had an RX framing error.
(0469) 		////       Should the application request a retransmission if it
(0470) 		////       get's a frame error? I don't know.
(0471) 		if (bit == 0) {
    2CEE: 62 D0 00 MOV   REG[0xD0],0x0
    2CF1: 3C 6F 00 CMP   [ps2.c:XXXForceBadTxParity+2],0x0
    2CF4: B0 09    JNZ   0x2CFE
(0472) 			PS2FrameStatus = FRAME_RX_FRAME_ERROR;
    2CF6: 62 D0 00 MOV   REG[0xD0],0x0
    2CF9: 55 63 08 MOV   [PS2FrameStatus],0x8
(0473) 		}
    2CFC: 80 4F    JMP   0x2D4C
(0474) 		else {
(0475) 			//// The Stop bit is 1, so the frame is valid. Check the parity.
(0476) 			if (parity) {
    2CFE: 62 D0 00 MOV   REG[0xD0],0x0
    2D01: 3C 5B 00 CMP   [CapsLock+1],0x0
    2D04: A0 09    JZ    0x2D0E
(0477) 				PS2FrameStatus = FRAME_RX_PARITY_ERROR;
    2D06: 62 D0 00 MOV   REG[0xD0],0x0
    2D09: 55 63 04 MOV   [PS2FrameStatus],0x4
(0478) 			}
    2D0C: 80 3F    JMP   0x2D4C
(0479) 			else {
(0480) 				PS2DataIn = data;
    2D0E: 62 D0 00 MOV   REG[0xD0],0x0
    2D11: 51 6E    MOV   A,[ps2.c:XXXForceBadTxParity+1]
    2D13: 62 D0 00 MOV   REG[0xD0],0x0
    2D16: 53 6A    MOV   [ps2.c:PS2DataIn],A
(0481) 				PS2FrameStatus = FRAME_DATA_AVAILABLE;
    2D18: 62 D0 00 MOV   REG[0xD0],0x0
    2D1B: 55 63 01 MOV   [PS2FrameStatus],0x1
(0482) 				PS2RxBuffer[PS2RxBufIn] = data;
    2D1E: 62 D0 00 MOV   REG[0xD0],0x0
    2D21: 51 56    MOV   A,[PS2RxBufIn]
    2D23: 62 D0 00 MOV   REG[0xD0],0x0
    2D26: 53 21    MOV   [__r1],A
    2D28: 55 22 00 MOV   [__r0],0x0
    2D2B: 06 21 04 ADD   [__r1],0x4
    2D2E: 0E 22 00 ADC   [__r0],0x0
    2D31: 51 22    MOV   A,[__r0]
    2D33: 60 D5    MOV   REG[0xD5],A
    2D35: 62 D0 00 MOV   REG[0xD0],0x0
    2D38: 51 6E    MOV   A,[ps2.c:XXXForceBadTxParity+1]
    2D3A: 62 D0 00 MOV   REG[0xD0],0x0
    2D3D: 3F 21    MVI   [__r1],A
(0483) 				PS2RxBufIn++;
    2D3F: 62 D0 00 MOV   REG[0xD0],0x0
    2D42: 76 56    INC   [PS2RxBufIn]
(0484) 				// Wrap around the circular buffer pointer at 16
(0485) 				if (PS2RxBufIn & 0x10) PS2RxBufIn = 0;
    2D44: 47 56 10 TST   [PS2RxBufIn],0x10
    2D47: A0 04    JZ    0x2D4C
    2D49: 55 56 00 MOV   [PS2RxBufIn],0x0
(0486) 			}
(0487) 		}
(0488) 		//// We got a complete frame so reset the state and disable PS2OneShot.
(0489) 		PS2FrameState = PS2_START_BIT_IN;
    2D4C: 62 D0 00 MOV   REG[0xD0],0x0
    2D4F: 55 69 00 MOV   [ps2.c:PS2FrameState],0x0
(0490) 		PS2OneShot_DisableInt();
    2D52: 10       PUSH  X
    2D53: 7C 0B 2C LCALL _PS2OneShot_DisableInt
    2D56: 20       POP   X
(0491) 		break;
    2D57: 81 EB    JMP   0x2F43
(0492) 	///////////////////////////////////////////////////////////////////////////
(0493) 	//////// States used to send data to keyboard
(0494) 	///////////////////////////////////////////////////////////////////////////
(0495) 	case PS2_TRANSMIT_BEGIN:
(0496) 		// Reset the frame status
(0497) 		PS2FrameStatus = 0x00;
    2D59: 62 D0 00 MOV   REG[0xD0],0x0
    2D5C: 55 63 00 MOV   [PS2FrameStatus],0x0
(0498) 		PS2FrameState=PS2_D0_BIT_OUT;
    2D5F: 62 D0 00 MOV   REG[0xD0],0x0
    2D62: 55 69 0C MOV   [ps2.c:PS2FrameState],0xC
(0499) 		break;
    2D65: 81 DD    JMP   0x2F43
(0500) 	case PS2_D0_BIT_OUT:
(0501) 		// Send the D0 bit and initialize parity
(0502) 		if (PS2DataOut&0x01) { parity = 0; PS2DATA_HIGH; }
    2D67: 62 D0 00 MOV   REG[0xD0],0x0
    2D6A: 47 6B 01 TST   [ps2.c:PS2DataOut],0x1
    2D6D: A0 13    JZ    0x2D81
    2D6F: 62 D0 00 MOV   REG[0xD0],0x0
    2D72: 55 5B 00 MOV   [CapsLock+1],0x0
    2D75: 62 D0 00 MOV   REG[0xD0],0x0
    2D78: 2E 00 10 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2D7B: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2D7D: 60 04    MOV   REG[0x4],A
    2D7F: 80 11    JMP   0x2D91
(0503) 		else { parity = 1; PS2DATA_LOW; }
    2D81: 62 D0 00 MOV   REG[0xD0],0x0
    2D84: 55 5B 01 MOV   [CapsLock+1],0x1
    2D87: 62 D0 00 MOV   REG[0xD0],0x0
    2D8A: 26 00 EF AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2D8D: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2D8F: 60 04    MOV   REG[0x4],A
(0504) 		// Enable interrupts on the OneShot so that if we don't get enough
(0505) 		// clock transistions for a valid frame, the OneShot will reset
(0506) 		// this state machine and report a FRAME_INCOMPLETE error.
(0507) 		PS2OneShot_ClearInt();
    2D91: 10       PUSH  X
    2D92: 7C 0B 30 LCALL _PS2OneShot_ClearInt
(0508) 		PS2OneShot_EnableInt();
    2D95: 7C 0B 28 LCALL _PS2OneShot_EnableInt
    2D98: 20       POP   X
(0509) 		PS2FrameState=PS2_D1_BIT_OUT;
    2D99: 62 D0 00 MOV   REG[0xD0],0x0
    2D9C: 55 69 0D MOV   [ps2.c:PS2FrameState],0xD
(0510) 		break;
    2D9F: 81 A3    JMP   0x2F43
(0511) 	case PS2_D1_BIT_OUT:
(0512) 		if (PS2DataOut&0x02) { parity ^= 0x01; PS2DATA_HIGH; }
    2DA1: 62 D0 00 MOV   REG[0xD0],0x0
    2DA4: 47 6B 02 TST   [ps2.c:PS2DataOut],0x2
    2DA7: A0 16    JZ    0x2DBE
    2DA9: 62 D0 00 MOV   REG[0xD0],0x0
    2DAC: 51 5B    MOV   A,[CapsLock+1]
    2DAE: 31 01    XOR   A,0x1
    2DB0: 53 5B    MOV   [CapsLock+1],A
    2DB2: 62 D0 00 MOV   REG[0xD0],0x0
    2DB5: 2E 00 10 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2DB8: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2DBA: 60 04    MOV   REG[0x4],A
    2DBC: 80 0B    JMP   0x2DC8
(0513) 		else { PS2DATA_LOW; }
    2DBE: 62 D0 00 MOV   REG[0xD0],0x0
    2DC1: 26 00 EF AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2DC4: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2DC6: 60 04    MOV   REG[0x4],A
(0514) 		PS2FrameState=PS2_D2_BIT_OUT;
    2DC8: 62 D0 00 MOV   REG[0xD0],0x0
    2DCB: 55 69 0E MOV   [ps2.c:PS2FrameState],0xE
(0515) 		break;
    2DCE: 81 74    JMP   0x2F43
(0516) 	case PS2_D2_BIT_OUT:
(0517) 		if (PS2DataOut&0x04) { parity ^= 0x01; PS2DATA_HIGH; }
    2DD0: 62 D0 00 MOV   REG[0xD0],0x0
    2DD3: 47 6B 04 TST   [ps2.c:PS2DataOut],0x4
    2DD6: A0 16    JZ    0x2DED
    2DD8: 62 D0 00 MOV   REG[0xD0],0x0
    2DDB: 51 5B    MOV   A,[CapsLock+1]
    2DDD: 31 01    XOR   A,0x1
    2DDF: 53 5B    MOV   [CapsLock+1],A
    2DE1: 62 D0 00 MOV   REG[0xD0],0x0
    2DE4: 2E 00 10 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2DE7: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2DE9: 60 04    MOV   REG[0x4],A
    2DEB: 80 0B    JMP   0x2DF7
(0518) 		else { PS2DATA_LOW;	}
    2DED: 62 D0 00 MOV   REG[0xD0],0x0
    2DF0: 26 00 EF AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2DF3: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2DF5: 60 04    MOV   REG[0x4],A
(0519) 		PS2FrameState=PS2_D3_BIT_OUT;
    2DF7: 62 D0 00 MOV   REG[0xD0],0x0
    2DFA: 55 69 0F MOV   [ps2.c:PS2FrameState],0xF
(0520) 		break;
    2DFD: 81 45    JMP   0x2F43
(0521) 	case PS2_D3_BIT_OUT:
(0522) 		if (PS2DataOut&0x08) { parity ^= 0x01; PS2DATA_HIGH; }
    2DFF: 62 D0 00 MOV   REG[0xD0],0x0
    2E02: 47 6B 08 TST   [ps2.c:PS2DataOut],0x8
    2E05: A0 16    JZ    0x2E1C
    2E07: 62 D0 00 MOV   REG[0xD0],0x0
    2E0A: 51 5B    MOV   A,[CapsLock+1]
    2E0C: 31 01    XOR   A,0x1
    2E0E: 53 5B    MOV   [CapsLock+1],A
    2E10: 62 D0 00 MOV   REG[0xD0],0x0
    2E13: 2E 00 10 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2E16: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2E18: 60 04    MOV   REG[0x4],A
    2E1A: 80 0B    JMP   0x2E26
(0523) 		else { PS2DATA_LOW; }
    2E1C: 62 D0 00 MOV   REG[0xD0],0x0
    2E1F: 26 00 EF AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2E22: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2E24: 60 04    MOV   REG[0x4],A
(0524) 		PS2FrameState=PS2_D4_BIT_OUT;
    2E26: 62 D0 00 MOV   REG[0xD0],0x0
    2E29: 55 69 10 MOV   [ps2.c:PS2FrameState],0x10
(0525) 		break;
    2E2C: 81 16    JMP   0x2F43
(0526) 	case PS2_D4_BIT_OUT:
(0527) 		if (PS2DataOut&0x10) { parity ^= 0x01; PS2DATA_HIGH; }
    2E2E: 62 D0 00 MOV   REG[0xD0],0x0
    2E31: 47 6B 10 TST   [ps2.c:PS2DataOut],0x10
    2E34: A0 16    JZ    0x2E4B
    2E36: 62 D0 00 MOV   REG[0xD0],0x0
    2E39: 51 5B    MOV   A,[CapsLock+1]
    2E3B: 31 01    XOR   A,0x1
    2E3D: 53 5B    MOV   [CapsLock+1],A
    2E3F: 62 D0 00 MOV   REG[0xD0],0x0
    2E42: 2E 00 10 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2E45: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2E47: 60 04    MOV   REG[0x4],A
    2E49: 80 0B    JMP   0x2E55
(0528) 		else { PS2DATA_LOW; }
    2E4B: 62 D0 00 MOV   REG[0xD0],0x0
    2E4E: 26 00 EF AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2E51: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2E53: 60 04    MOV   REG[0x4],A
(0529) 		PS2FrameState=PS2_D5_BIT_OUT;
    2E55: 62 D0 00 MOV   REG[0xD0],0x0
    2E58: 55 69 11 MOV   [ps2.c:PS2FrameState],0x11
(0530) 		break;
    2E5B: 80 E7    JMP   0x2F43
(0531) 	case PS2_D5_BIT_OUT:
(0532) 		if (PS2DataOut&0x20) { parity ^= 0x01; PS2DATA_HIGH; }
    2E5D: 62 D0 00 MOV   REG[0xD0],0x0
    2E60: 47 6B 20 TST   [ps2.c:PS2DataOut],0x20
    2E63: A0 16    JZ    0x2E7A
    2E65: 62 D0 00 MOV   REG[0xD0],0x0
    2E68: 51 5B    MOV   A,[CapsLock+1]
    2E6A: 31 01    XOR   A,0x1
    2E6C: 53 5B    MOV   [CapsLock+1],A
    2E6E: 62 D0 00 MOV   REG[0xD0],0x0
    2E71: 2E 00 10 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2E74: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2E76: 60 04    MOV   REG[0x4],A
    2E78: 80 0B    JMP   0x2E84
(0533) 		else { PS2DATA_LOW; }
    2E7A: 62 D0 00 MOV   REG[0xD0],0x0
    2E7D: 26 00 EF AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2E80: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2E82: 60 04    MOV   REG[0x4],A
(0534) 		PS2FrameState=PS2_D6_BIT_OUT;
    2E84: 62 D0 00 MOV   REG[0xD0],0x0
    2E87: 55 69 12 MOV   [ps2.c:PS2FrameState],0x12
(0535) 		break;
    2E8A: 80 B8    JMP   0x2F43
(0536) 	case PS2_D6_BIT_OUT:
(0537) 		if (PS2DataOut&0x40) { parity ^= 0x01; PS2DATA_HIGH; }
    2E8C: 62 D0 00 MOV   REG[0xD0],0x0
    2E8F: 47 6B 40 TST   [ps2.c:PS2DataOut],0x40
    2E92: A0 16    JZ    0x2EA9
    2E94: 62 D0 00 MOV   REG[0xD0],0x0
    2E97: 51 5B    MOV   A,[CapsLock+1]
    2E99: 31 01    XOR   A,0x1
    2E9B: 53 5B    MOV   [CapsLock+1],A
    2E9D: 62 D0 00 MOV   REG[0xD0],0x0
    2EA0: 2E 00 10 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2EA3: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2EA5: 60 04    MOV   REG[0x4],A
    2EA7: 80 0B    JMP   0x2EB3
(0538) 		else { PS2DATA_LOW; }
    2EA9: 62 D0 00 MOV   REG[0xD0],0x0
    2EAC: 26 00 EF AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2EAF: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2EB1: 60 04    MOV   REG[0x4],A
(0539) 		PS2FrameState=PS2_D7_BIT_OUT;
    2EB3: 62 D0 00 MOV   REG[0xD0],0x0
    2EB6: 55 69 13 MOV   [ps2.c:PS2FrameState],0x13
(0540) 		break;
    2EB9: 80 89    JMP   0x2F43
(0541) 	case PS2_D7_BIT_OUT:
(0542) 		if (PS2DataOut&0x80) { parity ^= 0x01; PS2DATA_HIGH; }
    2EBB: 62 D0 00 MOV   REG[0xD0],0x0
    2EBE: 47 6B 80 TST   [ps2.c:PS2DataOut],0x80
    2EC1: A0 16    JZ    0x2ED8
    2EC3: 62 D0 00 MOV   REG[0xD0],0x0
    2EC6: 51 5B    MOV   A,[CapsLock+1]
    2EC8: 31 01    XOR   A,0x1
    2ECA: 53 5B    MOV   [CapsLock+1],A
    2ECC: 62 D0 00 MOV   REG[0xD0],0x0
    2ECF: 2E 00 10 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2ED2: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2ED4: 60 04    MOV   REG[0x4],A
    2ED6: 80 0B    JMP   0x2EE2
(0543) 		else { PS2DATA_LOW; }
    2ED8: 62 D0 00 MOV   REG[0xD0],0x0
    2EDB: 26 00 EF AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2EDE: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2EE0: 60 04    MOV   REG[0x4],A
(0544) 		PS2FrameState=PS2_PARITY_BIT_OUT;
    2EE2: 62 D0 00 MOV   REG[0xD0],0x0
    2EE5: 55 69 14 MOV   [ps2.c:PS2FrameState],0x14
(0545) 		break;
    2EE8: 80 5A    JMP   0x2F43
(0546) 	case PS2_PARITY_BIT_OUT:
(0547) 		if (parity) { PS2DATA_HIGH; }
    2EEA: 62 D0 00 MOV   REG[0xD0],0x0
    2EED: 3C 5B 00 CMP   [CapsLock+1],0x0
    2EF0: A0 0D    JZ    0x2EFE
    2EF2: 62 D0 00 MOV   REG[0xD0],0x0
    2EF5: 2E 00 10 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2EF8: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2EFA: 60 04    MOV   REG[0x4],A
    2EFC: 80 0B    JMP   0x2F08
(0548) 		else { PS2DATA_LOW; }
    2EFE: 62 D0 00 MOV   REG[0xD0],0x0
    2F01: 26 00 EF AND   [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2F04: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2F06: 60 04    MOV   REG[0x4],A
(0549) 		PS2FrameState=PS2_STOP_BIT_OUT;
    2F08: 62 D0 00 MOV   REG[0xD0],0x0
    2F0B: 55 69 15 MOV   [ps2.c:PS2FrameState],0x15
(0550) 		break;
    2F0E: 80 34    JMP   0x2F43
(0551) //		//// XXX - Force a bad transmit parity bit periodically for testing
(0552) //		if (XXXForceBadTxParity++ > 3) { // Bad parity every N+1 transmissions
(0553) //			XXXForceBadTxParity=0;
(0554) //			if (parity) {
(0555) //				PS2DATA_LOW;
(0556) //			}
(0557) //			else {
(0558) //				PS2DATA_HIGH;
(0559) //			}
(0560) //			PS2FrameState=PS2_STOP_BIT_OUT;
(0561) //			break;
(0562) //		}
(0563) 	case PS2_STOP_BIT_OUT:
(0564) 		//// Release the Data Line to make the Stop bit
(0565) 		PS2DATA_HIGH;
    2F10: 62 D0 00 MOV   REG[0xD0],0x0
    2F13: 2E 00 10 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2F16: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2F18: 60 04    MOV   REG[0x4],A
(0566) 		PS2FrameState=PS2_ACK_BIT_IN;
    2F1A: 62 D0 00 MOV   REG[0xD0],0x0
    2F1D: 55 69 16 MOV   [ps2.c:PS2FrameState],0x16
(0567) 		break;
    2F20: 80 22    JMP   0x2F43
(0568) 	case PS2_ACK_BIT_IN:
(0569) 		if (bit == 0) {
    2F22: 62 D0 00 MOV   REG[0xD0],0x0
    2F25: 3C 6F 00 CMP   [ps2.c:XXXForceBadTxParity+2],0x0
    2F28: B0 09    JNZ   0x2F32
(0570) 			PS2FrameStatus = FRAME_BYTE_TRANSMITTED;
    2F2A: 62 D0 00 MOV   REG[0xD0],0x0
    2F2D: 55 63 02 MOV   [PS2FrameStatus],0x2
(0571) 		}
    2F30: 80 07    JMP   0x2F38
(0572) 		//// XXX - I can't find what we should do if we get a bad ACK bit so
(0573) 		////       I'm declaring a Frame Error.
(0574) 		else {
(0575) 			// If we don't get a valid ACK bit, this is a transmission frame error
(0576) 			PS2FrameStatus = FRAME_TX_FRAME_ERROR;
    2F32: 62 D0 00 MOV   REG[0xD0],0x0
    2F35: 55 63 10 MOV   [PS2FrameStatus],0x10
(0577) 		}
(0578) 		//// We sent a complete frame so reset the state and disable PS2OneShot.
(0579) 		PS2FrameState = PS2_START_BIT_IN;
    2F38: 62 D0 00 MOV   REG[0xD0],0x0
    2F3B: 55 69 00 MOV   [ps2.c:PS2FrameState],0x0
(0580) 		PS2OneShot_DisableInt();
    2F3E: 10       PUSH  X
    2F3F: 7C 0B 2C LCALL _PS2OneShot_DisableInt
    2F42: 20       POP   X
(0581) 		break;
(0582) 	default: // We should never, ever, get here.
(0583) 		// XXX - So should we delete it after we're done developing the code?
(0584) 		break;
(0585) 	}
(0586) 	return;
    2F43: 38 FE    ADD   SP,0xFE
    2F45: 20       POP   X
    2F46: 62 D0 00 MOV   REG[0xD0],0x0
    2F49: 18       POP   A
    2F4A: 53 14    MOV   [__rZ],A
    2F4C: 18       POP   A
    2F4D: 53 15    MOV   [__rY],A
    2F4F: 18       POP   A
    2F50: 53 16    MOV   [__rX],A
    2F52: 18       POP   A
    2F53: 53 17    MOV   [__r11],A
    2F55: 18       POP   A
    2F56: 53 18    MOV   [__r10],A
    2F58: 18       POP   A
    2F59: 53 19    MOV   [__r9],A
    2F5B: 18       POP   A
    2F5C: 53 1A    MOV   [__r8],A
    2F5E: 18       POP   A
    2F5F: 53 1B    MOV   [__r7],A
    2F61: 18       POP   A
    2F62: 53 1C    MOV   [__r6],A
    2F64: 18       POP   A
    2F65: 53 1D    MOV   [__r5],A
    2F67: 18       POP   A
    2F68: 53 1E    MOV   [__r4],A
    2F6A: 18       POP   A
    2F6B: 53 1F    MOV   [__r3],A
    2F6D: 18       POP   A
    2F6E: 53 20    MOV   [__r2],A
    2F70: 18       POP   A
    2F71: 53 21    MOV   [__r1],A
    2F73: 18       POP   A
    2F74: 53 22    MOV   [__r0],A
    2F76: 18       POP   A
    2F77: 60 D5    MOV   REG[0xD5],A
    2F79: 18       POP   A
    2F7A: 60 D4    MOV   REG[0xD4],A
    2F7C: 18       POP   A
    2F7D: 60 D3    MOV   REG[0xD3],A
    2F7F: 18       POP   A
    2F80: 60 D0    MOV   REG[0xD0],A
    2F82: 18       POP   A
    2F83: 7E       RETI  
(0587) }
(0588) 
(0589) //----------------------------------------------------------------------------------------
(0590) // PS/2 Bit-Banging State Machine Reset
(0591) //
(0592) // Since it is possible that a glitch can appear on the PS/2 Clock line to the PSoC
(0593) // and cause the state machine to believe it is receiving data from the PS/2 interface,
(0594) // a OneShot User Module (named PS2OneShot here) is used to reset the state machine
(0595) //
(0596) // PS/2 specifications say that acceptable clock frequencies range from 10kHz to 16kHz
(0597) // (i.e. clock periods range from 100us to 62.5us).
(0598) //
(0599) // In this design an 8-bit OneShot User Module is configured with a clock source of VC3
(0600) // with the VC3 source of SysClk/1 and divider of 240. This clocks the OneShot at a rate
(0601) // of 100kHz. Upon detecting the falling-edge of the PS/2 clock, the OneShot becomes
(0602) // active. The OneShot will not generate an interrupt until the PS/2 clock line remains
(0603) // high (i.e. PS/2 clock is idle) for 8/100kHz = 80us. This is sufficient time for the
(0604) // state machine to read the Stop bit from a valid PS/2 frame before this OneShot ISR
(0605) // resets the state machine. One the other hand, if the clock line glitched and the
(0606) // state machine was started, this ISR will reset the state machine instead of leaving
(0607) // it (incorrectly) in an intermediate state when a valid frame arrives.
(0608) //
(0609) // XXX - Update these comments to reflect the new behavior of only calling
(0610) //       this ISR if we don't get a complete frame.
(0611) //----------------------------------------------------------------------------------------
(0612) void PS2OneShot_ISR(void)
(0613) {
_PS2OneShot_ISR:
    2F84: 71 C0    OR    F,0xC0
    2F86: 08       PUSH  A
    2F87: 5D D0    MOV   A,REG[0xD0]
    2F89: 08       PUSH  A
(0614) 	// Make sure the PS/2 Data line is HIGH (undriven) by the PSoC in case the
(0615) 	// transmission of a frame was interrupted while it was held LOW.
(0616) 	// Note: We don't need to make the PS/2 Clock line HIGH since, it something else
(0617) 	// is driving it LOW, this ISR will never be called since the OneShot will be
(0618) 	// held in its active state.
(0619) 	PS2DATA_HIGH;
    2F8A: 62 D0 00 MOV   REG[0xD0],0x0
    2F8D: 2E 00 10 OR    [state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2F90: 51 00    MOV   A,[state|pressed|types|keys|altIndex|altStr|pianoPeriod|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2F92: 60 04    MOV   REG[0x4],A
(0620) 	//// Reset the frame state machine
(0621) 	if (PS2FrameState != PS2_START_BIT_IN) {
    2F94: 62 D0 00 MOV   REG[0xD0],0x0
    2F97: 3C 69 00 CMP   [ps2.c:PS2FrameState],0x0
    2F9A: A0 0D    JZ    0x2FA8
(0622) 		PS2FrameStatus = FRAME_INCOMPLETE;
    2F9C: 62 D0 00 MOV   REG[0xD0],0x0
    2F9F: 55 63 20 MOV   [PS2FrameStatus],0x20
(0623) 		PS2FrameState = PS2_START_BIT_IN;
    2FA2: 62 D0 00 MOV   REG[0xD0],0x0
    2FA5: 55 69 00 MOV   [ps2.c:PS2FrameState],0x0
(0624) 	}
(0625) 	return;
    2FA8: 18       POP   A
    2FA9: 60 D0    MOV   REG[0xD0],A
    2FAB: 18       POP   A
    2FAC: 7E       RETI  
(0626) }
(0627) 
(0628) //----------------------------------------------------------------------------------------
(0629) // Ten Micro Second Timer Interrupt Service Routine
(0630) //----------------------------------------------------------------------------------------
(0631) void TenMicroSecTimer_ISR(void)
(0632) {
_TenMicroSecTimer_ISR:
    2FAD: 71 C0    OR    F,0xC0
    2FAF: 08       PUSH  A
    2FB0: 5D D0    MOV   A,REG[0xD0]
    2FB2: 08       PUSH  A
(0633) 	TenMicroSecTimerReps--;
    2FB3: 62 D0 00 MOV   REG[0xD0],0x0
    2FB6: 7A 58    DEC   [TenMicroSecTimerReps]
(0634) 	return;
    2FB8: 18       POP   A
    2FB9: 60 D0    MOV   REG[0xD0],A
    2FBB: 18       POP   A
    2FBC: 7E       RETI  
