FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 0B 08 LJMP  _DelSig_ADConversion_ISR(0149)     ljmp	_DelSig_ADConversion_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 17 60 LJMP  _DACUpdate_ISR     (0153)     ljmp	_DACUpdate_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 0B 1E LJMP  _DelSigClock_ISR   (0161)     ljmp	_DelSigClock_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
004C: 7D 0A AD LJMP  _SPIM_ISR          (0193)     ljmp	_SPIM_ISR
004F: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
0058: 7D 09 5B LJMP  _UART_TX_ISR       (0205)     ljmp	_UART_TX_ISR
005B: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
005C: 7D 09 5C LJMP  _UART_RX_ISR       (0209)     ljmp	_UART_RX_ISR
005F: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [chAMemBlk+138],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [chAMemBlk+139],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 12 MOV   REG[0xE0],0x12     (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 08 F9 LCALL 0x08F9             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 07    MOV   A,0x7              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 EE    MOV   X,0xEE             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 5C    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 5C    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 5C    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 5B    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 5C    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 5C FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 5B    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 5B    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 5C    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 5C FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 5B    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 13 MOV   REG[0xE0],0x13     (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 10 C0 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
07F4: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_DataAcqSystem_Bank1
                                        (0019) export LoadConfigTBL_DataAcqSystem_Bank0
                                        (0020) export LoadConfigTBL_DataAcqSystem_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_DataAcqSystem_Bank0:
                                        (0023) ;  Instance name AMUX4, User Module AMUX4
                                        (0024) ;  Instance name DAC8A, User Module DAC8
                                        (0025) ;       Instance name DAC8A, Block Name LSB(ASD11)
                                        (0026) 	db		84h, 80h		;DAC8A_LSB_CR0(ASD11CR0)
                                        (0027) 	db		85h, 80h		;DAC8A_LSB_CR1(ASD11CR1)
                                        (0028) 	db		86h, 20h		;DAC8A_LSB_CR2(ASD11CR2)
                                        (0029) 	db		87h, 30h		;DAC8A_LSB_CR3(ASD11CR3)
                                        (0030) ;       Instance name DAC8A, Block Name MSB(ASC21)
                                        (0031) 	db		94h, a0h		;DAC8A_MSB_CR0(ASC21CR0)
                                        (0032) 	db		95h, 41h		;DAC8A_MSB_CR1(ASC21CR1)
                                        (0033) 	db		96h, a0h		;DAC8A_MSB_CR2(ASC21CR2)
                                        (0034) 	db		97h, 30h		;DAC8A_MSB_CR3(ASC21CR3)
                                        (0035) ;  Instance name DAC8B, User Module DAC8
                                        (0036) ;       Instance name DAC8B, Block Name LSB(ASD22)
                                        (0037) 	db		98h, 80h		;DAC8B_LSB_CR0(ASD22CR0)
                                        (0038) 	db		99h, 80h		;DAC8B_LSB_CR1(ASD22CR1)
                                        (0039) 	db		9ah, 20h		;DAC8B_LSB_CR2(ASD22CR2)
                                        (0040) 	db		9bh, 30h		;DAC8B_LSB_CR3(ASD22CR3)
                                        (0041) ;       Instance name DAC8B, Block Name MSB(ASC12)
                                        (0042) 	db		88h, a0h		;DAC8B_MSB_CR0(ASC12CR0)
                                        (0043) 	db		89h, 41h		;DAC8B_MSB_CR1(ASC12CR1)
                                        (0044) 	db		8ah, a0h		;DAC8B_MSB_CR2(ASC12CR2)
                                        (0045) 	db		8bh, 3ch		;DAC8B_MSB_CR3(ASC12CR3)
                                        (0046) ;  Instance name DACUpdate, User Module Counter8
                                        (0047) ;       Instance name DACUpdate, Block Name CNTR8(DBB01)
                                        (0048) 	db		27h, 00h		;DACUpdate_CONTROL_REG(DBB01CR0)
                                        (0049) 	db		25h, 7fh		;DACUpdate_PERIOD_REG(DBB01DR1)
                                        (0050) 	db		26h, 04h		;DACUpdate_COMPARE_REG(DBB01DR2)
                                        (0051) ;  Instance name DelSig, User Module DelSig
                                        (0052) ;       Instance name DelSig, Block Name ADC1(ASC10)
                                        (0053) 	db		80h, 88h		;DelSig_AtoD1cr0(ASC10CR0)
                                        (0054) 	db		81h, 00h		;DelSig_AtoD1cr1(ASC10CR1)
                                        (0055) 	db		82h, 00h		;DelSig_AtoD1cr2(ASC10CR2)
                                        (0056) 	db		83h, e0h		;DelSig_AtoD1cr3(ASC10CR3)
                                        (0057) ;       Instance name DelSig, Block Name ADC2(ASD20)
                                        (0058) 	db		90h, 90h		;DelSig_AtoD2cr0(ASD20CR0)
                                        (0059) 	db		91h, 00h		;DelSig_AtoD2cr1(ASD20CR1)
                                        (0060) 	db		92h, 40h		;DelSig_AtoD2cr2(ASD20CR2)
                                        (0061) 	db		93h, e0h		;DelSig_AtoD2cr3(ASD20CR3)
                                        (0062) ;       Instance name DelSig, Block Name PWM(DBB00)
                                        (0063) 	db		23h, 00h		;DelSig_PWM_CR0(DBB00CR0)
                                        (0064) 	db		21h, 7fh		;DelSig_PWM_DR1(DBB00DR1)
                                        (0065) 	db		22h, 01h		;DelSig_PWM_DR2(DBB00DR2)
                                        (0066) ;  Instance name DelSigClock, User Module Counter8
                                        (0067) ;       Instance name DelSigClock, Block Name CNTR8(DCB03)
                                        (0068) 	db		2fh, 00h		;DelSigClock_CONTROL_REG(DCB03CR0)
                                        (0069) 	db		2dh, 4ah		;DelSigClock_PERIOD_REG(DCB03DR1)
                                        (0070) 	db		2eh, 25h		;DelSigClock_COMPARE_REG(DCB03DR2)
                                        (0071) ;  Instance name PGA, User Module PGA
                                        (0072) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0073) 	db		71h, fdh		;PGA_GAIN_CR0(ACB00CR0)
                                        (0074) 	db		72h, a1h		;PGA_GAIN_CR1(ACB00CR1)
                                        (0075) 	db		73h, 20h		;PGA_GAIN_CR2(ACB00CR2)
                                        (0076) 	db		70h, 00h		;PGA_GAIN_CR3(ACB00CR3)
                                        (0077) ;  Instance name SPIM, User Module SPIM
                                        (0078) ;       Instance name SPIM, Block Name SPIM(DCB23)
                                        (0079) 	db		4fh, 00h		;SPIM_CONTROL_REG  (DCB23CR0)
                                        (0080) 	db		4dh, 00h		;SPIM_TX_BUFFER_REG(DCB23DR1)
                                        (0081) 	db		4eh, 00h		;SPIM_RX_BUFFER_REG(DCB23DR2)
                                        (0082) ;  Instance name UART, User Module UART
                                        (0083) ;       Instance name UART, Block Name RX(DCB33)
                                        (0084) 	db		5fh, 00h		;UART_RX_CONTROL_REG(DCB33CR0)
                                        (0085) 	db		5dh, 00h		;UART_(DCB33DR1)
                                        (0086) 	db		5eh, 00h		;UART_RX_BUFFER_REG (DCB33DR2)
                                        (0087) ;       Instance name UART, Block Name TX(DCB32)
                                        (0088) 	db		5bh, 00h		;UART_TX_CONTROL_REG(DCB32CR0)
                                        (0089) 	db		59h, 00h		;UART_TX_BUFFER_REG (DCB32DR1)
                                        (0090) 	db		5ah, 00h		;UART_(DCB32DR2)
                                        (0091) ;  Global Register values Bank 0
                                        (0092) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0093) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0094) 	db		63h, 57h		; AnalogReferenceControl register (ARF_CR)
                                        (0095) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0096) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0097) 	db		e7h, 42h		; DecimatorControl_1 register (DEC_CR1)
                                        (0098) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0099) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0100) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0101) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0102) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0103) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0104) 	db		b5h, 04h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0105) 	db		b6h, 80h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0106) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0107) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0108) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0109) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0110) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0111) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0112) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0113) 	db		c0h, 0ch		; Row_2_InputMux register (RDI2RI)
                                        (0114) 	db		c1h, 02h		; Row_2_InputSync register (RDI2SYN)
                                        (0115) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0116) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0117) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0118) 	db		c5h, 08h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0119) 	db		c6h, 40h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0120) 	db		c8h, 75h		; Row_3_InputMux register (RDI3RI)
                                        (0121) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0122) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0123) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0124) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0125) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0126) 	db		ceh, 20h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0127) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0128) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0129) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0130) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0131) 	db		ffh
                                        (0132) LoadConfigTBL_DataAcqSystem_Bank1:
                                        (0133) ;  Instance name AMUX4, User Module AMUX4
                                        (0134) ;  Instance name DAC8A, User Module DAC8
                                        (0135) ;       Instance name DAC8A, Block Name LSB(ASD11)
                                        (0136) ;       Instance name DAC8A, Block Name MSB(ASC21)
                                        (0137) ;  Instance name DAC8B, User Module DAC8
                                        (0138) ;       Instance name DAC8B, Block Name LSB(ASD22)
                                        (0139) ;       Instance name DAC8B, Block Name MSB(ASC12)
                                        (0140) ;  Instance name DACUpdate, User Module Counter8
                                        (0141) ;       Instance name DACUpdate, Block Name CNTR8(DBB01)
                                        (0142) 	db		24h, 21h		;DACUpdate_FUNC_REG(DBB01FN)
                                        (0143) 	db		25h, 12h		;DACUpdate_INPUT_REG(DBB01IN)
                                        (0144) 	db		26h, 47h		;DACUpdate_OUTPUT_REG(DBB01OU)
                                        (0145) ;  Instance name DelSig, User Module DelSig
                                        (0146) ;       Instance name DelSig, Block Name ADC1(ASC10)
                                        (0147) ;       Instance name DelSig, Block Name ADC2(ASD20)
                                        (0148) ;       Instance name DelSig, Block Name PWM(DBB00)
                                        (0149) 	db		20h, 31h		;DelSig_PWM_FN(DBB00FN)
                                        (0150) 	db		21h, 12h		;DelSig_PWM_SL(DBB00IN)
                                        (0151) 	db		22h, 44h		;DelSig_PWM_OS(DBB00OU)
                                        (0152) ;  Instance name DelSigClock, User Module Counter8
                                        (0153) ;       Instance name DelSigClock, Block Name CNTR8(DCB03)
                                        (0154) 	db		2ch, 61h		;DelSigClock_FUNC_REG(DCB03FN)
                                        (0155) 	db		2dh, 10h		;DelSigClock_INPUT_REG(DCB03IN)
                                        (0156) 	db		2eh, c0h		;DelSigClock_OUTPUT_REG(DCB03OU)
                                        (0157) ;  Instance name PGA, User Module PGA
                                        (0158) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0159) ;  Instance name SPIM, User Module SPIM
                                        (0160) ;       Instance name SPIM, Block Name SPIM(DCB23)
                                        (0161) 	db		4ch, 06h		;SPIM_FUNCTION_REG (DCB23FN)
                                        (0162) 	db		4dh, d5h		;SPIM_INPUT_REG    (DCB23IN)
                                        (0163) 	db		4eh, 7ch		;SPIM_OUTPUT_REG   (DCB23OU)
                                        (0164) ;  Instance name UART, User Module UART
                                        (0165) ;       Instance name UART, Block Name RX(DCB33)
                                        (0166) 	db		5ch, 05h		;UART_RX_FUNC_REG   (DCB33FN)
                                        (0167) 	db		5dh, e1h		;UART_RX_INPUT_REG  (DCB33IN)
                                        (0168) 	db		5eh, 40h		;UART_RX_OUTPUT_REG (DCB33OU)
                                        (0169) ;       Instance name UART, Block Name TX(DCB32)
                                        (0170) 	db		58h, 0dh		;UART_TX_FUNC_REG   (DCB32FN)
                                        (0171) 	db		59h, 01h		;UART_TX_INPUT_REG  (DCB32IN)
                                        (0172) 	db		5ah, 47h		;UART_TX_OUTPUT_REG (DCB32OU)
                                        (0173) ;  Global Register values Bank 1
                                        (0174) 	db		61h, 03h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0175) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0176) 	db		60h, 16h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0177) 	db		62h, 39h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0178) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0179) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0180) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0181) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0182) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0183) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0184) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0185) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0186) 	db		e1h, 31h		; OscillatorControl_1 register (OSC_CR1)
                                        (0187) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0188) 	db		dfh, 33h		; OscillatorControl_3 register (OSC_CR3)
                                        (0189) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0190) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0191) 	db		e7h, a8h		; Type2Decimator_Control register (DEC_CR2)
                                        (0192) 	db		ffh
                                        (0193) AREA psoc_config(rom, rel)
                                        (0194) LoadConfigTBL_DataAcqSystem_Ordered:
                                        (0195) ;  Ordered Global Register values
                                        (0196) 	M8C_SetBank0
07F6: 62 00 00 MOV   REG[0x0],0x0       (0197) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
07F9: 71 10    OR    F,0x10             
                                        (0198) 	M8C_SetBank1
07FB: 62 00 00 MOV   REG[0x0],0x0       (0199) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
07FE: 62 01 FF MOV   REG[0x1],0xFF      (0200) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0801: 70 EF    AND   F,0xEF             
                                        (0201) 	M8C_SetBank0
0803: 62 03 FF MOV   REG[0x3],0xFF      (0202) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0806: 62 02 00 MOV   REG[0x2],0x0       (0203) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0809: 71 10    OR    F,0x10             
                                        (0204) 	M8C_SetBank1
080B: 62 02 00 MOV   REG[0x2],0x0       (0205) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
080E: 62 03 00 MOV   REG[0x3],0x0       (0206) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0811: 70 EF    AND   F,0xEF             
                                        (0207) 	M8C_SetBank0
0813: 62 01 00 MOV   REG[0x1],0x0       (0208) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0816: 62 04 1C MOV   REG[0x4],0x1C      (0209) 	mov	reg[04h], 1ch		; Port_1_Data register (PRT1DR)
0819: 71 10    OR    F,0x10             
                                        (0210) 	M8C_SetBank1
081B: 62 04 9F MOV   REG[0x4],0x9F      (0211) 	mov	reg[04h], 9fh		; Port_1_DriveMode_0 register (PRT1DM0)
081E: 62 05 7C MOV   REG[0x5],0x7C      (0212) 	mov	reg[05h], 7ch		; Port_1_DriveMode_1 register (PRT1DM1)
0821: 70 EF    AND   F,0xEF             
                                        (0213) 	M8C_SetBank0
0823: 62 07 1C MOV   REG[0x7],0x1C      (0214) 	mov	reg[07h], 1ch		; Port_1_DriveMode_2 register (PRT1DM2)
0826: 62 06 F9 MOV   REG[0x6],0xF9      (0215) 	mov	reg[06h], f9h		; Port_1_GlobalSelect register (PRT1GS)
0829: 71 10    OR    F,0x10             
                                        (0216) 	M8C_SetBank1
082B: 62 06 00 MOV   REG[0x6],0x0       (0217) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
082E: 62 07 00 MOV   REG[0x7],0x0       (0218) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0831: 70 EF    AND   F,0xEF             
                                        (0219) 	M8C_SetBank0
0833: 62 05 00 MOV   REG[0x5],0x0       (0220) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0836: 62 08 00 MOV   REG[0x8],0x0       (0221) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0839: 71 10    OR    F,0x10             
                                        (0222) 	M8C_SetBank1
083B: 62 08 80 MOV   REG[0x8],0x80      (0223) 	mov	reg[08h], 80h		; Port_2_DriveMode_0 register (PRT2DM0)
083E: 62 09 7F MOV   REG[0x9],0x7F      (0224) 	mov	reg[09h], 7fh		; Port_2_DriveMode_1 register (PRT2DM1)
0841: 70 EF    AND   F,0xEF             
                                        (0225) 	M8C_SetBank0
0843: 62 0B 7F MOV   REG[0xB],0x7F      (0226) 	mov	reg[0bh], 7fh		; Port_2_DriveMode_2 register (PRT2DM2)
0846: 62 0A 80 MOV   REG[0xA],0x80      (0227) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
0849: 71 10    OR    F,0x10             
                                        (0228) 	M8C_SetBank1
084B: 62 0A 00 MOV   REG[0xA],0x0       (0229) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
084E: 62 0B 00 MOV   REG[0xB],0x0       (0230) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0851: 70 EF    AND   F,0xEF             
                                        (0231) 	M8C_SetBank0
0853: 62 09 00 MOV   REG[0x9],0x0       (0232) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0856: 62 0C 00 MOV   REG[0xC],0x0       (0233) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0859: 71 10    OR    F,0x10             
                                        (0234) 	M8C_SetBank1
085B: 62 0C 00 MOV   REG[0xC],0x0       (0235) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
085E: 62 0D 00 MOV   REG[0xD],0x0       (0236) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0861: 70 EF    AND   F,0xEF             
                                        (0237) 	M8C_SetBank0
0863: 62 0F 00 MOV   REG[0xF],0x0       (0238) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0866: 62 0E 00 MOV   REG[0xE],0x0       (0239) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0869: 71 10    OR    F,0x10             
                                        (0240) 	M8C_SetBank1
086B: 62 0E 00 MOV   REG[0xE],0x0       (0241) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
086E: 62 0F 00 MOV   REG[0xF],0x0       (0242) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0871: 70 EF    AND   F,0xEF             
                                        (0243) 	M8C_SetBank0
0873: 62 0D 00 MOV   REG[0xD],0x0       (0244) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0876: 62 10 00 MOV   REG[0x10],0x0      (0245) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0879: 71 10    OR    F,0x10             
                                        (0246) 	M8C_SetBank1
087B: 62 10 00 MOV   REG[0x10],0x0      (0247) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
087E: 62 11 00 MOV   REG[0x11],0x0      (0248) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0881: 70 EF    AND   F,0xEF             
                                        (0249) 	M8C_SetBank0
0883: 62 13 00 MOV   REG[0x13],0x0      (0250) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0886: 62 12 00 MOV   REG[0x12],0x0      (0251) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0889: 71 10    OR    F,0x10             
                                        (0252) 	M8C_SetBank1
088B: 62 12 00 MOV   REG[0x12],0x0      (0253) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
088E: 62 13 00 MOV   REG[0x13],0x0      (0254) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0891: 70 EF    AND   F,0xEF             
                                        (0255) 	M8C_SetBank0
0893: 62 11 00 MOV   REG[0x11],0x0      (0256) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0896: 62 14 00 MOV   REG[0x14],0x0      (0257) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0899: 71 10    OR    F,0x10             
                                        (0258) 	M8C_SetBank1
089B: 62 14 00 MOV   REG[0x14],0x0      (0259) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
089E: 62 15 00 MOV   REG[0x15],0x0      (0260) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
08A1: 70 EF    AND   F,0xEF             
                                        (0261) 	M8C_SetBank0
08A3: 62 17 00 MOV   REG[0x17],0x0      (0262) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
08A6: 62 16 00 MOV   REG[0x16],0x0      (0263) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
08A9: 71 10    OR    F,0x10             
                                        (0264) 	M8C_SetBank1
08AB: 62 16 00 MOV   REG[0x16],0x0      (0265) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
08AE: 62 17 00 MOV   REG[0x17],0x0      (0266) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
08B1: 70 EF    AND   F,0xEF             
                                        (0267) 	M8C_SetBank0
08B3: 62 15 00 MOV   REG[0x15],0x0      (0268) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
08B6: 62 18 00 MOV   REG[0x18],0x0      (0269) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
08B9: 71 10    OR    F,0x10             
                                        (0270) 	M8C_SetBank1
08BB: 62 18 00 MOV   REG[0x18],0x0      (0271) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
08BE: 62 19 00 MOV   REG[0x19],0x0      (0272) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
08C1: 70 EF    AND   F,0xEF             
                                        (0273) 	M8C_SetBank0
08C3: 62 1B 00 MOV   REG[0x1B],0x0      (0274) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
08C6: 62 1A 00 MOV   REG[0x1A],0x0      (0275) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
08C9: 71 10    OR    F,0x10             
                                        (0276) 	M8C_SetBank1
08CB: 62 1A 00 MOV   REG[0x1A],0x0      (0277) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
08CE: 62 1B 00 MOV   REG[0x1B],0x0      (0278) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
08D1: 70 EF    AND   F,0xEF             
                                        (0279) 	M8C_SetBank0
08D3: 62 19 00 MOV   REG[0x19],0x0      (0280) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
08D6: 62 1C 00 MOV   REG[0x1C],0x0      (0281) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
08D9: 71 10    OR    F,0x10             
                                        (0282) 	M8C_SetBank1
08DB: 62 1C 00 MOV   REG[0x1C],0x0      (0283) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
08DE: 62 1D 00 MOV   REG[0x1D],0x0      (0284) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
08E1: 70 EF    AND   F,0xEF             
                                        (0285) 	M8C_SetBank0
08E3: 62 1F 00 MOV   REG[0x1F],0x0      (0286) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
08E6: 62 1E 00 MOV   REG[0x1E],0x0      (0287) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
08E9: 71 10    OR    F,0x10             
                                        (0288) 	M8C_SetBank1
08EB: 62 1E 00 MOV   REG[0x1E],0x0      (0289) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
08EE: 62 1F 00 MOV   REG[0x1F],0x0      (0290) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
08F1: 70 EF    AND   F,0xEF             
                                        (0291) 	M8C_SetBank0
08F3: 62 1D 00 MOV   REG[0x1D],0x0      (0292) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
08F6: 70 EF    AND   F,0xEF             
                                        (0293) 	M8C_SetBank0
08F8: 7F       RET                      (0294) 	ret
                                        (0295) 
                                        (0296) 
                                        (0297) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_DataAcqSystem
                                        (0026) export _LoadConfig_DataAcqSystem
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
08F9: 7C 09 00 LCALL 0x0900             (0058) 	lcall	LoadConfig_DataAcqSystem
08FC: 7C 07 F4 LCALL 0x07F4             (0059) 	lcall	LoadConfigTBL_DataAcqSystem_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
08FF: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration DataAcqSystem
                                        (0067) ;
                                        (0068) ;    Load configuration registers for DataAcqSystem.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_DataAcqSystem:
                                        (0085)  LoadConfig_DataAcqSystem:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
0900: 10       PUSH  X                  (0088) 	push	x
0901: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
0903: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0905: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0906: 50 05    MOV   A,0x5              (0093)     mov     A, >LoadConfigTBL_DataAcqSystem_Bank0
0908: 57 F9    MOV   X,0xF9             (0094)     mov     X, <LoadConfigTBL_DataAcqSystem_Bank0
090A: 7C 09 1B LCALL 0x091B             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
090D: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
090F: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
0910: 50 06    MOV   A,0x6              (0100)     mov     A, >LoadConfigTBL_DataAcqSystem_Bank1
0912: 57 A4    MOV   X,0xA4             (0101)     mov     X, <LoadConfigTBL_DataAcqSystem_Bank1
0914: 7C 09 1B LCALL 0x091B             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0917: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
0919: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
091A: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
091B: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
091D: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
091E: 08       PUSH  A                  (0132)     push    A
091F: 4F       MOV   X,SP               (0133)     mov     X, SP
0920: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0923: D0 04    JNC   0x0928             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0925: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
0928: 18       POP   A                  (0138)     pop     A
0929: 20       POP   X                  (0139)     pop     X
092A: 70 EF    AND   F,0xEF             
092C: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
092F: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
0930: 08       PUSH  A                  (0145)     push    A
0931: 28       ROMX                     (0146)     romx                            ; Load register address from table
0932: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
0934: A0 1F    JZ    0x0954             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
0936: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
0937: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
093A: A0 03    JZ    0x093E             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
093C: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
093E: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
0940: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
0941: 20       POP   X                  (0156)     pop     X
0942: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
0943: 09 00    ADC   A,0x0              (0158)     adc     A, 0
0945: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
0946: 08       PUSH  A                  (0160)     push    A
0947: 28       ROMX                     (0161)     romx                            ; load config data from the table
0948: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
0949: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
094B: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
094D: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
094E: 20       POP   X                  (0166)     pop     X
094F: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
0950: 09 00    ADC   A,0x0              (0168)     adc     A, 0
0952: 8F D7    JMP   0x092A             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
0954: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
0956: 70 3F    AND   F,0x3F             
0958: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
095A: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
095B: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
095C: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
095D: 43 DF 40 OR    REG[0xDF],0x40     (0002) ;;*****************************************************************************
0960: 43 DF 80 OR    REG[0xDF],0x80     
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0963: 7F       RET                      (0182)    ret
0964: 41 DF BF AND   REG[0xDF],0xBF     
0967: 41 DF 7F AND   REG[0xDF],0x7F     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
096A: 7F       RET                      (0214)    ret
096B: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
096D: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
096F: A0 07    JZ    0x0977             (0249)    jz    .SetModeRegEmpty
0971: 43 58 10 OR    REG[0x58],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0974: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
0976: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
0977: 41 58 EF AND   REG[0x58],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
097A: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
097C: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
097D: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
097F: 60 5B    MOV   REG[0x5B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
0981: 60 5F    MOV   REG[0x5F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0983: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0984: 41 5B FE AND   REG[0x5B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0987: 41 5F FE AND   REG[0x5F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
098A: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
098B: 60 59    MOV   REG[0x59],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
098D: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
098E: 5D 5B    MOV   A,REG[0x5B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0990: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0991: 5D 5E    MOV   A,REG[0x5E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0993: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0994: 5D 5F    MOV   A,REG[0x5F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0996: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
0997: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
0999: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
099B: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
099D: A0 06    JZ    0x09A4             (0492)    jz   .SetTxCmpMode
                                        (0493) 
099F: 41 58 EF AND   REG[0x58],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
09A2: 80 04    JMP   0x09A7             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
09A4: 43 58 10 OR    REG[0x58],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
09A7: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
09A9: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
09AA: 08       PUSH  A                  (0536)    push A
09AB: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
09AD: A0 06    JZ    0x09B4             (0538)    jz   .DisRxInt
09AF: 43 DF 80 OR    REG[0xDF],0x80     
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
09B2: 80 04    JMP   0x09B7             (0541)    jmp  .CheckTxInt
09B4: 41 DF 7F AND   REG[0xDF],0x7F     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
09B7: 18       POP   A                  (0547)    pop  A
09B8: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
09BA: A0 06    JZ    0x09C1             (0549)    jz   .DisTxInt
09BC: 43 DF 40 OR    REG[0xDF],0x40     
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
09BF: 80 04    JMP   0x09C4             (0552)    jmp  .End_IntCntl
09C1: 41 DF BF AND   REG[0xDF],0xBF     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
09C4: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
09D5: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
09D6: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
09D7: 67       ASR   A                  (0603)    asr   A
09D8: 67       ASR   A                  (0604)    asr   A
09D9: 67       ASR   A                  (0605)    asr   A
09DA: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
09DC: FF E7    INDEX 0x09C5             (0607)    index UART_HEX_STR                  ; Get Hex value
09DE: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
09E0: 18       POP   A                  (0609)    pop   A                             ; Restore value
09E1: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
09E3: FF E0    INDEX 0x09C5             (0611)    index UART_HEX_STR                  ; Get Hex value
09E5: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
09E7: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
09E8: 4B       SWAP  A,X                (0645)    swap  A,X
09E9: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
09EB: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
09EC: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
09EE: 7F       RET                      (0650)    ret
09EF: 49 5B 10 TST   REG[0x5B],0x10     
09F2: AF FC    JZ    _UART_PutChar      
09F4: 60 59    MOV   REG[0x59],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
09F6: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
09F7: 49 5F 08 TST   REG[0x5F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
09FA: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
09FC: 5D 5E    MOV   A,REG[0x5E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
09FE: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
09FF: 5D 5F    MOV   A,REG[0x5F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0A01: 08       PUSH  A                  (0756)    push A
0A02: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0A04: B0 04    JNZ   0x0A09             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0A06: 18       POP   A                  (0759)    pop  A
0A07: 80 0B    JMP   0x0A13             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0A09: 5D 5E    MOV   A,REG[0x5E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0A0B: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0A0C: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0A0D: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
0A0F: B0 03    JNZ   0x0A13             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0A11: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0A12: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0A13: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0A15: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0A16: 5D 5F    MOV   A,REG[0x5F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0A18: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0A1A: 08       PUSH  A                  (0819)    push A
0A1B: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0A1D: B0 07    JNZ   0x0A25             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0A1F: 18       POP   A                  (0822)    pop  A
0A20: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0A22: 4B       SWAP  A,X                (0824)    swap A,X
0A23: 80 07    JMP   0x0A2B             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0A25: 18       POP   A                  (0828)    pop  A
0A26: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0A28: 4B       SWAP  A,X                (0830)    swap A,X
0A29: 5D 5E    MOV   A,REG[0x5E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0A2B: 7F       RET                      (0836)    ret
0A2C: 70 BF    AND   F,0xBF             
0A2E: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0A30: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0A32: A0 06    JZ    0x0A39             (0872)    jz    End_PutString                           ; Check for end of string
0A34: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0A36: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0A37: 8F F8    JMP   0x0A30             (0875)    jmp   .PutStringLoop                          ; Get next character
0A39: 70 3F    AND   F,0x3F             
0A3B: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0A3D: 7F       RET                      (0879)    ret
0A3E: 70 BF    AND   F,0xBF             
0A40: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0A43: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0A44: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0A46: A0 1A    JZ    0x0A61             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0A48: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
0A4A: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0A4C: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
0A4E: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0A50: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0A52: 49 5B 10 TST   REG[0x5B],0x10     
0A55: AF FC    JZ    0x0A52             
0A57: 60 59    MOV   REG[0x59],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0A59: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
0A5A: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0A5D: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0A5F: 8F E4    JMP   0x0A44             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
0A61: 70 3F    AND   F,0x3F             
0A63: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0A65: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0A66: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0A67: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
0A6A: B0 06    JNZ   0x0A71             (0980)    jnz   .CW_WRITEIT
0A6C: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
0A6F: A0 1D    JZ    0x0A8D             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0A71: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0A72: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0A74: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
0A76: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
0A77: 49 5B 10 TST   REG[0x5B],0x10     
0A7A: AF FC    JZ    0x0A77             
0A7C: 60 59    MOV   REG[0x59],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
0A7E: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0A7F: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0A82: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0A85: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0A88: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0A8B: 8F DB    JMP   0x0A67             (0995)    jmp   .CW_Loop
0A8D: 70 3F    AND   F,0x3F             
0A8F: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0A91: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0A92: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0A93: 10       PUSH  X                  (1030)    push  X
0A94: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0A95: A0 0B    JZ    0x0AA1             (1032)    jz    .End_CPutString
0A97: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
0A99: 20       POP   X                  (1034)    pop   X
0A9A: 18       POP   A                  (1035)    pop   A
0A9B: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0A9C: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
0A9E: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
0A9F: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
0AA1: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0AA3: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0AA4: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0AA6: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
0AA8: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0AAA: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0AAC: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\spimint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIMINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;    Interrupt handler routine for SPIM user module instance: SPIM.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "SPIM.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) export  _SPIM_ISR
                                        (0023) 
                                        (0024) 
                                        (0025) AREA InterruptRAM (RAM,REL,CON)
                                        (0026) 
                                        (0027) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0028) ;---------------------------------------------------
                                        (0029) ; Insert your custom declarations below this banner
                                        (0030) ;---------------------------------------------------
                                        (0031) 
                                        (0032) ;------------------------
                                        (0033) ; Includes
                                        (0034) ;------------------------
                                        (0035) 
                                        (0036) 	
                                        (0037) ;------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;------------------------
                                        (0040) 
                                        (0041) 
                                        (0042) ;------------------------
                                        (0043) ; Variable Allocation
                                        (0044) ;------------------------
                                        (0045) 
                                        (0046) 
                                        (0047) ;---------------------------------------------------
                                        (0048) ; Insert your custom declarations above this banner
                                        (0049) ;---------------------------------------------------
                                        (0050) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0051) 
                                        (0052) 
                                        (0053) AREA UserModules (ROM, REL)
                                        (0054) 
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;  FUNCTION NAME: _SPIM_ISR
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0059) ;
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;
                                        (0062) 
                                        (0063) _SPIM_ISR:
                                        (0064) 
                                        (0065)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0066)    ;---------------------------------------------------
                                        (0067)    ; Insert your custom assembly code below this banner
                                        (0068)    ;---------------------------------------------------
                                        (0069)    ;   NOTE: interrupt service routines must preserve
                                        (0070)    ;   the values of the A and X CPU registers.
                                        (0071)    
                                        (0072)    ;---------------------------------------------------
                                        (0073)    ; Insert your custom assembly code above this banner
                                        (0074)    ;---------------------------------------------------
                                        (0075)    
                                        (0076)    ;---------------------------------------------------
                                        (0077)    ; Insert a lcall to a C function below this banner
                                        (0078)    ; and un-comment the lines between these banners
                                        (0079)    ;---------------------------------------------------
                                        (0080)    
                                        (0081)    ;PRESERVE_CPU_CONTEXT
                                        (0082)    ;lcall _My_C_Function
                                        (0083)    ;RESTORE_CPU_CONTEXT
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
0AAD: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file SPIMINT.asm
FILE: lib\spim.asm                      (0001) ;;*****************************************************************************
0AAE: 43 DF 08 OR    REG[0xDF],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SPIM User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SPIM.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   SPIM_EnableInt
                                        (0030) export  _SPIM_EnableInt
                                        (0031) export   SPIM_DisableInt
                                        (0032) export  _SPIM_DisableInt
                                        (0033) export   SPIM_Start
                                        (0034) export  _SPIM_Start
                                        (0035) export   SPIM_Stop
                                        (0036) export  _SPIM_Stop
                                        (0037) export   SPIM_SendTxData
                                        (0038) export  _SPIM_SendTxData
                                        (0039) export   SPIM_bReadRxData
                                        (0040) export  _SPIM_bReadRxData
                                        (0041) export   SPIM_bReadStatus
                                        (0042) export  _SPIM_bReadStatus
                                        (0043) 
                                        (0044) // These globals will be removed in a future release
                                        (0045) // Do not use
                                        (0046) export   bSPIM_ReadRxData
                                        (0047) export  _bSPIM_ReadRxData
                                        (0048) export   bSPIM_ReadStatus
                                        (0049) export  _bSPIM_ReadStatus
                                        (0050) 
                                        (0051) ;-----------------------------------------------
                                        (0052) ;  Constant Definitions
                                        (0053) ;-----------------------------------------------
                                        (0054) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0055) 
                                        (0056) 
                                        (0057) area UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: SPIM_EnableInt
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Enables the SPIM interrupt by setting the interrupt enable mask
                                        (0065) ;     bit associated with this User Module.
                                        (0066) ;
                                        (0067) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0068) ;           M8C global macro: M8C_EnableGInt
                                        (0069) ;
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:  none
                                        (0073) ;
                                        (0074) ;  RETURNS:  none
                                        (0075) ;
                                        (0076) ;  SIDE EFFECTS: 
                                        (0077) ;    The A and X registers may be modified by this or future implementations
                                        (0078) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0079) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0080) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0081) ;    functions.
                                        (0082) ;
                                        (0083) ;  THEORY of OPERATION or PROCEDURE:
                                        (0084) ;     Sets the specific user module interrupt enable mask bit.
                                        (0085) ;
                                        (0086)  SPIM_EnableInt:
                                        (0087) _SPIM_EnableInt:
                                        (0088)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0089)    M8C_EnableIntMask SPIM_INT_REG, SPIM_bINT_MASK
                                        (0090)    RAM_EPILOGUE RAM_USE_CLASS_1
0AB1: 7F       RET                      (0091)    ret
0AB2: 41 DF F7 AND   REG[0xDF],0xF7     
                                        (0092) 
                                        (0093) .ENDSECTION
                                        (0094) 
                                        (0095) .SECTION
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;  FUNCTION NAME: SPIM_DisableInt
                                        (0098) ;
                                        (0099) ;  DESCRIPTION:
                                        (0100) ;     Disables this SPIM's interrupt by clearing the interrupt enable mask bit
                                        (0101) ;     associated with this User Module.
                                        (0102) ;
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;
                                        (0105) ;  ARGUMENTS:  none
                                        (0106) ;
                                        (0107) ;  RETURNS:  none
                                        (0108) ;
                                        (0109) ;  SIDE EFFECTS: 
                                        (0110) ;    The A and X registers may be modified by this or future implementations
                                        (0111) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0112) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0113) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0114) ;    functions.
                                        (0115) ;
                                        (0116) ;  THEORY of OPERATION or PROCEDURE:
                                        (0117) ;     Clears the specific user module interrupt enable mask bit.
                                        (0118) ;
                                        (0119)  SPIM_DisableInt:
                                        (0120) _SPIM_DisableInt:
                                        (0121)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0122)    M8C_DisableIntMask SPIM_INT_REG, SPIM_bINT_MASK
                                        (0123)    RAM_EPILOGUE RAM_USE_CLASS_1
0AB5: 7F       RET                      (0124)    ret
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: SPIM_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit, SPI mode, and LSB/MSB first configuration of the SPIM
                                        (0134) ;     user module.
                                        (0135) ;
                                        (0136) ;     Transmission will begin transmitting when a byte is written into the TX buffer
                                        (0137) ;     using the SPIM_SendTxData function.
                                        (0138) ;
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140) ;
                                        (0141) ;  ARGUMENTS:
                                        (0142) ;     BYTE bConfiguration - Consists of SPI Mode and LSB/MSB first bit.
                                        (0143) ;           Use defined masks - masks can be OR'd together.
                                        (0144) ;     PASSED in Accumulator.
                                        (0145) ;
                                        (0146) ;  RETURNS:  none
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS: 
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155) ;  THEORY of OPERATION or PROCEDURE:
                                        (0156) ;     1) Set all Slave Select outputs high
                                        (0157) ;     2) Set the specified SPI configuration bits in the Control register.
                                        (0158) ;
                                        (0159)  SPIM_Start:
                                        (0160) _SPIM_Start:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    ; setup the SPIM configuration setting
0AB6: 29 01    OR    A,0x1              (0163)    or    A, bfCONTROL_REG_START_BIT
0AB8: 60 4F    MOV   REG[0x4F],A        (0164)    mov   REG[SPIM_CONTROL_REG], A
                                        (0165)    RAM_EPILOGUE RAM_USE_CLASS_1
0ABA: 7F       RET                      (0166)    ret
                                        (0167) 
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: SPIM_Stop
                                        (0173) ;
                                        (0174) ;  DESCRIPTION:
                                        (0175) ;     Disables SPIM operation.
                                        (0176) ;
                                        (0177) ;-----------------------------------------------------------------------------
                                        (0178) ;
                                        (0179) ;  ARGUMENTS:  none
                                        (0180) ;
                                        (0181) ;  RETURNS:  none
                                        (0182) ;
                                        (0183) ;  SIDE EFFECTS: 
                                        (0184) ;    The A and X registers may be modified by this or future implementations
                                        (0185) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0186) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0187) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0188) ;    functions.
                                        (0189) ;
                                        (0190) ;  THEORY of OPERATION or PROCEDURE:
                                        (0191) ;     Clear the start bit in the Control register.
                                        (0192) ;
                                        (0193)  SPIM_Stop:
                                        (0194) _SPIM_Stop:
                                        (0195)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0196)    ; clear the SPIM stop bits
0ABB: 41 4F FE AND   REG[0x4F],0xFE     (0197)    and   REG[SPIM_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_1
0ABE: 7F       RET                      (0199)    ret
                                        (0200) 
                                        (0201) .ENDSECTION
                                        (0202) 
                                        (0203) .SECTION
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: SPIM_SendTxData
                                        (0206) ;
                                        (0207) ;  DESCRIPTION:
                                        (0208) ;     Initiates an SPI data transfer.
                                        (0209) ;
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:
                                        (0213) ;     BYTE  bTxData - data to transmit.
                                        (0214) ;        Passed in Accumulator.
                                        (0215) ;
                                        (0216) ;  RETURNS:  none
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS: 
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;
                                        (0225) ;  THEORY of OPERATION or PROCEDURE:
                                        (0226) ;     Writes data to the TX buffer register.
                                        (0227) ;
                                        (0228)  SPIM_SendTxData:
                                        (0229) _SPIM_SendTxData:
                                        (0230)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231)    ; Transmit the data!
0ABF: 60 4D    MOV   REG[0x4D],A        (0232)    mov REG[SPIM_TX_BUFFER_REG], A
                                        (0233)    RAM_EPILOGUE RAM_USE_CLASS_1
0AC1: 7F       RET                      (0234)    ret
                                        (0235) 
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: SPIM_bReadRxData
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0244) ;     sure data is valid.
                                        (0245) ;
                                        (0246) ;-----------------------------------------------------------------------------
                                        (0247) ;
                                        (0248) ;  ARGUMENTS:  none
                                        (0249) ;
                                        (0250) ;  RETURNS:
                                        (0251) ;     bRxData - returned in A.
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS: 
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260) ;  THEORY of OPERATION or PROCEDURE:
                                        (0261) ;
                                        (0262)  SPIM_bReadRxData:
                                        (0263) _SPIM_bReadRxData:
                                        (0264)  bSPIM_ReadRxData:
                                        (0265) _bSPIM_ReadRxData:
                                        (0266)    RAM_PROLOGUE RAM_USE_CLASS_1
0AC2: 5D 4E    MOV   A,REG[0x4E]        (0267)    mov A, REG[SPIM_RX_BUFFER_REG]
                                        (0268)    RAM_EPILOGUE RAM_USE_CLASS_1   
0AC4: 7F       RET                      (0269)    ret
                                        (0270) 
                                        (0271) 
                                        (0272) .ENDSECTION
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME: SPIM_ReadStatus
                                        (0277) ;
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;     Reads the SPIM Status bits in the Control/Status register.
                                        (0280) ;
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;
                                        (0283) ;  ARGUMENTS:  none
                                        (0284) ;
                                        (0285) ;  RETURNS:
                                        (0286) ;     BYTE  bStatus - transmit status data.  Use the defined bit masks.
                                        (0287) ;        Returned in Accumulator.
                                        (0288) ;
                                        (0289) ;  SIDE EFFECTS: 
                                        (0290) ;    The A and X registers may be modified by this or future implementations
                                        (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0294) ;    functions.
                                        (0295) ;
                                        (0296) ;  THEORY of OPERATION or PROCEDURE:
                                        (0297) ;     Read the status and control register.
                                        (0298) ;
                                        (0299)  SPIM_bReadStatus:
                                        (0300) _SPIM_bReadStatus:
                                        (0301)  bSPIM_ReadStatus:
                                        (0302) _bSPIM_ReadStatus:
                                        (0303)    RAM_PROLOGUE RAM_USE_CLASS_1
0AC5: 5D 4F    MOV   A,REG[0x4F]        (0304)    mov A,  REG[SPIM_CONTROL_REG]
                                        (0305)    RAM_EPILOGUE RAM_USE_CLASS_1   
0AC7: 7F       RET                      (0306)    ret
                                        (0307) 
                                        (0308) .ENDSECTION
                                        (0309) 
                                        (0310) ; End of File SPIM.asm
FILE: lib\pga.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_Start
                                        (0060) export _PGA_Start
                                        (0061) export  PGA_SetPower
                                        (0062) export _PGA_SetPower
                                        (0063) 
                                        (0064) export  PGA_SetGain
                                        (0065) export _PGA_SetGain
                                        (0066) 
                                        (0067) export  PGA_Stop
                                        (0068) export _PGA_Stop
                                        (0069) 
                                        (0070) IF (PGA_AGNDBUFAPI)
                                        (0071) export  PGA_EnableAGNDBuffer
                                        (0072) export _PGA_EnableAGNDBuffer
                                        (0073) export  PGA_DisableAGNDBuffer
                                        (0074) export _PGA_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_Start
                                        (0092) ;  FUNCTION NAME: PGA_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_Start:
                                        (0111) _PGA_Start:
                                        (0112)  PGA_SetPower:
                                        (0113) _PGA_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0AC8: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0ACA: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0ACB: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0ACC: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_GAIN_CR2]                               ; read power value
0ACE: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0AD0: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0AD2: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_GAIN_CR2], A                          ; move complete value back to register
0AD4: 18       POP   A                  (0124)    pop  A
0AD5: 70 3F    AND   F,0x3F             
0AD7: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0AD9: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_SetGain:
                                        (0154) _PGA_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0ADA: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0ADC: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0ADD: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0ADE: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_GAIN_CR0]                               ; read mux settings
0AE0: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0AE2: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0AE5: B0 0E    JNZ   0x0AF4             (0164)    jnz  .SETHIGHGAIN
0AE7: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_GAIN_CR3],~EXGAIN                          ; Clear High Gain bit.
0AEA: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0AEC: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
0AEE: 18       POP   A                  (0168)    pop  A
0AEF: 70 3F    AND   F,0x3F             
0AF1: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0AF3: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0AF4: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0AF7: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0AF9: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
0AFB: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_GAIN_CR3], EXGAIN                          ; Set High Gain bit.
0AFE: 18       POP   A                  (0177)    pop  A
0AFF: 70 3F    AND   F,0x3F             
0B01: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0B03: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_Stop:
                                        (0203) _PGA_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0B04: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0B07: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_EnableAGNDBuffer:
                                        (0233) _PGA_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_DisableAGNDBuffer:
                                        (0261) _PGA_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA.asm
FILE: lib\delsigint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DelSigINT.asm
                                        (0004) ;;   Version: 1.50, Updated on 2015/3/4 at 22:25:16
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler interrupt service routine for the Delta-Sigma ADC
                                        (0008) ;;               User Module based on the Type 2 Decimator. This code works for
                                        (0009) ;;               both the first and second-order modulator topologies where
                                        (0010) ;;               the decimation rate requires no extra shift of 8-bit data
                                        (0011) ;;               (or narrower) in software.
                                        (0012) ;;-----------------------------------------------------------------------------
                                        (0013) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0014) ;;*****************************************************************************
                                        (0015) ;;*****************************************************************************
                                        (0016) 
                                        (0017) include "m8c.inc"
                                        (0018) include "memory.inc"
                                        (0019) include "DelSig.inc"
                                        (0020) 
                                        (0021) 
                                        (0022) ;-----------------------------------------------
                                        (0023) ;  Global Symbols
                                        (0024) ;-----------------------------------------------
                                        (0025) 
                                        (0026) export _DelSig_ADConversion_ISR
                                        (0027) export _DelSig_cResult
                                        (0028) export  DelSig_cResult
                                        (0029) export _DelSig_bfStatus
                                        (0030) export  DelSig_bfStatus
                                        (0031) 
                                        (0032) 
                                        (0033) ;-----------------------------------------------
                                        (0034) ; Variable Allocation
                                        (0035) ;-----------------------------------------------
                                        (0036) AREA InterruptRAM (RAM, REL, CON)
                                        (0037) 
                                        (0038) _DelSig_cResult:
                                        (0039)  DelSig_cResult:                   blk 1             ;ADC output value
                                        (0040) _DelSig_bfStatus:
                                        (0041)  DelSig_bfStatus:                  blk 1             ;Data Valid Flag
                                        (0042) 
                                        (0043) 
                                        (0044) ;-----------------------------------------------
                                        (0045) ;  Private Symbols
                                        (0046) ;-----------------------------------------------
                                        (0047) MSB:                               equ 0
                                        (0048) LSB:                               equ 1
                                        (0049) RES:                               equ 8
                                        (0050) UMAX:                              equ (1<<RES) - 1  ; 2^RES - 1
                                        (0051) 
                                        (0052) 
                                        (0053) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0054) ;---------------------------------------------------
                                        (0055) ; Insert your custom declarations below this banner
                                        (0056) ;---------------------------------------------------
                                        (0057) 
                                        (0058) ;------------------------
                                        (0059) ; Includes
                                        (0060) ;------------------------
                                        (0061) 
                                        (0062) ;------------------------
                                        (0063) ; Exports
                                        (0064) ;------------------------
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Constant Definitions
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) ;------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;------------------------
                                        (0073) 
                                        (0074) ;---------------------------------------------------
                                        (0075) ; Insert your custom declarations above this banner
                                        (0076) ;---------------------------------------------------
                                        (0077) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0078) 
                                        (0079) 
                                        (0080) AREA UserModules (ROM, REL, CON)
                                        (0081) 
                                        (0082) ;;=============================================================================
                                        (0083) ;;  FUNCTION NAME: _DelSig_ADConversion_ISR:
                                        (0084) ;;=============================================================================
                                        (0085) ;;
                                        (0086) _DelSig_ADConversion_ISR:
0B08: 08       PUSH  A                  (0087)    push  A
0B09: 5D E4    MOV   A,REG[0xE4]        (0088)    mov   A, reg[DEC_DH]               ; Is value == 2^RES?
0B0B: A0 07    JZ    0x0B13             (0089)    jz    .NoOverflow                  ;    No, data is in normal range
0B0D: 5D E5    MOV   A,REG[0xE5]        (0090)    mov   A, reg[DEC_DL]
0B0F: 50 FF    MOV   A,0xFF             (0091)    mov   A, UMAX                      ;   Yes, limit to 2^RES - 1
0B11: 80 03    JMP   0x0B15             (0092)    jmp   .ConversionReady
                                        (0093) 
                                        (0094) .NoOverflow:
0B13: 5D E5    MOV   A,REG[0xE5]        (0095)    mov   A, reg[DEC_DL]
                                        (0096) 
                                        (0097) .ConversionReady:
                                        (0098) IF DelSig_2S_COMPLEMENT
                                        (0099)    ; Internal hardware format is unsigned; convert so zero is half scale
0B15: 11 80    SUB   A,0x80             (0100)    sub   A, (UMAX+1)>>1
                                        (0101) ENDIF
0B17: 53 00    MOV   [rubout],A         (0102)    mov [DelSig_cResult],  A
0B19: 55 01 10 MOV   [rubout+1],0x10    (0103)    mov [DelSig_bfStatus], DelSig_DATA_READY_BIT                ; Set valid data flag
                                        (0104) 
                                        (0105) 
                                        (0106)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0107)    ;---------------------------------------------------
                                        (0108)    ; Insert your custom code below this banner
                                        (0109)    ;---------------------------------------------------
                                        (0110) 
                                        (0111) 
                                        (0112)    ;---------------------------------------------------
                                        (0113)    ; Insert your custom code above this banner
                                        (0114)    ;---------------------------------------------------
                                        (0115)    ;@PSoC_UserCode_END@ (Do not change this line.)
0B1C: 18       POP   A                  (0116)    pop   A
0B1D: 7E       RETI                     (0117)    reti
                                        (0118) 
                                        (0119) ; end of file DelSigINT.asm
FILE: lib\delsigclockint.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DelSigClockINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:23:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "DelSigClock.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _DelSigClock_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _DelSigClock_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _DelSigClock_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0B1E: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file DelSigClockINT.asm
FILE: lib\delsigclock.asm               (0001) ;;*****************************************************************************
0B1F: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DelSigClock.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:23:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "DelSigClock.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  DelSigClock_EnableInt
                                        (0030) export _DelSigClock_EnableInt
                                        (0031) export  DelSigClock_DisableInt
                                        (0032) export _DelSigClock_DisableInt
                                        (0033) export  DelSigClock_Start
                                        (0034) export _DelSigClock_Start
                                        (0035) export  DelSigClock_Stop
                                        (0036) export _DelSigClock_Stop
                                        (0037) export  DelSigClock_WritePeriod
                                        (0038) export _DelSigClock_WritePeriod
                                        (0039) export  DelSigClock_WriteCompareValue
                                        (0040) export _DelSigClock_WriteCompareValue
                                        (0041) export  DelSigClock_bReadCompareValue
                                        (0042) export _DelSigClock_bReadCompareValue
                                        (0043) export  DelSigClock_bReadCounter
                                        (0044) export _DelSigClock_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bDelSigClock_ReadCompareValue  ; deprecated
                                        (0049) export _bDelSigClock_ReadCompareValue  ; deprecated
                                        (0050) export  bDelSigClock_ReadCounter       ; deprecated
                                        (0051) export _bDelSigClock_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: DelSigClock_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  DelSigClock_EnableInt:
                                        (0082) _DelSigClock_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    DelSigClock_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0B22: 7F       RET                      (0086)    ret
0B23: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: DelSigClock_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  DelSigClock_DisableInt:
                                        (0109) _DelSigClock_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    DelSigClock_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0B26: 7F       RET                      (0113)    ret
0B27: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: DelSigClock_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  DelSigClock_Start:
                                        (0138) _DelSigClock_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    DelSigClock_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0B2A: 7F       RET                      (0142)    ret
0B2B: 41 2F FE AND   REG[0x2F],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: DelSigClock_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  DelSigClock_Stop:
                                        (0166) _DelSigClock_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    DelSigClock_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0B2E: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: DelSigClock_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count register (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  DelSigClock_WritePeriod:
                                        (0196) _DelSigClock_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0B2F: 60 2D    MOV   REG[0x2D],A        (0198)    mov   reg[DelSigClock_PERIOD_REG], A
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
0B31: 7F       RET                      (0200)    ret
                                        (0201) 
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) 
                                        (0205) .SECTION
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;  FUNCTION NAME: DelSigClock_WriteCompareValue
                                        (0208) ;
                                        (0209) ;  DESCRIPTION:
                                        (0210) ;     Writes compare value into the Compare register (DR2).
                                        (0211) ;-----------------------------------------------------------------------------
                                        (0212) ;
                                        (0213) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0214) ;  RETURNS:      Nothing
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222)  DelSigClock_WriteCompareValue:
                                        (0223) _DelSigClock_WriteCompareValue:
                                        (0224)    RAM_PROLOGUE RAM_USE_CLASS_1
0B32: 60 2E    MOV   REG[0x2E],A        (0225)    mov   reg[DelSigClock_COMPARE_REG], A
                                        (0226)    RAM_EPILOGUE RAM_USE_CLASS_1
0B34: 7F       RET                      (0227)    ret
                                        (0228) 
                                        (0229) 
                                        (0230) .ENDSECTION
                                        (0231) 
                                        (0232) .SECTION
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;  FUNCTION NAME: DelSigClock_bReadCompareValue
                                        (0235) ;
                                        (0236) ;  DESCRIPTION:
                                        (0237) ;     Reads the Compare register.
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;
                                        (0240) ;  ARGUMENTS:    None
                                        (0241) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0242) ;  SIDE EFFECTS: 
                                        (0243) ;    The A and X registers may be modified by this or future implementations
                                        (0244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0247) ;    functions.
                                        (0248) ;
                                        (0249)  DelSigClock_bReadCompareValue:
                                        (0250) _DelSigClock_bReadCompareValue:
                                        (0251)  bDelSigClock_ReadCompareValue:                  ; this name deprecated
                                        (0252) _bDelSigClock_ReadCompareValue:                  ; this name deprecated
                                        (0253)    RAM_PROLOGUE RAM_USE_CLASS_1
0B35: 5D 2E    MOV   A,REG[0x2E]        (0254)    mov   A, reg[DelSigClock_COMPARE_REG]
                                        (0255)    RAM_EPILOGUE RAM_USE_CLASS_1
0B37: 7F       RET                      (0256)    ret
                                        (0257) 
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) .SECTION
                                        (0262) ;-----------------------------------------------------------------------------
                                        (0263) ;  FUNCTION NAME: DelSigClock_bReadCounter
                                        (0264) ;
                                        (0265) ;  DESCRIPTION:
                                        (0266) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0267) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0268) ;     from the Count to the Compare registers by holding the clock low in
                                        (0269) ;     the PSoC block.
                                        (0270) ;-----------------------------------------------------------------------------
                                        (0271) ;
                                        (0272) ;  ARGUMENTS: None
                                        (0273) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0274) ;  SIDE EFFECTS:
                                        (0275) ;     1) If running, the user module is stopped momentarily and one or more
                                        (0276) ;        counts may be missed.
                                        (0277) ;     2) The A and X registers may be modified by this or future implementations
                                        (0278) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0279) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0280) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0281) ;        functions.
                                        (0282) ;
                                        (0283)  DelSigClock_bReadCounter:
                                        (0284) _DelSigClock_bReadCounter:
                                        (0285)  bDelSigClock_ReadCounter:                       ; this name deprecated
                                        (0286) _bDelSigClock_ReadCounter:                       ; this name deprecated
                                        (0287) 
                                        (0288)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0289)    bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
                                        (0290)    bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
                                        (0291)    wCounter:               EQU   3               ; Frame offset to temp Count   store
                                        (0292)    STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
                                        (0293) 
                                        (0294)    RAM_PROLOGUE RAM_USE_CLASS_2
0B38: 4F       MOV   X,SP               (0295)    mov   X, SP                                   ; X <- stack frame pointer
0B39: 5D 2E    MOV   A,REG[0x2E]        (0296)    mov   A, reg[DelSigClock_COMPARE_REG]         ; Save the Compare register on the stack
0B3B: 08       PUSH  A                  (0297)    push  A                                       ;
0B3C: 5D 2F    MOV   A,REG[0x2F]        (0298)    mov   A, reg[DelSigClock_CONTROL_REG]         ; Save CR0 (running or stopped state)
0B3E: 08       PUSH  A                  (0299)    push  A                                       ;
0B3F: 41 2F FE AND   REG[0x2F],0xFE     
0B42: 71 10    OR    F,0x10             
                                        (0300)    DelSigClock_Stop_M                            ; Disable (stop) the Counter if running
                                        (0301)    M8C_SetBank1                                  ;
0B44: 5D 2D    MOV   A,REG[0x2D]        (0302)    mov   A, reg[DelSigClock_INPUT_REG]           ; save the clock input setting
0B46: 08       PUSH  A                  (0303)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0304)                                                  ;   hold the clock low:
0B47: 62 2D 00 MOV   REG[0x2D],0x0      (0305)    mov   reg[DelSigClock_INPUT_REG], INPUT_REG_NULL
0B4A: 70 EF    AND   F,0xEF             
                                        (0306)    M8C_SetBank0
                                        (0307)                                                  ; Extract the Count via DR2 register
0B4C: 5D 2C    MOV   A,REG[0x2C]        (0308)    mov   A, reg[DelSigClock_COUNTER_REG]         ; DR2 <- DR0
0B4E: 5D 2E    MOV   A,REG[0x2E]        (0309)    mov   A, reg[DelSigClock_COMPARE_REG]         ; Stash the Count on the stack
0B50: 08       PUSH  A                  (0310)    push  A                                       ;  -stack frame is now 3 bytes
0B51: 52 00    MOV   A,[X+0]            (0311)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0B53: 60 2E    MOV   REG[0x2E],A        (0312)    mov   reg[DelSigClock_COMPARE_REG], A
0B55: 71 10    OR    F,0x10             
                                        (0313)    M8C_SetBank1                                  ; Restore the counter operation:
0B57: 52 02    MOV   A,[X+2]            (0314)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0B59: 60 2D    MOV   REG[0x2D],A        (0315)    mov   reg[DelSigClock_INPUT_REG], A           ;
0B5B: 70 EF    AND   F,0xEF             
                                        (0316)    M8C_SetBank0                                  ;   then re-enable (start) the counter
0B5D: 52 01    MOV   A,[X+1]            (0317)    mov   A, [X+bOrigControlReg]                  ;     if it was running when
0B5F: 60 2F    MOV   REG[0x2F],A        (0318)    mov   reg[DelSigClock_CONTROL_REG], A         ;     this function was first called
0B61: 18       POP   A                  (0319)    pop   A                                       ; Setup the return value
0B62: 38 FD    ADD   SP,0xFD            (0320)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0B64: 70 3F    AND   F,0x3F             
0B66: 71 C0    OR    F,0xC0             
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_2
0B68: 7F       RET                      (0322)    ret
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) ; End of File DelSigClock.asm
FILE: lib\delsig.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DelSig.asm
                                        (0004) ;;   Version: 1.50, Updated on 2015/3/4 at 22:25:16
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the Delta-Sigma A/D Converter User
                                        (0008) ;;               Module with 2nd-order modulator based on the Type 2 Decimator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        functions returns. For Large Memory Model devices it is also the
                                        (0015) ;;        caller's responsibility to perserve any value in the CUR_PP, IDX_PP,
                                        (0016) ;;        MVR_PP and MVW_PP registers. Even though some of these registers may
                                        (0017) ;;        not be modified now, there is no guarantee that will remain the case
                                        (0018) ;;        in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) include "m8c.inc"
                                        (0025) include "memory.inc"
                                        (0026) include "DelSig.inc"
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) export  DelSig_Start
                                        (0033) export _DelSig_Start
                                        (0034) export  DelSig_SetPower
                                        (0035) export _DelSig_SetPower
                                        (0036) export  DelSig_Stop
                                        (0037) export _DelSig_Stop
                                        (0038) export  DelSig_StartAD
                                        (0039) export _DelSig_StartAD
                                        (0040) export  DelSig_StopAD
                                        (0041) export _DelSig_StopAD
                                        (0042) export  DelSig_fIsDataAvailable
                                        (0043) export _DelSig_fIsDataAvailable
                                        (0044) export  DelSig_cGetDataClearFlag
                                        (0045) export _DelSig_cGetDataClearFlag
                                        (0046) export  DelSig_bGetDataClearFlag
                                        (0047) export _DelSig_bGetDataClearFlag
                                        (0048) export  DelSig_cGetData
                                        (0049) export _DelSig_cGetData
                                        (0050) export  DelSig_bGetData
                                        (0051) export _DelSig_bGetData
                                        (0052) export  DelSig_ClearFlag
                                        (0053) export _DelSig_ClearFlag
                                        (0054) export  DelSig_WritePulseWidth
                                        (0055) export _DelSig_WritePulseWidth
                                        (0056) 
                                        (0057) 
                                        (0058) ;-----------------------------------------------
                                        (0059) ;  Constant Definitions
                                        (0060) ;-----------------------------------------------
                                        (0061) 
                                        (0062) CONTROL_REG_ENABLE_BIT:                    equ  01h     ; Control register start bit
                                        (0063) POWERMASK:                                 equ  03h     ; Analog PSoC Block Power bits
                                        (0064) 
                                        (0065) 
                                        (0066) AREA UserModules (ROM, REL)
                                        (0067) 
                                        (0068) .SECTION
                                        (0069) ;-----------------------------------------------------------------------------
                                        (0070) ;  FUNCTION NAME: DelSig_Start
                                        (0071) ;  FUNCTION NAME: DelSig_SetPower
                                        (0072) ;
                                        (0073) ;  DESCRIPTION: Applies power setting to the module's analog PSoc blocks.
                                        (0074) ;-----------------------------------------------------------------------------
                                        (0075) ;
                                        (0076) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0077) ;  RETURNS:      Nothing.
                                        (0078) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0079) ;                RAM use class 2: page pointer registers are not modified.
                                        (0080) ;
                                        (0081)  DelSig_Start:
                                        (0082) _DelSig_Start:
                                        (0083)  DelSig_SetPower:
                                        (0084) _DelSig_SetPower:
                                        (0085)    RAM_PROLOGUE RAM_USE_CLASS_2
0B69: 4F       MOV   X,SP               (0086)    mov  X, SP                                    ; Set up Stack frame
0B6A: 21 03    AND   A,0x3              (0087)    and  A, POWERMASK                             ; Ensure value is legal
0B6C: 08       PUSH  A                  (0088)    push A
0B6D: 5D 83    MOV   A,REG[0x83]        (0089)    mov  A, reg[DelSig_AtoD1cr3]                  ; First SC block:
0B6F: 21 FC    AND   A,0xFC             (0090)    and  A, ~POWERMASK                            ;   clear power bits to zero
0B71: 2B 00    OR    A,[X+0]            (0091)    or   A, [ X ]                                 ;   establish new value
0B73: 60 83    MOV   REG[0x83],A        (0092)    mov  reg[DelSig_AtoD1cr3], A                  ;   change the actual setting
0B75: 5D 93    MOV   A,REG[0x93]        (0093)    mov  A, reg[DelSig_AtoD2cr3]                  ; Second SC block: as previous
0B77: 21 FC    AND   A,0xFC             (0094)    and  A, ~POWERMASK
0B79: 2B 00    OR    A,[X+0]            (0095)    or   A, [ X ]
0B7B: 60 93    MOV   REG[0x93],A        (0096)    mov  reg[DelSig_AtoD2cr3], A
0B7D: 18       POP   A                  (0097)    pop  A
0B7E: 70 3F    AND   F,0x3F             
0B80: 71 C0    OR    F,0xC0             
                                        (0098)    RAM_EPILOGUE RAM_USE_CLASS_2
0B82: 7F       RET                      (0099)    ret
                                        (0100) .ENDSECTION
                                        (0101) 
                                        (0102) 
                                        (0103) .SECTION
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) ;  FUNCTION NAME: DelSig_Stop
                                        (0106) ;
                                        (0107) ;  DESCRIPTION:   Removes power from the module's analog PSoc blocks.
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;
                                        (0110) ;  ARGUMENTS:    None.
                                        (0111) ;  RETURNS:      Nothing.
                                        (0112) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0113) ;                RAM use class 1: page pointer registers are not modified.
                                        (0114) ;
                                        (0115)  DelSig_Stop:
                                        (0116) _DelSig_Stop:
                                        (0117)    RAM_PROLOGUE RAM_USE_CLASS_1
0B83: 41 83 FC AND   REG[0x83],0xFC     (0118)    and  reg[DelSig_AtoD1cr3], ~POWERMASK
0B86: 41 93 FC AND   REG[0x93],0xFC     (0119)    and  reg[DelSig_AtoD2cr3], ~POWERMASK
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_1
0B89: 7F       RET                      (0121)    ret
0B8A: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) .SECTION
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;  FUNCTION NAME: DelSig_StartAD
                                        (0128) ;
                                        (0129) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;
                                        (0132) ;  ARGUMENTS:    None.
                                        (0133) ;  RETURNS:      Nothing.
                                        (0134) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0135) ;                RAM use class 1: page pointer registers may be modified.
                                        (0136) ;
                                        (0137)  DelSig_StartAD:
                                        (0138) _DelSig_StartAD:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    M8C_EnableIntMask DelSig_INT_REG, DelSig_INT_MASK
0B8D: 62 23 01 MOV   REG[0x23],0x1      (0141)    mov  reg[DelSig_PWM_CR0], CONTROL_REG_ENABLE_BIT
                                        (0142)    RAM_EPILOGUE RAM_USE_CLASS_1
0B90: 7F       RET                      (0143)    ret
                                        (0144) .ENDSECTION
                                        (0145) 
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: DelSig_StopAD
                                        (0150) ;
                                        (0151) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The PWM stops
                                        (0152) ;               operating and it's interrupt is disabled. Analog power is
                                        (0153) ;               still supplied to the analog blocks, however.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None.
                                        (0157) ;  RETURNS:      Nothing.
                                        (0158) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0159) ;                RAM use class 1: page pointer registers are not modified.
                                        (0160) ;
                                        (0161)  DelSig_StopAD:
                                        (0162) _DelSig_StopAD:
                                        (0163)    RAM_PROLOGUE RAM_USE_CLASS_1
0B91: 62 23 00 MOV   REG[0x23],0x0      (0164)    mov  reg[DelSig_PWM_CR0], 00h                     ; Disable the PWM
0B94: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0165)    M8C_DisableIntMask DelSig_INT_REG, DelSig_INT_MASK   ; Disable its interrupt
                                        (0166)    RAM_EPILOGUE RAM_USE_CLASS_1
0B97: 7F       RET                      (0167)    ret
0B98: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) 
                                        (0171) .SECTION
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;  FUNCTION NAME: DelSig_fIsDataAvailable
                                        (0174) ;
                                        (0175) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  ARGUMENTS:    None.
                                        (0178) ;  RETURNS:      fastcall16 BOOL DataAvailable returned in the A register
                                        (0179) ;  SIDE EFFECTS:
                                        (0180) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0181) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER
                                        (0182) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE
                                        (0183) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER
                                        (0184) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0185) ;
                                        (0186) ;    Page Pointer Registers Modified:
                                        (0187) ;          CUR_PP
                                        (0188) ;
                                        (0189)  DelSig_fIsDataAvailable:
                                        (0190) _DelSig_fIsDataAvailable:
                                        (0191)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0192)    RAM_SETPAGE_CUR >DelSig_bfStatus
0B9B: 51 01    MOV   A,[rubout+1]       (0193)    mov  A, [DelSig_bfStatus]
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0B9D: 7F       RET                      (0195)    ret
0B9E: 62 D0 00 MOV   REG[0xD0],0x0      
0BA1: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0196) .ENDSECTION
                                        (0197) 
                                        (0198) 
                                        (0199) .SECTION
                                        (0200) ;-----------------------------------------------------------------------------
                                        (0201) ;  FUNCTION NAME:  DelSig_cGetDataClearFlag
                                        (0202) ;
                                        (0203) ;  DESCRIPTION:    Returns the data from the A/D.  Does not check if data is
                                        (0204) ;                  available. Also clears the DATA_READY flag.
                                        (0205) ;-----------------------------------------------------------------------------
                                        (0206) ;  ARGUMENTS:    None.
                                        (0207) ;  RETURNS:      fastcall16 INT iData (LSB in A, MSB in X)
                                        (0208) ;  SIDE EFFECTS:
                                        (0209) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0210) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER
                                        (0211) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE
                                        (0212) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER
                                        (0213) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0214) ;
                                        (0215) ;    Page Pointer Registers Modified:
                                        (0216) ;          CUR_PP
                                        (0217) ;
                                        (0218) ;    PWM interrupts are momentarily halted and restarted to
                                        (0219) ;    ensure data is not lost.
                                        (0220) ;
                                        (0221)  DelSig_cGetDataClearFlag:
                                        (0222) _DelSig_cGetDataClearFlag:
                                        (0223)  DelSig_bGetDataClearFlag:
                                        (0224) _DelSig_bGetDataClearFlag:
                                        (0225)    ; Note, data format is determined by the ISR.
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0227)    RAM_SETPAGE_CUR >DelSig_bfStatus
                                        (0228)    M8C_DisableIntMask DelSig_INT_REG, DelSig_INT_MASK
0BA4: 26 01 EF AND   [rubout+1],0xEF    (0229)    and  [DelSig_bfStatus], ~DelSig_DATA_READY_BIT
0BA7: 51 00    MOV   A,[rubout]         (0230)    mov  A, [DelSig_cResult]
0BA9: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0231)    M8C_EnableIntMask DelSig_INT_REG, DelSig_INT_MASK
                                        (0232)    RAM_EPILOGUE RAM_USE_CLASS_4
0BAC: 7F       RET                      (0233)    ret
0BAD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) 
                                        (0237) .SECTION
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;  FUNCTION NAME:  DelSig_cGetData:
                                        (0240) ;
                                        (0241) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0242) ;                   available.
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  ARGUMENTS:    None.
                                        (0245) ;  RETURNS:      fastcall16 INT iData (LSB in A, MSB in X)
                                        (0246) ;  SIDE EFFECTS:
                                        (0247) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0248) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER
                                        (0249) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE
                                        (0250) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER
                                        (0251) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0252) ;
                                        (0253) ;    Page Pointer Registers Modified:
                                        (0254) ;          CUR_PP
                                        (0255) ;
                                        (0256)  DelSig_cGetData:
                                        (0257) _DelSig_cGetData:
                                        (0258)  DelSig_bGetData:
                                        (0259) _DelSig_bGetData:
                                        (0260)    ; Note, data format is determined by the ISR.
                                        (0261)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0262)    RAM_SETPAGE_CUR >DelSig_cResult
0BB0: 51 00    MOV   A,[rubout]         (0263)    mov  A, [DelSig_cResult]
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_4
0BB2: 7F       RET                      (0265)    ret
0BB3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0266) .ENDSECTION
                                        (0267) 
                                        (0268) 
                                        (0269) .SECTION
                                        (0270) ;-----------------------------------------------------------------------------
                                        (0271) ;  FUNCTION NAME: DelSig_ClearFlag
                                        (0272) ;
                                        (0273) ;  DESCRIPTION: Clears the data ready flag.
                                        (0274) ;-----------------------------------------------------------------------------
                                        (0275) ;  ARGUMENTS:    None.
                                        (0276) ;  RETURNS:      Nothing.
                                        (0277) ;  SIDE EFFECTS:
                                        (0278) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0279) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER
                                        (0280) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE
                                        (0281) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER
                                        (0282) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0283) ;
                                        (0284) ;    Page Pointer Registers Modified:
                                        (0285) ;          CUR_PP
                                        (0286) ;
                                        (0287)  DelSig_ClearFlag:
                                        (0288) _DelSig_ClearFlag:
                                        (0289)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0290)    RAM_SETPAGE_CUR >DelSig_bfStatus
0BB6: 26 01 EF AND   [rubout+1],0xEF    (0291)    and  [DelSig_bfStatus], ~DelSig_DATA_READY_BIT
                                        (0292)    RAM_EPILOGUE RAM_USE_CLASS_4
0BB9: 7F       RET                      (0293)    ret
                                        (0294) .ENDSECTION
                                        (0295) 
                                        (0296) 
                                        (0297) .SECTION
                                        (0298) ;-----------------------------------------------------------------------------
                                        (0299) ;  FUNCTION NAME: DelSig_WritePulseWidth
                                        (0300) ;
                                        (0301) ;  DESCRIPTION:
                                        (0302) ;     Write the 8-bit compare value into the compare register (DR2).
                                        (0303) ;-----------------------------------------------------------------------------
                                        (0304) ;
                                        (0305) ;  ARGUMENTS:    fastcall16 BYTE bPulseWidth (passed in A)
                                        (0306) ;  RETURNS:      Nothing
                                        (0307) ;  SIDE EFFECTS:
                                        (0308) ;      REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0309) ;      RAM use class 1: page pointer registers are not modified.
                                        (0310) ;      This function can produce momentary glitches in the PWM output. This
                                        (0311) ;      effect can be avoided by calling DelSig_StopAD and
                                        (0312) ;      DelSig_StartAD before and after the call to this function.
                                        (0313) ;      As usual, the first two samples following such a start up action will
                                        (0314) ;      will contain invalid values.
                                        (0315) ;
                                        (0316)  DelSig_WritePulseWidth:
                                        (0317) _DelSig_WritePulseWidth:
                                        (0318)     RAM_PROLOGUE RAM_USE_CLASS_1
0BBA: 60 22    MOV   REG[0x22],A        (0319)     mov   reg[DelSig_PWM_DR2],A
                                        (0320)     RAM_EPILOGUE RAM_USE_CLASS_1
0BBC: 7F       RET                      (0321)     ret
                                        (0322) .ENDSECTION
                                        (0323) 
                                        (0324) 
                                        (0325) ; End of File DelSig.asm
FILE: lib\dacupdate.asm                 (0001) ;;*****************************************************************************
0BBD: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DACUpdate.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:23:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "DACUpdate.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  DACUpdate_EnableInt
                                        (0030) export _DACUpdate_EnableInt
                                        (0031) export  DACUpdate_DisableInt
                                        (0032) export _DACUpdate_DisableInt
                                        (0033) export  DACUpdate_Start
                                        (0034) export _DACUpdate_Start
                                        (0035) export  DACUpdate_Stop
                                        (0036) export _DACUpdate_Stop
                                        (0037) export  DACUpdate_WritePeriod
                                        (0038) export _DACUpdate_WritePeriod
                                        (0039) export  DACUpdate_WriteCompareValue
                                        (0040) export _DACUpdate_WriteCompareValue
                                        (0041) export  DACUpdate_bReadCompareValue
                                        (0042) export _DACUpdate_bReadCompareValue
                                        (0043) export  DACUpdate_bReadCounter
                                        (0044) export _DACUpdate_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bDACUpdate_ReadCompareValue  ; deprecated
                                        (0049) export _bDACUpdate_ReadCompareValue  ; deprecated
                                        (0050) export  bDACUpdate_ReadCounter       ; deprecated
                                        (0051) export _bDACUpdate_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: DACUpdate_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  DACUpdate_EnableInt:
                                        (0082) _DACUpdate_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    DACUpdate_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0BC0: 7F       RET                      (0086)    ret
0BC1: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: DACUpdate_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  DACUpdate_DisableInt:
                                        (0109) _DACUpdate_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    DACUpdate_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0BC4: 7F       RET                      (0113)    ret
0BC5: 43 27 01 OR    REG[0x27],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: DACUpdate_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  DACUpdate_Start:
                                        (0138) _DACUpdate_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    DACUpdate_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0BC8: 7F       RET                      (0142)    ret
0BC9: 41 27 FE AND   REG[0x27],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: DACUpdate_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  DACUpdate_Stop:
                                        (0166) _DACUpdate_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    DACUpdate_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0BCC: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: DACUpdate_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count register (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  DACUpdate_WritePeriod:
                                        (0196) _DACUpdate_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0BCD: 60 25    MOV   REG[0x25],A        (0198)    mov   reg[DACUpdate_PERIOD_REG], A
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
0BCF: 7F       RET                      (0200)    ret
                                        (0201) 
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) 
                                        (0205) .SECTION
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;  FUNCTION NAME: DACUpdate_WriteCompareValue
                                        (0208) ;
                                        (0209) ;  DESCRIPTION:
                                        (0210) ;     Writes compare value into the Compare register (DR2).
                                        (0211) ;-----------------------------------------------------------------------------
                                        (0212) ;
                                        (0213) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0214) ;  RETURNS:      Nothing
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222)  DACUpdate_WriteCompareValue:
                                        (0223) _DACUpdate_WriteCompareValue:
                                        (0224)    RAM_PROLOGUE RAM_USE_CLASS_1
0BD0: 60 26    MOV   REG[0x26],A        (0225)    mov   reg[DACUpdate_COMPARE_REG], A
                                        (0226)    RAM_EPILOGUE RAM_USE_CLASS_1
0BD2: 7F       RET                      (0227)    ret
                                        (0228) 
                                        (0229) 
                                        (0230) .ENDSECTION
                                        (0231) 
                                        (0232) .SECTION
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;  FUNCTION NAME: DACUpdate_bReadCompareValue
                                        (0235) ;
                                        (0236) ;  DESCRIPTION:
                                        (0237) ;     Reads the Compare register.
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;
                                        (0240) ;  ARGUMENTS:    None
                                        (0241) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0242) ;  SIDE EFFECTS: 
                                        (0243) ;    The A and X registers may be modified by this or future implementations
                                        (0244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0247) ;    functions.
                                        (0248) ;
                                        (0249)  DACUpdate_bReadCompareValue:
                                        (0250) _DACUpdate_bReadCompareValue:
                                        (0251)  bDACUpdate_ReadCompareValue:                    ; this name deprecated
                                        (0252) _bDACUpdate_ReadCompareValue:                    ; this name deprecated
                                        (0253)    RAM_PROLOGUE RAM_USE_CLASS_1
0BD3: 5D 26    MOV   A,REG[0x26]        (0254)    mov   A, reg[DACUpdate_COMPARE_REG]
                                        (0255)    RAM_EPILOGUE RAM_USE_CLASS_1
0BD5: 7F       RET                      (0256)    ret
                                        (0257) 
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) .SECTION
                                        (0262) ;-----------------------------------------------------------------------------
                                        (0263) ;  FUNCTION NAME: DACUpdate_bReadCounter
                                        (0264) ;
                                        (0265) ;  DESCRIPTION:
                                        (0266) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0267) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0268) ;     from the Count to the Compare registers by holding the clock low in
                                        (0269) ;     the PSoC block.
                                        (0270) ;-----------------------------------------------------------------------------
                                        (0271) ;
                                        (0272) ;  ARGUMENTS: None
                                        (0273) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0274) ;  SIDE EFFECTS:
                                        (0275) ;     1) If running, the user module is stopped momentarily and one or more
                                        (0276) ;        counts may be missed.
                                        (0277) ;     2) The A and X registers may be modified by this or future implementations
                                        (0278) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0279) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0280) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0281) ;        functions.
                                        (0282) ;
                                        (0283)  DACUpdate_bReadCounter:
                                        (0284) _DACUpdate_bReadCounter:
                                        (0285)  bDACUpdate_ReadCounter:                         ; this name deprecated
                                        (0286) _bDACUpdate_ReadCounter:                         ; this name deprecated
                                        (0287) 
                                        (0288)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0289)    bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
                                        (0290)    bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
                                        (0291)    wCounter:               EQU   3               ; Frame offset to temp Count   store
                                        (0292)    STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
                                        (0293) 
                                        (0294)    RAM_PROLOGUE RAM_USE_CLASS_2
0BD6: 4F       MOV   X,SP               (0295)    mov   X, SP                                   ; X <- stack frame pointer
0BD7: 5D 26    MOV   A,REG[0x26]        (0296)    mov   A, reg[DACUpdate_COMPARE_REG]           ; Save the Compare register on the stack
0BD9: 08       PUSH  A                  (0297)    push  A                                       ;
0BDA: 5D 27    MOV   A,REG[0x27]        (0298)    mov   A, reg[DACUpdate_CONTROL_REG]           ; Save CR0 (running or stopped state)
0BDC: 08       PUSH  A                  (0299)    push  A                                       ;
0BDD: 41 27 FE AND   REG[0x27],0xFE     
0BE0: 71 10    OR    F,0x10             
                                        (0300)    DACUpdate_Stop_M                              ; Disable (stop) the Counter if running
                                        (0301)    M8C_SetBank1                                  ;
0BE2: 5D 25    MOV   A,REG[0x25]        (0302)    mov   A, reg[DACUpdate_INPUT_REG]             ; save the clock input setting
0BE4: 08       PUSH  A                  (0303)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0304)                                                  ;   hold the clock low:
0BE5: 62 25 00 MOV   REG[0x25],0x0      (0305)    mov   reg[DACUpdate_INPUT_REG], INPUT_REG_NULL
0BE8: 70 EF    AND   F,0xEF             
                                        (0306)    M8C_SetBank0
                                        (0307)                                                  ; Extract the Count via DR2 register
0BEA: 5D 24    MOV   A,REG[0x24]        (0308)    mov   A, reg[DACUpdate_COUNTER_REG]           ; DR2 <- DR0
0BEC: 5D 26    MOV   A,REG[0x26]        (0309)    mov   A, reg[DACUpdate_COMPARE_REG]           ; Stash the Count on the stack
0BEE: 08       PUSH  A                  (0310)    push  A                                       ;  -stack frame is now 3 bytes
0BEF: 52 00    MOV   A,[X+0]            (0311)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0BF1: 60 26    MOV   REG[0x26],A        (0312)    mov   reg[DACUpdate_COMPARE_REG], A
0BF3: 71 10    OR    F,0x10             
                                        (0313)    M8C_SetBank1                                  ; Restore the counter operation:
0BF5: 52 02    MOV   A,[X+2]            (0314)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0BF7: 60 25    MOV   REG[0x25],A        (0315)    mov   reg[DACUpdate_INPUT_REG], A             ;
0BF9: 70 EF    AND   F,0xEF             
                                        (0316)    M8C_SetBank0                                  ;   then re-enable (start) the counter
0BFB: 52 01    MOV   A,[X+1]            (0317)    mov   A, [X+bOrigControlReg]                  ;     if it was running when
0BFD: 60 27    MOV   REG[0x27],A        (0318)    mov   reg[DACUpdate_CONTROL_REG], A           ;     this function was first called
0BFF: 18       POP   A                  (0319)    pop   A                                       ; Setup the return value
0C00: 38 FD    ADD   SP,0xFD            (0320)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0C02: 70 3F    AND   F,0x3F             
0C04: 71 C0    OR    F,0xC0             
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_2
0C06: 7F       RET                      (0322)    ret
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) ; End of File DACUpdate.asm
FILE: lib\dac8b.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DAC8B.asm
                                        (0004) ;;   Version: 2.2, Updated on 2015/3/4 at 22:25:12
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DAC8 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "DAC8B.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  DAC8B_Start
                                        (0030) export _DAC8B_Start
                                        (0031) export  DAC8B_SetPower
                                        (0032) export _DAC8B_SetPower
                                        (0033) 
                                        (0034) export  DAC8B_WriteBlind
                                        (0035) export _DAC8B_WriteBlind
                                        (0036) export  DAC8B_WriteBlind2B
                                        (0037) export _DAC8B_WriteBlind2B
                                        (0038) 
                                        (0039) export  DAC8B_WriteStall
                                        (0040) export _DAC8B_WriteStall
                                        (0041) export  DAC8B_WriteStall2B
                                        (0042) export _DAC8B_WriteStall2B
                                        (0043) 
                                        (0044) export  DAC8B_Stop
                                        (0045) export _DAC8B_Stop
                                        (0046) 
                                        (0047) ;-----------------------------------------------
                                        (0048) ;  EQUATES
                                        (0049) ;-----------------------------------------------
                                        (0050) 
                                        (0051) cOFFSET:   equ 127              ; Conversion term for offset binary to 2's C
                                        (0052) bPWRMASK:  equ 03h              ; Power bitfield in Switched Cap CR3 reg
                                        (0053) bSPLITMASK:equ 03h              ; Marks split between MSB and LSB bits
                                        (0054) bSMMASK:   equ 3Fh              ; Sign and Magnitude bits mask
                                        (0055) bSIGNMASK: equ 20h              ; Sign bit mask
                                        (0056) 
                                        (0057)     AREA UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: DAC8B_Start
                                        (0062) ;  FUNCTION NAME: DAC8B_SetPower
                                        (0063) ;
                                        (0064) ;  DESCRIPTION:
                                        (0065) ;    Applies power setting to the module's analog PSoC blocks.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:
                                        (0070) ;    A contains the power setting 0=Off, 1=Low, 2=Med, 3=High.
                                        (0071) ;
                                        (0072) ;  RETURNS: none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  DAC8B_Start:
                                        (0082) _DAC8B_Start:
                                        (0083)  DAC8B_SetPower:
                                        (0084) _DAC8B_SetPower:
                                        (0085)     RAM_PROLOGUE RAM_USE_CLASS_2
0C07: 21 03    AND   A,0x3              (0086)     and   A, bPWRMASK       ; trim input to bits of interest
0C09: 4F       MOV   X,SP               (0087)     mov   X, SP             ; Set stack frame pointer
0C0A: 08       PUSH  A                  (0088)     push  A
                                        (0089)     ;; read CR3 registers, modify power bits & write back
0C0B: 5D 8B    MOV   A,REG[0x8B]        (0090)     mov   A, reg[DAC8B_MSB_CR3]
0C0D: 21 FC    AND   A,0xFC             (0091)     and   a, ~bPWRMASK      ; clear old setting
0C0F: 2B 00    OR    A,[X+0]            (0092)     or    A, [X]            ; set power in MSB register image
0C11: 60 8B    MOV   REG[0x8B],A        (0093)     mov   reg[DAC8B_MSB_CR3], A
0C13: 5D 9B    MOV   A,REG[0x9B]        (0094)     mov   A, reg[DAC8B_LSB_CR3]
0C15: 21 FC    AND   A,0xFC             (0095)     and   a, ~bPWRMASK      ; clear old setting
0C17: 2B 00    OR    A,[X+0]            (0096)     or    A, [X]            ; set power in LSB register image
0C19: 60 9B    MOV   REG[0x9B],A        (0097)     mov   reg[DAC8B_LSB_CR3], A
0C1B: 18       POP   A                  (0098)     pop   A
0C1C: 70 3F    AND   F,0x3F             
0C1E: 71 C0    OR    F,0xC0             
                                        (0099)     RAM_EPILOGUE RAM_USE_CLASS_2
0C20: 7F       RET                      (0100)     ret
                                        (0101) .ENDSECTION
                                        (0102) 
                                        (0103) .SECTION
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) ;  FUNCTION NAME: DAC8B_WriteBlind
                                        (0106) ;  FUNCTION NAME: DAC8B_WriteBlind2B
                                        (0107) ;
                                        (0108) ;  DESCRIPTION:
                                        (0109) ;    Modify the DAC's update value without worrying about the clocks
                                        (0110) ;    Lowest overhead, but may cause glitches on the output.
                                        (0111) ;
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;
                                        (0114) ;  ARGUMENTS:
                                        (0115) ;    A contains the update value if data format is offset binary or
                                        (0116) ;    2's complement. If format is 2-byte sign-and-magnitude, the LSB is in
                                        (0117) ;    A (as 00smmmmm) and the MSB is in X (as 00xmm000, where x=s\, the
                                        (0118) ;    inverted sign.
                                        (0119) ;
                                        (0120) ;  RETURNS: none
                                        (0121) ;
                                        (0122) ;  SIDE EFFECTS:
                                        (0123) ;    The A and X registers may be modified by this or future implementations
                                        (0124) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0125) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0126) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0127) ;    functions.
                                        (0128) ;
                                        (0129)  DAC8B_WriteBlind:
                                        (0130) _DAC8B_WriteBlind:
                                        (0131)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0132)   IF DAC8B_OFFSETBINARY
                                        (0133)     ;; Data is an unsigned byte value in [0..254] (i.e., 255 unique values).
                                        (0134)     ;; Following converts it to 2's complement:
                                        (0135)     sub   A, cOFFSET            ; Convert to 2's Complement
                                        (0136)   ENDIF
                                        (0137)   IF DAC8B_OFFSETBINARY | DAC8B_TWOSCOMPLEMENT
0C21: 4F       MOV   X,SP               (0138)     mov   X, SP
0C22: 08       PUSH  A                  (0139)     push  A                     ; Preserve the sign
0C23: 39 80    CMP   A,0x80             (0140)     cmp   A, 80h                ; negative (or zero)?
0C25: C0 05    JC    0x0C2B             (0141)     jc    BlindAdjustCycles     ;   no: just go on
0C27: 73       CPL   A                  (0142)     cpl   A                     ;  yes: take the 2's Complement
0C28: 74       INC   A                  (0143)     inc   A
0C29: 80 05    JMP   0x0C2F             (0144)     jmp   BlindMagSet
                                        (0145) BlindAdjustCycles:
0C2B: 73       CPL   A                  (0146)     cpl   A                     ; these 3 instructions implement a 13-cycle
0C2C: 73       CPL   A                  (0147)     cpl   A                     ;   NOP so it takes the same amount of time
0C2D: 80 01    JMP   0x0C2F             (0148)     jmp   BlindMagSet           ;   for both positive and negative numbers.
                                        (0149) BlindMagSet:
0C2F: 08       PUSH  A                  (0150)     push  A                     ; preserve LSB magnitude bits
0C30: 27 01 03 AND   [X+1],0x3          (0151)     and   [X+1], bSPLITMASK
0C33: 27 00 80 AND   [X+0],0x80         (0152)     and   [X], 80h              ; isolate the sign
0C36: 2B 00    OR    A,[X+0]            (0153)     or    A, [X]                ; insert in MSB
0C38: 67       ASR   A                  (0154)     asr   A                     ; justify MSB sign & mag
0C39: 67       ASR   A                  (0155)     asr   A
0C3A: 21 3F    AND   A,0x3F             (0156)     and   A, bSMMASK            ; clear sign extension bits
                                        (0157)                                 ; Set FCap and ClockPhase bits for MSB
0C3C: 54 00    MOV   [X+0],A            (0158)     mov   [X], A                ; stash the MSB
0C3E: 21 20    AND   A,0x20             (0159)     and   A, bSIGNMASK          ; isolate the sign
0C40: 31 20    XOR   A,0x20             (0160)     xor   A, bSIGNMASK          ;   and invert for LSB
0C42: 66 01    ASL   [X+1]              (0161)     asl   [X+1]                 ; justify LSB magnitude
0C44: 66 01    ASL   [X+1]              (0162)     asl   [X+1]
0C46: 66 01    ASL   [X+1]              (0163)     asl   [X+1]
0C48: 2B 01    OR    A,[X+1]            (0164)     or    A, [X+1]              ; combine LSB magnitude with sign
                                        (0165)                                 ; Set FCap and ClockPhase bits for LSB
0C4A: 20       POP   X                  (0166)     pop   X                     ; Put MSB in X
0C4B: 20       POP   X                  (0167)     pop   X
                                        (0168)   ENDIF
0C4C: 29 80    OR    A,0x80             (0169)     or    A, DAC8B_CR0_HIBITS
0C4E: 4B       SWAP  A,X                (0170)     swap  A, X
0C4F: 29 80    OR    A,0x80             (0171)     or    A, DAC8B_CR0_HIBITS
0C51: 60 88    MOV   REG[0x88],A        (0172)     mov   reg[DAC8B_MSB_CR0], A
0C53: 5B       MOV   A,X                (0173)     mov   A, X
0C54: 60 98    MOV   REG[0x98],A        (0174)     mov   reg[DAC8B_LSB_CR0], A
0C56: 70 3F    AND   F,0x3F             
0C58: 71 C0    OR    F,0xC0             
                                        (0175)     RAM_EPILOGUE RAM_USE_CLASS_2
0C5A: 7F       RET                      (0176)     ret
                                        (0177) 
                                        (0178) 
                                        (0179)  DAC8B_WriteBlind2B:
                                        (0180) _DAC8B_WriteBlind2B:
                                        (0181)     RAM_PROLOGUE RAM_USE_CLASS_1
0C5B: 29 80    OR    A,0x80             (0182)     or    A, DAC8B_CR0_HIBITS
0C5D: 4B       SWAP  A,X                (0183)     swap  A, X
0C5E: 29 80    OR    A,0x80             (0184)     or    A, DAC8B_CR0_HIBITS
0C60: 60 88    MOV   REG[0x88],A        (0185)     mov   reg[DAC8B_MSB_CR0], A
0C62: 5B       MOV   A,X                (0186)     mov   A, X
0C63: 60 98    MOV   REG[0x98],A        (0187)     mov   reg[DAC8B_LSB_CR0], A
                                        (0188)     RAM_EPILOGUE RAM_USE_CLASS_1
0C65: 7F       RET                      (0189)     ret
                                        (0190) .ENDSECTION
                                        (0191) 
                                        (0192) .SECTION
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;  FUNCTION NAME: DAC8B_WriteStall
                                        (0195) ;  FUNCTION NAME: DAC8B_WriteStall2B
                                        (0196) ;
                                        (0197) ;  DESCRIPTION:
                                        (0198) ;    Modify the DAC's update value, stalling the CPU if necessary.
                                        (0199) ;    This routine should be used with faster analog clocks or when the
                                        (0200) ;    effect of prolonging interrupt latencies can be safely tolerated.
                                        (0201) ;
                                        (0202) ;-----------------------------------------------------------------------------
                                        (0203) ;
                                        (0204) ;  ARGUMENTS:
                                        (0205) ;   A contains the update value if data format is offset binary or
                                        (0206) ;   2's complement. If format is 2-byte sign-and-magnitude, the LSB is in
                                        (0207) ;   A (as 00smmmmm) and the MSB is in X (as 00xmm000, where x=s\, the
                                        (0208) ;   inverted sign.
                                        (0209) ;
                                        (0210) ;  RETURNS: none
                                        (0211) ;
                                        (0212) ;  SIDE EFFECTS:
                                        (0213) ;
                                        (0214) ;  THEORY of OPERATION or PROCEDURE:
                                        (0215) ;    The A and X registers may be modified by this or future implementations
                                        (0216) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0217) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0218) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0219) ;    functions.
                                        (0220) ;
                                        (0221)  DAC8B_WriteStall:
                                        (0222) _DAC8B_WriteStall:
                                        (0223)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0224)   IF DAC8B_OFFSETBINARY
                                        (0225)     ;; Data is an unsigned byte value in [0..254] (i.e., 255 unique values).
                                        (0226)     ;; Following converts it to 2's complement:
                                        (0227)     sub   A, cOFFSET            ; Convert to 2's Complement
                                        (0228)   ENDIF
                                        (0229)   IF DAC8B_OFFSETBINARY | DAC8B_TWOSCOMPLEMENT
0C66: 4F       MOV   X,SP               (0230)     mov   X, SP
0C67: 08       PUSH  A                  (0231)     push  A                     ; Preserve the sign
0C68: 39 80    CMP   A,0x80             (0232)     cmp   A, 80h                ; negative (or zero)?
0C6A: C0 05    JC    0x0C70             (0233)     jc    StallAdjustCycles     ;   no: just go on
0C6C: 73       CPL   A                  (0234)     cpl   A                     ;  yes: take the 2's Complement
0C6D: 74       INC   A                  (0235)     inc   A
0C6E: 80 05    JMP   0x0C74             (0236)     jmp   StallMagSet
                                        (0237) StallAdjustCycles:
0C70: 73       CPL   A                  (0238)     cpl   A                     ; these 3 instructions implement a 13-cycle
0C71: 73       CPL   A                  (0239)     cpl   A                     ;   NOP so it takes the same amount of time
0C72: 80 01    JMP   0x0C74             (0240)     jmp   StallMagSet           ;   for both positive and negative numbers.
                                        (0241) StallMagSet:
0C74: 08       PUSH  A                  (0242)     push  A                     ; preserve LSB magnitude bits
0C75: 27 01 03 AND   [X+1],0x3          (0243)     and   [X+1], bSPLITMASK
0C78: 27 00 80 AND   [X+0],0x80         (0244)     and   [X], 80h              ; isolate the sign
0C7B: 2B 00    OR    A,[X+0]            (0245)     or    A, [X]                ; insert in MSB
0C7D: 67       ASR   A                  (0246)     asr   A                     ; justify MSB sign & mag
0C7E: 67       ASR   A                  (0247)     asr   A
0C7F: 21 3F    AND   A,0x3F             (0248)     and   A, bSMMASK            ; clear sign extension bits
                                        (0249)                                 ; Set FCap and ClockPhase bits for MSB
0C81: 54 00    MOV   [X+0],A            (0250)     mov   [X], A                ; stash the MSB
0C83: 21 20    AND   A,0x20             (0251)     and   A, bSIGNMASK          ; isolate the sign
0C85: 31 20    XOR   A,0x20             (0252)     xor   A, bSIGNMASK          ;   and invert for LSB
0C87: 66 01    ASL   [X+1]              (0253)     asl   [X+1]                 ; justify LSB magnitude
0C89: 66 01    ASL   [X+1]              (0254)     asl   [X+1]
0C8B: 66 01    ASL   [X+1]              (0255)     asl   [X+1]
0C8D: 2B 01    OR    A,[X+1]            (0256)     or    A, [X+1]              ; combine LSB magnitude with sign
                                        (0257)                                 ; Set FCap and ClockPhase bits for LSB
0C8F: 20       POP   X                  (0258)     pop   X                     ; Put MSB in X
0C90: 20       POP   X                  (0259)     pop   X
                                        (0260)   ENDIF
0C91: 29 80    OR    A,0x80             (0261)     or    A, DAC8B_CR0_HIBITS
0C93: 4B       SWAP  A,X                (0262)     swap  A, X
0C94: 29 80    OR    A,0x80             (0263)     or    A, DAC8B_CR0_HIBITS
0C96: 43 65 01 OR    REG[0x65],0x1      
                                        (0264) 
                                        (0265)     M8C_Stall
0C99: 60 88    MOV   REG[0x88],A        (0266)     mov   reg[DAC8B_MSB_CR0], A
0C9B: 41 65 FE AND   REG[0x65],0xFE     
                                        (0267)     M8C_Unstall
0C9E: 5B       MOV   A,X                (0268)     mov   A, X
0C9F: 60 98    MOV   REG[0x98],A        (0269)     mov   reg[DAC8B_LSB_CR0], A
0CA1: 70 3F    AND   F,0x3F             
0CA3: 71 C0    OR    F,0xC0             
                                        (0270)     RAM_EPILOGUE RAM_USE_CLASS_2
0CA5: 7F       RET                      (0271)     ret
                                        (0272) 
                                        (0273)  DAC8B_WriteStall2B:
                                        (0274) _DAC8B_WriteStall2B:
                                        (0275)     RAM_PROLOGUE RAM_USE_CLASS_1
0CA6: 29 80    OR    A,0x80             (0276)     or    A, DAC8B_CR0_HIBITS
0CA8: 4B       SWAP  A,X                (0277)     swap  A, X
0CA9: 29 80    OR    A,0x80             (0278)     or    A, DAC8B_CR0_HIBITS
0CAB: 43 65 01 OR    REG[0x65],0x1      
                                        (0279) 
                                        (0280)     M8C_Stall
0CAE: 60 88    MOV   REG[0x88],A        (0281)     mov   reg[DAC8B_MSB_CR0], A
0CB0: 41 65 FE AND   REG[0x65],0xFE     
                                        (0282)     M8C_Unstall
0CB3: 5B       MOV   A,X                (0283)     mov   A, X
0CB4: 60 98    MOV   REG[0x98],A        (0284)     mov   reg[DAC8B_LSB_CR0], A
                                        (0285)     RAM_EPILOGUE RAM_USE_CLASS_1
0CB6: 7F       RET                      (0286)     ret
                                        (0287) .ENDSECTION
                                        (0288) 
                                        (0289) .SECTION
                                        (0290) ;-----------------------------------------------------------------------------
                                        (0291) ;  FUNCTION NAME: DAC8B_Stop
                                        (0292) ;
                                        (0293) ;  DESCRIPTION:
                                        (0294) ;    Cuts power to the user module.
                                        (0295) ;
                                        (0296) ;-----------------------------------------------------------------------------
                                        (0297) ;
                                        (0298) ;  ARGUMENTS: none
                                        (0299) ;
                                        (0300) ;  RETURNS: none
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;
                                        (0309)  DAC8B_Stop:
                                        (0310) _DAC8B_Stop:
                                        (0311)     RAM_PROLOGUE RAM_USE_CLASS_1
0CB7: 41 8B FC AND   REG[0x8B],0xFC     (0312)     and  reg[DAC8B_MSB_CR3], ~bPWRMASK
0CBA: 41 9B FC AND   REG[0x9B],0xFC     (0313)     and  reg[DAC8B_LSB_CR3], ~bPWRMASK
                                        (0314)     RAM_EPILOGUE RAM_USE_CLASS_1
0CBD: 7F       RET                      (0315)     ret
                                        (0316) .ENDSECTION
                                        (0317) ; End of File DAC8B.asm
FILE: lib\dac8a.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DAC8A.asm
                                        (0004) ;;   Version: 2.2, Updated on 2015/3/4 at 22:25:12
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DAC8 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "DAC8A.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  DAC8A_Start
                                        (0030) export _DAC8A_Start
                                        (0031) export  DAC8A_SetPower
                                        (0032) export _DAC8A_SetPower
                                        (0033) 
                                        (0034) export  DAC8A_WriteBlind
                                        (0035) export _DAC8A_WriteBlind
                                        (0036) export  DAC8A_WriteBlind2B
                                        (0037) export _DAC8A_WriteBlind2B
                                        (0038) 
                                        (0039) export  DAC8A_WriteStall
                                        (0040) export _DAC8A_WriteStall
                                        (0041) export  DAC8A_WriteStall2B
                                        (0042) export _DAC8A_WriteStall2B
                                        (0043) 
                                        (0044) export  DAC8A_Stop
                                        (0045) export _DAC8A_Stop
                                        (0046) 
                                        (0047) ;-----------------------------------------------
                                        (0048) ;  EQUATES
                                        (0049) ;-----------------------------------------------
                                        (0050) 
                                        (0051) cOFFSET:   equ 127              ; Conversion term for offset binary to 2's C
                                        (0052) bPWRMASK:  equ 03h              ; Power bitfield in Switched Cap CR3 reg
                                        (0053) bSPLITMASK:equ 03h              ; Marks split between MSB and LSB bits
                                        (0054) bSMMASK:   equ 3Fh              ; Sign and Magnitude bits mask
                                        (0055) bSIGNMASK: equ 20h              ; Sign bit mask
                                        (0056) 
                                        (0057)     AREA UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: DAC8A_Start
                                        (0062) ;  FUNCTION NAME: DAC8A_SetPower
                                        (0063) ;
                                        (0064) ;  DESCRIPTION:
                                        (0065) ;    Applies power setting to the module's analog PSoC blocks.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:
                                        (0070) ;    A contains the power setting 0=Off, 1=Low, 2=Med, 3=High.
                                        (0071) ;
                                        (0072) ;  RETURNS: none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  DAC8A_Start:
                                        (0082) _DAC8A_Start:
                                        (0083)  DAC8A_SetPower:
                                        (0084) _DAC8A_SetPower:
                                        (0085)     RAM_PROLOGUE RAM_USE_CLASS_2
0CBE: 21 03    AND   A,0x3              (0086)     and   A, bPWRMASK       ; trim input to bits of interest
0CC0: 4F       MOV   X,SP               (0087)     mov   X, SP             ; Set stack frame pointer
0CC1: 08       PUSH  A                  (0088)     push  A
                                        (0089)     ;; read CR3 registers, modify power bits & write back
0CC2: 5D 97    MOV   A,REG[0x97]        (0090)     mov   A, reg[DAC8A_MSB_CR3]
0CC4: 21 FC    AND   A,0xFC             (0091)     and   a, ~bPWRMASK      ; clear old setting
0CC6: 2B 00    OR    A,[X+0]            (0092)     or    A, [X]            ; set power in MSB register image
0CC8: 60 97    MOV   REG[0x97],A        (0093)     mov   reg[DAC8A_MSB_CR3], A
0CCA: 5D 87    MOV   A,REG[0x87]        (0094)     mov   A, reg[DAC8A_LSB_CR3]
0CCC: 21 FC    AND   A,0xFC             (0095)     and   a, ~bPWRMASK      ; clear old setting
0CCE: 2B 00    OR    A,[X+0]            (0096)     or    A, [X]            ; set power in LSB register image
0CD0: 60 87    MOV   REG[0x87],A        (0097)     mov   reg[DAC8A_LSB_CR3], A
0CD2: 18       POP   A                  (0098)     pop   A
0CD3: 70 3F    AND   F,0x3F             
0CD5: 71 C0    OR    F,0xC0             
                                        (0099)     RAM_EPILOGUE RAM_USE_CLASS_2
0CD7: 7F       RET                      (0100)     ret
                                        (0101) .ENDSECTION
                                        (0102) 
                                        (0103) .SECTION
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) ;  FUNCTION NAME: DAC8A_WriteBlind
                                        (0106) ;  FUNCTION NAME: DAC8A_WriteBlind2B
                                        (0107) ;
                                        (0108) ;  DESCRIPTION:
                                        (0109) ;    Modify the DAC's update value without worrying about the clocks
                                        (0110) ;    Lowest overhead, but may cause glitches on the output.
                                        (0111) ;
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;
                                        (0114) ;  ARGUMENTS:
                                        (0115) ;    A contains the update value if data format is offset binary or
                                        (0116) ;    2's complement. If format is 2-byte sign-and-magnitude, the LSB is in
                                        (0117) ;    A (as 00smmmmm) and the MSB is in X (as 00xmm000, where x=s\, the
                                        (0118) ;    inverted sign.
                                        (0119) ;
                                        (0120) ;  RETURNS: none
                                        (0121) ;
                                        (0122) ;  SIDE EFFECTS:
                                        (0123) ;    The A and X registers may be modified by this or future implementations
                                        (0124) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0125) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0126) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0127) ;    functions.
                                        (0128) ;
                                        (0129)  DAC8A_WriteBlind:
                                        (0130) _DAC8A_WriteBlind:
                                        (0131)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0132)   IF DAC8A_OFFSETBINARY
                                        (0133)     ;; Data is an unsigned byte value in [0..254] (i.e., 255 unique values).
                                        (0134)     ;; Following converts it to 2's complement:
                                        (0135)     sub   A, cOFFSET            ; Convert to 2's Complement
                                        (0136)   ENDIF
                                        (0137)   IF DAC8A_OFFSETBINARY | DAC8A_TWOSCOMPLEMENT
0CD8: 4F       MOV   X,SP               (0138)     mov   X, SP
0CD9: 08       PUSH  A                  (0139)     push  A                     ; Preserve the sign
0CDA: 39 80    CMP   A,0x80             (0140)     cmp   A, 80h                ; negative (or zero)?
0CDC: C0 05    JC    0x0CE2             (0141)     jc    BlindAdjustCycles     ;   no: just go on
0CDE: 73       CPL   A                  (0142)     cpl   A                     ;  yes: take the 2's Complement
0CDF: 74       INC   A                  (0143)     inc   A
0CE0: 80 05    JMP   0x0CE6             (0144)     jmp   BlindMagSet
                                        (0145) BlindAdjustCycles:
0CE2: 73       CPL   A                  (0146)     cpl   A                     ; these 3 instructions implement a 13-cycle
0CE3: 73       CPL   A                  (0147)     cpl   A                     ;   NOP so it takes the same amount of time
0CE4: 80 01    JMP   0x0CE6             (0148)     jmp   BlindMagSet           ;   for both positive and negative numbers.
                                        (0149) BlindMagSet:
0CE6: 08       PUSH  A                  (0150)     push  A                     ; preserve LSB magnitude bits
0CE7: 27 01 03 AND   [X+1],0x3          (0151)     and   [X+1], bSPLITMASK
0CEA: 27 00 80 AND   [X+0],0x80         (0152)     and   [X], 80h              ; isolate the sign
0CED: 2B 00    OR    A,[X+0]            (0153)     or    A, [X]                ; insert in MSB
0CEF: 67       ASR   A                  (0154)     asr   A                     ; justify MSB sign & mag
0CF0: 67       ASR   A                  (0155)     asr   A
0CF1: 21 3F    AND   A,0x3F             (0156)     and   A, bSMMASK            ; clear sign extension bits
                                        (0157)                                 ; Set FCap and ClockPhase bits for MSB
0CF3: 54 00    MOV   [X+0],A            (0158)     mov   [X], A                ; stash the MSB
0CF5: 21 20    AND   A,0x20             (0159)     and   A, bSIGNMASK          ; isolate the sign
0CF7: 31 20    XOR   A,0x20             (0160)     xor   A, bSIGNMASK          ;   and invert for LSB
0CF9: 66 01    ASL   [X+1]              (0161)     asl   [X+1]                 ; justify LSB magnitude
0CFB: 66 01    ASL   [X+1]              (0162)     asl   [X+1]
0CFD: 66 01    ASL   [X+1]              (0163)     asl   [X+1]
0CFF: 2B 01    OR    A,[X+1]            (0164)     or    A, [X+1]              ; combine LSB magnitude with sign
                                        (0165)                                 ; Set FCap and ClockPhase bits for LSB
0D01: 20       POP   X                  (0166)     pop   X                     ; Put MSB in X
0D02: 20       POP   X                  (0167)     pop   X
                                        (0168)   ENDIF
0D03: 29 80    OR    A,0x80             (0169)     or    A, DAC8A_CR0_HIBITS
0D05: 4B       SWAP  A,X                (0170)     swap  A, X
0D06: 29 80    OR    A,0x80             (0171)     or    A, DAC8A_CR0_HIBITS
0D08: 60 94    MOV   REG[0x94],A        (0172)     mov   reg[DAC8A_MSB_CR0], A
0D0A: 5B       MOV   A,X                (0173)     mov   A, X
0D0B: 60 84    MOV   REG[0x84],A        (0174)     mov   reg[DAC8A_LSB_CR0], A
0D0D: 70 3F    AND   F,0x3F             
0D0F: 71 C0    OR    F,0xC0             
                                        (0175)     RAM_EPILOGUE RAM_USE_CLASS_2
0D11: 7F       RET                      (0176)     ret
                                        (0177) 
                                        (0178) 
                                        (0179)  DAC8A_WriteBlind2B:
                                        (0180) _DAC8A_WriteBlind2B:
                                        (0181)     RAM_PROLOGUE RAM_USE_CLASS_1
0D12: 29 80    OR    A,0x80             (0182)     or    A, DAC8A_CR0_HIBITS
0D14: 4B       SWAP  A,X                (0183)     swap  A, X
0D15: 29 80    OR    A,0x80             (0184)     or    A, DAC8A_CR0_HIBITS
0D17: 60 94    MOV   REG[0x94],A        (0185)     mov   reg[DAC8A_MSB_CR0], A
0D19: 5B       MOV   A,X                (0186)     mov   A, X
0D1A: 60 84    MOV   REG[0x84],A        (0187)     mov   reg[DAC8A_LSB_CR0], A
                                        (0188)     RAM_EPILOGUE RAM_USE_CLASS_1
0D1C: 7F       RET                      (0189)     ret
                                        (0190) .ENDSECTION
                                        (0191) 
                                        (0192) .SECTION
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;  FUNCTION NAME: DAC8A_WriteStall
                                        (0195) ;  FUNCTION NAME: DAC8A_WriteStall2B
                                        (0196) ;
                                        (0197) ;  DESCRIPTION:
                                        (0198) ;    Modify the DAC's update value, stalling the CPU if necessary.
                                        (0199) ;    This routine should be used with faster analog clocks or when the
                                        (0200) ;    effect of prolonging interrupt latencies can be safely tolerated.
                                        (0201) ;
                                        (0202) ;-----------------------------------------------------------------------------
                                        (0203) ;
                                        (0204) ;  ARGUMENTS:
                                        (0205) ;   A contains the update value if data format is offset binary or
                                        (0206) ;   2's complement. If format is 2-byte sign-and-magnitude, the LSB is in
                                        (0207) ;   A (as 00smmmmm) and the MSB is in X (as 00xmm000, where x=s\, the
                                        (0208) ;   inverted sign.
                                        (0209) ;
                                        (0210) ;  RETURNS: none
                                        (0211) ;
                                        (0212) ;  SIDE EFFECTS:
                                        (0213) ;
                                        (0214) ;  THEORY of OPERATION or PROCEDURE:
                                        (0215) ;    The A and X registers may be modified by this or future implementations
                                        (0216) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0217) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0218) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0219) ;    functions.
                                        (0220) ;
                                        (0221)  DAC8A_WriteStall:
                                        (0222) _DAC8A_WriteStall:
                                        (0223)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0224)   IF DAC8A_OFFSETBINARY
                                        (0225)     ;; Data is an unsigned byte value in [0..254] (i.e., 255 unique values).
                                        (0226)     ;; Following converts it to 2's complement:
                                        (0227)     sub   A, cOFFSET            ; Convert to 2's Complement
                                        (0228)   ENDIF
                                        (0229)   IF DAC8A_OFFSETBINARY | DAC8A_TWOSCOMPLEMENT
0D1D: 4F       MOV   X,SP               (0230)     mov   X, SP
0D1E: 08       PUSH  A                  (0231)     push  A                     ; Preserve the sign
0D1F: 39 80    CMP   A,0x80             (0232)     cmp   A, 80h                ; negative (or zero)?
0D21: C0 05    JC    0x0D27             (0233)     jc    StallAdjustCycles     ;   no: just go on
0D23: 73       CPL   A                  (0234)     cpl   A                     ;  yes: take the 2's Complement
0D24: 74       INC   A                  (0235)     inc   A
0D25: 80 05    JMP   0x0D2B             (0236)     jmp   StallMagSet
                                        (0237) StallAdjustCycles:
0D27: 73       CPL   A                  (0238)     cpl   A                     ; these 3 instructions implement a 13-cycle
0D28: 73       CPL   A                  (0239)     cpl   A                     ;   NOP so it takes the same amount of time
0D29: 80 01    JMP   0x0D2B             (0240)     jmp   StallMagSet           ;   for both positive and negative numbers.
                                        (0241) StallMagSet:
0D2B: 08       PUSH  A                  (0242)     push  A                     ; preserve LSB magnitude bits
0D2C: 27 01 03 AND   [X+1],0x3          (0243)     and   [X+1], bSPLITMASK
0D2F: 27 00 80 AND   [X+0],0x80         (0244)     and   [X], 80h              ; isolate the sign
0D32: 2B 00    OR    A,[X+0]            (0245)     or    A, [X]                ; insert in MSB
0D34: 67       ASR   A                  (0246)     asr   A                     ; justify MSB sign & mag
0D35: 67       ASR   A                  (0247)     asr   A
0D36: 21 3F    AND   A,0x3F             (0248)     and   A, bSMMASK            ; clear sign extension bits
                                        (0249)                                 ; Set FCap and ClockPhase bits for MSB
0D38: 54 00    MOV   [X+0],A            (0250)     mov   [X], A                ; stash the MSB
0D3A: 21 20    AND   A,0x20             (0251)     and   A, bSIGNMASK          ; isolate the sign
0D3C: 31 20    XOR   A,0x20             (0252)     xor   A, bSIGNMASK          ;   and invert for LSB
0D3E: 66 01    ASL   [X+1]              (0253)     asl   [X+1]                 ; justify LSB magnitude
0D40: 66 01    ASL   [X+1]              (0254)     asl   [X+1]
0D42: 66 01    ASL   [X+1]              (0255)     asl   [X+1]
0D44: 2B 01    OR    A,[X+1]            (0256)     or    A, [X+1]              ; combine LSB magnitude with sign
                                        (0257)                                 ; Set FCap and ClockPhase bits for LSB
0D46: 20       POP   X                  (0258)     pop   X                     ; Put MSB in X
0D47: 20       POP   X                  (0259)     pop   X
                                        (0260)   ENDIF
0D48: 29 80    OR    A,0x80             (0261)     or    A, DAC8A_CR0_HIBITS
0D4A: 4B       SWAP  A,X                (0262)     swap  A, X
0D4B: 29 80    OR    A,0x80             (0263)     or    A, DAC8A_CR0_HIBITS
0D4D: 43 65 01 OR    REG[0x65],0x1      
                                        (0264) 
                                        (0265)     M8C_Stall
0D50: 60 94    MOV   REG[0x94],A        (0266)     mov   reg[DAC8A_MSB_CR0], A
0D52: 41 65 FE AND   REG[0x65],0xFE     
                                        (0267)     M8C_Unstall
0D55: 5B       MOV   A,X                (0268)     mov   A, X
0D56: 60 84    MOV   REG[0x84],A        (0269)     mov   reg[DAC8A_LSB_CR0], A
0D58: 70 3F    AND   F,0x3F             
0D5A: 71 C0    OR    F,0xC0             
                                        (0270)     RAM_EPILOGUE RAM_USE_CLASS_2
0D5C: 7F       RET                      (0271)     ret
                                        (0272) 
                                        (0273)  DAC8A_WriteStall2B:
                                        (0274) _DAC8A_WriteStall2B:
                                        (0275)     RAM_PROLOGUE RAM_USE_CLASS_1
0D5D: 29 80    OR    A,0x80             (0276)     or    A, DAC8A_CR0_HIBITS
0D5F: 4B       SWAP  A,X                (0277)     swap  A, X
0D60: 29 80    OR    A,0x80             (0278)     or    A, DAC8A_CR0_HIBITS
0D62: 43 65 01 OR    REG[0x65],0x1      
                                        (0279) 
                                        (0280)     M8C_Stall
0D65: 60 94    MOV   REG[0x94],A        (0281)     mov   reg[DAC8A_MSB_CR0], A
0D67: 41 65 FE AND   REG[0x65],0xFE     
                                        (0282)     M8C_Unstall
0D6A: 5B       MOV   A,X                (0283)     mov   A, X
0D6B: 60 84    MOV   REG[0x84],A        (0284)     mov   reg[DAC8A_LSB_CR0], A
                                        (0285)     RAM_EPILOGUE RAM_USE_CLASS_1
0D6D: 7F       RET                      (0286)     ret
                                        (0287) .ENDSECTION
                                        (0288) 
                                        (0289) .SECTION
                                        (0290) ;-----------------------------------------------------------------------------
                                        (0291) ;  FUNCTION NAME: DAC8A_Stop
                                        (0292) ;
                                        (0293) ;  DESCRIPTION:
                                        (0294) ;    Cuts power to the user module.
                                        (0295) ;
                                        (0296) ;-----------------------------------------------------------------------------
                                        (0297) ;
                                        (0298) ;  ARGUMENTS: none
                                        (0299) ;
                                        (0300) ;  RETURNS: none
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;
                                        (0309)  DAC8A_Stop:
                                        (0310) _DAC8A_Stop:
                                        (0311)     RAM_PROLOGUE RAM_USE_CLASS_1
0D6E: 41 97 FC AND   REG[0x97],0xFC     (0312)     and  reg[DAC8A_MSB_CR3], ~bPWRMASK
0D71: 41 87 FC AND   REG[0x87],0xFC     (0313)     and  reg[DAC8A_LSB_CR3], ~bPWRMASK
                                        (0314)     RAM_EPILOGUE RAM_USE_CLASS_1
0D74: 7F       RET                      (0315)     ret
                                        (0316) .ENDSECTION
                                        (0317) ; End of File DAC8A.asm
FILE: lib\amux4.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   AMUX4.asm
                                        (0004) ;;  Version: 1.50, Updated on 2015/3/4 at 22:21:30
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: AMux4 User Module software implementation file devices.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) 
                                        (0023) include "AMUX4.inc"
                                        (0024) include "m8c.inc"
                                        (0025) include "memory.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  AMUX4_InputSelect
                                        (0031) export _AMUX4_InputSelect
                                        (0032) 
                                        (0033) export  AMUX4_Start
                                        (0034) export _AMUX4_Start
                                        (0035) 
                                        (0036) export  AMUX4_Stop
                                        (0037) export _AMUX4_Stop
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  EQUATES
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) MUXMASK:                     equ 03h
                                        (0044) 
                                        (0045) AREA UserModules (ROM, REL)
                                        (0046) .SECTION
                                        (0047) ;-----------------------------------------------------------------------------
                                        (0048) ;  FUNCTION NAME: AMUX4_InputSelect
                                        (0049) ;
                                        (0050) ;  DESCRIPTION:
                                        (0051) ;    Place the signal from one of four port0 pins on the Analog Column bus.
                                        (0052) ;
                                        (0053) ;-----------------------------------------------------------------------------
                                        (0054) ;
                                        (0055) ;  ARGUMENTS:
                                        (0056) ;    A contains the mux input control value
                                        (0057) ;
                                        (0058) ;      Input           Code
                                        (0059) ;   Mux input 0,1       00h
                                        (0060) ;   Mux input 2,3       01h
                                        (0061) ;   Mux input 4,5       02h
                                        (0062) ;   Mux input 6,7       03h
                                        (0063) ;
                                        (0064) ;  RETURNS: none
                                        (0065) ;
                                        (0066) ;  SIDE EFFECTS:
                                        (0067) ;    The A and X registers may be modified by this or future implementations
                                        (0068) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0069) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0070) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0071) ;    functions.
                                        (0072) ;
                                        (0073)  AMUX4_InputSelect:
                                        (0074) _AMUX4_InputSelect:
                                        (0075)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0076) 	
                                        (0077) IF (AMUX4_COL_COUNT)
                                        (0078) 	M8C_SetBank1      ; ACE_AMX_IN is in Bank 1
                                        (0079) ENDIF
                                        (0080) 	
0D75: 21 03    AND   A,0x3              (0081)     and  A, MUXMASK                    ; Mask off only valid port0 input bits
0D77: 57 00    MOV   X,0x0              (0082)     mov  X,AMUX4_MUX_COL
                                        (0083) .AMUX4_ShiftIt:                         ; Shift value to correct bit position for Mux
0D79: 79       DEC   X                  (0084)     dec  X
0D7A: C0 05    JC    0x0D80             (0085)     jc   .AMUX4_SetIt
0D7C: 64       ASL   A                  (0086)     asl  A
0D7D: 64       ASL   A                  (0087)     asl  A
0D7E: 8F FA    JMP   0x0D79             (0088)     jmp  .AMUX4_ShiftIt                ; Loop until bits shifted to 2 LSBs
                                        (0089) 
                                        (0090) .AMUX4_SetIt:
0D80: 4F       MOV   X,SP               (0091)     mov  X,SP                          ; Get current stack location
0D81: 08       PUSH  A                  (0092)     push A                             ; Save a to OR it to AMX_IN later	
                                        (0093) IF (AMUX4_COL_COUNT)
                                        (0094) 	mov  A, reg[ACE_AMX_IN]                 ; Get current value of mux control register    
                                        (0095) ELSE
0D82: 5D 60    MOV   A,REG[0x60]        (0096) 	mov  A, reg[AMX_IN]                 ; Get current value of mux control register
                                        (0097) ENDIF
0D84: 21 FC    AND   A,0xFC             (0098)     and  A,~AMUX4_MUX_MASK             ; Mask off the bits for this Mux
0D86: 2B 00    OR    A,[X+0]            (0099)     or   A,[X]                         ; OR in the mux control bits
                                        (0100) IF (AMUX4_COL_COUNT)
                                        (0101) 	mov  reg[ACE_AMX_IN], A                 ; Get current value of mux control register    
                                        (0102) ELSE
0D88: 60 60    MOV   REG[0x60],A        (0103) 	mov  reg[AMX_IN], A                 ; Write out mux value to mux control register
                                        (0104) ENDIF	
0D8A: 18       POP   A                  (0105)     pop  A                             ; Restore the stack
0D8B: 70 3F    AND   F,0x3F             
0D8D: 71 C0    OR    F,0xC0             
                                        (0106) 	
                                        (0107) IF (AMUX4_COL_COUNT)
                                        (0108) 	M8C_SetBank0
                                        (0109) ENDIF
                                        (0110)     RAM_EPILOGUE RAM_USE_CLASS_2
0D8F: 7F       RET                      (0111)     ret
                                        (0112) .ENDSECTION
                                        (0113) 
                                        (0114) .SECTION
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;  FUNCTION NAME: AMUX4_Start
                                        (0117) ;
                                        (0118) ;  DESCRIPTION:
                                        (0119) ;   This function does nothing at this time.  It is only here for
                                        (0120) ;   future compatibility.
                                        (0121) ;
                                        (0122) ;-----------------------------------------------------------------------------
                                        (0123) ;
                                        (0124) ;  ARGUMENTS: none
                                        (0125) ;
                                        (0126) ;  RETURNS: none
                                        (0127) ;
                                        (0128) ;  SIDE EFFECTS:
                                        (0129) ;    The A and X registers may be modified by this or future implementations
                                        (0130) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0131) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0132) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0133) ;    functions.
                                        (0134) ;
                                        (0135)  AMUX4_Start:
                                        (0136) _AMUX4_Start:
                                        (0137)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0138)     RAM_EPILOGUE RAM_USE_CLASS_1
0D90: 7F       RET                      (0139)     ret
                                        (0140) .ENDSECTION
                                        (0141) 
                                        (0142) .SECTION
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;  FUNCTION NAME: AMUX4_Stop
                                        (0145) ;
                                        (0146) ;  DESCRIPTION:
                                        (0147) ;   This function does nothing at this time.  It is only here for
                                        (0148) ;   future compatibility.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;
                                        (0152) ;  ARGUMENTS:  none
                                        (0153) ;
                                        (0154) ;  RETURNS: none
                                        (0155) ;
                                        (0156) ;  SIDE EFFECTS:
                                        (0157) ;    The A and X registers may be modified by this or future implementations
                                        (0158) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0159) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0160) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0161) ;    functions.
                                        (0162) ;
                                        (0163)  AMUX4_Stop:
                                        (0164) _AMUX4_Stop:
                                        (0165)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0166)     RAM_EPILOGUE RAM_USE_CLASS_1
0D91: 7F       RET                      (0167)     ret
                                        (0168) .ENDSECTION
                                        (0169) ; End of File AMUX4.asm
FILE: C:\Users\addis\Desktop\ECE381\DATAAC~1\DATAAC~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // SPI SRAM Test Program
(0003) //
(0004) // PSoC Global Resources:
(0005) //   Power Setting     5.0V/24MHz
(0006) //   CPU_Clock         SysClk/1
(0007) //   32K_Select        Internal
(0008) //   PLL_Mode          Off
(0009) //   Sleep_Timer       8_Hz
(0010) //   VC1=SysClk/N     *4
(0011) //   VC2=VC1/N        *2
(0012) //                    *VC1 makes 6MHz SPIM Clock; VC2 makes 3MHz DAC Clock
(0013) //   VC3_Source        SysClk/1
(0014) //   VC3 Divider      *52
(0015) //                    *Used to set UART baud rate to 57600
(0016) //   SysClk Source     Internal
(0017) //   SysClk*2 Disable  { Any }
(0018) //   Analog Power      { Any }
(0019) //   Ref Mux           { Any }
(0020) //   AGndBypass        { Any }
(0021) //   Op-Amp Bias       { Any }
(0022) //   A_Buff_Power      { Any }
(0023) //   SwitchModePump    OFF
(0024) //   Trip Voltage      { Any }
(0025) //   LVD ThrottleBack *Disable
(0026) //                    *When enabled, an LVD event forces the CPU Clock to SysClk/8.
(0027) //   Watchdog Enable  *{ Any }
(0028) //                    *Incautious use of the Watchdog may adversely affect timing
(0029) //
(0030) // SPIM Parameters
(0031) //   Name              SPIM
(0032) //   Clock            *VC1
(0033) //                    *6MHz = 3Mbps SPI bit rate.
(0034) //   MISO              Row_2_Input_1
(0035) //   MOSI              Row_2_Output_0
(0036) //   SClk              Row_2_Output_3
(0037) //   Interrupt Mode    TXRegEmpty
(0038) //   ClockSync         Sync to SysClk
(0039) //   InvertMISO        Normal
(0040) //
(0041) // SPIM Module Notes
(0042) //  -The 23K256 SPI SRAM has a maximum clock speed of 20MHz
(0043) //   SPIM Clock must be set to two times the desired bit rate.
(0044) //  -This uses VC1 = SysClk/4 = 6MHz, yielding a bit rate of 3Mbps.
(0045) //  -Per SPIM Module datasheet, for SPI clocks greater than 1MHz,
(0046) //   the Row Input synchronization for the MISO signal should be
(0047) //   set to Async.
(0048) //  -PSoC 5V to 23K256 3.3V translation is accomplished by setting
(0049) //   all PSoC SPIM outputs to Open Drain Low drive mode and then
(0050) //   using 470ohm pull-up resistors. For 3MHz signals, a smaller
(0051) //   value resistor must be used to allow sufficient rise-time.
(0052) //  -Pinout:
(0053) //   CS   = P12 (StdCPU:    Open Drain Low)
(0054) //   SCLK = P13 (GlobalOut: Open Drain Low)
(0055) //   MOSI = P14 (GlobalOut: Open Drain Low)
(0056) //   MISO = P15 (GlobalIn:  High Z)
(0057) //
(0058) // DAC Module Notes
(0059) //  -To maximize the output sample rate, this example operates the
(0060) //   DACs at their maximum practical speed of 3MHz which is provided
(0061) //   by VC2. The Analog Column Clock MUXs for both DAC must have
(0062) //   VC2 selected manually in the [Chip] view.
(0063) //  -DAC8_WriteStall() should be used and not DAC8_WriteBlind in
(0064) //   order to prevent output glitches during the DAC update.
(0065) //
(0066) // bnoble@siue.edu 20140320
(0067) //----------------------------------------------------------------------------
(0068) 
(0069) #include <m8c.h>        // part specific constants and macros
(0070) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0071) #include "stdlib.h"
(0072) #include "spi_sram.h"
(0073) #include "string.h"		// used for any of the string fcns supported by API
(0074) #include "stdio.h"		// this is used for fcns....
(0075) #include "ctype.h"		// this is used for fcns.. csspanf() and cstork()
(0076) 
(0077) // GPIO Defines
(0078) #define TRIGGER_HIGH	{TRIGGER_Data_ADDR |=  TRIGGER_MASK;}
(0079) #define TRIGGER_LOW		{TRIGGER_Data_ADDR &= ~TRIGGER_MASK;}
(0080) 
(0081) // Define Sampling Rates
(0082) #define SAMPLING_RATE_1250 149 // (150-1)
(0083) #define SAMPLING_RATE_1500 124 // (125-1)
(0084) #define SAMPLING_RATE_1875  99 // (100-1)
(0085) #define SAMPLING_RATE_2500  74 //  (75-1)
(0086) #define SAMPLING_RATE_3125  59 //  (60-1)
(0087) #define SAMPLING_RATE_3750  49 //  (50-1)
(0088) #define SAMPLING_RATE_6250  29 //  (30-1)
(0089) #define SAMPLING_RATE_7500  24 //  (25-1)
(0090) #define SAMPLING_RATE_9375  19 //  (20-1)
(0091) 
(0092) // DACUpdate Period = 4*DelSig_DecimationRate = 128 for DS232
(0093) #define DACUPDATE_PERIOD   127 // (128 - 1)
(0094) 
(0095) // Globals
(0096) BYTE DACUpdateDone = 0;	// Flag which ISR sets when its time to update the DACs with output
(0097) char buf[80];			// Buffer which the UART command line will be stored		
(0098) char chAMemBlk = -1;	// Memory block that channel B will use (-1 for none)
(0099) char chBMemBlk = -1;	// Memory block that channel B will use (-1 for none)
(0100) int triggerAddress = 0; // Address at which the trigger will be triggered
(0101) 
(0102) // This function gets a line of text. It writes data into buffer with a maximum size of bufferLen. The function returns number of bytes written
(0103) // when enter is pressed
(0104) void GetLine(char *buffer, char bufferLen)
(0105) {
__UserModules_end|_GetLine|__text_start|_GetLine:
  strPos               --> X+1
  c                    --> X+0
  bufferLen            --> X-6
  buffer               --> X-5
    0D92: 10       PUSH  X
    0D93: 4F       MOV   X,SP
    0D94: 38 02    ADD   SP,0x2
(0106) 	static char rubout[4] = { 0x08, 0x20, 0x08, 0x00 }; // Rubout Sequence consists of Backspace Space Backspace. This is the null-terminated string
(0107) 	
(0108) 	char c;
(0109) 	char strPos = 0; // Current position in the string
    0D96: 56 01 00 MOV   [X+1],0x0
(0110) 	
(0111) 	UART_PutChar('>'); // Print line pointer
    0D99: 10       PUSH  X
    0D9A: 50 3E    MOV   A,0x3E
    0D9C: 7C 09 EF LCALL _UART_PutChar
    0D9F: 20       POP   X
    0DA0: 80 8F    JMP   0x0E30
(0112) 	
(0113) 	while (1)
(0114) 	{
(0115) 		c = UART_cReadChar(); // Use UART module to read the character user enters
    0DA2: 10       PUSH  X
    0DA3: 7C 09 FF LCALL _UART_cReadChar
    0DA6: 20       POP   X
    0DA7: 62 D0 00 MOV   REG[0xD0],0x0
    0DAA: 54 00    MOV   [X+0],A
(0116) 		
(0117) 		if (c == 0x08 || c == 0x7F) // Delete or backspace pressed
    0DAC: 3D 00 08 CMP   [X+0],0x8
    0DAF: A0 06    JZ    0x0DB6
    0DB1: 3D 00 7F CMP   [X+0],0x7F
    0DB4: B0 17    JNZ   0x0DCC
(0118) 		{
(0119) 			if (strPos > 0) // Only delete if there are characters to delete
    0DB6: 50 00    MOV   A,0x0
    0DB8: 3B 01    CMP   A,[X+1]
    0DBA: D0 75    JNC   0x0E30
(0120) 			{
(0121) 				strPos--; // Set the position back one
    0DBC: 7B 01    DEC   [X+1]
(0122) 				UART_PutString(rubout); // Sends the rubout sequence to the serial.
    0DBE: 10       PUSH  X
    0DBF: 50 00    MOV   A,0x0
    0DC1: 08       PUSH  A
    0DC2: 50 5D    MOV   A,0x5D
    0DC4: 5C       MOV   X,A
    0DC5: 18       POP   A
    0DC6: 7C 0A 2C LCALL _UART_PutString
    0DC9: 20       POP   X
(0123) 			}
(0124) 		}
    0DCA: 80 65    JMP   0x0E30
(0125) 		else if (c == 0x0D) // Newline enter is pressed
    0DCC: 3D 00 0D CMP   [X+0],0xD
    0DCF: B0 22    JNZ   0x0DF2
(0126) 		{
(0127) 			buffer[strPos] = 0x00; // put the null character at the current strPos
    0DD1: 62 D0 00 MOV   REG[0xD0],0x0
    0DD4: 52 01    MOV   A,[X+1]
    0DD6: 53 5B    MOV   [__r1],A
    0DD8: 55 5C 00 MOV   [__r0],0x0
    0DDB: 52 FC    MOV   A,[X-4]
    0DDD: 04 5B    ADD   [__r1],A
    0DDF: 52 FB    MOV   A,[X-5]
    0DE1: 0C 5C    ADC   [__r0],A
    0DE3: 51 5C    MOV   A,[__r0]
    0DE5: 60 D5    MOV   REG[0xD5],A
    0DE7: 50 00    MOV   A,0x0
    0DE9: 3F 5B    MVI   [__r1],A
(0128) 			UART_PutCRLF(); // Go to another line
    0DEB: 10       PUSH  X
    0DEC: 7C 0A A4 LCALL _UART_PutCRLF
    0DEF: 20       POP   X
(0129) 			break;
    0DF0: 80 41    JMP   0x0E32
(0130) 		}
(0131) 		else if (c >= 0x20 && c < 0x7F) // only valid characters to the string. These are any alphabet, numeric, or symbols
    0DF2: 3D 00 20 CMP   [X+0],0x20
    0DF5: C0 3A    JC    0x0E30
    0DF7: 3D 00 7F CMP   [X+0],0x7F
    0DFA: D0 35    JNC   0x0E30
(0132) 		{
(0133) 			if (strPos < bufferLen) // If there is space in the buffer
    0DFC: 52 01    MOV   A,[X+1]
    0DFE: 3B FA    CMP   A,[X-6]
    0E00: D0 28    JNC   0x0E29
(0134) 			{
(0135) 				buffer[strPos++] = c; // Set the current character in buffer to c and then increment strPos
    0E02: 62 D0 00 MOV   REG[0xD0],0x0
    0E05: 52 01    MOV   A,[X+1]
    0E07: 53 5B    MOV   [__r1],A
    0E09: 55 5C 00 MOV   [__r0],0x0
    0E0C: 01 01    ADD   A,0x1
    0E0E: 54 01    MOV   [X+1],A
    0E10: 52 FC    MOV   A,[X-4]
    0E12: 04 5B    ADD   [__r1],A
    0E14: 52 FB    MOV   A,[X-5]
    0E16: 0C 5C    ADC   [__r0],A
    0E18: 51 5C    MOV   A,[__r0]
    0E1A: 60 D5    MOV   REG[0xD5],A
    0E1C: 52 00    MOV   A,[X+0]
    0E1E: 3F 5B    MVI   [__r1],A
(0136) 				UART_PutChar(c); // Send the character to the computer
    0E20: 10       PUSH  X
    0E21: 52 00    MOV   A,[X+0]
    0E23: 7C 09 EF LCALL _UART_PutChar
    0E26: 20       POP   X
(0137) 			}
    0E27: 80 08    JMP   0x0E30
(0138) 			else
(0139) 				UART_PutChar(0x07); // Send BEL key because there is no more space left to add to the string
    0E29: 10       PUSH  X
    0E2A: 50 07    MOV   A,0x7
    0E2C: 7C 09 EF LCALL _UART_PutChar
    0E2F: 20       POP   X
(0140) 		}
(0141) 	}
    0E30: 8F 71    JMP   0x0DA2
    0E32: 38 FE    ADD   SP,0xFE
    0E34: 20       POP   X
    0E35: 7F       RET   
(0142) 	
(0143) 	return;
(0144) }
(0145) 
(0146) // Takes input argument str and converts each character into a lowercase character. Returns that str. Note: This function alters str
(0147) char *Lowercase(char *str)
(0148) {
_Lowercase:
  i                    --> X+0
  str                  --> X-5
    0E36: 10       PUSH  X
    0E37: 4F       MOV   X,SP
    0E38: 38 04    ADD   SP,0x4
(0149) 	int i;
(0150) 	for (i = 0; str[i] != '\0'; ++i) // Loop through each character in str and call tolower on it
    0E3A: 56 01 00 MOV   [X+1],0x0
    0E3D: 56 00 00 MOV   [X+0],0x0
    0E40: 80 43    JMP   0x0E84
(0151) 		str[i] = tolower(str[i]); // Set the character to be the lowercase of the character
    0E42: 62 D0 00 MOV   REG[0xD0],0x0
    0E45: 52 01    MOV   A,[X+1]
    0E47: 03 FC    ADD   A,[X-4]
    0E49: 53 5B    MOV   [__r1],A
    0E4B: 52 00    MOV   A,[X+0]
    0E4D: 0B FB    ADC   A,[X-5]
    0E4F: 53 5C    MOV   [__r0],A
    0E51: 51 5B    MOV   A,[__r1]
    0E53: 54 03    MOV   [X+3],A
    0E55: 51 5C    MOV   A,[__r0]
    0E57: 54 02    MOV   [X+2],A
    0E59: 60 D4    MOV   REG[0xD4],A
    0E5B: 3E 5B    MVI   A,[__r1]
    0E5D: 7A 5B    DEC   [__r1]
    0E5F: 53 59    MOV   [__r3],A
    0E61: 50 00    MOV   A,0x0
    0E63: 08       PUSH  A
    0E64: 51 59    MOV   A,[__r3]
    0E66: 08       PUSH  A
    0E67: 7C 25 35 LCALL _tolower
    0E6A: 38 FE    ADD   SP,0xFE
    0E6C: 62 D0 00 MOV   REG[0xD0],0x0
    0E6F: 51 5B    MOV   A,[__r1]
    0E71: 53 5C    MOV   [__r0],A
    0E73: 52 03    MOV   A,[X+3]
    0E75: 53 59    MOV   [__r3],A
    0E77: 52 02    MOV   A,[X+2]
    0E79: 60 D5    MOV   REG[0xD5],A
    0E7B: 51 5C    MOV   A,[__r0]
    0E7D: 3F 59    MVI   [__r3],A
    0E7F: 77 01    INC   [X+1]
    0E81: 0F 00 00 ADC   [X+0],0x0
    0E84: 62 D0 00 MOV   REG[0xD0],0x0
    0E87: 52 01    MOV   A,[X+1]
    0E89: 03 FC    ADD   A,[X-4]
    0E8B: 53 5B    MOV   [__r1],A
    0E8D: 52 00    MOV   A,[X+0]
    0E8F: 0B FB    ADC   A,[X-5]
    0E91: 60 D4    MOV   REG[0xD4],A
    0E93: 3E 5B    MVI   A,[__r1]
    0E95: 39 00    CMP   A,0x0
    0E97: BF AA    JNZ   0x0E42
(0152) 	
(0153) 	return str; // Return the string
    0E99: 52 FC    MOV   A,[X-4]
    0E9B: 53 5B    MOV   [__r1],A
    0E9D: 52 FB    MOV   A,[X-5]
    0E9F: 53 5C    MOV   [__r0],A
    0EA1: 38 FC    ADD   SP,0xFC
    0EA3: 20       POP   X
    0EA4: 7F       RET   
(0154) }
(0155) 
(0156) // This function plays channel A and B with the data at memory blocks chAMemBlk and chBMemBlk, respectively
(0157) void PlaySamples(void)
(0158) {	
_PlaySamples:
  endAddrB             --> X+10
  endAddrA             --> X+8
  startAddrB           --> X+6
  startAddrA           --> X+4
  addrB                --> X+2
  addrA                --> X+0
    0EA5: 10       PUSH  X
    0EA6: 4F       MOV   X,SP
    0EA7: 38 0C    ADD   SP,0xC
(0159) 	WORD startAddrA = chAMemBlk * 0x2000; // Where the address starts for channel A
    0EA9: 62 D0 00 MOV   REG[0xD0],0x0
    0EAC: 51 6E    MOV   A,[chAMemBlk]
    0EAE: 62 D0 00 MOV   REG[0xD0],0x0
    0EB1: 53 5C    MOV   [__r0],A
    0EB3: 55 5B 00 MOV   [__r1],0x0
    0EB6: 65 5C    ASL   [__r0]
    0EB8: 65 5B    ASL   [__r1]
    0EBA: 6B 5C    RLC   [__r0]
    0EBC: 65 5B    ASL   [__r1]
    0EBE: 6B 5C    RLC   [__r0]
    0EC0: 65 5B    ASL   [__r1]
    0EC2: 6B 5C    RLC   [__r0]
    0EC4: 65 5B    ASL   [__r1]
    0EC6: 6B 5C    RLC   [__r0]
    0EC8: 51 5B    MOV   A,[__r1]
    0ECA: 54 05    MOV   [X+5],A
    0ECC: 51 5C    MOV   A,[__r0]
    0ECE: 54 04    MOV   [X+4],A
(0160) 	WORD endAddrA = startAddrA + 0x2000; // Where the address ends for channel A
    0ED0: 52 05    MOV   A,[X+5]
    0ED2: 01 00    ADD   A,0x0
    0ED4: 54 09    MOV   [X+9],A
    0ED6: 52 04    MOV   A,[X+4]
    0ED8: 09 20    ADC   A,0x20
    0EDA: 54 08    MOV   [X+8],A
(0161) 	WORD addrA = startAddrA; // Current address position for channel B
    0EDC: 52 05    MOV   A,[X+5]
    0EDE: 54 01    MOV   [X+1],A
    0EE0: 52 04    MOV   A,[X+4]
    0EE2: 54 00    MOV   [X+0],A
(0162) 	
(0163) 	WORD startAddrB = chBMemBlk * 0x2000; // Where the address starts for channel B
    0EE4: 62 D0 00 MOV   REG[0xD0],0x0
    0EE7: 51 6B    MOV   A,[chBMemBlk]
    0EE9: 62 D0 00 MOV   REG[0xD0],0x0
    0EEC: 53 5C    MOV   [__r0],A
    0EEE: 55 5B 00 MOV   [__r1],0x0
    0EF1: 65 5C    ASL   [__r0]
    0EF3: 65 5B    ASL   [__r1]
    0EF5: 6B 5C    RLC   [__r0]
    0EF7: 65 5B    ASL   [__r1]
    0EF9: 6B 5C    RLC   [__r0]
    0EFB: 65 5B    ASL   [__r1]
    0EFD: 6B 5C    RLC   [__r0]
    0EFF: 65 5B    ASL   [__r1]
    0F01: 6B 5C    RLC   [__r0]
    0F03: 51 5B    MOV   A,[__r1]
    0F05: 54 07    MOV   [X+7],A
    0F07: 51 5C    MOV   A,[__r0]
    0F09: 54 06    MOV   [X+6],A
(0164) 	WORD endAddrB = startAddrB + 0x2000; // Where the address ends for channel B
    0F0B: 52 07    MOV   A,[X+7]
    0F0D: 01 00    ADD   A,0x0
    0F0F: 54 0B    MOV   [X+11],A
    0F11: 52 06    MOV   A,[X+6]
    0F13: 09 20    ADC   A,0x20
    0F15: 54 0A    MOV   [X+10],A
(0165) 	WORD addrB = startAddrB; // Current address position for channel B
    0F17: 52 07    MOV   A,[X+7]
    0F19: 54 03    MOV   [X+3],A
    0F1B: 52 06    MOV   A,[X+6]
    0F1D: 54 02    MOV   [X+2],A
(0166) 	
(0167) 	SPIRAM_WriteStatusRegister(SPIRAM_BYTE_MODE | SPIRAM_DISABLE_HOLD); // Set SPIRAM to byte mode b/c we read one byte at a time
    0F1F: 50 01    MOV   A,0x1
    0F21: 08       PUSH  A
    0F22: 7C 17 71 LCALL _SPIRAM_WriteStatusRegister
    0F25: 38 FF    ADD   SP,0xFF
    0F27: 62 D0 00 MOV   REG[0xD0],0x0
(0168) 	DACUpdate_Start(); // Start the DACUpdate timer
    0F2A: 10       PUSH  X
    0F2B: 7C 0B C5 LCALL _DACUpdate_Start
(0169) 	UART_CPutString("Press any key to abort\r\n");
    0F2E: 50 05    MOV   A,0x5
    0F30: 08       PUSH  A
    0F31: 50 E0    MOV   A,0xE0
    0F33: 5C       MOV   X,A
    0F34: 18       POP   A
    0F35: 7C 0A 92 LCALL _UART_CPutString
    0F38: 20       POP   X
    0F39: 80 97    JMP   0x0FD1
(0170) 	while (!UART_cReadChar())
(0171) 	{
(0172) 		//TRIGGER_Data_ADDR |= TRIGGER_MASK;	// take trigger high then low
(0173) 		//TRIGGER_Data_ADDR &=  ~TRIGGER_MASK;
(0174) 		
(0175) 		if (DACUpdateDone) // Time to update the DACs
    0F3B: 62 D0 00 MOV   REG[0xD0],0x0
    0F3E: 3C 6C 00 CMP   [DACUpdateDone],0x0
    0F41: A0 8F    JZ    0x0FD1
(0176) 		{
(0177) 			if (chAMemBlk != -1) // If there is a valid memory block to output
    0F43: 62 D0 00 MOV   REG[0xD0],0x0
    0F46: 3C 6E FF CMP   [chAMemBlk],0xFF
    0F49: A0 3D    JZ    0x0F87
(0178) 			{
(0179) 				DAC8A_WriteStall(SPIRAM_ReadByte(addrA));
    0F4B: 52 00    MOV   A,[X+0]
    0F4D: 08       PUSH  A
    0F4E: 52 01    MOV   A,[X+1]
    0F50: 08       PUSH  A
    0F51: 7C 19 2F LCALL _SPIRAM_ReadByte
    0F54: 38 FE    ADD   SP,0xFE
    0F56: 62 D0 00 MOV   REG[0xD0],0x0
    0F59: 10       PUSH  X
    0F5A: 7C 0D 1D LCALL _DAC8A_WriteStall
    0F5D: 20       POP   X
(0180) 				if (++addrA > endAddrA) addrA = startAddrA;
    0F5E: 62 D0 00 MOV   REG[0xD0],0x0
    0F61: 52 01    MOV   A,[X+1]
    0F63: 01 01    ADD   A,0x1
    0F65: 53 5B    MOV   [__r1],A
    0F67: 52 00    MOV   A,[X+0]
    0F69: 09 00    ADC   A,0x0
    0F6B: 53 5C    MOV   [__r0],A
    0F6D: 51 5B    MOV   A,[__r1]
    0F6F: 54 01    MOV   [X+1],A
    0F71: 51 5C    MOV   A,[__r0]
    0F73: 54 00    MOV   [X+0],A
    0F75: 52 09    MOV   A,[X+9]
    0F77: 12 5B    SUB   A,[__r1]
    0F79: 52 08    MOV   A,[X+8]
    0F7B: 1A 5C    SBB   A,[__r0]
    0F7D: D0 09    JNC   0x0F87
    0F7F: 52 05    MOV   A,[X+5]
    0F81: 54 01    MOV   [X+1],A
    0F83: 52 04    MOV   A,[X+4]
    0F85: 54 00    MOV   [X+0],A
(0181) 			}
(0182) 			
(0183) 			if (chBMemBlk != -1) // If there is a valid memory block to output
    0F87: 62 D0 00 MOV   REG[0xD0],0x0
    0F8A: 3C 6B FF CMP   [chBMemBlk],0xFF
    0F8D: A0 3D    JZ    0x0FCB
(0184) 			{
(0185) 				DAC8B_WriteStall(SPIRAM_ReadByte(addrB));
    0F8F: 52 02    MOV   A,[X+2]
    0F91: 08       PUSH  A
    0F92: 52 03    MOV   A,[X+3]
    0F94: 08       PUSH  A
    0F95: 7C 19 2F LCALL _SPIRAM_ReadByte
    0F98: 38 FE    ADD   SP,0xFE
    0F9A: 62 D0 00 MOV   REG[0xD0],0x0
    0F9D: 10       PUSH  X
    0F9E: 7C 0C 66 LCALL _DAC8B_WriteStall
    0FA1: 20       POP   X
(0186) 				if (++addrB > endAddrB) addrB = startAddrB;
    0FA2: 62 D0 00 MOV   REG[0xD0],0x0
    0FA5: 52 03    MOV   A,[X+3]
    0FA7: 01 01    ADD   A,0x1
    0FA9: 53 5B    MOV   [__r1],A
    0FAB: 52 02    MOV   A,[X+2]
    0FAD: 09 00    ADC   A,0x0
    0FAF: 53 5C    MOV   [__r0],A
    0FB1: 51 5B    MOV   A,[__r1]
    0FB3: 54 03    MOV   [X+3],A
    0FB5: 51 5C    MOV   A,[__r0]
    0FB7: 54 02    MOV   [X+2],A
    0FB9: 52 0B    MOV   A,[X+11]
    0FBB: 12 5B    SUB   A,[__r1]
    0FBD: 52 0A    MOV   A,[X+10]
    0FBF: 1A 5C    SBB   A,[__r0]
    0FC1: D0 09    JNC   0x0FCB
    0FC3: 52 07    MOV   A,[X+7]
    0FC5: 54 03    MOV   [X+3],A
    0FC7: 52 06    MOV   A,[X+6]
    0FC9: 54 02    MOV   [X+2],A
(0187) 			}
(0188) 			
(0189) 			DACUpdateDone = 0; // Reset flag
    0FCB: 62 D0 00 MOV   REG[0xD0],0x0
    0FCE: 55 6C 00 MOV   [DACUpdateDone],0x0
(0190) 		}
(0191) 	}
    0FD1: 10       PUSH  X
    0FD2: 7C 09 FF LCALL _UART_cReadChar
    0FD5: 20       POP   X
    0FD6: 62 D0 00 MOV   REG[0xD0],0x0
    0FD9: 39 00    CMP   A,0x0
    0FDB: AF 5F    JZ    0x0F3B
(0192) 	DACUpdate_Stop(); // Stop the timer because we're done playing
    0FDD: 10       PUSH  X
    0FDE: 7C 0B C9 LCALL _DACUpdate_Stop
    0FE1: 20       POP   X
    0FE2: 38 F4    ADD   SP,0xF4
    0FE4: 20       POP   X
    0FE5: 7F       RET   
(0193) }
(0194) 
(0195) // Samples data from channel and puts it into memBlock. Samples 8kB worth of data at the current sampling rate
(0196) void SampleAnalog(char channel, char memBlock)
(0197) {	
_SampleAnalog:
  startAddr            --> X+133
  endAddr              --> X+131
  addr                 --> X+129
  temp                 --> X+1
  i                    --> X+0
  memBlock             --> X-5
  channel              --> X-4
    0FE6: 10       PUSH  X
    0FE7: 4F       MOV   X,SP
    0FE8: 38 89    ADD   SP,0x89
(0198) 	WORD startAddr = 0x2000 * memBlock; // Where the address starts for memBlock
    0FEA: 62 D0 00 MOV   REG[0xD0],0x0
    0FED: 52 FB    MOV   A,[X-5]
    0FEF: 53 5C    MOV   [__r0],A
    0FF1: 55 5B 00 MOV   [__r1],0x0
    0FF4: 65 5C    ASL   [__r0]
    0FF6: 65 5B    ASL   [__r1]
    0FF8: 6B 5C    RLC   [__r0]
    0FFA: 65 5B    ASL   [__r1]
    0FFC: 6B 5C    RLC   [__r0]
    0FFE: 65 5B    ASL   [__r1]
    1000: 6B 5C    RLC   [__r0]
    1002: 65 5B    ASL   [__r1]
    1004: 6B 5C    RLC   [__r0]
    1006: 51 5B    MOV   A,[__r1]
    1008: 54 86    MOV   [X-122],A
    100A: 51 5C    MOV   A,[__r0]
    100C: 54 85    MOV   [X-123],A
(0199) 	WORD endAddr = startAddr + 0x2000; // Where the address ends for memBlock
    100E: 52 86    MOV   A,[X-122]
    1010: 01 00    ADD   A,0x0
    1012: 54 84    MOV   [X-124],A
    1014: 52 85    MOV   A,[X-123]
    1016: 09 20    ADC   A,0x20
    1018: 54 83    MOV   [X-125],A
(0200) 	WORD addr;
(0201) 	BYTE i;
(0202) 	char temp[128];
(0203) 	
(0204) 	AMUX4_InputSelect(channel == 0 ? AMUX4_PORT0_1: AMUX4_PORT0_7); // Change sample analog source channel
    101A: 3D FC 00 CMP   [X-4],0x0
    101D: B0 09    JNZ   0x1027
    101F: 56 88 00 MOV   [X-120],0x0
    1022: 56 87 00 MOV   [X-121],0x0
    1025: 80 07    JMP   0x102D
    1027: 56 88 03 MOV   [X-120],0x3
    102A: 56 87 00 MOV   [X-121],0x0
    102D: 62 D0 00 MOV   REG[0xD0],0x0
    1030: 52 88    MOV   A,[X-120]
    1032: 10       PUSH  X
    1033: 7C 0D 75 LCALL _AMUX4_InputSelect
    1036: 20       POP   X
(0205) 	SPIRAM_WriteStatusRegister(SPIRAM_SEQUENTIAL_MODE | SPIRAM_DISABLE_HOLD); // Set SPIRAM to sequential mode, we write bytes in packets of 128
    1037: 50 41    MOV   A,0x41
    1039: 08       PUSH  A
    103A: 7C 17 71 LCALL _SPIRAM_WriteStatusRegister
    103D: 38 FF    ADD   SP,0xFF
    103F: 62 D0 00 MOV   REG[0xD0],0x0
(0206) 	DelSig_StartAD(); // Start the analog to digital conversion in DelSig
    1042: 10       PUSH  X
    1043: 7C 0B 8A LCALL _DelSig_StartAD
    1046: 20       POP   X
(0207) 	for (addr = startAddr; addr < endAddr; addr += 128) // Loop through startAddr-endAddr in 128 increments
    1047: 52 86    MOV   A,[X-122]
    1049: 54 82    MOV   [X-126],A
    104B: 52 85    MOV   A,[X-123]
    104D: 54 81    MOV   [X-127],A
    104F: 80 5D    JMP   0x10AD
(0208) 	{
(0209) 		for (i = 0; i < 128; i++) // Read 128 bytes from the DelSig
    1051: 56 00 00 MOV   [X+0],0x0
    1054: 80 31    JMP   0x1086
(0210) 		{
(0211) 			while (!DelSig_fIsDataAvailable());
    1056: 10       PUSH  X
    1057: 7C 0B 98 LCALL _DelSig_fIsDataAvailable
    105A: 20       POP   X
    105B: 62 D0 00 MOV   REG[0xD0],0x0
    105E: 39 00    CMP   A,0x0
    1060: AF F5    JZ    0x1056
(0212) 			temp[i] = DelSig_cGetDataClearFlag();
    1062: 10       PUSH  X
    1063: 7C 0B 9E LCALL _DelSig_bGetDataClearFlag|DelSig_cGetDataClearFlag|_DelSig_cGetDataClearFlag|DelSig_bGetDataClearFlag
    1066: 20       POP   X
    1067: 62 D0 00 MOV   REG[0xD0],0x0
    106A: 53 5C    MOV   [__r0],A
    106C: 55 5A 07 MOV   [__r2],0x7
    106F: 5A 59    MOV   [__r3],X
    1071: 06 59 01 ADD   [__r3],0x1
    1074: 52 00    MOV   A,[X+0]
    1076: 02 59    ADD   A,[__r3]
    1078: 53 59    MOV   [__r3],A
    107A: 50 00    MOV   A,0x0
    107C: 0A 5A    ADC   A,[__r2]
    107E: 60 D5    MOV   REG[0xD5],A
    1080: 51 5C    MOV   A,[__r0]
    1082: 3F 59    MVI   [__r3],A
(0213) 		}
    1084: 77 00    INC   [X+0]
    1086: 3D 00 80 CMP   [X+0],0x80
    1089: CF CC    JC    0x1056
(0214) 		
(0215) 		SPIRAM_WriteArray(addr, temp, 128); // Write those bytes to SPIRAm
    108B: 50 80    MOV   A,0x80
    108D: 08       PUSH  A
    108E: 62 D0 00 MOV   REG[0xD0],0x0
    1091: 5A 5B    MOV   [__r1],X
    1093: 06 5B 01 ADD   [__r1],0x1
    1096: 50 07    MOV   A,0x7
    1098: 08       PUSH  A
    1099: 51 5B    MOV   A,[__r1]
    109B: 08       PUSH  A
    109C: 52 81    MOV   A,[X-127]
    109E: 08       PUSH  A
    109F: 52 82    MOV   A,[X-126]
    10A1: 08       PUSH  A
    10A2: 7C 1A 00 LCALL _SPIRAM_WriteArray
    10A5: 38 FB    ADD   SP,0xFB
(0216) 	}	
    10A7: 07 82 80 ADD   [X-126],0x80
    10AA: 0F 81 00 ADC   [X-127],0x0
    10AD: 52 82    MOV   A,[X-126]
    10AF: 13 84    SUB   A,[X-124]
    10B1: 52 81    MOV   A,[X-127]
    10B3: 1B 83    SBB   A,[X-125]
    10B5: CF 9B    JC    0x1051
(0217) 	DelSig_StopAD(); // Stop the conversions once were done sampling
    10B7: 10       PUSH  X
    10B8: 7C 0B 91 LCALL _DelSig_StopAD
    10BB: 20       POP   X
    10BC: 38 77    ADD   SP,0x77
    10BE: 20       POP   X
    10BF: 7F       RET   
(0218) }
(0219) 
(0220) void main(void)
(0221) {
_main:
  address              --> X+4
  ksps                 --> X+6
  samplingRate         --> X+4
  memBlock             --> X+5
  channel              --> X+4
  memBlock             --> X+5
  channel              --> X+4
  cmd                  --> X+2
  params               --> X+0
    10C0: 10       PUSH  X
    10C1: 4F       MOV   X,SP
    10C2: 38 09    ADD   SP,0x9
(0222) 	// Make sure nCS is high before doing anything
(0223) 	nCS_HIGH;
    10C4: 43 04 04 OR    REG[0x4],0x4
(0224) 
(0225) 	// Make the oscilloscope external trigger signal low. Trigger must be quickly
(0226) 	// brough high-then-low when you want the oscilloscope to draw the signals
(0227) 	// on DACA and DACB. Trigger (P1[1]) must be connected to the EXT TRIG input
(0228) 	// on the back of the oscilloscope and the Trigger Source must be set to
(0229) 	// External. The oscilloscope should also be set for Normal Mode Triggering.
(0230) 	TRIGGER_LOW;
    10C7: 41 04 FD AND   REG[0x4],0xFD
(0231) 
(0232) 	// Enable global interrutps
(0233) 	M8C_EnableGInt;
    10CA: 71 01    OR    F,0x1
(0234) 
(0235) 	// Start the UART
(0236) 	UART_Start(UART_PARITY_NONE);
    10CC: 10       PUSH  X
    10CD: 50 00    MOV   A,0x0
    10CF: 7C 09 7D LCALL _UART_Start
(0237) 	UART_PutCRLF();
    10D2: 7C 0A A4 LCALL _UART_PutCRLF
(0238) 
(0239) 	// Start the SPIM Module
(0240) 	SPIM_Start(SPIM_SPIM_MODE_0 | SPIM_SPIM_MSB_FIRST);
    10D5: 50 00    MOV   A,0x0
    10D7: 7C 0A B6 LCALL _SPIM_Start
(0241) 
(0242) 	// Start the DelSig custom clock source at the default sampling rate
(0243) 	DelSigClock_WritePeriod(SAMPLING_RATE_1250);
    10DA: 50 95    MOV   A,0x95
    10DC: 7C 0B 2F LCALL _DelSigClock_WritePeriod
(0244) 	DelSigClock_WriteCompareValue(SAMPLING_RATE_1250>>1);
    10DF: 50 4A    MOV   A,0x4A
    10E1: 7C 0B 32 LCALL _DelSigClock_WriteCompareValue
(0245) 	DelSigClock_Start();
    10E4: 7C 0B 27 LCALL _DelSigClock_Start
(0246) 
(0247) 	// Start the analog mux and select P0[1] (Channel A) as default
(0248) 	AMUX4_Start();
    10E7: 7C 0D 90 LCALL _AMUX4_Start
(0249) 	AMUX4_InputSelect(AMUX4_PORT0_1);
    10EA: 50 00    MOV   A,0x0
    10EC: 7C 0D 75 LCALL _AMUX4_InputSelect
(0250) 
(0251) 	// Start the PGA
(0252) 	PGA_Start(PGA_HIGHPOWER);
    10EF: 50 03    MOV   A,0x3
    10F1: 7C 0A C8 LCALL PGA_SetPower|_PGA_Start|_PGA_SetPower|PGA_Start
(0253) 
(0254) 	// Start the DelSig but do not start taking samples yet.
(0255) 	// Note: The DelSig PWM block output can be monitored on P1[0]. This
(0256) 	// can be used to verify the sampling rate.
(0257) 	DelSig_Start(DelSig_HIGHPOWER);
    10F4: 50 03    MOV   A,0x3
    10F6: 7C 0B 69 LCALL DelSig_SetPower|DelSig_Start|_DelSig_Start|_DelSig_SetPower
(0258) 
(0259) 	// Enable interrupts on the counter that sets the DAC output rate.
(0260) 	// Start the module only when actually outputting samples and
(0261) 	// stop it when done. Don't forget to write the period after stoping
(0262) 	// to reset the count register.
(0263) 	// NOTE: You can watch this counter on P1[7] to compare desired
(0264) 	// output rate with your actual output rate.
(0265) 	DACUpdate_WritePeriod(DACUPDATE_PERIOD);
    10F9: 50 7F    MOV   A,0x7F
    10FB: 7C 0B CD LCALL _DACUpdate_WritePeriod
(0266) 	DACUpdate_EnableInt();
    10FE: 7C 0B BD LCALL _DACUpdate_EnableInt
(0267) 
(0268) 	// Start the DACs
(0269) 	DAC8A_Start(DAC8A_HIGHPOWER);
    1101: 50 03    MOV   A,0x3
    1103: 7C 0C BE LCALL _DAC8A_SetPower|_DAC8A_Start|DAC8A_Start
(0270) 	DAC8B_Start(DAC8B_HIGHPOWER);
    1106: 50 03    MOV   A,0x3
    1108: 7C 0C 07 LCALL _DAC8B_SetPower|DAC8B_Start|_DAC8B_Start
(0271) 	
(0272) 		// This is the command usage string
(0273) 	UART_CPutString("########################## Lab 11 Data Acquisition System ########################\r\n\
    110B: 50 01    MOV   A,0x1
    110D: 08       PUSH  A
    110E: 50 D3    MOV   A,0xD3
    1110: 5C       MOV   X,A
    1111: 18       POP   A
    1112: 7C 0A 92 LCALL _UART_CPutString
    1115: 20       POP   X
    1116: 86 42    JMP   0x1759
(0274) # input X A \r\n\
(0275) #\r\n\
(0276) #	Samples input channel to memory block\r\n\
(0277) #		X - Either A/B to signify channel being altered\r\n\
(0278) #		A - Memory block(0-3) being routed\r\n\
(0279) #\r\n\
(0280) # output X A\r\n\
(0281) #	Routes output channel to read from memory block \r\n\
(0282) #		X - Either A/B to signify channel being altered\r\n\
(0283) #		A - Memory block(0-3 or -1 for none) being routed\r\n\
(0284) #\r\n\
(0285) # rate X\r\n\
(0286) #	Selects a rate to sample the channels when reading and writing\r\n\
(0287) #		X - One of the values below\r\n\
(0288) #			1. 1.25  ksps \r\n\
(0289) #			2. 1.5   ksps\r\n\
(0290) #			3. 1.87  ksps\r\n\
(0291) #			4. 2.5   ksps\r\n\
(0292) #			5. 3.125 ksps\r\n\
(0293) #			6. 3.75  ksps\r\n\
(0294) #			7. 6.25  ksps\r\n\
(0295) #			8. 7.5   ksps\r\n\
(0296) #			9. 9.37  ksps\r\n\
(0297) #\r\n\
(0298) # trigger XXX H\r\n\
(0299) #	Sets the relative address to trigger\r\n\
(0300) #		XXX - Either hex/dec for the address\r\n\
(0301) #		H - values in hexadecimal or decimal.  Range is 0-8192 for dec or 0-2000 for hex\r\n\
(0302) #\r\n\
(0303) # start\r\n\
(0304) #	Starts the output channels. They will continue to play until looped over\r\n\
(0305) #####################################################################\r\n");
(0306) 	while (1)
(0307) 	{
(0308) 		char *cmd;
(0309) 		char *params;
(0310) 		
(0311) 		GetLine(buf, 79); // Retrieves a line with a maximum length of 79 characters and put it in buf.
    1118: 50 4F    MOV   A,0x4F
    111A: 08       PUSH  A
    111B: 50 00    MOV   A,0x0
    111D: 08       PUSH  A
    111E: 50 02    MOV   A,0x2
    1120: 08       PUSH  A
    1121: 9C 6F    CALL  __UserModules_end|_GetLine|__text_start|_GetLine
(0312) 		
(0313) 		cmd = Lowercase(cstrtok(buf, " ")); // Get the first word from the entered string and lowercase it.
    1123: 50 01    MOV   A,0x1
    1125: 08       PUSH  A
    1126: 50 D1    MOV   A,0xD1
    1128: 08       PUSH  A
    1129: 50 00    MOV   A,0x0
    112B: 08       PUSH  A
    112C: 50 02    MOV   A,0x2
    112E: 08       PUSH  A
    112F: 7C 2C E6 LCALL _cstrtok
    1132: 38 F9    ADD   SP,0xF9
    1134: 62 D0 00 MOV   REG[0xD0],0x0
    1137: 51 5C    MOV   A,[__r0]
    1139: 08       PUSH  A
    113A: 51 5B    MOV   A,[__r1]
    113C: 08       PUSH  A
    113D: 9C F7    CALL  _Lowercase
    113F: 62 D0 00 MOV   REG[0xD0],0x0
    1142: 51 5B    MOV   A,[__r1]
    1144: 54 03    MOV   [X+3],A
    1146: 51 5C    MOV   A,[__r0]
    1148: 54 02    MOV   [X+2],A
(0314) 		if (!cstrcmp("input", cmd)) // If the command input was entered
    114A: 52 02    MOV   A,[X+2]
    114C: 08       PUSH  A
    114D: 52 03    MOV   A,[X+3]
    114F: 08       PUSH  A
    1150: 50 01    MOV   A,0x1
    1152: 08       PUSH  A
    1153: 50 CB    MOV   A,0xCB
    1155: 08       PUSH  A
    1156: 7C 1C 91 LCALL _cstrcmpLMM
    1159: 38 FA    ADD   SP,0xFA
    115B: 62 D0 00 MOV   REG[0xD0],0x0
    115E: 3C 5C 00 CMP   [__r0],0x0
    1161: B1 49    JNZ   0x12AB
    1163: 3C 5B 00 CMP   [__r1],0x0
    1166: B1 44    JNZ   0x12AB
(0315) 		{
(0316) 			char channel;
(0317) 			int memBlock;
(0318) 
(0319) 			params = cstrtok(0x00, " "); // 0x00 indicates it will continue from last cstrtok command and get next word. This gets the next parameter
    1168: 50 01    MOV   A,0x1
    116A: 08       PUSH  A
    116B: 50 D1    MOV   A,0xD1
    116D: 08       PUSH  A
    116E: 50 00    MOV   A,0x0
    1170: 08       PUSH  A
    1171: 08       PUSH  A
    1172: 7C 2C E6 LCALL _cstrtok
    1175: 62 D0 00 MOV   REG[0xD0],0x0
    1178: 51 5B    MOV   A,[__r1]
    117A: 54 01    MOV   [X+1],A
    117C: 51 5C    MOV   A,[__r0]
    117E: 54 00    MOV   [X+0],A
(0320) 
(0321) 			// csscanf if used to parse the string into values such as hexadecimal or integers
(0322) 			// It returns the number of parameters it parsed which should be one
(0323) 			// If the length of the params is not right or it does not parse the right amount, it returns an error
(0324) 			// %c gets a character, the channel
(0325) 			if (strlen(params) != 1 || csscanf(params, "%c", &channel) != 1) goto error;
    1180: 52 00    MOV   A,[X+0]
    1182: 08       PUSH  A
    1183: 52 01    MOV   A,[X+1]
    1185: 08       PUSH  A
    1186: 7C 1C C7 LCALL _strlenLMM
    1189: 38 FA    ADD   SP,0xFA
    118B: 62 D0 00 MOV   REG[0xD0],0x0
    118E: 3C 5C 00 CMP   [__r0],0x0
    1191: B0 32    JNZ   0x11C4
    1193: 3C 5B 01 CMP   [__r1],0x1
    1196: B0 2D    JNZ   0x11C4
    1198: 62 D0 00 MOV   REG[0xD0],0x0
    119B: 5A 5B    MOV   [__r1],X
    119D: 06 5B 04 ADD   [__r1],0x4
    11A0: 50 07    MOV   A,0x7
    11A2: 08       PUSH  A
    11A3: 51 5B    MOV   A,[__r1]
    11A5: 08       PUSH  A
    11A6: 50 01    MOV   A,0x1
    11A8: 08       PUSH  A
    11A9: 50 C8    MOV   A,0xC8
    11AB: 08       PUSH  A
    11AC: 52 00    MOV   A,[X+0]
    11AE: 08       PUSH  A
    11AF: 52 01    MOV   A,[X+1]
    11B1: 08       PUSH  A
    11B2: 7C 25 C1 LCALL _csscanf
    11B5: 38 FA    ADD   SP,0xFA
    11B7: 62 D0 00 MOV   REG[0xD0],0x0
    11BA: 3C 5C 00 CMP   [__r0],0x0
    11BD: B0 06    JNZ   0x11C4
    11BF: 3C 5B 01 CMP   [__r1],0x1
    11C2: A0 03    JZ    0x11C6
    11C4: 85 88    JMP   0x174D
(0326) 			
(0327) 			// %d gets an integer, this is the memory block at which to write
(0328) 			params = cstrtok(0x00, " ");
    11C6: 50 01    MOV   A,0x1
    11C8: 08       PUSH  A
    11C9: 50 D1    MOV   A,0xD1
    11CB: 08       PUSH  A
    11CC: 50 00    MOV   A,0x0
    11CE: 08       PUSH  A
    11CF: 08       PUSH  A
    11D0: 7C 2C E6 LCALL _cstrtok
    11D3: 62 D0 00 MOV   REG[0xD0],0x0
    11D6: 51 5B    MOV   A,[__r1]
    11D8: 54 01    MOV   [X+1],A
    11DA: 51 5C    MOV   A,[__r0]
    11DC: 54 00    MOV   [X+0],A
(0329) 			if (strlen(params) != 1 || csscanf(params, "%d", &memBlock) != 1) goto error;			
    11DE: 52 00    MOV   A,[X+0]
    11E0: 08       PUSH  A
    11E1: 52 01    MOV   A,[X+1]
    11E3: 08       PUSH  A
    11E4: 7C 1C C7 LCALL _strlenLMM
    11E7: 38 FA    ADD   SP,0xFA
    11E9: 62 D0 00 MOV   REG[0xD0],0x0
    11EC: 3C 5C 00 CMP   [__r0],0x0
    11EF: B0 32    JNZ   0x1222
    11F1: 3C 5B 01 CMP   [__r1],0x1
    11F4: B0 2D    JNZ   0x1222
    11F6: 62 D0 00 MOV   REG[0xD0],0x0
    11F9: 5A 5B    MOV   [__r1],X
    11FB: 06 5B 05 ADD   [__r1],0x5
    11FE: 50 07    MOV   A,0x7
    1200: 08       PUSH  A
    1201: 51 5B    MOV   A,[__r1]
    1203: 08       PUSH  A
    1204: 50 01    MOV   A,0x1
    1206: 08       PUSH  A
    1207: 50 C5    MOV   A,0xC5
    1209: 08       PUSH  A
    120A: 52 00    MOV   A,[X+0]
    120C: 08       PUSH  A
    120D: 52 01    MOV   A,[X+1]
    120F: 08       PUSH  A
    1210: 7C 25 C1 LCALL _csscanf
    1213: 38 FA    ADD   SP,0xFA
    1215: 62 D0 00 MOV   REG[0xD0],0x0
    1218: 3C 5C 00 CMP   [__r0],0x0
    121B: B0 06    JNZ   0x1222
    121D: 3C 5B 01 CMP   [__r1],0x1
    1220: A0 03    JZ    0x1224
    1222: 85 2A    JMP   0x174D
(0330) 			
(0331) 			// If there is any data after the last arg, then the format is invalid and it should return an error
(0332) 			if (cstrtok(0x00, " ") != 0x00) goto error;
    1224: 50 01    MOV   A,0x1
    1226: 08       PUSH  A
    1227: 50 D1    MOV   A,0xD1
    1229: 08       PUSH  A
    122A: 50 00    MOV   A,0x0
    122C: 08       PUSH  A
    122D: 08       PUSH  A
    122E: 7C 2C E6 LCALL _cstrtok
    1231: 38 FC    ADD   SP,0xFC
    1233: 62 D0 00 MOV   REG[0xD0],0x0
    1236: 3C 5C 00 CMP   [__r0],0x0
    1239: B0 06    JNZ   0x1240
    123B: 3C 5B 00 CMP   [__r1],0x0
    123E: A0 03    JZ    0x1242
    1240: 85 0C    JMP   0x174D
(0333) 			
(0334) 			channel = tolower(channel);
    1242: 62 D0 00 MOV   REG[0xD0],0x0
    1245: 52 04    MOV   A,[X+4]
    1247: 53 5B    MOV   [__r1],A
    1249: 50 00    MOV   A,0x0
    124B: 08       PUSH  A
    124C: 51 5B    MOV   A,[__r1]
    124E: 08       PUSH  A
    124F: 7C 25 35 LCALL _tolower
    1252: 38 FE    ADD   SP,0xFE
    1254: 62 D0 00 MOV   REG[0xD0],0x0
    1257: 51 5B    MOV   A,[__r1]
    1259: 54 04    MOV   [X+4],A
(0335) 			if ((channel != 'a' && channel != 'b') || memBlock < 0 || memBlock > 3)
    125B: 3D 04 61 CMP   [X+4],0x61
    125E: A0 06    JZ    0x1265
    1260: 3D 04 62 CMP   [X+4],0x62
    1263: B0 20    JNZ   0x1284
    1265: 52 06    MOV   A,[X+6]
    1267: 11 00    SUB   A,0x0
    1269: 52 05    MOV   A,[X+5]
    126B: 31 80    XOR   A,0x80
    126D: 19 80    SBB   A,0x80
    126F: C0 14    JC    0x1284
    1271: 50 03    MOV   A,0x3
    1273: 13 06    SUB   A,[X+6]
    1275: 52 05    MOV   A,[X+5]
    1277: 31 80    XOR   A,0x80
    1279: 62 D0 00 MOV   REG[0xD0],0x0
    127C: 53 54    MOV   [__rX],A
    127E: 50 80    MOV   A,0x80
    1280: 1A 54    SBB   A,[__rX]
    1282: D0 03    JNC   0x1286
(0336) 				goto error; // Memory block was out of range or the channel was not A or B
    1284: 84 C8    JMP   0x174D
(0337) 			
(0338) 			// Sample given channel at memBlock
(0339) 			SampleAnalog((channel == 'b'), (char)memBlock);
    1286: 62 D0 00 MOV   REG[0xD0],0x0
    1289: 52 06    MOV   A,[X+6]
    128B: 08       PUSH  A
    128C: 3D 04 62 CMP   [X+4],0x62
    128F: B0 09    JNZ   0x1299
    1291: 56 08 01 MOV   [X+8],0x1
    1294: 56 07 00 MOV   [X+7],0x0
    1297: 80 07    JMP   0x129F
    1299: 56 08 00 MOV   [X+8],0x0
    129C: 56 07 00 MOV   [X+7],0x0
    129F: 62 D0 00 MOV   REG[0xD0],0x0
    12A2: 52 08    MOV   A,[X+8]
    12A4: 08       PUSH  A
    12A5: 9D 3F    CALL  _SampleAnalog
    12A7: 38 FE    ADD   SP,0xFE
(0340) 		}
    12A9: 84 AF    JMP   0x1759
(0341) 		else if (!cstrcmp("output", cmd)) // If the command output was entered
    12AB: 52 02    MOV   A,[X+2]
    12AD: 08       PUSH  A
    12AE: 52 03    MOV   A,[X+3]
    12B0: 08       PUSH  A
    12B1: 50 01    MOV   A,0x1
    12B3: 08       PUSH  A
    12B4: 50 BE    MOV   A,0xBE
    12B6: 08       PUSH  A
    12B7: 7C 1C 91 LCALL _cstrcmpLMM
    12BA: 38 FC    ADD   SP,0xFC
    12BC: 62 D0 00 MOV   REG[0xD0],0x0
    12BF: 3C 5C 00 CMP   [__r0],0x0
    12C2: B1 3B    JNZ   0x13FE
    12C4: 3C 5B 00 CMP   [__r1],0x0
    12C7: B1 36    JNZ   0x13FE
(0342) 		{
(0343) 			char channel;
(0344) 			int memBlock;
(0345) 
(0346) 			params = cstrtok(0x00, " "); // 0x00 indicates it will continue from last cstrtok command and get next word. This gets the next parameter
    12C9: 50 01    MOV   A,0x1
    12CB: 08       PUSH  A
    12CC: 50 D1    MOV   A,0xD1
    12CE: 08       PUSH  A
    12CF: 50 00    MOV   A,0x0
    12D1: 08       PUSH  A
    12D2: 08       PUSH  A
    12D3: 7C 2C E6 LCALL _cstrtok
    12D6: 62 D0 00 MOV   REG[0xD0],0x0
    12D9: 51 5B    MOV   A,[__r1]
    12DB: 54 01    MOV   [X+1],A
    12DD: 51 5C    MOV   A,[__r0]
    12DF: 54 00    MOV   [X+0],A
(0347) 
(0348) 			// csscanf if used to parse the string into values such as hexadecimal or integers
(0349) 			// It returns the number of parameters it parsed which should be one
(0350) 			// If the length of the params is not right or it does not parse the right amount, it returns an error
(0351) 			// %c gets a character, the channel
(0352) 			if (strlen(params) != 1 || csscanf(params, "%c", &channel) != 1) goto error;
    12E1: 52 00    MOV   A,[X+0]
    12E3: 08       PUSH  A
    12E4: 52 01    MOV   A,[X+1]
    12E6: 08       PUSH  A
    12E7: 7C 1C C7 LCALL _strlenLMM
    12EA: 38 FA    ADD   SP,0xFA
    12EC: 62 D0 00 MOV   REG[0xD0],0x0
    12EF: 3C 5C 00 CMP   [__r0],0x0
    12F2: B0 32    JNZ   0x1325
    12F4: 3C 5B 01 CMP   [__r1],0x1
    12F7: B0 2D    JNZ   0x1325
    12F9: 62 D0 00 MOV   REG[0xD0],0x0
    12FC: 5A 5B    MOV   [__r1],X
    12FE: 06 5B 04 ADD   [__r1],0x4
    1301: 50 07    MOV   A,0x7
    1303: 08       PUSH  A
    1304: 51 5B    MOV   A,[__r1]
    1306: 08       PUSH  A
    1307: 50 01    MOV   A,0x1
    1309: 08       PUSH  A
    130A: 50 C8    MOV   A,0xC8
    130C: 08       PUSH  A
    130D: 52 00    MOV   A,[X+0]
    130F: 08       PUSH  A
    1310: 52 01    MOV   A,[X+1]
    1312: 08       PUSH  A
    1313: 7C 25 C1 LCALL _csscanf
    1316: 38 FA    ADD   SP,0xFA
    1318: 62 D0 00 MOV   REG[0xD0],0x0
    131B: 3C 5C 00 CMP   [__r0],0x0
    131E: B0 06    JNZ   0x1325
    1320: 3C 5B 01 CMP   [__r1],0x1
    1323: A0 03    JZ    0x1327
    1325: 84 27    JMP   0x174D
(0353) 
(0354) 			// %d gets an integer, this is the memory block
(0355) 			params = cstrtok(0x00, " ");
    1327: 50 01    MOV   A,0x1
    1329: 08       PUSH  A
    132A: 50 D1    MOV   A,0xD1
    132C: 08       PUSH  A
    132D: 50 00    MOV   A,0x0
    132F: 08       PUSH  A
    1330: 08       PUSH  A
    1331: 7C 2C E6 LCALL _cstrtok
    1334: 62 D0 00 MOV   REG[0xD0],0x0
    1337: 51 5B    MOV   A,[__r1]
    1339: 54 01    MOV   [X+1],A
    133B: 51 5C    MOV   A,[__r0]
    133D: 54 00    MOV   [X+0],A
(0356) 			if (strlen(params) != 1 || csscanf(params, "%d", &memBlock) != 1) goto error;
    133F: 52 00    MOV   A,[X+0]
    1341: 08       PUSH  A
    1342: 52 01    MOV   A,[X+1]
    1344: 08       PUSH  A
    1345: 7C 1C C7 LCALL _strlenLMM
    1348: 38 FA    ADD   SP,0xFA
    134A: 62 D0 00 MOV   REG[0xD0],0x0
    134D: 3C 5C 00 CMP   [__r0],0x0
    1350: B0 32    JNZ   0x1383
    1352: 3C 5B 01 CMP   [__r1],0x1
    1355: B0 2D    JNZ   0x1383
    1357: 62 D0 00 MOV   REG[0xD0],0x0
    135A: 5A 5B    MOV   [__r1],X
    135C: 06 5B 05 ADD   [__r1],0x5
    135F: 50 07    MOV   A,0x7
    1361: 08       PUSH  A
    1362: 51 5B    MOV   A,[__r1]
    1364: 08       PUSH  A
    1365: 50 01    MOV   A,0x1
    1367: 08       PUSH  A
    1368: 50 C5    MOV   A,0xC5
    136A: 08       PUSH  A
    136B: 52 00    MOV   A,[X+0]
    136D: 08       PUSH  A
    136E: 52 01    MOV   A,[X+1]
    1370: 08       PUSH  A
    1371: 7C 25 C1 LCALL _csscanf
    1374: 38 FA    ADD   SP,0xFA
    1376: 62 D0 00 MOV   REG[0xD0],0x0
    1379: 3C 5C 00 CMP   [__r0],0x0
    137C: B0 06    JNZ   0x1383
    137E: 3C 5B 01 CMP   [__r1],0x1
    1381: A0 03    JZ    0x1385
    1383: 83 C9    JMP   0x174D
(0357) 			
(0358) 			// If there is any data after the last arg, then the format is invalid and it should return an error
(0359) 			if (cstrtok(0x00, " ") != 0x00) goto error;	
    1385: 50 01    MOV   A,0x1
    1387: 08       PUSH  A
    1388: 50 D1    MOV   A,0xD1
    138A: 08       PUSH  A
    138B: 50 00    MOV   A,0x0
    138D: 08       PUSH  A
    138E: 08       PUSH  A
    138F: 7C 2C E6 LCALL _cstrtok
    1392: 38 FC    ADD   SP,0xFC
    1394: 62 D0 00 MOV   REG[0xD0],0x0
    1397: 3C 5C 00 CMP   [__r0],0x0
    139A: B0 06    JNZ   0x13A1
    139C: 3C 5B 00 CMP   [__r1],0x0
    139F: A0 03    JZ    0x13A3
    13A1: 83 AB    JMP   0x174D
(0360) 			
(0361) 			channel = tolower(channel);
    13A3: 62 D0 00 MOV   REG[0xD0],0x0
    13A6: 52 04    MOV   A,[X+4]
    13A8: 53 5B    MOV   [__r1],A
    13AA: 50 00    MOV   A,0x0
    13AC: 08       PUSH  A
    13AD: 51 5B    MOV   A,[__r1]
    13AF: 08       PUSH  A
    13B0: 7C 25 35 LCALL _tolower
    13B3: 38 FE    ADD   SP,0xFE
    13B5: 62 D0 00 MOV   REG[0xD0],0x0
    13B8: 51 5B    MOV   A,[__r1]
    13BA: 54 04    MOV   [X+4],A
(0362) 			if ((channel != 'a' && channel != 'b') || memBlock < -1 || memBlock > 3)
    13BC: 3D 04 61 CMP   [X+4],0x61
    13BF: A0 06    JZ    0x13C6
    13C1: 3D 04 62 CMP   [X+4],0x62
    13C4: B0 20    JNZ   0x13E5
    13C6: 52 06    MOV   A,[X+6]
    13C8: 11 FF    SUB   A,0xFF
    13CA: 52 05    MOV   A,[X+5]
    13CC: 31 80    XOR   A,0x80
    13CE: 19 7F    SBB   A,0x7F
    13D0: C0 14    JC    0x13E5
    13D2: 50 03    MOV   A,0x3
    13D4: 13 06    SUB   A,[X+6]
    13D6: 52 05    MOV   A,[X+5]
    13D8: 31 80    XOR   A,0x80
    13DA: 62 D0 00 MOV   REG[0xD0],0x0
    13DD: 53 54    MOV   [__rX],A
    13DF: 50 80    MOV   A,0x80
    13E1: 1A 54    SBB   A,[__rX]
    13E3: D0 03    JNC   0x13E7
(0363) 				goto error; // Memory block was out of range or the channel was not A or B
    13E5: 83 67    JMP   0x174D
(0364) 			
(0365) 			// Set specified memory block to given channel
(0366) 			if (channel == 'a') chAMemBlk = memBlock;
    13E7: 3D 04 61 CMP   [X+4],0x61
    13EA: B0 0A    JNZ   0x13F5
    13EC: 52 06    MOV   A,[X+6]
    13EE: 62 D0 00 MOV   REG[0xD0],0x0
    13F1: 53 6E    MOV   [chAMemBlk],A
    13F3: 83 65    JMP   0x1759
(0367) 			else chBMemBlk = memBlock;
    13F5: 52 06    MOV   A,[X+6]
    13F7: 62 D0 00 MOV   REG[0xD0],0x0
    13FA: 53 6B    MOV   [chBMemBlk],A
(0368) 		}
    13FC: 83 5C    JMP   0x1759
(0369) 		else if (!cstrcmp("rate", cmd)) // If the command rate was entered
    13FE: 52 02    MOV   A,[X+2]
    1400: 08       PUSH  A
    1401: 52 03    MOV   A,[X+3]
    1403: 08       PUSH  A
    1404: 50 01    MOV   A,0x1
    1406: 08       PUSH  A
    1407: 50 B9    MOV   A,0xB9
    1409: 08       PUSH  A
    140A: 7C 1C 91 LCALL _cstrcmpLMM
    140D: 38 FC    ADD   SP,0xFC
    140F: 62 D0 00 MOV   REG[0xD0],0x0
    1412: 3C 5C 00 CMP   [__r0],0x0
    1415: B1 6F    JNZ   0x1585
    1417: 3C 5B 00 CMP   [__r1],0x0
    141A: B1 6A    JNZ   0x1585
(0370) 		{
(0371) 			int samplingRate;
(0372) 			int ksps;
(0373) 			params = cstrtok(0x00, " "); // 0x00 indicates it will continue from last cstrtok command and get next word. This gets the next parameter
    141C: 50 01    MOV   A,0x1
    141E: 08       PUSH  A
    141F: 50 D1    MOV   A,0xD1
    1421: 08       PUSH  A
    1422: 50 00    MOV   A,0x0
    1424: 08       PUSH  A
    1425: 08       PUSH  A
    1426: 7C 2C E6 LCALL _cstrtok
    1429: 62 D0 00 MOV   REG[0xD0],0x0
    142C: 51 5B    MOV   A,[__r1]
    142E: 54 01    MOV   [X+1],A
    1430: 51 5C    MOV   A,[__r0]
    1432: 54 00    MOV   [X+0],A
(0374) 
(0375) 			// csscanf if used to parse the string into values such as hexadecimal or integers
(0376) 			// It returns the number of parameters it parsed which should be one
(0377) 			// If the length of the params is not right or it does not parse the right amount, it returns an error
(0378) 			// %d gets an integer, this is the memory block
(0379) 			if (strlen(params) != 1 || csscanf(params, "%d", &samplingRate) != 1) goto error;
    1434: 52 00    MOV   A,[X+0]
    1436: 08       PUSH  A
    1437: 52 01    MOV   A,[X+1]
    1439: 08       PUSH  A
    143A: 7C 1C C7 LCALL _strlenLMM
    143D: 38 FA    ADD   SP,0xFA
    143F: 62 D0 00 MOV   REG[0xD0],0x0
    1442: 3C 5C 00 CMP   [__r0],0x0
    1445: B0 32    JNZ   0x1478
    1447: 3C 5B 01 CMP   [__r1],0x1
    144A: B0 2D    JNZ   0x1478
    144C: 62 D0 00 MOV   REG[0xD0],0x0
    144F: 5A 5B    MOV   [__r1],X
    1451: 06 5B 04 ADD   [__r1],0x4
    1454: 50 07    MOV   A,0x7
    1456: 08       PUSH  A
    1457: 51 5B    MOV   A,[__r1]
    1459: 08       PUSH  A
    145A: 50 01    MOV   A,0x1
    145C: 08       PUSH  A
    145D: 50 C5    MOV   A,0xC5
    145F: 08       PUSH  A
    1460: 52 00    MOV   A,[X+0]
    1462: 08       PUSH  A
    1463: 52 01    MOV   A,[X+1]
    1465: 08       PUSH  A
    1466: 7C 25 C1 LCALL _csscanf
    1469: 38 FA    ADD   SP,0xFA
    146B: 62 D0 00 MOV   REG[0xD0],0x0
    146E: 3C 5C 00 CMP   [__r0],0x0
    1471: B0 06    JNZ   0x1478
    1473: 3C 5B 01 CMP   [__r1],0x1
    1476: A0 03    JZ    0x147A
    1478: 82 D4    JMP   0x174D
(0380) 			
(0381) 			// If there is any data after the last arg, then the format is invalid and it should return an error
(0382) 			if (cstrtok(0x00, " ") != 0x00) goto error;	
    147A: 50 01    MOV   A,0x1
    147C: 08       PUSH  A
    147D: 50 D1    MOV   A,0xD1
    147F: 08       PUSH  A
    1480: 50 00    MOV   A,0x0
    1482: 08       PUSH  A
    1483: 08       PUSH  A
    1484: 7C 2C E6 LCALL _cstrtok
    1487: 38 FC    ADD   SP,0xFC
    1489: 62 D0 00 MOV   REG[0xD0],0x0
    148C: 3C 5C 00 CMP   [__r0],0x0
    148F: B0 06    JNZ   0x1496
    1491: 3C 5B 00 CMP   [__r1],0x0
    1494: A0 03    JZ    0x1498
    1496: 82 B6    JMP   0x174D
(0383) 			
(0384) 			if (samplingRate < 0 || samplingRate > 9)
    1498: 52 05    MOV   A,[X+5]
    149A: 11 00    SUB   A,0x0
    149C: 52 04    MOV   A,[X+4]
    149E: 31 80    XOR   A,0x80
    14A0: 19 80    SBB   A,0x80
    14A2: C0 14    JC    0x14B7
    14A4: 50 09    MOV   A,0x9
    14A6: 13 05    SUB   A,[X+5]
    14A8: 52 04    MOV   A,[X+4]
    14AA: 31 80    XOR   A,0x80
    14AC: 62 D0 00 MOV   REG[0xD0],0x0
    14AF: 53 54    MOV   [__rX],A
    14B1: 50 80    MOV   A,0x80
    14B3: 1A 54    SBB   A,[__rX]
    14B5: D0 03    JNC   0x14B9
(0385) 				goto error; // Invalid sampling rate was selected
    14B7: 82 95    JMP   0x174D
(0386) 			
(0387) 			switch (samplingRate)
    14B9: 3D 04 00 CMP   [X+4],0x0
    14BC: B0 06    JNZ   0x14C3
    14BE: 3D 05 01 CMP   [X+5],0x1
    14C1: A0 53    JZ    0x1515
    14C3: 3D 04 00 CMP   [X+4],0x0
    14C6: B0 06    JNZ   0x14CD
    14C8: 3D 05 02 CMP   [X+5],0x2
    14CB: A0 51    JZ    0x151D
    14CD: 3D 04 00 CMP   [X+4],0x0
    14D0: B0 06    JNZ   0x14D7
    14D2: 3D 05 03 CMP   [X+5],0x3
    14D5: A0 4F    JZ    0x1525
    14D7: 3D 04 00 CMP   [X+4],0x0
    14DA: B0 06    JNZ   0x14E1
    14DC: 3D 05 04 CMP   [X+5],0x4
    14DF: A0 4D    JZ    0x152D
    14E1: 3D 04 00 CMP   [X+4],0x0
    14E4: B0 06    JNZ   0x14EB
    14E6: 3D 05 05 CMP   [X+5],0x5
    14E9: A0 4B    JZ    0x1535
    14EB: 3D 04 00 CMP   [X+4],0x0
    14EE: B0 06    JNZ   0x14F5
    14F0: 3D 05 06 CMP   [X+5],0x6
    14F3: A0 49    JZ    0x153D
    14F5: 3D 04 00 CMP   [X+4],0x0
    14F8: B0 06    JNZ   0x14FF
    14FA: 3D 05 07 CMP   [X+5],0x7
    14FD: A0 47    JZ    0x1545
    14FF: 3D 04 00 CMP   [X+4],0x0
    1502: B0 06    JNZ   0x1509
    1504: 3D 05 08 CMP   [X+5],0x8
    1507: A0 45    JZ    0x154D
    1509: 3D 04 00 CMP   [X+4],0x0
    150C: B0 06    JNZ   0x1513
    150E: 3D 05 09 CMP   [X+5],0x9
    1511: A0 43    JZ    0x1555
    1513: 80 47    JMP   0x155B
(0388) 			{
(0389) 				case 1: ksps = SAMPLING_RATE_1250; break;
    1515: 56 07 95 MOV   [X+7],0x95
    1518: 56 06 00 MOV   [X+6],0x0
    151B: 80 3F    JMP   0x155B
(0390) 				case 2: ksps = SAMPLING_RATE_1500; break;
    151D: 56 07 7C MOV   [X+7],0x7C
    1520: 56 06 00 MOV   [X+6],0x0
    1523: 80 37    JMP   0x155B
(0391) 				case 3: ksps = SAMPLING_RATE_1875; break;
    1525: 56 07 63 MOV   [X+7],0x63
    1528: 56 06 00 MOV   [X+6],0x0
    152B: 80 2F    JMP   0x155B
(0392) 				case 4: ksps = SAMPLING_RATE_2500; break;
    152D: 56 07 4A MOV   [X+7],0x4A
    1530: 56 06 00 MOV   [X+6],0x0
    1533: 80 27    JMP   0x155B
(0393) 				case 5: ksps = SAMPLING_RATE_3125; break;
    1535: 56 07 3B MOV   [X+7],0x3B
    1538: 56 06 00 MOV   [X+6],0x0
    153B: 80 1F    JMP   0x155B
(0394) 				case 6: ksps = SAMPLING_RATE_3750; break;
    153D: 56 07 31 MOV   [X+7],0x31
    1540: 56 06 00 MOV   [X+6],0x0
    1543: 80 17    JMP   0x155B
(0395) 				case 7: ksps = SAMPLING_RATE_6250; break;
    1545: 56 07 1D MOV   [X+7],0x1D
    1548: 56 06 00 MOV   [X+6],0x0
    154B: 80 0F    JMP   0x155B
(0396) 				case 8: ksps = SAMPLING_RATE_7500; break;
    154D: 56 07 18 MOV   [X+7],0x18
    1550: 56 06 00 MOV   [X+6],0x0
    1553: 80 07    JMP   0x155B
(0397) 				case 9: ksps = SAMPLING_RATE_9375; break;
    1555: 56 07 13 MOV   [X+7],0x13
    1558: 56 06 00 MOV   [X+6],0x0
(0398) 				default: break;
(0399) 			}
(0400) 			
(0401) 			DelSigClock_Stop(); // Stop the DelSigClock before writing
    155B: 10       PUSH  X
    155C: 7C 0B 2B LCALL _DelSigClock_Stop
    155F: 20       POP   X
(0402) 			DelSigClock_WritePeriod(ksps);
    1560: 62 D0 00 MOV   REG[0xD0],0x0
    1563: 52 07    MOV   A,[X+7]
    1565: 10       PUSH  X
    1566: 7C 0B 2F LCALL _DelSigClock_WritePeriod
    1569: 20       POP   X
(0403) 			DelSigClock_WriteCompareValue(ksps>>1); // 50% duty cycle
    156A: 62 D0 00 MOV   REG[0xD0],0x0
    156D: 52 07    MOV   A,[X+7]
    156F: 53 5B    MOV   [__r1],A
    1571: 52 06    MOV   A,[X+6]
    1573: 53 5C    MOV   [__r0],A
    1575: 68 5C    ASR   [__r0]
    1577: 6E 5B    RRC   [__r1]
    1579: 51 5B    MOV   A,[__r1]
    157B: 10       PUSH  X
    157C: 7C 0B 32 LCALL _DelSigClock_WriteCompareValue
(0404) 			DelSigClock_Start(); // Start it again
    157F: 7C 0B 27 LCALL _DelSigClock_Start
    1582: 20       POP   X
(0405) 		}
    1583: 81 D5    JMP   0x1759
(0406) 		else if (!cstrcmp("trigger", cmd)) // If the command trigger was entered
    1585: 52 02    MOV   A,[X+2]
    1587: 08       PUSH  A
    1588: 52 03    MOV   A,[X+3]
    158A: 08       PUSH  A
    158B: 50 01    MOV   A,0x1
    158D: 08       PUSH  A
    158E: 50 B1    MOV   A,0xB1
    1590: 08       PUSH  A
    1591: 7C 1C 91 LCALL _cstrcmpLMM
    1594: 38 FC    ADD   SP,0xFC
    1596: 62 D0 00 MOV   REG[0xD0],0x0
    1599: 3C 5C 00 CMP   [__r0],0x0
    159C: B1 6F    JNZ   0x170C
    159E: 3C 5B 00 CMP   [__r1],0x0
    15A1: B1 6A    JNZ   0x170C
(0407) 		{
(0408) 			int address;
(0409) 
(0410) 			// csscanf if used to parse the string into values such as hexadecimal or integers
(0411) 			// It returns the number of parameters it parsed which should be one
(0412) 			// If the length of the params is not right or it does not parse the right amount, it returns an error
(0413) 			// %d gets an integer, this is the memory block
(0414) 			params = Lowercase(cstrtok(0x00, " "));
    15A3: 50 01    MOV   A,0x1
    15A5: 08       PUSH  A
    15A6: 50 D1    MOV   A,0xD1
    15A8: 08       PUSH  A
    15A9: 50 00    MOV   A,0x0
    15AB: 08       PUSH  A
    15AC: 08       PUSH  A
    15AD: 7C 2C E6 LCALL _cstrtok
    15B0: 38 FC    ADD   SP,0xFC
    15B2: 62 D0 00 MOV   REG[0xD0],0x0
    15B5: 51 5C    MOV   A,[__r0]
    15B7: 08       PUSH  A
    15B8: 51 5B    MOV   A,[__r1]
    15BA: 08       PUSH  A
    15BB: 98 79    CALL  _Lowercase
    15BD: 62 D0 00 MOV   REG[0xD0],0x0
    15C0: 51 5B    MOV   A,[__r1]
    15C2: 54 01    MOV   [X+1],A
    15C4: 51 5C    MOV   A,[__r0]
    15C6: 54 00    MOV   [X+0],A
(0415) 			if (!cstrcmp("hex", params))
    15C8: 52 00    MOV   A,[X+0]
    15CA: 08       PUSH  A
    15CB: 52 01    MOV   A,[X+1]
    15CD: 08       PUSH  A
    15CE: 50 01    MOV   A,0x1
    15D0: 08       PUSH  A
    15D1: 50 AD    MOV   A,0xAD
    15D3: 08       PUSH  A
    15D4: 7C 1C 91 LCALL _cstrcmpLMM
    15D7: 38 FA    ADD   SP,0xFA
    15D9: 62 D0 00 MOV   REG[0xD0],0x0
    15DC: 3C 5C 00 CMP   [__r0],0x0
    15DF: B0 64    JNZ   0x1644
    15E1: 3C 5B 00 CMP   [__r1],0x0
    15E4: B0 5F    JNZ   0x1644
(0416) 			{
(0417) 				// %x gets a hexadecimal value, this can read capital or lowercase letters, this is the address
(0418) 				params = cstrtok(0x00, " ");
    15E6: 50 01    MOV   A,0x1
    15E8: 08       PUSH  A
    15E9: 50 D1    MOV   A,0xD1
    15EB: 08       PUSH  A
    15EC: 50 00    MOV   A,0x0
    15EE: 08       PUSH  A
    15EF: 08       PUSH  A
    15F0: 7C 2C E6 LCALL _cstrtok
    15F3: 62 D0 00 MOV   REG[0xD0],0x0
    15F6: 51 5B    MOV   A,[__r1]
    15F8: 54 01    MOV   [X+1],A
    15FA: 51 5C    MOV   A,[__r0]
    15FC: 54 00    MOV   [X+0],A
(0419) 				if (strlen(params) > 4 || csscanf(params, "%x", &address) != 1) goto error;
    15FE: 52 00    MOV   A,[X+0]
    1600: 08       PUSH  A
    1601: 52 01    MOV   A,[X+1]
    1603: 08       PUSH  A
    1604: 7C 1C C7 LCALL _strlenLMM
    1607: 38 FA    ADD   SP,0xFA
    1609: 62 D0 00 MOV   REG[0xD0],0x0
    160C: 50 04    MOV   A,0x4
    160E: 12 5B    SUB   A,[__r1]
    1610: 50 00    MOV   A,0x0
    1612: 1A 5C    SBB   A,[__r0]
    1614: C0 2D    JC    0x1642
    1616: 62 D0 00 MOV   REG[0xD0],0x0
    1619: 5A 5B    MOV   [__r1],X
    161B: 06 5B 04 ADD   [__r1],0x4
    161E: 50 07    MOV   A,0x7
    1620: 08       PUSH  A
    1621: 51 5B    MOV   A,[__r1]
    1623: 08       PUSH  A
    1624: 50 01    MOV   A,0x1
    1626: 08       PUSH  A
    1627: 50 AA    MOV   A,0xAA
    1629: 08       PUSH  A
    162A: 52 00    MOV   A,[X+0]
    162C: 08       PUSH  A
    162D: 52 01    MOV   A,[X+1]
    162F: 08       PUSH  A
    1630: 7C 25 C1 LCALL _csscanf
    1633: 38 FA    ADD   SP,0xFA
    1635: 62 D0 00 MOV   REG[0xD0],0x0
    1638: 3C 5C 00 CMP   [__r0],0x0
    163B: B0 06    JNZ   0x1642
    163D: 3C 5B 01 CMP   [__r1],0x1
    1640: A0 7F    JZ    0x16C0
    1642: 81 0A    JMP   0x174D
(0420) 			}
(0421) 			else if (!cstrcmp("dec", params))
    1644: 52 00    MOV   A,[X+0]
    1646: 08       PUSH  A
    1647: 52 01    MOV   A,[X+1]
    1649: 08       PUSH  A
    164A: 50 01    MOV   A,0x1
    164C: 08       PUSH  A
    164D: 50 A6    MOV   A,0xA6
    164F: 08       PUSH  A
    1650: 7C 1C 91 LCALL _cstrcmpLMM
    1653: 38 FC    ADD   SP,0xFC
    1655: 62 D0 00 MOV   REG[0xD0],0x0
    1658: 3C 5C 00 CMP   [__r0],0x0
    165B: B0 F1    JNZ   0x174D
    165D: 3C 5B 00 CMP   [__r1],0x0
    1660: B0 EC    JNZ   0x174D
(0422) 			{
(0423) 				params = cstrtok(0x00, " ");
    1662: 50 01    MOV   A,0x1
    1664: 08       PUSH  A
    1665: 50 D1    MOV   A,0xD1
    1667: 08       PUSH  A
    1668: 50 00    MOV   A,0x0
    166A: 08       PUSH  A
    166B: 08       PUSH  A
    166C: 7C 2C E6 LCALL _cstrtok
    166F: 62 D0 00 MOV   REG[0xD0],0x0
    1672: 51 5B    MOV   A,[__r1]
    1674: 54 01    MOV   [X+1],A
    1676: 51 5C    MOV   A,[__r0]
    1678: 54 00    MOV   [X+0],A
(0424) 				// %d gets an integer, this is the address
(0425) 				if (strlen(params) > 4 || csscanf(params, "%d", &address) != 1) goto error;
    167A: 52 00    MOV   A,[X+0]
    167C: 08       PUSH  A
    167D: 52 01    MOV   A,[X+1]
    167F: 08       PUSH  A
    1680: 7C 1C C7 LCALL _strlenLMM
    1683: 38 FA    ADD   SP,0xFA
    1685: 62 D0 00 MOV   REG[0xD0],0x0
    1688: 50 04    MOV   A,0x4
    168A: 12 5B    SUB   A,[__r1]
    168C: 50 00    MOV   A,0x0
    168E: 1A 5C    SBB   A,[__r0]
    1690: C0 2D    JC    0x16BE
    1692: 62 D0 00 MOV   REG[0xD0],0x0
    1695: 5A 5B    MOV   [__r1],X
    1697: 06 5B 04 ADD   [__r1],0x4
    169A: 50 07    MOV   A,0x7
    169C: 08       PUSH  A
    169D: 51 5B    MOV   A,[__r1]
    169F: 08       PUSH  A
    16A0: 50 01    MOV   A,0x1
    16A2: 08       PUSH  A
    16A3: 50 C5    MOV   A,0xC5
    16A5: 08       PUSH  A
    16A6: 52 00    MOV   A,[X+0]
    16A8: 08       PUSH  A
    16A9: 52 01    MOV   A,[X+1]
    16AB: 08       PUSH  A
    16AC: 7C 25 C1 LCALL _csscanf
    16AF: 38 FA    ADD   SP,0xFA
    16B1: 62 D0 00 MOV   REG[0xD0],0x0
    16B4: 3C 5C 00 CMP   [__r0],0x0
    16B7: B0 06    JNZ   0x16BE
    16B9: 3C 5B 01 CMP   [__r1],0x1
    16BC: A0 03    JZ    0x16C0
    16BE: 80 8E    JMP   0x174D
(0426) 			}
(0427) 			else 
(0428) 				goto error; // Invalid data type entered
(0429) 			
(0430) 			if (address < 0 || address > 8192)
    16C0: 52 05    MOV   A,[X+5]
    16C2: 11 00    SUB   A,0x0
    16C4: 52 04    MOV   A,[X+4]
    16C6: 31 80    XOR   A,0x80
    16C8: 19 80    SBB   A,0x80
    16CA: C0 14    JC    0x16DF
    16CC: 50 00    MOV   A,0x0
    16CE: 13 05    SUB   A,[X+5]
    16D0: 52 04    MOV   A,[X+4]
    16D2: 31 80    XOR   A,0x80
    16D4: 62 D0 00 MOV   REG[0xD0],0x0
    16D7: 53 54    MOV   [__rX],A
    16D9: 50 A0    MOV   A,0xA0
    16DB: 1A 54    SBB   A,[__rX]
    16DD: D0 03    JNC   0x16E1
(0431) 				goto error; // Invalid address range specified
    16DF: 80 6D    JMP   0x174D
(0432) 
(0433) 			// If there is any data after the last arg, then the format is invalid and it should return an error
(0434) 			if (cstrtok(0x00, " ") != 0x00) goto error;
    16E1: 50 01    MOV   A,0x1
    16E3: 08       PUSH  A
    16E4: 50 D1    MOV   A,0xD1
    16E6: 08       PUSH  A
    16E7: 50 00    MOV   A,0x0
    16E9: 08       PUSH  A
    16EA: 08       PUSH  A
    16EB: 7C 2C E6 LCALL _cstrtok
    16EE: 38 FC    ADD   SP,0xFC
    16F0: 62 D0 00 MOV   REG[0xD0],0x0
    16F3: 3C 5C 00 CMP   [__r0],0x0
    16F6: B0 06    JNZ   0x16FD
    16F8: 3C 5B 00 CMP   [__r1],0x0
    16FB: A0 03    JZ    0x16FF
    16FD: 80 4F    JMP   0x174D
(0435) 		
(0436) 			// triggerAddress is the specified address
(0437) 			triggerAddress = address;
    16FF: 62 D0 00 MOV   REG[0xD0],0x0
    1702: 52 05    MOV   A,[X+5]
    1704: 53 62    MOV   [triggerAddress+1],A
    1706: 52 04    MOV   A,[X+4]
    1708: 53 61    MOV   [triggerAddress],A
(0438) 			
(0439) 		}
    170A: 80 4E    JMP   0x1759
(0440) 		else if (!cstrcmp("start", cmd)) // If the command start was entered
    170C: 52 02    MOV   A,[X+2]
    170E: 08       PUSH  A
    170F: 52 03    MOV   A,[X+3]
    1711: 08       PUSH  A
    1712: 50 01    MOV   A,0x1
    1714: 08       PUSH  A
    1715: 50 A0    MOV   A,0xA0
    1717: 08       PUSH  A
    1718: 7C 1C 91 LCALL _cstrcmpLMM
    171B: 38 FC    ADD   SP,0xFC
    171D: 62 D0 00 MOV   REG[0xD0],0x0
    1720: 3C 5C 00 CMP   [__r0],0x0
    1723: B0 29    JNZ   0x174D
    1725: 3C 5B 00 CMP   [__r1],0x0
    1728: B0 24    JNZ   0x174D
(0441) 		{
(0442) 			// If there is any data after the number of bytes, then the format is invalid and it should return an error
(0443) 			if (cstrtok(0x00, " ") != 0x00) goto error;
    172A: 50 01    MOV   A,0x1
    172C: 08       PUSH  A
    172D: 50 D1    MOV   A,0xD1
    172F: 08       PUSH  A
    1730: 50 00    MOV   A,0x0
    1732: 08       PUSH  A
    1733: 08       PUSH  A
    1734: 7C 2C E6 LCALL _cstrtok
    1737: 38 FC    ADD   SP,0xFC
    1739: 62 D0 00 MOV   REG[0xD0],0x0
    173C: 3C 5C 00 CMP   [__r0],0x0
    173F: B0 06    JNZ   0x1746
    1741: 3C 5B 00 CMP   [__r1],0x0
    1744: A0 03    JZ    0x1748
    1746: 80 06    JMP   0x174D
(0444) 			
(0445) 			// Start playing the data
(0446) 			PlaySamples();
    1748: 7C 0E A5 LCALL _PlaySamples
(0447) 		}
(0448) 		else 
(0449) 			goto error;
(0450) 		
(0451) 		continue; // This is so that the error is skipped when everything goes right
    174B: 80 0D    JMP   0x1759
(0452) 		error: // This outputs an invalid format message and continues on to read another line
(0453) 			UART_CPutString("########################## Lab 11 Data Acquisition System ########################\r\n\
    174D: 10       PUSH  X
    174E: 50 01    MOV   A,0x1
    1750: 08       PUSH  A
    1751: 50 D3    MOV   A,0xD3
    1753: 5C       MOV   X,A
    1754: 18       POP   A
    1755: 7C 0A 92 LCALL _UART_CPutString
    1758: 20       POP   X
(0454) # input X A \r\n\
(0455) #\r\n\
(0456) #	Samples input channel to memory block\r\n\
(0457) #		X - Either A/B to signify channel being altered\r\n\
(0458) #		A - Memory block(0-3) being routed\r\n\
(0459) #\r\n\
(0460) # output X A\r\n\
(0461) #	Routes output channel to read from memory block \r\n\
(0462) #		X - Either A/B to signify channel being altered\r\n\
(0463) #		A - Memory block(0-3 or -1 for none) being routed\r\n\
(0464) #\r\n\
(0465) # rate X\r\n\
(0466) #	Selects a rate to sample the channels when reading and writing\r\n\
(0467) #		X - One of the values below\r\n\
(0468) #			1. 1.25  ksps \r\n\
(0469) #			2. 1.5   ksps\r\n\
(0470) #			3. 1.87  ksps\r\n\
(0471) #			4. 2.5   ksps\r\n\
(0472) #			5. 3.125 ksps\r\n\
(0473) #			6. 3.75  ksps\r\n\
(0474) #			7. 6.25  ksps\r\n\
(0475) #			8. 7.5   ksps\r\n\
(0476) #			9. 9.37  ksps\r\n\
(0477) #\r\n\
(0478) # trigger XXX H\r\n\
(0479) #	Sets the relative address to trigger\r\n\
(0480) #		XXX - Either hex/dec for the address\r\n\
(0481) #		H - values in hexadecimal or decimal.  Range is 0-8192 for dec or 0-2000 for hex\r\n\
(0482) #\r\n\
(0483) # start\r\n\
(0484) #	Starts the output channels. They will continue to play until looped over\r\n\
(0485) #####################################################################\r\n");
(0486) 	}
    1759: 89 BE    JMP   0x1118
    175B: 38 F7    ADD   SP,0xF7
    175D: 20       POP   X
    175E: 8F FF    JMP   0x175E
(0487) 
(0488) }
(0489) 
(0490) /*****************************************************************************/
(0491) /********************* Interrupt Service Routines Below **********************/
(0492) /*****************************************************************************/
(0493) #pragma interrupt_handler DACUpdate_ISR
(0494) 
(0495) // DACUpdate_ISR is called at the terminal count of the DACUpdate user module.
(0496) // Since it's clock source is the same as DelSig, setting its period to
(0497) // match the DelSig PWM (4*DecimationRate) will cause it to interrupt at the
(0498) // same rate as the DelSig's sampling rate. If the samples are only sent to
(0499) // the DACs when the variable DACUpdateDone is one, the output sampling rate
(0500) // can be controlled.
(0501) void DACUpdate_ISR(void)
(0502) {
_DACUpdate_ISR:
    1760: 71 C0    OR    F,0xC0
    1762: 08       PUSH  A
    1763: 5D D0    MOV   A,REG[0xD0]
    1765: 08       PUSH  A
(0503) 	// Updating the DACs inside the ISR takes more clock cycles
(0504) 	// than simply setting a flag and exiting. This is because
(0505) 	// the C-compiler does a full preserve and restore of the
(0506) 	// CPU context which takes 190+185 CPU cycles.
(0507) 	DACUpdateDone = 1;
    1766: 62 D0 00 MOV   REG[0xD0],0x0
    1769: 55 6C 01 MOV   [DACUpdateDone],0x1
    176C: 18       POP   A
    176D: 60 D0    MOV   REG[0xD0],A
    176F: 18       POP   A
    1770: 7E       RETI  
FILE: C:\Users\addis\Desktop\ECE381\DATAAC~1\DATAAC~1\spi_sram.c
(0001) //*****************************************************************************
(0002) //* Read/Write/Control Functions for the Microchip 23K256 32kB SPI RAM
(0003) //*
(0004) //* bnoble@siue.edu 20140320
(0005) //*****************************************************************************
(0006) 
(0007) #include <m8c.h>        // part specific constants and macros
(0008) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0009) #include "spi_sram.h"
(0010) 
(0011) // Write byte "value" to SRAM Status Register
(0012) BYTE SPIRAM_WriteStatusRegister(BYTE value)
(0013) {
_SPIRAM_WriteStatusRegister:
  b                    --> X+0
  value                --> X-4
    1771: 10       PUSH  X
    1772: 4F       MOV   X,SP
    1773: 38 01    ADD   SP,0x1
(0014) 	BYTE b;
(0015) 
(0016) 	// If bits 5 through 1 aren't zero, return an error as per
(0017) 	// Section 2.5 in the 23K256 datasheet
(0018) 	if (value & 0b00111110)
    1775: 48 FC 3E TST   [X-4],0x3E
    1778: A0 08    JZ    0x1781
(0019) 		return(1);
    177A: 62 D0 00 MOV   REG[0xD0],0x0
    177D: 50 01    MOV   A,0x1
    177F: 80 72    JMP   0x17F2
(0020) 	// Mode SPIRAM_SEQUENTIAL_MODE|SPIRAM_PAGE_MODE are invalid.
(0021) 	if ((value & 0b11000000) == 0b11000000)
    1781: 62 D0 00 MOV   REG[0xD0],0x0
    1784: 52 FC    MOV   A,[X-4]
    1786: 21 C0    AND   A,0xC0
    1788: 39 C0    CMP   A,0xC0
    178A: B0 05    JNZ   0x1790
(0022) 		return(1);
    178C: 50 01    MOV   A,0x1
    178E: 80 63    JMP   0x17F2
(0023) 	// Make sure the TX buffer is empty (it should be but let's be proper)
(0024) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1790: 10       PUSH  X
    1791: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1794: 20       POP   X
    1795: 62 D0 00 MOV   REG[0xD0],0x0
    1798: 53 5C    MOV   [__r0],A
    179A: 47 5C 10 TST   [__r0],0x10
    179D: AF F2    JZ    0x1790
(0025) 	// SPI transfers begin by bringing CS LOW
(0026) 	nCS_LOW;
    179F: 41 04 FB AND   REG[0x4],0xFB
(0027) 	// Send the Status Register Write command
(0028) 	SPIM_SendTxData(SPIRAM_WRITE_STATUS_REG);
    17A2: 10       PUSH  X
    17A3: 50 01    MOV   A,0x1
    17A5: 7C 0A BF LCALL _SPIM_SendTxData
    17A8: 20       POP   X
(0029) 	// It will be almost immediately loaded into the TX shift register, freeing
(0030) 	// up the TX buffer, and the SPIM module will start transmission.
(0031) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    17A9: 10       PUSH  X
    17AA: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    17AD: 20       POP   X
    17AE: 62 D0 00 MOV   REG[0xD0],0x0
    17B1: 53 5C    MOV   [__r0],A
    17B3: 47 5C 10 TST   [__r0],0x10
    17B6: AF F2    JZ    0x17A9
(0032) 	// Prime the TX buffer for the next byte by loading it with the new status
(0033) 	// register byte while the first byte is still transmitting.
(0034) 	SPIM_SendTxData(value);
    17B8: 10       PUSH  X
    17B9: 52 FC    MOV   A,[X-4]
    17BB: 7C 0A BF LCALL _SPIM_SendTxData
    17BE: 20       POP   X
(0035) 	// Wait for the first TX/RX cycle to finish. We don't care what we read.
(0036) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    17BF: 10       PUSH  X
    17C0: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    17C3: 20       POP   X
    17C4: 62 D0 00 MOV   REG[0xD0],0x0
    17C7: 53 5C    MOV   [__r0],A
    17C9: 47 5C 20 TST   [__r0],0x20
    17CC: AF F2    JZ    0x17BF
(0037) 	// Reading the data clears the RX_BUFFER_FULL flag, even if we don't want it.
(0038) 	SPIM_bReadRxData(); // ignore byte from SPIRAM_WRITE_STATUS_REG TX
    17CE: 10       PUSH  X
    17CF: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    17D2: 20       POP   X
    17D3: 62 D0 00 MOV   REG[0xD0],0x0
(0039) 	// Wait for the second TX/RX cycle to finish so that we know that the entire
(0040) 	// two byte transaction is finished.
(0041) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    17D6: 10       PUSH  X
    17D7: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    17DA: 20       POP   X
    17DB: 62 D0 00 MOV   REG[0xD0],0x0
    17DE: 53 5C    MOV   [__r0],A
    17E0: 47 5C 20 TST   [__r0],0x20
    17E3: AF F2    JZ    0x17D6
(0042) 	SPIM_bReadRxData(); // We don't care about this read either
    17E5: 10       PUSH  X
    17E6: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    17E9: 20       POP   X
    17EA: 62 D0 00 MOV   REG[0xD0],0x0
(0043) 	// SPI transfers end by bringing CS LOW
(0044) 	nCS_HIGH;
    17ED: 43 04 04 OR    REG[0x4],0x4
(0045) 	return(0);
    17F0: 50 00    MOV   A,0x0
    17F2: 38 FF    ADD   SP,0xFF
    17F4: 20       POP   X
    17F5: 7F       RET   
(0046) }
(0047) 
(0048) // Read SRAM Status Register and return the result.
(0049) BYTE SPIRAM_ReadStatusRegister(void)
(0050) {
_SPIRAM_ReadStatusRegister:
  b                    --> X+1
  statReg              --> X+0
    17F6: 10       PUSH  X
    17F7: 4F       MOV   X,SP
    17F8: 38 02    ADD   SP,0x2
(0051) 	BYTE statReg;
(0052) 	BYTE b;
(0053) 
(0054) 	// Make sure the TX buffer is empty before starting
(0055) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    17FA: 10       PUSH  X
    17FB: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    17FE: 20       POP   X
    17FF: 62 D0 00 MOV   REG[0xD0],0x0
    1802: 53 5C    MOV   [__r0],A
    1804: 47 5C 10 TST   [__r0],0x10
    1807: AF F2    JZ    0x17FA
(0056) 	nCS_LOW;
    1809: 41 04 FB AND   REG[0x4],0xFB
(0057) 	// Send the Read Status Register command
(0058) 	SPIM_SendTxData(SPIRAM_READ_STATUS_REG);
    180C: 10       PUSH  X
    180D: 50 05    MOV   A,0x5
    180F: 7C 0A BF LCALL _SPIM_SendTxData
    1812: 20       POP   X
(0059) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1813: 10       PUSH  X
    1814: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1817: 20       POP   X
    1818: 62 D0 00 MOV   REG[0xD0],0x0
    181B: 53 5C    MOV   [__r0],A
    181D: 47 5C 10 TST   [__r0],0x10
    1820: AF F2    JZ    0x1813
(0060) 	// Send a dummy byte in order to initiate a TX/RX transfer
(0061) 	SPIM_SendTxData(SPIRAM_DUMMY_BYTE);
    1822: 10       PUSH  X
    1823: 50 00    MOV   A,0x0
    1825: 7C 0A BF LCALL _SPIM_SendTxData
    1828: 20       POP   X
(0062) 	// Wait for the first RX byte to arrive and ignore it; it is meaningless.
(0063) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1829: 10       PUSH  X
    182A: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    182D: 20       POP   X
    182E: 62 D0 00 MOV   REG[0xD0],0x0
    1831: 53 5C    MOV   [__r0],A
    1833: 47 5C 20 TST   [__r0],0x20
    1836: AF F2    JZ    0x1829
(0064) 	SPIM_bReadRxData();
    1838: 10       PUSH  X
    1839: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    183C: 20       POP   X
    183D: 62 D0 00 MOV   REG[0xD0],0x0
(0065) 	// Wait for the second RX byte to arrive; it contains the status reg value.
(0066) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1840: 10       PUSH  X
    1841: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1844: 20       POP   X
    1845: 62 D0 00 MOV   REG[0xD0],0x0
    1848: 53 5C    MOV   [__r0],A
    184A: 47 5C 20 TST   [__r0],0x20
    184D: AF F2    JZ    0x1840
(0067) 	statReg = SPIM_bReadRxData();
    184F: 10       PUSH  X
    1850: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    1853: 20       POP   X
    1854: 62 D0 00 MOV   REG[0xD0],0x0
    1857: 54 00    MOV   [X+0],A
(0068) 	nCS_HIGH;
    1859: 43 04 04 OR    REG[0x4],0x4
(0069) 	return(statReg);
    185C: 52 00    MOV   A,[X+0]
    185E: 38 FE    ADD   SP,0xFE
    1860: 20       POP   X
    1861: 7F       RET   
(0070) }
(0071) 
(0072) // Write byte "out" to SRAM address "addr"
(0073) // NOTE: This function assumes the SRAM has already been put in Byte Mode.
(0074) void SPIRAM_WriteByte(WORD addr, BYTE out)
(0075) {
_SPIRAM_WriteByte:
  loAddr               --> X+1
  hiAddr               --> X+0
  out                  --> X-6
  addr                 --> X-5
    1862: 10       PUSH  X
    1863: 4F       MOV   X,SP
    1864: 38 02    ADD   SP,0x2
(0076) 	BYTE hiAddr;
(0077) 	BYTE loAddr;
(0078) 	
(0079) 	// Break the SRAM word address into two bytes
(0080) 	hiAddr = (BYTE)((addr >> 8) & 0x00ff);
    1866: 62 D0 00 MOV   REG[0xD0],0x0
    1869: 52 FB    MOV   A,[X-5]
    186B: 54 00    MOV   [X+0],A
(0081) 	loAddr = (BYTE)(addr & 0x00ff);
    186D: 52 FC    MOV   A,[X-4]
    186F: 54 01    MOV   [X+1],A
(0082) 	
(0083) 	// Make sure the TX buffer is empty (it should be but let's be proper)
(0084) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1871: 10       PUSH  X
    1872: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1875: 20       POP   X
    1876: 62 D0 00 MOV   REG[0xD0],0x0
    1879: 53 5C    MOV   [__r0],A
    187B: 47 5C 10 TST   [__r0],0x10
    187E: AF F2    JZ    0x1871
(0085) 	// SPI transfers begin by bringing CS LOW
(0086) 	nCS_LOW;
    1880: 41 04 FB AND   REG[0x4],0xFB
(0087) 	// Send the Write command
(0088) 	SPIM_SendTxData(SPIRAM_WRITE);
    1883: 10       PUSH  X
    1884: 50 02    MOV   A,0x2
    1886: 7C 0A BF LCALL _SPIM_SendTxData
    1889: 20       POP   X
(0089) 	// It will be almost immediately loaded into the TX shift register, freeing
(0090) 	// up the TX buffer, and the SPIM module will start transmission.
(0091) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    188A: 10       PUSH  X
    188B: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    188E: 20       POP   X
    188F: 62 D0 00 MOV   REG[0xD0],0x0
    1892: 53 5C    MOV   [__r0],A
    1894: 47 5C 10 TST   [__r0],0x10
    1897: AF F2    JZ    0x188A
(0092) 	// Prime the TX buffer with the MSB of the address while first byte is still transmitting.
(0093) 	SPIM_SendTxData(hiAddr);
    1899: 10       PUSH  X
    189A: 52 00    MOV   A,[X+0]
    189C: 7C 0A BF LCALL _SPIM_SendTxData
    189F: 20       POP   X
(0094) 	// Wait for the first TX/RX cycle to finish. We don't care what we read.
(0095) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    18A0: 10       PUSH  X
    18A1: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    18A4: 20       POP   X
    18A5: 62 D0 00 MOV   REG[0xD0],0x0
    18A8: 53 5C    MOV   [__r0],A
    18AA: 47 5C 20 TST   [__r0],0x20
    18AD: AF F2    JZ    0x18A0
(0096) 	// Reading the data clears the RX_BUFFER_FULL flag, even if we don't want it.
(0097) 	SPIM_bReadRxData();
    18AF: 10       PUSH  X
    18B0: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    18B3: 20       POP   X
    18B4: 62 D0 00 MOV   REG[0xD0],0x0
(0098) 	// Wait for the second TX/RX cycle to finish so that we know that the entire
(0099) 	// two byte transaction is finished.
(0100) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    18B7: 10       PUSH  X
    18B8: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    18BB: 20       POP   X
    18BC: 62 D0 00 MOV   REG[0xD0],0x0
    18BF: 53 5C    MOV   [__r0],A
    18C1: 47 5C 20 TST   [__r0],0x20
    18C4: AF F2    JZ    0x18B7
(0101) 	SPIM_bReadRxData(); // We don't care about this read either
    18C6: 10       PUSH  X
    18C7: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    18CA: 20       POP   X
    18CB: 62 D0 00 MOV   REG[0xD0],0x0
(0102) 	
(0103) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    18CE: 10       PUSH  X
    18CF: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    18D2: 20       POP   X
    18D3: 62 D0 00 MOV   REG[0xD0],0x0
    18D6: 53 5C    MOV   [__r0],A
    18D8: 47 5C 10 TST   [__r0],0x10
    18DB: AF F2    JZ    0x18CE
(0104) 	// Send the LSB of address
(0105) 	SPIM_SendTxData(loAddr);
    18DD: 10       PUSH  X
    18DE: 52 01    MOV   A,[X+1]
    18E0: 7C 0A BF LCALL _SPIM_SendTxData
    18E3: 20       POP   X
(0106) 	// It will be almost immediately loaded into the TX shift register, freeing
(0107) 	// up the TX buffer, and the SPIM module will start transmission.
(0108) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    18E4: 10       PUSH  X
    18E5: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    18E8: 20       POP   X
    18E9: 62 D0 00 MOV   REG[0xD0],0x0
    18EC: 53 5C    MOV   [__r0],A
    18EE: 47 5C 10 TST   [__r0],0x10
    18F1: AF F2    JZ    0x18E4
(0109) 	// Prime the TX buffer for the next byte by loading it with the byte to be written while the first byte is still transmitting.
(0110) 	SPIM_SendTxData(out);
    18F3: 10       PUSH  X
    18F4: 52 FA    MOV   A,[X-6]
    18F6: 7C 0A BF LCALL _SPIM_SendTxData
    18F9: 20       POP   X
(0111) 	// Wait for the first TX/RX cycle to finish. We don't care what we read.
(0112) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    18FA: 10       PUSH  X
    18FB: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    18FE: 20       POP   X
    18FF: 62 D0 00 MOV   REG[0xD0],0x0
    1902: 53 5C    MOV   [__r0],A
    1904: 47 5C 20 TST   [__r0],0x20
    1907: AF F2    JZ    0x18FA
(0113) 	// Reading the data clears the RX_BUFFER_FULL flag, even if we don't want it.
(0114) 	SPIM_bReadRxData(); // ignore byte from SPIRAM_WRITE_STATUS_REG TX
    1909: 10       PUSH  X
    190A: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    190D: 20       POP   X
    190E: 62 D0 00 MOV   REG[0xD0],0x0
(0115) 	// Wait for the second TX/RX cycle to finish so that we know that the entire
(0116) 	// two byte transaction is finished.
(0117) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1911: 10       PUSH  X
    1912: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1915: 20       POP   X
    1916: 62 D0 00 MOV   REG[0xD0],0x0
    1919: 53 5C    MOV   [__r0],A
    191B: 47 5C 20 TST   [__r0],0x20
    191E: AF F2    JZ    0x1911
(0118) 	SPIM_bReadRxData(); // We don't care about this read either
    1920: 10       PUSH  X
    1921: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    1924: 20       POP   X
    1925: 62 D0 00 MOV   REG[0xD0],0x0
(0119) 	
(0120) 	nCS_HIGH;
    1928: 43 04 04 OR    REG[0x4],0x4
    192B: 38 FE    ADD   SP,0xFE
    192D: 20       POP   X
    192E: 7F       RET   
(0121) }
(0122) 
(0123) // Read and return byte at SRAM address "addr"
(0124) // NOTE: This function assumes the SRAM has already been put in Byte Mode.
(0125) BYTE SPIRAM_ReadByte(WORD addr)
(0126) {
_SPIRAM_ReadByte:
  in                   --> X+2
  loAddr               --> X+1
  hiAddr               --> X+0
  addr                 --> X-5
    192F: 10       PUSH  X
    1930: 4F       MOV   X,SP
    1931: 38 03    ADD   SP,0x3
(0127) 	BYTE hiAddr;
(0128) 	BYTE loAddr;
(0129) 	BYTE in;
(0130) 
(0131) 	// Break the SRAM word address into two bytes
(0132) 	hiAddr = (BYTE)((addr >> 8) & 0x00ff);
    1933: 62 D0 00 MOV   REG[0xD0],0x0
    1936: 52 FB    MOV   A,[X-5]
    1938: 54 00    MOV   [X+0],A
(0133) 	loAddr = (BYTE)(addr & 0x00ff);
    193A: 52 FC    MOV   A,[X-4]
    193C: 54 01    MOV   [X+1],A
(0134) 	
(0135) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    193E: 10       PUSH  X
    193F: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1942: 20       POP   X
    1943: 62 D0 00 MOV   REG[0xD0],0x0
    1946: 53 5C    MOV   [__r0],A
    1948: 47 5C 10 TST   [__r0],0x10
    194B: AF F2    JZ    0x193E
(0136) 	nCS_LOW;
    194D: 41 04 FB AND   REG[0x4],0xFB
(0137) 	// Send the Read command
(0138) 	SPIM_SendTxData(SPIRAM_READ);
    1950: 10       PUSH  X
    1951: 50 03    MOV   A,0x3
    1953: 7C 0A BF LCALL _SPIM_SendTxData
    1956: 20       POP   X
(0139) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1957: 10       PUSH  X
    1958: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    195B: 20       POP   X
    195C: 62 D0 00 MOV   REG[0xD0],0x0
    195F: 53 5C    MOV   [__r0],A
    1961: 47 5C 10 TST   [__r0],0x10
    1964: AF F2    JZ    0x1957
(0140) 	// Send MSB of address
(0141) 	SPIM_SendTxData(hiAddr);
    1966: 10       PUSH  X
    1967: 52 00    MOV   A,[X+0]
    1969: 7C 0A BF LCALL _SPIM_SendTxData
    196C: 20       POP   X
(0142) 	// Wait for the first RX byte to arrive and ignore it; it is meaningless.
(0143) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    196D: 10       PUSH  X
    196E: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1971: 20       POP   X
    1972: 62 D0 00 MOV   REG[0xD0],0x0
    1975: 53 5C    MOV   [__r0],A
    1977: 47 5C 20 TST   [__r0],0x20
    197A: AF F2    JZ    0x196D
(0144) 	SPIM_bReadRxData();
    197C: 10       PUSH  X
    197D: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    1980: 20       POP   X
    1981: 62 D0 00 MOV   REG[0xD0],0x0
(0145) 	// Wait for the second RX byte to arrive; it contains the status reg value.
(0146) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1984: 10       PUSH  X
    1985: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1988: 20       POP   X
    1989: 62 D0 00 MOV   REG[0xD0],0x0
    198C: 53 5C    MOV   [__r0],A
    198E: 47 5C 20 TST   [__r0],0x20
    1991: AF F2    JZ    0x1984
(0147) 	SPIM_bReadRxData();
    1993: 10       PUSH  X
    1994: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    1997: 20       POP   X
    1998: 62 D0 00 MOV   REG[0xD0],0x0
(0148) 	
(0149) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    199B: 10       PUSH  X
    199C: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    199F: 20       POP   X
    19A0: 62 D0 00 MOV   REG[0xD0],0x0
    19A3: 53 5C    MOV   [__r0],A
    19A5: 47 5C 10 TST   [__r0],0x10
    19A8: AF F2    JZ    0x199B
(0150) 	// Send LSB of address
(0151) 	SPIM_SendTxData(loAddr);
    19AA: 10       PUSH  X
    19AB: 52 01    MOV   A,[X+1]
    19AD: 7C 0A BF LCALL _SPIM_SendTxData
    19B0: 20       POP   X
(0152) 	// It will be almost immediately loaded into the TX shift register, freeing
(0153) 	// up the TX buffer, and the SPIM module will start transmission.
(0154) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    19B1: 10       PUSH  X
    19B2: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    19B5: 20       POP   X
    19B6: 62 D0 00 MOV   REG[0xD0],0x0
    19B9: 53 5C    MOV   [__r0],A
    19BB: 47 5C 10 TST   [__r0],0x10
    19BE: AF F2    JZ    0x19B1
(0155) 	// Prime the TX buffer for the next byte by loading it with a dummy byte while the first byte is still transmitting.
(0156) 	SPIM_SendTxData(SPIRAM_DUMMY_BYTE);
    19C0: 10       PUSH  X
    19C1: 50 00    MOV   A,0x0
    19C3: 7C 0A BF LCALL _SPIM_SendTxData
    19C6: 20       POP   X
(0157) 	// Wait for the first TX/RX cycle to finish. We don't care what we read.
(0158) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    19C7: 10       PUSH  X
    19C8: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    19CB: 20       POP   X
    19CC: 62 D0 00 MOV   REG[0xD0],0x0
    19CF: 53 5C    MOV   [__r0],A
    19D1: 47 5C 20 TST   [__r0],0x20
    19D4: AF F2    JZ    0x19C7
(0159) 	// Reading the data clears the RX_BUFFER_FULL flag, even if we don't want it.
(0160) 	SPIM_bReadRxData(); // ignore byte from SPIRAM_WRITE_STATUS_REG TX
    19D6: 10       PUSH  X
    19D7: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    19DA: 20       POP   X
    19DB: 62 D0 00 MOV   REG[0xD0],0x0
(0161) 	// Wait for the second TX/RX cycle to finish so that we know that the entire
(0162) 	// two byte transaction is finished.
(0163) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    19DE: 10       PUSH  X
    19DF: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    19E2: 20       POP   X
    19E3: 62 D0 00 MOV   REG[0xD0],0x0
    19E6: 53 5C    MOV   [__r0],A
    19E8: 47 5C 20 TST   [__r0],0x20
    19EB: AF F2    JZ    0x19DE
(0164) 	in = SPIM_bReadRxData(); // This is the output byte
    19ED: 10       PUSH  X
    19EE: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    19F1: 20       POP   X
    19F2: 62 D0 00 MOV   REG[0xD0],0x0
    19F5: 54 02    MOV   [X+2],A
(0165) 	
(0166) 	nCS_HIGH;
    19F7: 43 04 04 OR    REG[0x4],0x4
(0167) 	return in;
    19FA: 52 02    MOV   A,[X+2]
    19FC: 38 FD    ADD   SP,0xFD
    19FE: 20       POP   X
    19FF: 7F       RET   
(0168) }
(0169) 
(0170) // Write "count" bytes starting at address "addr" from array "out".
(0171) // The M8C is limited to 256 byte pages. This limits the maximum
(0172) // array size to 256 bytes, which means that "count" is only useful
(0173) // as a BYTE.
(0174) // NOTE: This function assumes the SRAM has already been put in Sequential Mode
(0175) void SPIRAM_WriteArray(WORD addr, BYTE *out, BYTE count)
(0176) {
_SPIRAM_WriteArray:
  loAddr               --> X+2
  hiAddr               --> X+1
  i                    --> X+0
  count                --> X-8
  out                  --> X-7
  addr                 --> X-5
    1A00: 10       PUSH  X
    1A01: 4F       MOV   X,SP
    1A02: 38 03    ADD   SP,0x3
(0177) 	BYTE hiAddr;
(0178) 	BYTE loAddr;
(0179) 	BYTE i;
(0180) 	
(0181) 	// If some clown tries to write 0 bytes, just return.
(0182) 	// XXX - Always beware of clowns!
(0183) 	if (!count)
    1A04: 3D F8 00 CMP   [X-8],0x0
    1A07: B0 03    JNZ   0x1A0B
(0184) 		return;
    1A09: 80 E6    JMP   0x1AF0
(0185) 	// Break the SRAM word address into two bytes
(0186) 	hiAddr = (BYTE)((addr >> 8) & 0x00ff);
    1A0B: 62 D0 00 MOV   REG[0xD0],0x0
    1A0E: 52 FB    MOV   A,[X-5]
    1A10: 54 01    MOV   [X+1],A
(0187) 	loAddr = (BYTE)(addr & 0x00ff);
    1A12: 52 FC    MOV   A,[X-4]
    1A14: 54 02    MOV   [X+2],A
(0188) 	
(0189) 	// Make sure the TX buffer is empty (it should be but let's be proper)
(0190) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1A16: 10       PUSH  X
    1A17: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1A1A: 20       POP   X
    1A1B: 62 D0 00 MOV   REG[0xD0],0x0
    1A1E: 53 5C    MOV   [__r0],A
    1A20: 47 5C 10 TST   [__r0],0x10
    1A23: AF F2    JZ    0x1A16
(0191) 	// SPI transfers begin by bringing CS LOW
(0192) 	nCS_LOW;
    1A25: 41 04 FB AND   REG[0x4],0xFB
(0193) 	// Send the Write command
(0194) 	SPIM_SendTxData(SPIRAM_WRITE);
    1A28: 10       PUSH  X
    1A29: 50 02    MOV   A,0x2
    1A2B: 7C 0A BF LCALL _SPIM_SendTxData
    1A2E: 20       POP   X
(0195) 	// It will be almost immediately loaded into the TX shift register, freeing
(0196) 	// up the TX buffer, and the SPIM module will start transmission.
(0197) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1A2F: 10       PUSH  X
    1A30: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1A33: 20       POP   X
    1A34: 62 D0 00 MOV   REG[0xD0],0x0
    1A37: 53 5C    MOV   [__r0],A
    1A39: 47 5C 10 TST   [__r0],0x10
    1A3C: AF F2    JZ    0x1A2F
(0198) 	// Prime the TX buffer for the next byte by loading it with the MSB of address while the first byte is still transmitting.
(0199) 	SPIM_SendTxData(hiAddr);
    1A3E: 10       PUSH  X
    1A3F: 52 01    MOV   A,[X+1]
    1A41: 7C 0A BF LCALL _SPIM_SendTxData
    1A44: 20       POP   X
(0200) 	// Wait for the first TX/RX cycle to finish. We don't care what we read.
(0201) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1A45: 10       PUSH  X
    1A46: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1A49: 20       POP   X
    1A4A: 62 D0 00 MOV   REG[0xD0],0x0
    1A4D: 53 5C    MOV   [__r0],A
    1A4F: 47 5C 20 TST   [__r0],0x20
    1A52: AF F2    JZ    0x1A45
(0202) 	// Reading the data clears the RX_BUFFER_FULL flag, even if we don't want it.
(0203) 	SPIM_bReadRxData();
    1A54: 10       PUSH  X
    1A55: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    1A58: 20       POP   X
    1A59: 62 D0 00 MOV   REG[0xD0],0x0
(0204) 	// Wait for the second TX/RX cycle to finish so that we know that the entire
(0205) 	// two byte transaction is finished.
(0206) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1A5C: 10       PUSH  X
    1A5D: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1A60: 20       POP   X
    1A61: 62 D0 00 MOV   REG[0xD0],0x0
    1A64: 53 5C    MOV   [__r0],A
    1A66: 47 5C 20 TST   [__r0],0x20
    1A69: AF F2    JZ    0x1A5C
(0207) 	SPIM_bReadRxData(); // We don't care about this read either
    1A6B: 10       PUSH  X
    1A6C: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    1A6F: 20       POP   X
    1A70: 62 D0 00 MOV   REG[0xD0],0x0
(0208) 	
(0209) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1A73: 10       PUSH  X
    1A74: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1A77: 20       POP   X
    1A78: 62 D0 00 MOV   REG[0xD0],0x0
    1A7B: 53 5C    MOV   [__r0],A
    1A7D: 47 5C 10 TST   [__r0],0x10
    1A80: AF F2    JZ    0x1A73
(0210) 	// Send LSB of address
(0211) 	SPIM_SendTxData(loAddr);
    1A82: 10       PUSH  X
    1A83: 52 02    MOV   A,[X+2]
    1A85: 7C 0A BF LCALL _SPIM_SendTxData
    1A88: 20       POP   X
(0212) 	// It will be almost immediately loaded into the TX shift register, freeing
(0213) 	// up the TX buffer, and the SPIM module will start transmission.
(0214) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1A89: 10       PUSH  X
    1A8A: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1A8D: 20       POP   X
    1A8E: 62 D0 00 MOV   REG[0xD0],0x0
    1A91: 53 5C    MOV   [__r0],A
    1A93: 47 5C 20 TST   [__r0],0x20
    1A96: AF F2    JZ    0x1A89
(0215) 	SPIM_bReadRxData(); // We don't care about this read either
    1A98: 10       PUSH  X
    1A99: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    1A9C: 20       POP   X
    1A9D: 62 D0 00 MOV   REG[0xD0],0x0
(0216) 	
(0217) 	for (i = 0; i < count; ++i) // Loop through the array
    1AA0: 56 00 00 MOV   [X+0],0x0
    1AA3: 80 43    JMP   0x1AE7
(0218) 	{
(0219) 		while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1AA5: 10       PUSH  X
    1AA6: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1AA9: 20       POP   X
    1AAA: 62 D0 00 MOV   REG[0xD0],0x0
    1AAD: 53 5C    MOV   [__r0],A
    1AAF: 47 5C 10 TST   [__r0],0x10
    1AB2: AF F2    JZ    0x1AA5
(0220) 		// Send the byte at index i in string out
(0221) 		SPIM_SendTxData(out[i]);
    1AB4: 52 00    MOV   A,[X+0]
    1AB6: 53 5B    MOV   [__r1],A
    1AB8: 55 5C 00 MOV   [__r0],0x0
    1ABB: 52 FA    MOV   A,[X-6]
    1ABD: 04 5B    ADD   [__r1],A
    1ABF: 52 F9    MOV   A,[X-7]
    1AC1: 0C 5C    ADC   [__r0],A
    1AC3: 51 5C    MOV   A,[__r0]
    1AC5: 60 D4    MOV   REG[0xD4],A
    1AC7: 3E 5B    MVI   A,[__r1]
    1AC9: 10       PUSH  X
    1ACA: 7C 0A BF LCALL _SPIM_SendTxData
    1ACD: 20       POP   X
(0222) 		while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1ACE: 10       PUSH  X
    1ACF: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1AD2: 20       POP   X
    1AD3: 62 D0 00 MOV   REG[0xD0],0x0
    1AD6: 53 5C    MOV   [__r0],A
    1AD8: 47 5C 20 TST   [__r0],0x20
    1ADB: AF F2    JZ    0x1ACE
(0223) 		SPIM_bReadRxData(); // We don't care about this read either
    1ADD: 10       PUSH  X
    1ADE: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    1AE1: 20       POP   X
    1AE2: 62 D0 00 MOV   REG[0xD0],0x0
(0224) 			
(0225) 	}
    1AE5: 77 00    INC   [X+0]
    1AE7: 52 00    MOV   A,[X+0]
    1AE9: 3B F8    CMP   A,[X-8]
    1AEB: CF B9    JC    0x1AA5
(0226) 	
(0227) 	nCS_HIGH;
    1AED: 43 04 04 OR    REG[0x4],0x4
    1AF0: 38 FD    ADD   SP,0xFD
    1AF2: 20       POP   X
    1AF3: 7F       RET   
(0228) }
(0229) 
(0230) // Read "count" bytes starting at address "addr" into array "in"
(0231) // The M8C is limited to 256 byte pages. This limits the maximum
(0232) // array size to 256 bytes, which means that "count" is only useful
(0233) // as a BYTE.
(0234) // NOTE: This function assumes the SRAM has already been put in Sequential Mode
(0235) void SPIRAM_ReadArray(WORD addr, BYTE *in, BYTE count)
(0236) {
_SPIRAM_ReadArray:
  loAddr               --> X+2
  hiAddr               --> X+1
  i                    --> X+0
  count                --> X-8
  in                   --> X-7
  addr                 --> X-5
    1AF4: 10       PUSH  X
    1AF5: 4F       MOV   X,SP
    1AF6: 38 03    ADD   SP,0x3
(0237) 	BYTE hiAddr;
(0238) 	BYTE loAddr;
(0239) 	BYTE i;
(0240) 	
(0241) 	// If some clown tries to write 0 bytes, just return.
(0242) 	// XXX - Always beware of clowns!
(0243) 	if (!count)
    1AF8: 3D F8 00 CMP   [X-8],0x0
    1AFB: B0 03    JNZ   0x1AFF
(0244) 		return;
    1AFD: 80 EC    JMP   0x1BEA
(0245) 	// Break the SRAM word address into two bytes
(0246) 	hiAddr = (BYTE)((addr >> 8) & 0x00ff);
    1AFF: 62 D0 00 MOV   REG[0xD0],0x0
    1B02: 52 FB    MOV   A,[X-5]
    1B04: 54 01    MOV   [X+1],A
(0247) 	loAddr = (BYTE)(addr & 0x00ff);
    1B06: 52 FC    MOV   A,[X-4]
    1B08: 54 02    MOV   [X+2],A
(0248) 	
(0249) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1B0A: 10       PUSH  X
    1B0B: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1B0E: 20       POP   X
    1B0F: 62 D0 00 MOV   REG[0xD0],0x0
    1B12: 53 5C    MOV   [__r0],A
    1B14: 47 5C 10 TST   [__r0],0x10
    1B17: AF F2    JZ    0x1B0A
(0250) 	// SPI transfers begin by bringing CS LOW
(0251) 	nCS_LOW;
    1B19: 41 04 FB AND   REG[0x4],0xFB
(0252) 	// Send the Read command
(0253) 	SPIM_SendTxData(SPIRAM_READ);
    1B1C: 10       PUSH  X
    1B1D: 50 03    MOV   A,0x3
    1B1F: 7C 0A BF LCALL _SPIM_SendTxData
    1B22: 20       POP   X
(0254) 	// It will be almost immediately loaded into the TX shift register, freeing
(0255) 	// up the TX buffer, and the SPIM module will start transmission.
(0256) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1B23: 10       PUSH  X
    1B24: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1B27: 20       POP   X
    1B28: 62 D0 00 MOV   REG[0xD0],0x0
    1B2B: 53 5C    MOV   [__r0],A
    1B2D: 47 5C 10 TST   [__r0],0x10
    1B30: AF F2    JZ    0x1B23
(0257) 	// Prime the TX buffer for the next byte by loading it with the MSB of address while the first byte is still transmitting.
(0258) 	SPIM_SendTxData(hiAddr);
    1B32: 10       PUSH  X
    1B33: 52 01    MOV   A,[X+1]
    1B35: 7C 0A BF LCALL _SPIM_SendTxData
    1B38: 20       POP   X
(0259) 	// Wait for the first TX/RX cycle to finish. We don't care what we read.
(0260) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1B39: 10       PUSH  X
    1B3A: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1B3D: 20       POP   X
    1B3E: 62 D0 00 MOV   REG[0xD0],0x0
    1B41: 53 5C    MOV   [__r0],A
    1B43: 47 5C 20 TST   [__r0],0x20
    1B46: AF F2    JZ    0x1B39
(0261) 	// Reading the data clears the RX_BUFFER_FULL flag, even if we don't want it.
(0262) 	SPIM_bReadRxData();
    1B48: 10       PUSH  X
    1B49: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    1B4C: 20       POP   X
    1B4D: 62 D0 00 MOV   REG[0xD0],0x0
(0263) 	// Wait for the second TX/RX cycle to finish so that we know that the entire
(0264) 	// two byte transaction is finished.
(0265) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1B50: 10       PUSH  X
    1B51: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1B54: 20       POP   X
    1B55: 62 D0 00 MOV   REG[0xD0],0x0
    1B58: 53 5C    MOV   [__r0],A
    1B5A: 47 5C 20 TST   [__r0],0x20
    1B5D: AF F2    JZ    0x1B50
(0266) 	SPIM_bReadRxData(); // We don't care about this read either
    1B5F: 10       PUSH  X
    1B60: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    1B63: 20       POP   X
    1B64: 62 D0 00 MOV   REG[0xD0],0x0
(0267) 	
(0268) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1B67: 10       PUSH  X
    1B68: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1B6B: 20       POP   X
    1B6C: 62 D0 00 MOV   REG[0xD0],0x0
    1B6F: 53 5C    MOV   [__r0],A
    1B71: 47 5C 10 TST   [__r0],0x10
    1B74: AF F2    JZ    0x1B67
(0269) 	// Send LSB of address
(0270) 	SPIM_SendTxData(loAddr);
    1B76: 10       PUSH  X
    1B77: 52 02    MOV   A,[X+2]
    1B79: 7C 0A BF LCALL _SPIM_SendTxData
    1B7C: 20       POP   X
(0271) 	// It will be almost immediately loaded into the TX shift register, freeing
(0272) 	// up the TX buffer, and the SPIM module will start transmission.
(0273) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1B7D: 10       PUSH  X
    1B7E: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1B81: 20       POP   X
    1B82: 62 D0 00 MOV   REG[0xD0],0x0
    1B85: 53 5C    MOV   [__r0],A
    1B87: 47 5C 20 TST   [__r0],0x20
    1B8A: AF F2    JZ    0x1B7D
(0274) 	SPIM_bReadRxData(); // We don't care about this read either
    1B8C: 10       PUSH  X
    1B8D: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    1B90: 20       POP   X
    1B91: 62 D0 00 MOV   REG[0xD0],0x0
(0275) 	
(0276) 	for (i = 0; i < count; ++i) // Loop through count
    1B94: 56 00 00 MOV   [X+0],0x0
    1B97: 80 49    JMP   0x1BE1
(0277) 	{
(0278) 		while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1B99: 10       PUSH  X
    1B9A: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1B9D: 20       POP   X
    1B9E: 62 D0 00 MOV   REG[0xD0],0x0
    1BA1: 53 5C    MOV   [__r0],A
    1BA3: 47 5C 10 TST   [__r0],0x10
    1BA6: AF F2    JZ    0x1B99
(0279) 		// Send dummy byte; we just want to read data
(0280) 		SPIM_SendTxData(SPIRAM_DUMMY_BYTE);
    1BA8: 10       PUSH  X
    1BA9: 50 00    MOV   A,0x0
    1BAB: 7C 0A BF LCALL _SPIM_SendTxData
    1BAE: 20       POP   X
(0281) 		while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1BAF: 10       PUSH  X
    1BB0: 7C 0A C5 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|SPIM_bReadStatus|_bSPIM_ReadStatus
    1BB3: 20       POP   X
    1BB4: 62 D0 00 MOV   REG[0xD0],0x0
    1BB7: 53 5C    MOV   [__r0],A
    1BB9: 47 5C 20 TST   [__r0],0x20
    1BBC: AF F2    JZ    0x1BAF
(0282) 		in[i] = SPIM_bReadRxData(); // Set character in string to be the data read
    1BBE: 10       PUSH  X
    1BBF: 7C 0A C2 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|bSPIM_ReadRxData
    1BC2: 20       POP   X
    1BC3: 62 D0 00 MOV   REG[0xD0],0x0
    1BC6: 53 5C    MOV   [__r0],A
    1BC8: 52 00    MOV   A,[X+0]
    1BCA: 53 59    MOV   [__r3],A
    1BCC: 55 5A 00 MOV   [__r2],0x0
    1BCF: 52 FA    MOV   A,[X-6]
    1BD1: 04 59    ADD   [__r3],A
    1BD3: 52 F9    MOV   A,[X-7]
    1BD5: 0C 5A    ADC   [__r2],A
    1BD7: 51 5A    MOV   A,[__r2]
    1BD9: 60 D5    MOV   REG[0xD5],A
    1BDB: 51 5C    MOV   A,[__r0]
    1BDD: 3F 59    MVI   [__r3],A
(0283) 	}
    1BDF: 77 00    INC   [X+0]
    1BE1: 52 00    MOV   A,[X+0]
    1BE3: 3B F8    CMP   A,[X-8]
    1BE5: CF B3    JC    0x1B99
(0284) 	
(0285) 	nCS_HIGH;
    1BE7: 43 04 04 OR    REG[0x4],0x4
    1BEA: 38 FD    ADD   SP,0xFD
    1BEC: 20       POP   X
    1BED: 7F       RET   
