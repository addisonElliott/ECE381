 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\addis\Desktop\ECE381\INTERR~1\INTERR~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;          test2 -> X+2
 0000           ;           test -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3804              add SP,4
 0004                   .dbline 34
 0004           ; //----------------------------------------------------------------------------
 0004           ; //
 0004           ; // Project: Simple GPIO Interrupt
 0004           ; //
 0004           ; // File: main.c
 0004           ; //
 0004           ; // Description: This PSoC project configures Port1[0] as an output to drive
 0004           ; //   an LED and configures Port1[4] as an input that generates an interrupt
 0004           ; //   on the rising edge. At each interrupt Port1[0] is toggled, thereby turning
 0004           ; //   the LED on/off with each switch press.
 0004           ; //
 0004           ; // Ports:
 0004           ; //   Port1[0]: Name=LED, Drive=Strong
 0004           ; //   Port1[4]: Name=SWITCH, Drive=High Z, Interrupt=RisingEdge
 0004           ; //
 0004           ; // Author: Dr. Brad Noble
 0004           ; // Date: 1-Sep-2009
 0004           ; //
 0004           ; // Edited: Matthew Clark
 0004           ; // Date: 29-July-2010
 0004           ; // 
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>                      // part specific constants and macros
 0004           ; #include "PSoCAPI.h"          // PSoC API definitions for all User Modules
 0004           ; #include "PSoCGPIOINT.h"      // We have to include this file manually for GPIO
 0004           ; 
 0004           ; // A compiler directive that tells the C compiler to make PSoC_GPIO_ISR_C a
 0004           ; // function that handles interrupts. This means it replaces ret at the end of // the function with reti. Refer to PSoC Technical Reference Manual for more
 0004           ; // information.
 0004           ; #pragma interrupt_handler PSoC_GPIO_ISR_C
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 35
 0004           ;       int test = LED1_Data_ADDR & LED1_MASK;
 0004 5D04              mov A,REG[0x4]
 0006 62D000            mov REG[0xd0],>__r0
 0009 2101              and A,1
 000B 5401              mov [X+1],A
 000D 560000            mov [X+0],0
 0010                   .dbline 39
 0010           ;       int test2;
 0010           ;       
 0010           ;       // Enable global interrupts (see m8c.h)
 0010           ; M8C_EnableGInt;
 0010 7101                      or  F, 01h
 0012           
 0012                   .dbline 41
 0012           ;       // Enable GPIO Interrupts (see m8c.h)
 0012           ;       M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO);
 0012 43E020            or REG[0xe0],32
 0015           L2:
 0015                   .dbline 44
 0015           ;       
 0015           ;       // Spin here forever
 0015           ;       while(1);
 0015           L3:
 0015                   .dbline 44
 0015 8FFF              xjmp L2
 0017           X0:
 0017                   .dbline -2
 0017           L1:
 0017 38FC              add SP,-4
 0019 20                pop X
 001A                   .dbline 0 ; func end
 001A 8FFF              jmp .
 001C                   .dbsym l test2 2 I
 001C                   .dbsym l test 0 I
 001C                   .dbend
 001C                   .dbfunc e PSoC_GPIO_ISR_C _PSoC_GPIO_ISR_C fV
 001C           _PSoC_GPIO_ISR_C::
 001C                   .dbline -1
 001C 08                push A
 001D                   .dbline 52
 001D           ; }
 001D           ; 
 001D           ; // The interrupt vector for GPIO interrupts is usually handled in assembly
 001D           ; // by function PSoC_GPIO_ISR located in PSoCGPIOINT.asm. Since we changed the // corresponding line in boot.asm, this function is called instead.
 001D           ; // Note: This C function is only called when a GPIO interrupt is received
 001D           ; // and when this C-function is finished it will return-from-interrupt (reti).
 001D           ; void PSoC_GPIO_ISR_C(void)
 001D           ; {
 001D                   .dbline 54
 001D           ;       // Toggle LED1
 001D           ;       LED1_Data_ADDR ^= LED1_MASK;
 001D 450401            xor REG[0x4],1
 0020                   .dbline -2
 0020           L5:
 0020 18                pop A
 0021                   .dbline 0 ; func end
 0021 7E                reti
 0022                   .dbend
