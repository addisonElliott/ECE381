 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Jacob\Desktop\ECE381\NRF24L~1\NRF24L~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;         status -> X+21
 0000           ;           temp -> X+17
 0000           ;        voltage -> X+13
 0000           ;            buf -> X+4
 0000           ;           fstr -> X+2
 0000           ;           cptr -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3817              add SP,23
 0004                   .dbline 24
 0004           ; //----------------------------------------------------------------------------
 0004           ; //
 0004           ; //    Example Code for PSoC Interfacing with the nrf24L01+ SPI Radios
 0004           ; //
 0004           ; //    Author: Tim York
 0004           ; //
 0004           ; //    Date: 03-22-2016
 0004           ; //
 0004           ; //    Description: This code contains basic blocks for writing to and reading
 0004           ; //    from the configuration register on the nrf24L01+ radios. This code should
 0004           ; //    be expanded to include full transmission and receiving.
 0004           ; //    
 0004           ; //----------------------------------------------------------------------------
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include <stdlib.h>
 0004           ; #include <stdio.h>
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "PSoCGPIOINT.h"
 0004           ; #include "nrf24L01_API.h"
 0004           ; #define SCALE_FACTOR 0.000079345703125        //This is the scale factor used in the Analog to Digital conversion
 0004           ;                                                                               //(scale factor=(RefHIGH-RefLOW)/(2^resolution * PGA_GAIN))
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 32
 0004           ;       char buf[9]; // Temporary string to contain 8 bytes while sending to wireless module
 0004           ;       float voltage;
 0004           ;       float temp;
 0004           ;       char *fstr;
 0004           ;       char *cptr;
 0004           ;       int status;
 0004           ;       
 0004           ;       M8C_EnableGInt; // Enable Global Interrupts
 0004 7101                      or  F, 01h
 0006           
 0006                   .dbline 33
 0006           ;       M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO);      
 0006 43E020            or REG[0xe0],32
 0009                   .dbline 35
 0009           ;       
 0009           ;       SleepTimer_EnableInt();  // Enable user module interrupts
 0009 10                push X
 000A 7C0000            xcall _SleepTimer_EnableInt
 000D                   .dbline 36
 000D           ;       SleepTimer_SetInterval(SleepTimer_1_HZ); // Set timer interval for 1Hz  
 000D 5018              mov A,24
 000F 7C0000            xcall _SleepTimer_SetInterval
 0012 20                pop X
 0013                   .dbline 38
 0013           ;       
 0013           ;       CSN_HIGH; // Make sure CS is high before beginning
 0013                   .dbline 38
 0013 430404            or REG[0x4],4
 0016                   .dbline 38
 0016                   .dbline 38
 0016                   .dbline 41
 0016           ;       
 0016           ;       // Start the user modules
 0016           ;       LCD_Start();
 0016 10                push X
 0017 7C0000            xcall _LCD_Start
 001A                   .dbline 42
 001A           ;       SPIM_Start(SPIM_SPIM_MODE_0 | SPIM_SPIM_MSB_FIRST);
 001A 5000              mov A,0
 001C 7C0000            xcall _SPIM_Start
 001F                   .dbline 43
 001F           ;       SleepTimer_Start();
 001F 7C0000            xcall _SleepTimer_Start
 0022                   .dbline 44
 0022           ;       PGA_Start(PGA_HIGHPOWER); // Start PGA in high power mod
 0022 5003              mov A,3
 0024 7C0000            xcall _PGA_Start
 0027                   .dbline 45
 0027           ;       ADCINC_Start(ADCINC_HIGHPOWER); // Start ADCINC in high power mode
 0027 5003              mov A,3
 0029 7C0000            xcall _ADCINC_Start
 002C 20                pop X
 002D                   .dbline 47
 002D           ;       
 002D           ;       CE_HIGH; //Enable the nrf24 radio
 002D                   .dbline 47
 002D 430440            or REG[0x4],64
 0030                   .dbline 47
 0030                   .dbline 47
 0030                   .dbline 48
 0030           ;       nrfWriteRegister(NRF_WRITE_SETUP_RETR, 0xFF); // Setup automatic retransmission: 4000uS delay, 15 retransmit count
 0030 50FF              mov A,-1
 0032 08                push A
 0033 5024              mov A,36
 0035 08                push A
 0036 7C0000            xcall _nrfWriteRegister
 0039 38FE              add SP,-2
 003B                   .dbline 49
 003B           ;       nrfWriteRegister(NRF_WRITE_RF_CH, 0x60); // Sets RF Channel to 0x60 
 003B 5060              mov A,96
 003D 08                push A
 003E 5025              mov A,37
 0040 08                push A
 0041 7C0000            xcall _nrfWriteRegister
 0044                   .dbline 50
 0044           ;       nrfWriteRegister(NRF_WRITE_RF_SETUP, 0x26); // Sets RF output power to 0dBm, data rate to 250kbps 
 0044 5026              mov A,38
 0046 08                push A
 0047 08                push A
 0048 7C0000            xcall _nrfWriteRegister
 004B 38FC              add SP,-4
 004D                   .dbline 51
 004D           ;       buf[0] = buf[1] = buf[2] = buf[3] = buf[4] = 0xC2;
 004D 5608C2            mov [X+8],-62
 0050 5607C2            mov [X+7],-62
 0053 5606C2            mov [X+6],-62
 0056 5605C2            mov [X+5],-62
 0059 5604C2            mov [X+4],-62
 005C                   .dbline 52
 005C           ;       nrfWriteAddress(NRF_WRITE_TX_ADDR, buf); // Sets TX address to 0xC2C2C2C2C2 (transmit address)
 005C 62D000            mov REG[0xd0],>__r0
 005F 5A00              mov [__r1],X
 0061 060004            add [__r1],4
 0064 5007              mov A,7
 0066 08                push A
 0067 5100              mov A,[__r1]
 0069 08                push A
 006A 5030              mov A,48
 006C 08                push A
 006D 7C0000            xcall _nrfWriteAddress
 0070                   .dbline 53
 0070           ;       buf[0] = buf[1] = buf[2] = buf[3] = buf[4] = 0xC2;
 0070 5608C2            mov [X+8],-62
 0073 5607C2            mov [X+7],-62
 0076 5606C2            mov [X+6],-62
 0079 5605C2            mov [X+5],-62
 007C 5604C2            mov [X+4],-62
 007F                   .dbline 54
 007F           ;       nrfWriteAddress(NRF_WRITE_RX_ADDR_P0, buf); // Sets receive pipe 0 address to 0xC2C2C2C2C2 (also transmit address)
 007F 62D000            mov REG[0xd0],>__r0
 0082 5A00              mov [__r1],X
 0084 060004            add [__r1],4
 0087 5007              mov A,7
 0089 08                push A
 008A 5100              mov A,[__r1]
 008C 08                push A
 008D 502A              mov A,42
 008F 08                push A
 0090 7C0000            xcall _nrfWriteAddress
 0093 38FA              add SP,-6
 0095                   .dbline 55
 0095           ;       buf[0] = buf[1] = buf[2] = buf[3] = buf[4] = 0xE7;
 0095 5608E7            mov [X+8],-25
 0098 5607E7            mov [X+7],-25
 009B 5606E7            mov [X+6],-25
 009E 5605E7            mov [X+5],-25
 00A1 5604E7            mov [X+4],-25
 00A4                   .dbline 56
 00A4           ;       nrfWriteAddress(NRF_WRITE_RX_ADDR_P1, buf); // Sets receive pipe 1 address to 0xE7E7E7E7E7 (receive address)
 00A4 62D000            mov REG[0xd0],>__r0
 00A7 5A00              mov [__r1],X
 00A9 060004            add [__r1],4
 00AC 5007              mov A,7
 00AE 08                push A
 00AF 5100              mov A,[__r1]
 00B1 08                push A
 00B2 502B              mov A,43
 00B4 08                push A
 00B5 7C0000            xcall _nrfWriteAddress
 00B8                   .dbline 57
 00B8           ;       nrfWriteRegister(NRF_WRITE_PW_P0, 0x08); // Sets payload size to 8 bytes at transmit address
 00B8 5008              mov A,8
 00BA 08                push A
 00BB 5031              mov A,49
 00BD 08                push A
 00BE 7C0000            xcall _nrfWriteRegister
 00C1 38FB              add SP,-5
 00C3                   .dbline 58
 00C3           ;       nrfWriteRegister(NRF_WRITE_PW_P1, 0x08); // Sets payload size to 8 bytes are receive address
 00C3 5008              mov A,8
 00C5 08                push A
 00C6 5032              mov A,50
 00C8 08                push A
 00C9 7C0000            xcall _nrfWriteRegister
 00CC                   .dbline 59
 00CC           ;       nrfWriteRegister(NRF_WRITE_EN_AA, 0xFF); // Enable auto-acknowledge on all data pipes
 00CC 50FF              mov A,-1
 00CE 08                push A
 00CF 5021              mov A,33
 00D1 08                push A
 00D2 7C0000            xcall _nrfWriteRegister
 00D5 38FC              add SP,-4
 00D7                   .dbline 60
 00D7           ;       nrfWriteRegister(NRF_WRITE_EN_RXADDR, 0x03); // Enable data pipes 0 and 1
 00D7 5003              mov A,3
 00D9 08                push A
 00DA 5022              mov A,34
 00DC 08                push A
 00DD 7C0000            xcall _nrfWriteRegister
 00E0                   .dbline 61
 00E0           ;       nrfWriteRegister(NRF_WRITE_CONFIG, 0x0E); // Setup config: power on, TX mode, CRC 2-byte mode
 00E0 500E              mov A,14
 00E2 08                push A
 00E3 5020              mov A,32
 00E5 08                push A
 00E6 7C0000            xcall _nrfWriteRegister
 00E9 38FC              add SP,-4
 00EB 81DD              xjmp L15
 00ED           L14:
 00ED                   .dbline 64
 00ED           ;       
 00ED           ;       while (1) 
 00ED           ;       {
 00ED                   .dbline 65
 00ED           ;               SleepTimer_SyncWait(1, SleepTimer_WAIT_RELOAD); // Wait for about 1 second
 00ED 10                push X
 00EE 5700              mov X,0
 00F0 5001              mov A,1
 00F2 7C0000            xcall _SleepTimer_SyncWait
 00F5                   .dbline 67
 00F5           ;               
 00F5           ;               ADCINC_GetSamples(1);
 00F5 5001              mov A,1
 00F7 7C0000            xcall _ADCINC_GetSamples
 00FA 20                pop X
 00FB           L17:
 00FB                   .dbline 68
 00FB           ;               while (ADCINC_fIsDataAvailable() == 0); // Wait for data to be ready
 00FB           L18:
 00FB                   .dbline 68
 00FB 10                push X
 00FC 7C0000            xcall _ADCINC_fIsDataAvailable
 00FF 20                pop X
 0100 62D000            mov REG[0xd0],>__r0
 0103 3900              cmp A,0
 0105 AFF5              jz L17
 0107                   .dbline 69
 0107           ;               voltage = SCALE_FACTOR * (ADCINC_iClearFlagGetData()); // Get data and clear flag
 0107 10                push X
 0108 7C0000            xcall _ADCINC_iClearFlagGetData
 010B 62D000            mov REG[0xd0],>__r0
 010E 5A00              mov [__r0],X
 0110 20                pop X
 0111 5300              mov [__r3],A
 0113 5100              mov A,[__r0]
 0115 5300              mov [__r2],A
 0117 470080            tst [__r2],-128
 011A A009              jz X1
 011C 5500FF            mov [__r1],-1
 011F 5500FF            mov [__r0],-1
 0122 800A              jmp X2
 0124           X1:
 0124 62D000            mov REG[0xd0],>__r0
 0127 550000            mov [__r1],0
 012A 550000            mov [__r0],0
 012D           X2:
 012D 62D000            mov REG[0xd0],>__r0
 0130 5100              mov A,[__r0]
 0132 08                push A
 0133 5100              mov A,[__r1]
 0135 08                push A
 0136 5100              mov A,[__r2]
 0138 08                push A
 0139 5100              mov A,[__r3]
 013B 08                push A
 013C 7C0000            xcall __long2fp
 013F 18                pop A
 0140 5300              mov [__r3],A
 0142 18                pop A
 0143 5300              mov [__r2],A
 0145 18                pop A
 0146 5300              mov [__r1],A
 0148 18                pop A
 0149 08                push A
 014A 5100              mov A,[__r1]
 014C 08                push A
 014D 5100              mov A,[__r2]
 014F 08                push A
 0150 5100              mov A,[__r3]
 0152 08                push A
 0153 5038              mov A,56
 0155 08                push A
 0156 50A6              mov A,-90
 0158 08                push A
 0159 5066              mov A,102
 015B 08                push A
 015C 08                push A
 015D 7C0000            xcall __fpmul
 0160 18                pop A
 0161 5410              mov [X+16],A
 0163 18                pop A
 0164 540F              mov [X+15],A
 0166 18                pop A
 0167 540E              mov [X+14],A
 0169 18                pop A
 016A 540D              mov [X+13],A
 016C 38FC              add SP,-4
 016E                   .dbline 70
 016E           ;               temp = voltage / 0.01f;
 016E 503C              mov A,60
 0170 08                push A
 0171 5023              mov A,35
 0173 08                push A
 0174 50D7              mov A,-41
 0176 08                push A
 0177 500A              mov A,10
 0179 08                push A
 017A 520D              mov A,[X+13]
 017C 08                push A
 017D 520E              mov A,[X+14]
 017F 08                push A
 0180 520F              mov A,[X+15]
 0182 08                push A
 0183 5210              mov A,[X+16]
 0185 08                push A
 0186 7C0000            xcall __fpdiv
 0189 18                pop A
 018A 5414              mov [X+20],A
 018C 18                pop A
 018D 5413              mov [X+19],A
 018F 18                pop A
 0190 5412              mov [X+18],A
 0192 18                pop A
 0193 5411              mov [X+17],A
 0195 38FC              add SP,-4
 0197                   .dbline 74
 0197           ;               
 0197           ;               // Round and and truncate the float string at the hundredths position.
 0197           ;               // Note: This only rounds the string and not the original float.
 0197           ;               fstr = ftoa(temp + 0.05, &status);
 0197 5A00              mov [__r1],X
 0199 060015            add [__r1],21
 019C 5007              mov A,7
 019E 08                push A
 019F 5100              mov A,[__r1]
 01A1 08                push A
 01A2 503D              mov A,61
 01A4 08                push A
 01A5 504C              mov A,76
 01A7 08                push A
 01A8 50CC              mov A,-52
 01AA 08                push A
 01AB 50CD              mov A,-51
 01AD 08                push A
 01AE 5211              mov A,[X+17]
 01B0 08                push A
 01B1 5212              mov A,[X+18]
 01B3 08                push A
 01B4 5213              mov A,[X+19]
 01B6 08                push A
 01B7 5214              mov A,[X+20]
 01B9 08                push A
 01BA 7C0000            xcall __fpadd
 01BD 18                pop A
 01BE 5300              mov [__r3],A
 01C0 18                pop A
 01C1 5300              mov [__r2],A
 01C3 18                pop A
 01C4 5300              mov [__r1],A
 01C6 18                pop A
 01C7 38FC              add SP,-4
 01C9 08                push A
 01CA 5100              mov A,[__r1]
 01CC 08                push A
 01CD 5100              mov A,[__r2]
 01CF 08                push A
 01D0 5100              mov A,[__r3]
 01D2 08                push A
 01D3 7C0000            xcall _ftoa
 01D6 38FA              add SP,-6
 01D8 62D000            mov REG[0xd0],>__r0
 01DB 5100              mov A,[__r1]
 01DD 5403              mov [X+3],A
 01DF 5100              mov A,[__r0]
 01E1 5402              mov [X+2],A
 01E3                   .dbline 75
 01E3           ;               cptr = fstr;
 01E3 5203              mov A,[X+3]
 01E5 5401              mov [X+1],A
 01E7 5202              mov A,[X+2]
 01E9 5400              mov [X+0],A
 01EB 804E              xjmp L21
 01ED           L20:
 01ED                   .dbline 76
 01ED           ;               while(*cptr > 0x0) {
 01ED                   .dbline 77
 01ED           ;                       if (*cptr == '.') {
 01ED 62D000            mov REG[0xd0],>__r0
 01F0 5201              mov A,[X+1]
 01F2 5300              mov [__r1],A
 01F4 5200              mov A,[X+0]
 01F6 60D4              mov REG[0xd4],A
 01F8 3E00              mvi A,[__r1]
 01FA 392E              cmp A,46
 01FC B038              jnz L23
 01FE                   .dbline 78
 01FE           ;                               if (*(cptr+1) == 0x0) {
 01FE                   .dbline 78
 01FE 5201              mov A,[X+1]
 0200 0101              add A,1
 0202 5300              mov [__r1],A
 0204 5200              mov A,[X+0]
 0206 0900              adc A,0
 0208 60D4              mov REG[0xd4],A
 020A 3E00              mvi A,[__r1]
 020C 3900              cmp A,0
 020E B011              jnz L25
 0210                   .dbline 79
 0210           ;                                       *(cptr+1) = '0';
 0210                   .dbline 79
 0210 5201              mov A,[X+1]
 0212 0101              add A,1
 0214 5300              mov [__r1],A
 0216 5200              mov A,[X+0]
 0218 0900              adc A,0
 021A 60D5              mov REG[0xd5],A
 021C 5030              mov A,48
 021E 3F00              mvi [__r1],A
 0220                   .dbline 80
 0220           ;                               }
 0220           L25:
 0220                   .dbline 81
 0220           ;                               *(cptr+2) = 0x0;
 0220 62D000            mov REG[0xd0],>__r0
 0223 5201              mov A,[X+1]
 0225 0102              add A,2
 0227 5300              mov [__r1],A
 0229 5200              mov A,[X+0]
 022B 0900              adc A,0
 022D 60D5              mov REG[0xd5],A
 022F 5000              mov A,0
 0231 3F00              mvi [__r1],A
 0233                   .dbline 82
 0233           ;                               break;
 0233 801B              xjmp L22
 0235           L23:
 0235                   .dbline 84
 0235           ;                       }
 0235           ;                       cptr++;
 0235 7701              inc [X+1]
 0237 0F0000            adc [X+0],0
 023A                   .dbline 85
 023A           ;               }
 023A           L21:
 023A                   .dbline 76
 023A 62D000            mov REG[0xd0],>__r0
 023D 5201              mov A,[X+1]
 023F 5300              mov [__r1],A
 0241 5200              mov A,[X+0]
 0243 60D4              mov REG[0xd4],A
 0245 3E00              mvi A,[__r1]
 0247 5300              mov [__r0],A
 0249 5000              mov A,0
 024B 3A00              cmp A,[__r0]
 024D CF9F              jc L20
 024F           X3:
 024F           L22:
 024F                   .dbline 87
 024F           ; 
 024F           ;               csprintf(buf, "I: %s",fstr);
 024F 5202              mov A,[X+2]
 0251 08                push A
 0252 5203              mov A,[X+3]
 0254 08                push A
 0255 5009              mov A,>L27
 0257 08                push A
 0258 5009              mov A,<L27
 025A 08                push A
 025B 62D000            mov REG[0xd0],>__r0
 025E 5A00              mov [__r1],X
 0260 060004            add [__r1],4
 0263 5007              mov A,7
 0265 08                push A
 0266 5100              mov A,[__r1]
 0268 08                push A
 0269 7C0000            xcall _csprintf
 026C                   .dbline 88
 026C           ;               nrfSendData(buf);
 026C 62D000            mov REG[0xd0],>__r0
 026F 5A00              mov [__r1],X
 0271 060004            add [__r1],4
 0274 5007              mov A,7
 0276 08                push A
 0277 5100              mov A,[__r1]
 0279 08                push A
 027A 7C0000            xcall _nrfSendData
 027D 38F8              add SP,-8
 027F                   .dbline 90
 027F           ;               
 027F           ;               LCD_Control(LCD_DISP_CLEAR_HOME);
 027F 10                push X
 0280 5001              mov A,1
 0282 7C0000            xcall _LCD_Control
 0285                   .dbline 91
 0285           ;               LCD_Position(1,0);
 0285 5700              mov X,0
 0287 5001              mov A,1
 0289 7C0000            xcall _LCD_Position
 028C                   .dbline 92
 028C           ;               LCD_PrCString("Temp: ");
 028C 5002              mov A,>L28
 028E 08                push A
 028F 5002              mov A,<L28
 0291 5C                mov X,A
 0292 18                pop A
 0293 7C0000            xcall _LCD_PrCString
 0296 20                pop X
 0297                   .dbline 93
 0297           ;               LCD_PrString(fstr);
 0297 10                push X
 0298 5202              mov A,[X+2]
 029A 08                push A
 029B 5203              mov A,[X+3]
 029D 5C                mov X,A
 029E 18                pop A
 029F 7C0000            xcall _LCD_PrString
 02A2                   .dbline 94
 02A2           ;               LCD_WriteData(0xDF);
 02A2 50DF              mov A,-33
 02A4 7C0000            xcall _LCD_WriteData
 02A7                   .dbline 95
 02A7           ;               LCD_PrCString("F");
 02A7 5000              mov A,>L29
 02A9 08                push A
 02AA 5000              mov A,<L29
 02AC 5C                mov X,A
 02AD 18                pop A
 02AE 7C0000            xcall _LCD_PrCString
 02B1 20                pop X
 02B2           L30:
 02B2                   .dbline 97
 02B2           ;               
 02B2           ;               while (IRQ_Data_ADDR & IRQ_MASK);
 02B2           L31:
 02B2                   .dbline 97
 02B2 5D04              mov A,REG[0x4]
 02B4 62D000            mov REG[0xd0],>__r0
 02B7 5300              mov [__r0],A
 02B9 470080            tst [__r0],-128
 02BC BFF5              jnz L30
 02BE                   .dbline 98
 02BE           ;               nrfWriteRegister(NRF_WRITE_STATUS, 0x7E);
 02BE 507E              mov A,126
 02C0 08                push A
 02C1 5027              mov A,39
 02C3 08                push A
 02C4 7C0000            xcall _nrfWriteRegister
 02C7 38FE              add SP,-2
 02C9                   .dbline 99
 02C9           ;       }
 02C9           L15:
 02C9                   .dbline 63
 02C9 8E23              xjmp L14
 02CB           X0:
 02CB                   .dbline -2
 02CB           L1:
 02CB 38E9              add SP,-23
 02CD 20                pop X
 02CE                   .dbline 0 ; func end
 02CE 8FFF              jmp .
 02D0                   .dbsym l status 21 I
 02D0                   .dbsym l temp 17 D
 02D0                   .dbsym l voltage 13 D
 02D0                   .dbsym l buf 4 A[9:9]c
 02D0                   .dbsym l fstr 2 pc
 02D0                   .dbsym l cptr 0 pc
 02D0                   .dbend
                        .area lit(rom, con, rel, lit)
 0000           L29:
 0000 4600              .byte 'F,0
 0002           L28:
 0002 54656D703A2000    .byte 'T,'e,'m,'p,58,32,0
 0009           L27:
 0009 493A20257300      .byte 'I,58,32,37,'s,0
