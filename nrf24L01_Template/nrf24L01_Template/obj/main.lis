 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\addis\Desktop\ECE381\NRF24L~1\NRF24L~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;            buf -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3809              add SP,9
 0004                   .dbline 22
 0004           ; //----------------------------------------------------------------------------
 0004           ; //
 0004           ; //    Example Code for PSoC Interfacing with the nrf24L01+ SPI Radios
 0004           ; //
 0004           ; //    Author: Tim York
 0004           ; //
 0004           ; //    Date: 03-22-2016
 0004           ; //
 0004           ; //    Description: This code contains basic blocks for writing to and reading
 0004           ; //    from the configuration register on the nrf24L01+ radios. This code should
 0004           ; //    be expanded to include full transmission and receiving.
 0004           ; //    
 0004           ; //----------------------------------------------------------------------------
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include <stdlib.h>
 0004           ; #include <stdio.h>
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "PSoCGPIOINT.h"
 0004           ; #include "nrf24L01_API.h"
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 25
 0004           ;       char buf[9]; // Temporary string to contain 8 bytes while sending to wireless module
 0004           ;       
 0004           ;       M8C_EnableGInt; // Enable Global Interrupts
 0004 7101                      or  F, 01h
 0006           
 0006                   .dbline 26
 0006           ;       M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO);      
 0006 43E020            or REG[0xe0],32
 0009                   .dbline 28
 0009           ;       
 0009           ;       SleepTimer_EnableInt();  // Enable user module interrupts
 0009 10                push X
 000A 7C0000            xcall _SleepTimer_EnableInt
 000D                   .dbline 29
 000D           ;       SleepTimer_SetInterval(SleepTimer_1_HZ); // Set timer interval for 1Hz  
 000D 5018              mov A,24
 000F 7C0000            xcall _SleepTimer_SetInterval
 0012 20                pop X
 0013                   .dbline 31
 0013           ;       
 0013           ;       CSN_HIGH; // Make sure CS is high before beginning
 0013                   .dbline 31
 0013 430404            or REG[0x4],4
 0016                   .dbline 31
 0016                   .dbline 31
 0016                   .dbline 34
 0016           ;       
 0016           ;       // Start the user modules
 0016           ;       LCD_Start();
 0016 10                push X
 0017 7C0000            xcall _LCD_Start
 001A                   .dbline 35
 001A           ;       SPIM_Start(SPIM_SPIM_MODE_0 | SPIM_SPIM_MSB_FIRST);
 001A 5000              mov A,0
 001C 7C0000            xcall _SPIM_Start
 001F                   .dbline 36
 001F           ;       SleepTimer_Start();
 001F 7C0000            xcall _SleepTimer_Start
 0022 20                pop X
 0023                   .dbline 38
 0023           ;       
 0023           ;       CE_HIGH; //Enable the nrf24 radio
 0023                   .dbline 38
 0023 430440            or REG[0x4],64
 0026                   .dbline 38
 0026                   .dbline 38
 0026                   .dbline 39
 0026           ;       nrfWriteRegister(NRF_WRITE_SETUP_RETR, 0xFF); // Setup automatic retransmission: 4000uS delay, 15 retransmit count
 0026 50FF              mov A,-1
 0028 08                push A
 0029 5024              mov A,36
 002B 08                push A
 002C 7C0000            xcall _nrfWriteRegister
 002F 38FE              add SP,-2
 0031                   .dbline 40
 0031           ;       nrfWriteRegister(NRF_WRITE_RF_CH, 0x60); // Sets RF Channel to 0x60 
 0031 5060              mov A,96
 0033 08                push A
 0034 5025              mov A,37
 0036 08                push A
 0037 7C0000            xcall _nrfWriteRegister
 003A                   .dbline 41
 003A           ;       nrfWriteRegister(NRF_WRITE_RF_SETUP, 0x26); // Sets RF output power to 0dBm, data rate to 250kbps 
 003A 5026              mov A,38
 003C 08                push A
 003D 08                push A
 003E 7C0000            xcall _nrfWriteRegister
 0041 38FC              add SP,-4
 0043                   .dbline 42
 0043           ;       nrfWriteAddress(NRF_WRITE_TX_ADDR, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2); // Sets TX address to 0xC2C2C2C2C2 (transmit address)
 0043 5000              mov A,0
 0045 08                push A
 0046 50C2              mov A,-62
 0048 08                push A
 0049 5000              mov A,0
 004B 08                push A
 004C 50C2              mov A,-62
 004E 08                push A
 004F 5000              mov A,0
 0051 08                push A
 0052 50C2              mov A,-62
 0054 08                push A
 0055 5000              mov A,0
 0057 08                push A
 0058 50C2              mov A,-62
 005A 08                push A
 005B 5000              mov A,0
 005D 08                push A
 005E 50C2              mov A,-62
 0060 08                push A
 0061 5030              mov A,48
 0063 08                push A
 0064 7C0000            xcall _nrfWriteAddress
 0067                   .dbline 43
 0067           ;       nrfWriteAddress(NRF_WRITE_RX_ADDR_P0, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2); // Sets receive pipe 0 address to 0xC2C2C2C2C2 (also transmit address)
 0067 5000              mov A,0
 0069 08                push A
 006A 50C2              mov A,-62
 006C 08                push A
 006D 5000              mov A,0
 006F 08                push A
 0070 50C2              mov A,-62
 0072 08                push A
 0073 5000              mov A,0
 0075 08                push A
 0076 50C2              mov A,-62
 0078 08                push A
 0079 5000              mov A,0
 007B 08                push A
 007C 50C2              mov A,-62
 007E 08                push A
 007F 5000              mov A,0
 0081 08                push A
 0082 50C2              mov A,-62
 0084 08                push A
 0085 502A              mov A,42
 0087 08                push A
 0088 7C0000            xcall _nrfWriteAddress
 008B 38EA              add SP,-22
 008D                   .dbline 44
 008D           ;       nrfWriteAddress(NRF_WRITE_RX_ADDR_P1, 0xE7, 0xE7, 0xE7, 0xE7, 0xE7); // Sets receive pipe 1 address to 0xE7E7E7E7E7 (receive address)
 008D 5000              mov A,0
 008F 08                push A
 0090 50E7              mov A,-25
 0092 08                push A
 0093 5000              mov A,0
 0095 08                push A
 0096 50E7              mov A,-25
 0098 08                push A
 0099 5000              mov A,0
 009B 08                push A
 009C 50E7              mov A,-25
 009E 08                push A
 009F 5000              mov A,0
 00A1 08                push A
 00A2 50E7              mov A,-25
 00A4 08                push A
 00A5 5000              mov A,0
 00A7 08                push A
 00A8 50E7              mov A,-25
 00AA 08                push A
 00AB 502B              mov A,43
 00AD 08                push A
 00AE 7C0000            xcall _nrfWriteAddress
 00B1                   .dbline 45
 00B1           ;       nrfWriteRegister(NRF_WRITE_PW_P0, 0x08); // Sets payload size to 8 bytes at transmit address
 00B1 5008              mov A,8
 00B3 08                push A
 00B4 5031              mov A,49
 00B6 08                push A
 00B7 7C0000            xcall _nrfWriteRegister
 00BA 38F3              add SP,-13
 00BC                   .dbline 46
 00BC           ;       nrfWriteRegister(NRF_WRITE_PW_P1, 0x08); // Sets payload size to 8 bytes are receive address
 00BC 5008              mov A,8
 00BE 08                push A
 00BF 5032              mov A,50
 00C1 08                push A
 00C2 7C0000            xcall _nrfWriteRegister
 00C5                   .dbline 47
 00C5           ;       nrfWriteRegister(NRF_WRITE_EN_AA, 0xFF); // Enable auto-acknowledge on all data pipes
 00C5 50FF              mov A,-1
 00C7 08                push A
 00C8 5021              mov A,33
 00CA 08                push A
 00CB 7C0000            xcall _nrfWriteRegister
 00CE 38FC              add SP,-4
 00D0                   .dbline 48
 00D0           ;       nrfWriteRegister(NRF_WRITE_EN_RXADDR, 0x03); // Enable data pipes 0 and 1
 00D0 5003              mov A,3
 00D2 08                push A
 00D3 5022              mov A,34
 00D5 08                push A
 00D6 7C0000            xcall _nrfWriteRegister
 00D9                   .dbline 49
 00D9           ;       nrfWriteRegister(NRF_WRITE_CONFIG, 0x0E); // Setup config: power on, TX mode, CRC 2-byte mode
 00D9 500E              mov A,14
 00DB 08                push A
 00DC 5020              mov A,32
 00DE 08                push A
 00DF 7C0000            xcall _nrfWriteRegister
 00E2 38FC              add SP,-4
 00E4 8066              xjmp L3
 00E6           L2:
 00E6                   .dbline 52
 00E6           ;       
 00E6           ;       while (1) 
 00E6           ;       {
 00E6                   .dbline 53
 00E6           ;               SleepTimer_SyncWait(10, SleepTimer_WAIT_RELOAD); // Wait for about 1 second
 00E6 10                push X
 00E7 5700              mov X,0
 00E9 500A              mov A,10
 00EB 7C0000            xcall _SleepTimer_SyncWait
 00EE                   .dbline 55
 00EE           ;               
 00EE           ;               LCD_Control(LCD_DISP_CLEAR_HOME);
 00EE 5001              mov A,1
 00F0 7C0000            xcall _LCD_Control
 00F3                   .dbline 56
 00F3           ;               LCD_Position(0, 0);
 00F3 5000              mov A,0
 00F5 5700              mov X,0
 00F7 7C0000            xcall _LCD_Position
 00FA                   .dbline 57
 00FA           ;               LCD_PrCString("Send");
 00FA 500E              mov A,>L5
 00FC 08                push A
 00FD 500E              mov A,<L5
 00FF 5C                mov X,A
 0100 18                pop A
 0101 7C0000            xcall _LCD_PrCString
 0104 20                pop X
 0105                   .dbline 58
 0105           ;               csprintf(buf, "9: 123.4");
 0105 5005              mov A,>L6
 0107 08                push A
 0108 5005              mov A,<L6
 010A 08                push A
 010B 62D000            mov REG[0xd0],>__r0
 010E 5007              mov A,7
 0110 08                push A
 0111 10                push X
 0112 7C0000            xcall _csprintf
 0115                   .dbline 59
 0115           ;               nrfSendData(buf);
 0115 62D000            mov REG[0xd0],>__r0
 0118 5007              mov A,7
 011A 08                push A
 011B 10                push X
 011C 7C0000            xcall _nrfSendData
 011F 38FA              add SP,-6
 0121           L7:
 0121                   .dbline 61
 0121           ;               
 0121           ;               while (IRQ_Data_ADDR & IRQ_MASK);
 0121           L8:
 0121                   .dbline 61
 0121 5D04              mov A,REG[0x4]
 0123 62D000            mov REG[0xd0],>__r0
 0126 5300              mov [__r0],A
 0128 470080            tst [__r0],-128
 012B BFF5              jnz L7
 012D                   .dbline 62
 012D           ;               LCD_Position(1, 0);
 012D 10                push X
 012E 5700              mov X,0
 0130 5001              mov A,1
 0132 7C0000            xcall _LCD_Position
 0135                   .dbline 63
 0135           ;               LCD_PrCString("Sent");
 0135 5000              mov A,>L10
 0137 08                push A
 0138 5000              mov A,<L10
 013A 5C                mov X,A
 013B 18                pop A
 013C 7C0000            xcall _LCD_PrCString
 013F 20                pop X
 0140                   .dbline 64
 0140           ;               nrfWriteRegister(NRF_WRITE_STATUS, 0x7D);
 0140 507D              mov A,125
 0142 08                push A
 0143 5027              mov A,39
 0145 08                push A
 0146 7C0000            xcall _nrfWriteRegister
 0149 38FE              add SP,-2
 014B                   .dbline 65
 014B           ;       }
 014B           L3:
 014B                   .dbline 51
 014B 8F9A              xjmp L2
 014D           X0:
 014D                   .dbline -2
 014D           L1:
 014D 38F7              add SP,-9
 014F 20                pop X
 0150                   .dbline 0 ; func end
 0150 8FFF              jmp .
 0152                   .dbsym l buf 0 A[9:9]c
 0152                   .dbend
                        .area lit(rom, con, rel, lit)
 0000           L10:
 0000 53656E7400        .byte 'S,'e,'n,'t,0
 0005           L6:
 0005 393A203132332E3400        .byte 57,58,32,49,50,51,46,52,0
 000E           L5:
 000E 53656E6400        .byte 'S,'e,'n,'d,0
