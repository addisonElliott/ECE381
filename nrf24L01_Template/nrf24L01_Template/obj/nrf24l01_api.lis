 0000                   cpu LMM
                        .module nrf24l01_api.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./nrf24l01_api.c
 0000                   .dbfile C:\Users\addis\Desktop\ECE381\NRF24L~1\NRF24L~1\nrf24l01_api.c
 0000                   .dbfunc e nrfWriteRegister _nrfWriteRegister fV
 0000           ;              i -> X+0
 0000           ;           data -> X-5
 0000           ;        address -> X-4
 0000           _nrfWriteRegister::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3802              add SP,2
 0004                   .dbline 8
 0004           ; #include <m8c.h>
 0004           ; #include "PSoCAPI.h"
 0004           ; #include "nrf24L01_API.h"
 0004           ; 
 0004           ; // This writes a BYTE data into the register at address. See Section 9.1
 0004           ; // for details on the structure
 0004           ; void nrfWriteRegister(BYTE address, BYTE data)
 0004           ; {
 0004                   .dbline 11
 0004           ;       WORD i; // Dummy variable for delay timing
 0004           ;       
 0004           ;       CSN_LOW;        // Pull chip select low. Since chip select is low active, this will
 0004                   .dbline 11
 0004 4104FB            and REG[0x4],-5
 0007                   .dbline 11
 0007                   .dbline 11
 0007                   .dbline 14
 0007           ;                               // tell the nrf24 to start listenting.
 0007           ;       
 0007           ;       for (i = 0; i < 260; i++); // Kill some time to ensure proper setup.
 0007 560100            mov [X+1],0
 000A 560000            mov [X+0],0
 000D 8006              xjmp L5
 000F           L2:
 000F                   .dbline 14
 000F           L3:
 000F                   .dbline 14
 000F 7701              inc [X+1]
 0011 0F0000            adc [X+0],0
 0014           L5:
 0014                   .dbline 14
 0014 5201              mov A,[X+1]
 0016 1104              sub A,4
 0018 5200              mov A,[X+0]
 001A 1901              sbb A,1
 001C CFF2              jc L2
 001E           X0:
 001E           L6:
 001E                   .dbline 17
 001E           ;       
 001E           ;       // Wait until TX Buffer is empty, then send given data
 001E           ;       while (!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
 001E           L7:
 001E                   .dbline 17
 001E 10                push X
 001F 7C0000            xcall _SPIM_bReadStatus
 0022 20                pop X
 0023 62D000            mov REG[0xd0],>__r0
 0026 5300              mov [__r0],A
 0028 470010            tst [__r0],16
 002B AFF2              jz L6
 002D                   .dbline 18
 002D           ;       SPIM_SendTxData(address);
 002D 10                push X
 002E 52FC              mov A,[X-4]
 0030 7C0000            xcall _SPIM_SendTxData
 0033 20                pop X
 0034           L9:
 0034                   .dbline 22
 0034           ;       
 0034           ;       // Wait until SPI transaction complete, then read data out (chainsaw effect).
 0034           ;       // Note, we don't really care at this point what the returned value is.
 0034           ;       while (!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
 0034           L10:
 0034                   .dbline 22
 0034 10                push X
 0035 7C0000            xcall _SPIM_bReadStatus
 0038 20                pop X
 0039 62D000            mov REG[0xd0],>__r0
 003C 5300              mov [__r0],A
 003E 470020            tst [__r0],32
 0041 AFF2              jz L9
 0043                   .dbline 23
 0043           ;       SPIM_bReadRxData();             
 0043 10                push X
 0044 7C0000            xcall _SPIM_bReadRxData
 0047 20                pop X
 0048 62D000            mov REG[0xd0],>__r0
 004B           L12:
 004B                   .dbline 26
 004B           ;       
 004B           ;       // Wait until TX Buffer is empty, then send given data
 004B           ;       while (!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
 004B           L13:
 004B                   .dbline 26
 004B 10                push X
 004C 7C0000            xcall _SPIM_bReadStatus
 004F 20                pop X
 0050 62D000            mov REG[0xd0],>__r0
 0053 5300              mov [__r0],A
 0055 470010            tst [__r0],16
 0058 AFF2              jz L12
 005A                   .dbline 27
 005A           ;       SPIM_SendTxData(data);
 005A 10                push X
 005B 52FB              mov A,[X-5]
 005D 7C0000            xcall _SPIM_SendTxData
 0060 20                pop X
 0061           L15:
 0061                   .dbline 31
 0061           ;       
 0061           ;       // Wait until SPI transaction complete, then read data out (chainsaw effect).
 0061           ;       // Note, we don't really care at this point what the returned value is.
 0061           ;       while (!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
 0061           L16:
 0061                   .dbline 31
 0061 10                push X
 0062 7C0000            xcall _SPIM_bReadStatus
 0065 20                pop X
 0066 62D000            mov REG[0xd0],>__r0
 0069 5300              mov [__r0],A
 006B 470020            tst [__r0],32
 006E AFF2              jz L15
 0070                   .dbline 32
 0070           ;       SPIM_bReadRxData();     
 0070 10                push X
 0071 7C0000            xcall _SPIM_bReadRxData
 0074 20                pop X
 0075 62D000            mov REG[0xd0],>__r0
 0078                   .dbline 34
 0078           ;       
 0078           ;       CSN_HIGH; // Pull chip select high. This tells the nrf24 to ignore future SPI commands
 0078                   .dbline 34
 0078 430404            or REG[0x4],4
 007B                   .dbline 34
 007B                   .dbline 34
 007B                   .dbline -2
 007B           L1:
 007B 38FE              add SP,-2
 007D 20                pop X
 007E                   .dbline 0 ; func end
 007E 7F                ret
 007F                   .dbsym l i 0 i
 007F                   .dbsym l data -5 c
 007F                   .dbsym l address -4 c
 007F                   .dbend
 007F                   .dbfunc e nrfReadRegister _nrfReadRegister fc
 007F           ;            reg -> X+2
 007F           ;              i -> X+0
 007F           ;        address -> X-4
 007F           _nrfReadRegister::
 007F                   .dbline -1
 007F 10                push X
 0080 4F                mov X,SP
 0081 3803              add SP,3
 0083                   .dbline 38
 0083           ; }
 0083           ; 
 0083           ; BYTE nrfReadRegister(BYTE address)
 0083           ; {
 0083                   .dbline 42
 0083           ;       BYTE reg; // Variable to hold register value
 0083           ;       WORD i; // Dummy variable for delay timing
 0083           ;       
 0083           ;       CSN_LOW;        // Pull chip select low. Since chip select is low active, this will
 0083                   .dbline 42
 0083 4104FB            and REG[0x4],-5
 0086                   .dbline 42
 0086                   .dbline 42
 0086                   .dbline 45
 0086           ;                               // tell the nrf24 to start listenting.
 0086           ;       
 0086           ;       for (i = 0; i < 260; i++); // Kill some time to ensure proper setup.
 0086 560100            mov [X+1],0
 0089 560000            mov [X+0],0
 008C 8006              xjmp L22
 008E           L19:
 008E                   .dbline 45
 008E           L20:
 008E                   .dbline 45
 008E 7701              inc [X+1]
 0090 0F0000            adc [X+0],0
 0093           L22:
 0093                   .dbline 45
 0093 5201              mov A,[X+1]
 0095 1104              sub A,4
 0097 5200              mov A,[X+0]
 0099 1901              sbb A,1
 009B CFF2              jc L19
 009D           X1:
 009D           L23:
 009D                   .dbline 48
 009D           ;       
 009D           ;       // Wait until TX Buffer is empty, then send command word to read
 009D           ;       while (!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
 009D           L24:
 009D                   .dbline 48
 009D 10                push X
 009E 7C0000            xcall _SPIM_bReadStatus
 00A1 20                pop X
 00A2 62D000            mov REG[0xd0],>__r0
 00A5 5300              mov [__r0],A
 00A7 470010            tst [__r0],16
 00AA AFF2              jz L23
 00AC                   .dbline 49
 00AC           ;       SPIM_SendTxData(address);
 00AC 10                push X
 00AD 52FC              mov A,[X-4]
 00AF 7C0000            xcall _SPIM_SendTxData
 00B2 20                pop X
 00B3           L26:
 00B3                   .dbline 53
 00B3           ;       
 00B3           ;       // Wait until SPI transaction complete, then read data out (chainsaw effect).
 00B3           ;       // Note, we don't really care at this point what the returned value is.
 00B3           ;       while (!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
 00B3           L27:
 00B3                   .dbline 53
 00B3 10                push X
 00B4 7C0000            xcall _SPIM_bReadStatus
 00B7 20                pop X
 00B8 62D000            mov REG[0xd0],>__r0
 00BB 5300              mov [__r0],A
 00BD 470020            tst [__r0],32
 00C0 AFF2              jz L26
 00C2                   .dbline 54
 00C2           ;       SPIM_bReadRxData();             
 00C2 10                push X
 00C3 7C0000            xcall _SPIM_bReadRxData
 00C6 20                pop X
 00C7 62D000            mov REG[0xd0],>__r0
 00CA           L29:
 00CA                   .dbline 57
 00CA           ;       
 00CA           ;       // Wait until TX buffer empty, then send a dummy byte
 00CA           ;       while (!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
 00CA           L30:
 00CA                   .dbline 57
 00CA 10                push X
 00CB 7C0000            xcall _SPIM_bReadStatus
 00CE 20                pop X
 00CF 62D000            mov REG[0xd0],>__r0
 00D2 5300              mov [__r0],A
 00D4 470010            tst [__r0],16
 00D7 AFF2              jz L29
 00D9                   .dbline 58
 00D9           ;       SPIM_SendTxData(SPIM_DUMMY_BYTE);
 00D9 10                push X
 00DA 5000              mov A,0
 00DC 7C0000            xcall _SPIM_SendTxData
 00DF 20                pop X
 00E0           L32:
 00E0                   .dbline 61
 00E0           ;       
 00E0           ;       // Dummy byte sent to push PLD out, so now read and return
 00E0           ;       while (!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
 00E0           L33:
 00E0                   .dbline 61
 00E0 10                push X
 00E1 7C0000            xcall _SPIM_bReadStatus
 00E4 20                pop X
 00E5 62D000            mov REG[0xd0],>__r0
 00E8 5300              mov [__r0],A
 00EA 470020            tst [__r0],32
 00ED AFF2              jz L32
 00EF                   .dbline 62
 00EF           ;       reg = SPIM_bReadRxData();
 00EF 10                push X
 00F0 7C0000            xcall _SPIM_bReadRxData
 00F3 20                pop X
 00F4 62D000            mov REG[0xd0],>__r0
 00F7 5402              mov [X+2],A
 00F9                   .dbline 64
 00F9           ;       
 00F9           ;       CSN_HIGH; // Pull chip select high. This tells the nrf24 to ignore future SPI commands
 00F9                   .dbline 64
 00F9 430404            or REG[0x4],4
 00FC                   .dbline 64
 00FC                   .dbline 64
 00FC                   .dbline 66
 00FC           ;       
 00FC           ;       return reg;
 00FC 5202              mov A,[X+2]
 00FE                   .dbline -2
 00FE           L18:
 00FE 38FD              add SP,-3
 0100 20                pop X
 0101                   .dbline 0 ; func end
 0101 7F                ret
 0102                   .dbsym l reg 2 c
 0102                   .dbsym l i 0 i
 0102                   .dbsym l address -4 c
 0102                   .dbend
 0102                   .dbfunc e nrfWriteAddress _nrfWriteAddress fV
 0102           ;              i -> X+0
 0102           ;           data -> X-6
 0102           ;        address -> X-4
 0102           _nrfWriteAddress::
 0102                   .dbline -1
 0102 10                push X
 0103 4F                mov X,SP
 0104 3802              add SP,2
 0106                   .dbline 70
 0106           ; }
 0106           ; 
 0106           ; void nrfWriteAddress(BYTE address, BYTE *data)
 0106           ; {
 0106                   .dbline 74
 0106           ;       WORD i; // Dummy variable for delay timing
 0106           ;       //va_list v; // Variable argument list variable for the five byte address
 0106           ;       
 0106           ;       CSN_LOW;        // Pull chip select low. Since chip select is low active, this will
 0106                   .dbline 74
 0106 4104FB            and REG[0x4],-5
 0109                   .dbline 74
 0109                   .dbline 74
 0109                   .dbline 77
 0109           ;                               // tell the nrf24 to start listenting.
 0109           ;       
 0109           ;       for (i = 0; i < 260; i++); // Kill some time to ensure proper setup.
 0109 560100            mov [X+1],0
 010C 560000            mov [X+0],0
 010F 8006              xjmp L39
 0111           L36:
 0111                   .dbline 77
 0111           L37:
 0111                   .dbline 77
 0111 7701              inc [X+1]
 0113 0F0000            adc [X+0],0
 0116           L39:
 0116                   .dbline 77
 0116 5201              mov A,[X+1]
 0118 1104              sub A,4
 011A 5200              mov A,[X+0]
 011C 1901              sbb A,1
 011E CFF2              jc L36
 0120           X2:
 0120           L40:
 0120                   .dbline 80
 0120           ;       
 0120           ;       // Wait until TX Buffer is empty, then send given data
 0120           ;       while (!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
 0120           L41:
 0120                   .dbline 80
 0120 10                push X
 0121 7C0000            xcall _SPIM_bReadStatus
 0124 20                pop X
 0125 62D000            mov REG[0xd0],>__r0
 0128 5300              mov [__r0],A
 012A 470010            tst [__r0],16
 012D AFF2              jz L40
 012F                   .dbline 81
 012F           ;       SPIM_SendTxData(address);
 012F 10                push X
 0130 52FC              mov A,[X-4]
 0132 7C0000            xcall _SPIM_SendTxData
 0135 20                pop X
 0136           L43:
 0136                   .dbline 85
 0136           ;       
 0136           ;       // Wait until SPI transaction complete, then read data out (chainsaw effect).
 0136           ;       // Note, we don't really care at this point what the returned value is.
 0136           ;       while (!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
 0136           L44:
 0136                   .dbline 85
 0136 10                push X
 0137 7C0000            xcall _SPIM_bReadStatus
 013A 20                pop X
 013B 62D000            mov REG[0xd0],>__r0
 013E 5300              mov [__r0],A
 0140 470020            tst [__r0],32
 0143 AFF2              jz L43
 0145                   .dbline 86
 0145           ;       SPIM_bReadRxData();     
 0145 10                push X
 0146 7C0000            xcall _SPIM_bReadRxData
 0149 20                pop X
 014A 62D000            mov REG[0xd0],>__r0
 014D                   .dbline 89
 014D           ;       
 014D           ;       //va_start(v, address);
 014D           ;       for (i = 0; i < 5; i++) // This function assumes 5 bytes is the size of the arguments
 014D 560100            mov [X+1],0
 0150 560000            mov [X+0],0
 0153 803F              xjmp L49
 0155           L50:
 0155                   .dbline 91
 0155           ;       {       
 0155           ;               while (!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY)); // Wait until TX Buffer is empty
 0155           L51:
 0155                   .dbline 91
 0155 10                push X
 0156 7C0000            xcall _SPIM_bReadStatus
 0159 20                pop X
 015A 62D000            mov REG[0xd0],>__r0
 015D 5300              mov [__r0],A
 015F 470010            tst [__r0],16
 0162 AFF2              jz L50
 0164                   .dbline 92
 0164           ;               SPIM_SendTxData(data[i]); // Send given data, va_arg gets next argument in list
 0164 5201              mov A,[X+1]
 0166 03FB              add A,[X-5]
 0168 5300              mov [__r1],A
 016A 5200              mov A,[X+0]
 016C 0BFA              adc A,[X-6]
 016E 60D4              mov REG[0xd4],A
 0170 3E00              mvi A,[__r1]
 0172 10                push X
 0173 7C0000            xcall _SPIM_SendTxData
 0176 20                pop X
 0177           L53:
 0177                   .dbline 95
 0177           ;               //SPIM_SendTxData(0xC2);
 0177           ;               
 0177           ;               while (!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE)); // Wait until SPI transaction complete
 0177           L54:
 0177                   .dbline 95
 0177 10                push X
 0178 7C0000            xcall _SPIM_bReadStatus
 017B 20                pop X
 017C 62D000            mov REG[0xd0],>__r0
 017F 5300              mov [__r0],A
 0181 470020            tst [__r0],32
 0184 AFF2              jz L53
 0186                   .dbline 96
 0186           ;               SPIM_bReadRxData();     // Read dummy variable
 0186 10                push X
 0187 7C0000            xcall _SPIM_bReadRxData
 018A 20                pop X
 018B 62D000            mov REG[0xd0],>__r0
 018E                   .dbline 97
 018E           ;       }
 018E           L47:
 018E                   .dbline 89
 018E 7701              inc [X+1]
 0190 0F0000            adc [X+0],0
 0193           L49:
 0193                   .dbline 89
 0193 5201              mov A,[X+1]
 0195 1105              sub A,5
 0197 5200              mov A,[X+0]
 0199 1900              sbb A,0
 019B CFB9              jc L51
 019D           X3:
 019D                   .dbline 100
 019D           ;       //va_end(v);
 019D           ;       
 019D           ;       CSN_HIGH; // Pull chip select high. This tells the nrf24 to ignore future SPI commands
 019D                   .dbline 100
 019D 430404            or REG[0x4],4
 01A0                   .dbline 100
 01A0                   .dbline 100
 01A0                   .dbline -2
 01A0           L35:
 01A0 38FE              add SP,-2
 01A2 20                pop X
 01A3                   .dbline 0 ; func end
 01A3 7F                ret
 01A4                   .dbsym l i 0 i
 01A4                   .dbsym l data -6 pc
 01A4                   .dbsym l address -4 c
 01A4                   .dbend
 01A4                   .dbfunc e nrfReadAddress _nrfReadAddress fV
 01A4           ;              i -> X+0
 01A4           ;           data -> X-6
 01A4           ;        address -> X-4
 01A4           _nrfReadAddress::
 01A4                   .dbline -1
 01A4 10                push X
 01A5 4F                mov X,SP
 01A6 3802              add SP,2
 01A8                   .dbline 104
 01A8           ; }
 01A8           ; 
 01A8           ; void nrfReadAddress(BYTE address, BYTE *data)
 01A8           ; {
 01A8                   .dbline 107
 01A8           ;       WORD i; // Dummy variable for delay timing
 01A8           ;       
 01A8           ;       CSN_LOW;        // Pull chip select low. Since chip select is low active, this will
 01A8                   .dbline 107
 01A8 4104FB            and REG[0x4],-5
 01AB                   .dbline 107
 01AB                   .dbline 107
 01AB                   .dbline 110
 01AB           ;                               // tell the nrf24 to start listenting.
 01AB           ;       
 01AB           ;       for (i = 0; i < 260; i++); // Kill some time to ensure proper setup.
 01AB 560100            mov [X+1],0
 01AE 560000            mov [X+0],0
 01B1 8006              xjmp L60
 01B3           L57:
 01B3                   .dbline 110
 01B3           L58:
 01B3                   .dbline 110
 01B3 7701              inc [X+1]
 01B5 0F0000            adc [X+0],0
 01B8           L60:
 01B8                   .dbline 110
 01B8 5201              mov A,[X+1]
 01BA 1104              sub A,4
 01BC 5200              mov A,[X+0]
 01BE 1901              sbb A,1
 01C0 CFF2              jc L57
 01C2           X4:
 01C2           L61:
 01C2                   .dbline 113
 01C2           ;       
 01C2           ;       // Wait until TX Buffer is empty, then send command word to read
 01C2           ;       while (!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
 01C2           L62:
 01C2                   .dbline 113
 01C2 10                push X
 01C3 7C0000            xcall _SPIM_bReadStatus
 01C6 20                pop X
 01C7 62D000            mov REG[0xd0],>__r0
 01CA 5300              mov [__r0],A
 01CC 470010            tst [__r0],16
 01CF AFF2              jz L61
 01D1                   .dbline 114
 01D1           ;       SPIM_SendTxData(address);
 01D1 10                push X
 01D2 52FC              mov A,[X-4]
 01D4 7C0000            xcall _SPIM_SendTxData
 01D7 20                pop X
 01D8           L64:
 01D8                   .dbline 118
 01D8           ;       
 01D8           ;       // Wait until SPI transaction complete, then read data out (chainsaw effect).
 01D8           ;       // Note, we don't really care at this point what the returned value is.
 01D8           ;       while (!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
 01D8           L65:
 01D8                   .dbline 118
 01D8 10                push X
 01D9 7C0000            xcall _SPIM_bReadStatus
 01DC 20                pop X
 01DD 62D000            mov REG[0xd0],>__r0
 01E0 5300              mov [__r0],A
 01E2 470020            tst [__r0],32
 01E5 AFF2              jz L64
 01E7                   .dbline 119
 01E7           ;       SPIM_bReadRxData();             
 01E7 10                push X
 01E8 7C0000            xcall _SPIM_bReadRxData
 01EB 20                pop X
 01EC 62D000            mov REG[0xd0],>__r0
 01EF                   .dbline 121
 01EF           ;       
 01EF           ;       for (i = 0; i < 5; ++i)
 01EF 560100            mov [X+1],0
 01F2 560000            mov [X+0],0
 01F5 8045              xjmp L70
 01F7           L71:
 01F7                   .dbline 124
 01F7           ;       {
 01F7           ;               // Wait until TX buffer empty, then send a dummy byte
 01F7           ;               while (!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
 01F7           L72:
 01F7                   .dbline 124
 01F7 10                push X
 01F8 7C0000            xcall _SPIM_bReadStatus
 01FB 20                pop X
 01FC 62D000            mov REG[0xd0],>__r0
 01FF 5300              mov [__r0],A
 0201 470010            tst [__r0],16
 0204 AFF2              jz L71
 0206                   .dbline 125
 0206           ;               SPIM_SendTxData(SPIM_DUMMY_BYTE);
 0206 10                push X
 0207 5000              mov A,0
 0209 7C0000            xcall _SPIM_SendTxData
 020C 20                pop X
 020D           L74:
 020D                   .dbline 128
 020D           ;               
 020D           ;               // Dummy byte sent to push PLD out, so now read and return
 020D           ;               while (!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
 020D           L75:
 020D                   .dbline 128
 020D 10                push X
 020E 7C0000            xcall _SPIM_bReadStatus
 0211 20                pop X
 0212 62D000            mov REG[0xd0],>__r0
 0215 5300              mov [__r0],A
 0217 470020            tst [__r0],32
 021A AFF2              jz L74
 021C                   .dbline 129
 021C           ;               data[i] = SPIM_bReadRxData();
 021C 10                push X
 021D 7C0000            xcall _SPIM_bReadRxData
 0220 20                pop X
 0221 62D000            mov REG[0xd0],>__r0
 0224 5300              mov [__r0],A
 0226 5201              mov A,[X+1]
 0228 03FB              add A,[X-5]
 022A 5300              mov [__r3],A
 022C 5200              mov A,[X+0]
 022E 0BFA              adc A,[X-6]
 0230 60D5              mov REG[0xd5],A
 0232 5100              mov A,[__r0]
 0234 3F00              mvi [__r3],A
 0236                   .dbline 130
 0236           ;       }
 0236           L68:
 0236                   .dbline 121
 0236 7701              inc [X+1]
 0238 0F0000            adc [X+0],0
 023B           L70:
 023B                   .dbline 121
 023B 5201              mov A,[X+1]
 023D 1105              sub A,5
 023F 5200              mov A,[X+0]
 0241 1900              sbb A,0
 0243 CFB3              jc L72
 0245           X5:
 0245                   .dbline 132
 0245           ;               
 0245           ;       CSN_HIGH; // Pull chip select high. This tells the nrf24 to ignore future SPI commands
 0245                   .dbline 132
 0245 430404            or REG[0x4],4
 0248                   .dbline 132
 0248                   .dbline 132
 0248                   .dbline -2
 0248           L56:
 0248 38FE              add SP,-2
 024A 20                pop X
 024B                   .dbline 0 ; func end
 024B 7F                ret
 024C                   .dbsym l i 0 i
 024C                   .dbsym l data -6 pc
 024C                   .dbsym l address -4 c
 024C                   .dbend
 024C                   .dbfunc e nrfSendData _nrfSendData fV
 024C           ;              i -> X+0
 024C           ;           data -> X-5
 024C           _nrfSendData::
 024C                   .dbline -1
 024C 10                push X
 024D 4F                mov X,SP
 024E 3802              add SP,2
 0250                   .dbline 136
 0250           ; }
 0250           ; 
 0250           ; void nrfSendData(char *data)
 0250           ; {
 0250                   .dbline 138
 0250           ;       WORD i; // Dummy variable for delay timing
 0250           ;       CSN_LOW;        // Pull chip select low. Since chip select is low active, this will
 0250                   .dbline 138
 0250 4104FB            and REG[0x4],-5
 0253                   .dbline 138
 0253                   .dbline 138
 0253                   .dbline 141
 0253           ;                               // tell the nrf24 to start listenting.
 0253           ;       
 0253           ;       for (i = 0; i < 260; i++); // Kill some time to ensure proper setup.
 0253 560100            mov [X+1],0
 0256 560000            mov [X+0],0
 0259 8006              xjmp L81
 025B           L78:
 025B                   .dbline 141
 025B           L79:
 025B                   .dbline 141
 025B 7701              inc [X+1]
 025D 0F0000            adc [X+0],0
 0260           L81:
 0260                   .dbline 141
 0260 5201              mov A,[X+1]
 0262 1104              sub A,4
 0264 5200              mov A,[X+0]
 0266 1901              sbb A,1
 0268 CFF2              jc L78
 026A           X6:
 026A           L82:
 026A                   .dbline 143
 026A           ;       
 026A           ;       while (!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY)); // Wait until TX Buffer is empty
 026A           L83:
 026A                   .dbline 143
 026A 10                push X
 026B 7C0000            xcall _SPIM_bReadStatus
 026E 20                pop X
 026F 62D000            mov REG[0xd0],>__r0
 0272 5300              mov [__r0],A
 0274 470010            tst [__r0],16
 0277 AFF2              jz L82
 0279                   .dbline 144
 0279           ;       SPIM_SendTxData(NRF_WRITE_PAYLOAD); // Send given data, NRF_WRITE_PAYLOAD is to send data
 0279 10                push X
 027A 50A0              mov A,-96
 027C 7C0000            xcall _SPIM_SendTxData
 027F 20                pop X
 0280           L85:
 0280                   .dbline 148
 0280           ;       
 0280           ;       // Wait until SPI transaction complete, then read data out (chainsaw effect).
 0280           ;       // Note, we don't really care at this point what the returned value is.
 0280           ;       while (!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
 0280           L86:
 0280                   .dbline 148
 0280 10                push X
 0281 7C0000            xcall _SPIM_bReadStatus
 0284 20                pop X
 0285 62D000            mov REG[0xd0],>__r0
 0288 5300              mov [__r0],A
 028A 470020            tst [__r0],32
 028D AFF2              jz L85
 028F                   .dbline 149
 028F           ;       SPIM_bReadRxData();
 028F 10                push X
 0290 7C0000            xcall _SPIM_bReadRxData
 0293 20                pop X
 0294 62D000            mov REG[0xd0],>__r0
 0297                   .dbline 151
 0297           ;       
 0297           ;       for (i = 0; i < 8; i++) // Payload size is 8 bytes, so send that many
 0297 560100            mov [X+1],0
 029A 560000            mov [X+0],0
 029D 803F              xjmp L91
 029F           L92:
 029F                   .dbline 153
 029F           ;       {       
 029F           ;               while (!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY)); // Wait until TX Buffer is empty
 029F           L93:
 029F                   .dbline 153
 029F 10                push X
 02A0 7C0000            xcall _SPIM_bReadStatus
 02A3 20                pop X
 02A4 62D000            mov REG[0xd0],>__r0
 02A7 5300              mov [__r0],A
 02A9 470010            tst [__r0],16
 02AC AFF2              jz L92
 02AE                   .dbline 154
 02AE           ;               SPIM_SendTxData(data[i]); // Send given data
 02AE 5201              mov A,[X+1]
 02B0 03FC              add A,[X-4]
 02B2 5300              mov [__r1],A
 02B4 5200              mov A,[X+0]
 02B6 0BFB              adc A,[X-5]
 02B8 60D4              mov REG[0xd4],A
 02BA 3E00              mvi A,[__r1]
 02BC 10                push X
 02BD 7C0000            xcall _SPIM_SendTxData
 02C0 20                pop X
 02C1           L95:
 02C1                   .dbline 156
 02C1           ;               
 02C1           ;               while (!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE)); // Wait until SPI transaction complete
 02C1           L96:
 02C1                   .dbline 156
 02C1 10                push X
 02C2 7C0000            xcall _SPIM_bReadStatus
 02C5 20                pop X
 02C6 62D000            mov REG[0xd0],>__r0
 02C9 5300              mov [__r0],A
 02CB 470020            tst [__r0],32
 02CE AFF2              jz L95
 02D0                   .dbline 157
 02D0           ;               SPIM_bReadRxData();     // Read dummy variable
 02D0 10                push X
 02D1 7C0000            xcall _SPIM_bReadRxData
 02D4 20                pop X
 02D5 62D000            mov REG[0xd0],>__r0
 02D8                   .dbline 158
 02D8           ;       }
 02D8           L89:
 02D8                   .dbline 151
 02D8 7701              inc [X+1]
 02DA 0F0000            adc [X+0],0
 02DD           L91:
 02DD                   .dbline 151
 02DD 5201              mov A,[X+1]
 02DF 1108              sub A,8
 02E1 5200              mov A,[X+0]
 02E3 1900              sbb A,0
 02E5 CFB9              jc L93
 02E7           X7:
 02E7                   .dbline 160
 02E7           ;       
 02E7           ;       CSN_HIGH; // Pull chip select high. This tells the nrf24 to ignore future SPI commands
 02E7                   .dbline 160
 02E7 430404            or REG[0x4],4
 02EA                   .dbline 160
 02EA                   .dbline 160
 02EA                   .dbline -2
 02EA           L77:
 02EA 38FE              add SP,-2
 02EC 20                pop X
 02ED                   .dbline 0 ; func end
 02ED 7F                ret
 02EE                   .dbsym l i 0 i
 02EE                   .dbsym l data -5 pc
 02EE                   .dbend
