 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area lit(rom, con, rel, lit)
 0000           L2:
 0000 0001              .byte 0,1
 0002 4041              .byte 64,'A
 0004 8081              .byte 128,129
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Jacob\Desktop\ECE381\SPI_SRAM\SPI_SRAM\main.c
 0000                   .dbfunc e SPIRAM_StatusRegisterTest _SPIRAM_StatusRegisterTest fc
 0000           ;         status -> X+7
 0000           ;           mode -> X+1
 0000           ;              b -> X+0
 0000           _SPIRAM_StatusRegisterTest::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3808              add SP,8
 0004                   .dbline 112
 0004           ; 
 0004           ; //----------------------------------------------------------------------------
 0004           ; // 23K256 SPI SRAM Program
 0004           ; //
 0004           ; // PSoC Global Resources:
 0004           ; //   Power Setting     5.0V/24MHz
 0004           ; //   CPU_Clock         SysClk/1
 0004           ; //   32K_Select        Internal
 0004           ; //   PLL_Mode          Off
 0004           ; //   Sleep_Timer       8_Hz
 0004           ; //   VC1=SysClk/N     *12
 0004           ; //   VC2=VC1/N        *2
 0004           ; //                    * VC1 & VC2 values make VC2 = 1MHz = SPIM Clock
 0004           ; //   VC3_Source        SysClk/1
 0004           ; //   VC3 Divider      *52
 0004           ; //                    *Used to set UART baud rate to 57600
 0004           ; //   SysClk Source     Internal
 0004           ; //   SysClk*2 Disable  { Any }
 0004           ; //   Analog Power      { Any }
 0004           ; //   Ref Mux           { Any }
 0004           ; //   AGndBypass        { Any }
 0004           ; //   Op-Amp Bias       { Any }
 0004           ; //   A_Buff_Power      { Any }
 0004           ; //   SwitchModePump    OFF
 0004           ; //   Trip Voltage      { Any }
 0004           ; //   LVD ThrottleBack  Disable
 0004           ; //                    *When enabled, an LVD event forces the CPU Clock to SysClk/8.
 0004           ; //   Watchdog Enable  *{ Any }
 0004           ; //                    *Incautious use of the Watchdog may adversely affect timing
 0004           ; //
 0004           ; // SPIM Parameters
 0004           ; //   Name              SPIM
 0004           ; //   Clock            *VC2
 0004           ; //                    *1MHz = 500kbps SPI bit rate.
 0004           ; //   MISO              Row_2_Input_1
 0004           ; //   MOSI              Row_2_Output_0
 0004           ; //   SClk              Row_2_Output_3
 0004           ; //   Interrupt Mode    TXRegEmpty
 0004           ; //   ClockSync         Sync to SysClk
 0004           ; //   InvertMISO        Normal
 0004           ; //
 0004           ; // SPIM Module Notes
 0004           ; //   The 23K256 SPI SRAM has a maximum clock speed of 20MHz
 0004           ; //   SPIM Clock must be set to two times the desired bit rate
 0004           ; //   My prototype uses VC2 = SysClk/48 = 500kHz, yielding a bit rate of 250kbps
 0004           ; //   CS   = P12 (StdCPU:    Open Drain Low)
 0004           ; //   SCLK = P13 (GlobalOut: Open Drain Low)
 0004           ; //   MOSI = P14 (GlobalOut: Open Drain Low)
 0004           ; //   MISO = P15 (GlobalIn:  High Z)
 0004           ; //
 0004           ; // SPIM Modules Notes:
 0004           ; //  -Per Datasheet: The Row Input synchronization for MISO should be set to
 0004           ; //   Async for high SPI bit rates (>1Mbps).
 0004           ; //  -The SPIM Control Register contains the flags that are read by the
 0004           ; //   SPIM_bReadStatus() function. Reading clears all flags.
 0004           ; //  -The Datasheet for the SPIM Datasheet is inconsistent in its referral to
 0004           ; //   the SPIM_SPI_COMPLETE flag.  In the SPIM Control Register, it is named
 0004           ; //   SPI Done.
 0004           ; //  -The SPIM Module always transfers data present on the MISO pin when it
 0004           ; //   writes to the MOSI pin. In other words, it always transfers data into
 0004           ; //   the receive buffer while it is transferring data out of the transmit
 0004           ; //   buffer; it is essential to keep this in mind when checking flags.
 0004           ; //  -TX_BUFFER_EMPTY indicates that a new byte can be written to the TX Buffer.
 0004           ; //  -RX_BUFFER_FULL is set on the edge that captures the 8th bit of receive data.
 0004           ; //  -SPI_COMPLETE (an optional interrupt) is set when eight bits
 0004           ; //   of data and clock have been sent. In modes 0 and 1, this occurs one-half
 0004           ; //   cycle after RX_BUFFER_FULL is set; because in these modes, data is latched
 0004           ; //   on the leading edge of the clock and there is an additional one-half cycle
 0004           ; //   remaining to complete that clock. In modes 2 and 3, this occurs at the
 0004           ; //   same edge that the receive data is latched. This signal may be used to
 0004           ; //   read the received byte or it may be used by the SPIM to disable the
 0004           ; //   block after data transmission is complete.
 0004           ; //   See PSoC TRM, Document No. 001-14463 Rev. *G, Figure 17-19, page 358.
 0004           ; //  -Once the first byte to be transmitted is moved into the transmit buffer
 0004           ; //   by calling the SendTxData API, the SPIM module immediately moves the
 0004           ; //   byte into the transmit shift register one SPIM Clock Input cycle later
 0004           ; //   whereupon the TX_BUFFER_EMPTY flag is set immediately.
 0004           ; //   If another byte is written before the first byte has been fully shifted
 0004           ; //   out, it is placed in the transmit buffer and remains there until half-way
 0004           ; //   through the transmission of the 8th and final bit whereupon it is
 0004           ; //   automatically loaded into the transmit buffer which again sets the
 0004           ; //   TX_BUFFER_EMPTY flag and the 1st bit of the second byte begins
 0004           ; //   its transfer immediately after the 8th bit of the 1st byte. This allows
 0004           ; //   for uninterrupted back-to-back transmission.
 0004           ; //
 0004           ; // 23K256 Notes:
 0004           ; //  -Pins 4 & 8, the power pins, must have a 0.1uF decoupling capacitor
 0004           ; //   physically placed as close as possible to the IC package.
 0004           ; //  -Pin 7 (nHOLD) must be tied to Vcc since it is not used here.
 0004           ; //  -Pin 3 should be left floating since it is NC (no connection)
 0004           ; //  -3.3V SPI to 5V PSoC voltage translation is accomplished through 2.2k
 0004           ; //   pull-up resistors. This also limits the maximum reliable data transfer
 0004           ; //   rate due to the 2.2k*Cpin+wire time constant. Long wires are detrimental!
 0004           ; //
 0004           ; // bnoble@siue.edu 20140320
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "stdlib.h"
 0004           ; #include "spi_sram.h"
 0004           ; #include "math.h"
 0004           ; // Define our I/O array size. Powers of 2 are nice but not necessary
 0004           ; #define ARRAY_SIZE 64
 0004           ; 
 0004           ; // Globals
 0004           ; BYTE DataIn[ARRAY_SIZE];
 0004           ; BYTE DataOut[ARRAY_SIZE];
 0004           ; 
 0004           ; // Test reading and writing the 23K256 status register:
 0004           ; BYTE SPIRAM_StatusRegisterTest(void)
 0004           ; {
 0004                   .dbline 114
 0004           ;       // NOTE: SPIRAM_SEQUENTIAL_MODE|SPIRAM_PAGE_MODE is "Reserved", don't use it
 0004           ;       BYTE mode[6] = { SPIRAM_BYTE_MODE,
 0004 62D000            mov REG[0xd0],>__r0
 0007 550000            mov [__r1],<L2
 000A 550000            mov [__r0],>L2
 000D 5A00              mov [__r3],X
 000F 060001            add [__r3],1
 0012 62D507            mov REG[0xd5],7
 0015 10                push X
 0016 550000            mov [__rX],0
 0019 5100              mov A,[__r0]
 001B 5800              mov X,[__r1]
 001D           X0:
 001D 08                push A
 001E 28                romx
 001F 62D000            mov REG[0xd0],>__r0
 0022 3F00              mvi [__r3],A
 0024 18                pop A
 0025 75                inc X
 0026 0900              adc A,0
 0028 7600              inc [__rX]
 002A 3C0006            cmp [__rX],6
 002D BFEF              jnz X0
 002F                   .dbline 123
 002F           ;                                        SPIRAM_BYTE_MODE|SPIRAM_DISABLE_HOLD,
 002F           ;                                        SPIRAM_SEQUENTIAL_MODE,
 002F           ;                                        SPIRAM_SEQUENTIAL_MODE|SPIRAM_DISABLE_HOLD,
 002F           ;                                        SPIRAM_PAGE_MODE,
 002F           ;                                        SPIRAM_PAGE_MODE|SPIRAM_DISABLE_HOLD };
 002F           ;       BYTE status;
 002F           ;       BYTE b;
 002F           ; 
 002F           ;       UART_CPutString("Status Register W/R Test: 0x  ");
 002F 50FC              mov A,>L3
 0031 08                push A
 0032 50FC              mov A,<L3
 0034 5C                mov X,A
 0035 18                pop A
 0036 7C0000            xcall _UART_CPutString
 0039 20                pop X
 003A                   .dbline 124
 003A           ;       for (b=0; b<6 ; b++) {
 003A 560000            mov [X+0],0
 003D 809B              xjmp L7
 003F           L4:
 003F                   .dbline 124
 003F                   .dbline 125
 003F           ;               UART_PutChar(0x08);
 003F 10                push X
 0040 5008              mov A,8
 0042 7C0000            xcall _UART_PutChar
 0045                   .dbline 126
 0045           ;               UART_PutChar(0x08);
 0045 5008              mov A,8
 0047 7C0000            xcall _UART_PutChar
 004A 20                pop X
 004B                   .dbline 127
 004B           ;               UART_PutSHexByte(mode[b]);
 004B 62D000            mov REG[0xd0],>__r0
 004E 550007            mov [__r0],7
 0051 5A00              mov [__r1],X
 0053 060001            add [__r1],1
 0056 5200              mov A,[X+0]
 0058 0200              add A,[__r1]
 005A 5300              mov [__r1],A
 005C 5000              mov A,0
 005E 0A00              adc A,[__r0]
 0060 60D4              mov REG[0xd4],A
 0062 3E00              mvi A,[__r1]
 0064 10                push X
 0065 7C0000            xcall _UART_PutSHexByte
 0068 20                pop X
 0069                   .dbline 128
 0069           ;               if (SPIRAM_WriteStatusRegister(mode[b])) {
 0069 62D000            mov REG[0xd0],>__r0
 006C 550007            mov [__r0],7
 006F 5A00              mov [__r1],X
 0071 060001            add [__r1],1
 0074 5200              mov A,[X+0]
 0076 0200              add A,[__r1]
 0078 5300              mov [__r1],A
 007A 5000              mov A,0
 007C 0A00              adc A,[__r0]
 007E 60D4              mov REG[0xd4],A
 0080 3E00              mvi A,[__r1]
 0082 08                push A
 0083 7C0000            xcall _SPIRAM_WriteStatusRegister
 0086 38FF              add SP,-1
 0088 62D000            mov REG[0xd0],>__r0
 008B 3900              cmp A,0
 008D A010              jz L8
 008F                   .dbline 129
 008F           ;                       UART_CPutString("\r\nWrite of invalid Status Register value. System halted.\r\n");
 008F                   .dbline 129
 008F 10                push X
 0090 50C1              mov A,>L10
 0092 08                push A
 0093 50C1              mov A,<L10
 0095 5C                mov X,A
 0096 18                pop A
 0097 7C0000            xcall _UART_CPutString
 009A 20                pop X
 009B                   .dbline 130
 009B           ;                       M8C_Stop;
 009B 43FF01            or REG[0xff],1
 009E                   .dbline 131
 009E           ;               }
 009E           L8:
 009E                   .dbline 132
 009E           ;               status = SPIRAM_ReadStatusRegister();
 009E 7C0000            xcall _SPIRAM_ReadStatusRegister
 00A1 62D000            mov REG[0xd0],>__r0
 00A4 5407              mov [X+7],A
 00A6                   .dbline 133
 00A6           ;               if (status != mode[b]) {
 00A6 550007            mov [__r0],7
 00A9 5A00              mov [__r1],X
 00AB 060001            add [__r1],1
 00AE 5200              mov A,[X+0]
 00B0 0200              add A,[__r1]
 00B2 5300              mov [__r1],A
 00B4 5000              mov A,0
 00B6 0A00              adc A,[__r0]
 00B8 60D4              mov REG[0xd4],A
 00BA 3E00              mvi A,[__r1]
 00BC 5300              mov [__r0],A
 00BE 5207              mov A,[X+7]
 00C0 3A00              cmp A,[__r0]
 00C2 A014              jz L11
 00C4                   .dbline 134
 00C4           ;                       UART_CPutString(" FAIL\r\n");
 00C4                   .dbline 134
 00C4 10                push X
 00C5 50B9              mov A,>L13
 00C7 08                push A
 00C8 50B9              mov A,<L13
 00CA 5C                mov X,A
 00CB 18                pop A
 00CC 7C0000            xcall _UART_CPutString
 00CF 20                pop X
 00D0                   .dbline 135
 00D0           ;                       return(1);
 00D0 62D000            mov REG[0xd0],>__r0
 00D3 5001              mov A,1
 00D5 8021              xjmp L1
 00D7           L11:
 00D7                   .dbline 137
 00D7           ;               }
 00D7           ;       }
 00D7           L5:
 00D7                   .dbline 124
 00D7 7700              inc [X+0]
 00D9           L7:
 00D9                   .dbline 124
 00D9 3D0006            cmp [X+0],6
 00DC CF62              jc L4
 00DE           X1:
 00DE                   .dbline 138
 00DE           ;       UART_CPutString("\b\b\b\b\b PASS\r\n");
 00DE 10                push X
 00DF 50AC              mov A,>L14
 00E1 08                push A
 00E2 50AC              mov A,<L14
 00E4 5C                mov X,A
 00E5 18                pop A
 00E6 7C0000            xcall _UART_CPutString
 00E9 20                pop X
 00EA                   .dbline 140
 00EA           ;       // Place the SRAM back in Byte Mode
 00EA           ;       SPIRAM_WriteStatusRegister(SPIRAM_BYTE_MODE|SPIRAM_DISABLE_HOLD);
 00EA 5001              mov A,1
 00EC 08                push A
 00ED 7C0000            xcall _SPIRAM_WriteStatusRegister
 00F0 38FF              add SP,-1
 00F2 62D000            mov REG[0xd0],>__r0
 00F5                   .dbline 141
 00F5           ;       return(0);
 00F5 5000              mov A,0
 00F7                   .dbline -2
 00F7           L1:
 00F7 38F8              add SP,-8
 00F9 20                pop X
 00FA                   .dbline 0 ; func end
 00FA 7F                ret
 00FB                   .dbsym l status 7 c
 00FB                   .dbsym l mode 1 A[6:6]c
 00FB                   .dbsym l b 0 c
 00FB                   .dbend
 00FB                   .dbfunc e SPIRAM_ByteModeTest _SPIRAM_ByteModeTest fi
 00FB           ;         status -> X+4
 00FB           ;             in -> X+3
 00FB           ;           addr -> X+1
 00FB           ;              b -> X+0
 00FB           _SPIRAM_ByteModeTest::
 00FB                   .dbline -1
 00FB 10                push X
 00FC 4F                mov X,SP
 00FD 3805              add SP,5
 00FF                   .dbline 146
 00FF           ; }
 00FF           ; 
 00FF           ; // Test reading and writing the 23K256 in Byte Mode:
 00FF           ; WORD SPIRAM_ByteModeTest(void)
 00FF           ; {
 00FF                   .dbline 152
 00FF           ;       BYTE status;
 00FF           ;       BYTE b;
 00FF           ;       BYTE in;
 00FF           ;       WORD addr;
 00FF           ; 
 00FF           ;       SPIRAM_WriteStatusRegister(SPIRAM_BYTE_MODE|SPIRAM_DISABLE_HOLD);
 00FF 5001              mov A,1
 0101 08                push A
 0102 7C0000            xcall _SPIRAM_WriteStatusRegister
 0105 38FF              add SP,-1
 0107 62D000            mov REG[0xd0],>__r0
 010A                   .dbline 153
 010A           ;       UART_CPutString("      Byte Mode W/R Test: Addr 0x    ");
 010A 10                push X
 010B 5086              mov A,>L16
 010D 08                push A
 010E 5086              mov A,<L16
 0110 5C                mov X,A
 0111 18                pop A
 0112 7C0000            xcall _UART_CPutString
 0115 20                pop X
 0116                   .dbline 155
 0116           ; 
 0116           ;       for (addr=0; addr<0x8000 ; addr++) {
 0116 560200            mov [X+2],0
 0119 560100            mov [X+1],0
 011C 80BE              xjmp L20
 011E           L17:
 011E                   .dbline 155
 011E                   .dbline 156
 011E           ;               if (((addr-1) & 0x000f) == 0x000f) {
 011E 62D000            mov REG[0xd0],>__r0
 0121 5202              mov A,[X+2]
 0123 1101              sub A,1
 0125 5300              mov [__r1],A
 0127 5201              mov A,[X+1]
 0129 1900              sbb A,0
 012B 5300              mov [__r0],A
 012D 26000F            and [__r1],15
 0130 260000            and [__r0],0
 0133 B01D              jnz L21
 0135 3C000F            cmp [__r1],15
 0138 B018              jnz L21
 013A           X2:
 013A                   .dbline 157
 013A           ;                       UART_CPutString("\b\b\b\b");
 013A                   .dbline 157
 013A 10                push X
 013B 5081              mov A,>L23
 013D 08                push A
 013E 5081              mov A,<L23
 0140 5C                mov X,A
 0141 18                pop A
 0142 7C0000            xcall _UART_CPutString
 0145 20                pop X
 0146                   .dbline 158
 0146           ;                       UART_PutSHexInt(addr);
 0146 10                push X
 0147 5201              mov A,[X+1]
 0149 08                push A
 014A 5202              mov A,[X+2]
 014C 20                pop X
 014D 7C0000            xcall _UART_PutSHexInt
 0150 20                pop X
 0151                   .dbline 159
 0151           ;               }
 0151           L21:
 0151                   .dbline 160
 0151           ;               b = 0;
 0151 560000            mov [X+0],0
 0154           L24:
 0154                   .dbline 161
 0154           ;               do {
 0154                   .dbline 162
 0154           ;                       SPIRAM_WriteByte(addr, b);
 0154 5200              mov A,[X+0]
 0156 08                push A
 0157 5201              mov A,[X+1]
 0159 08                push A
 015A 5202              mov A,[X+2]
 015C 08                push A
 015D 7C0000            xcall _SPIRAM_WriteByte
 0160                   .dbline 163
 0160           ;                       in = SPIRAM_ReadByte(addr);
 0160 5201              mov A,[X+1]
 0162 08                push A
 0163 5202              mov A,[X+2]
 0165 08                push A
 0166 7C0000            xcall _SPIRAM_ReadByte
 0169 38FB              add SP,-5
 016B 62D000            mov REG[0xd0],>__r0
 016E 5403              mov [X+3],A
 0170                   .dbline 164
 0170           ;                       if (in != b) {
 0170 5203              mov A,[X+3]
 0172 3B00              cmp A,[X+0]
 0174 A02D              jz L27
 0176                   .dbline 165
 0176           ;                               UART_CPutString("\b\b\b\b");
 0176                   .dbline 165
 0176 10                push X
 0177 5081              mov A,>L23
 0179 08                push A
 017A 5081              mov A,<L23
 017C 5C                mov X,A
 017D 18                pop A
 017E 7C0000            xcall _UART_CPutString
 0181 20                pop X
 0182                   .dbline 166
 0182           ;                               UART_PutSHexInt(addr);
 0182 10                push X
 0183 5201              mov A,[X+1]
 0185 08                push A
 0186 5202              mov A,[X+2]
 0188 20                pop X
 0189 7C0000            xcall _UART_PutSHexInt
 018C                   .dbline 167
 018C           ;                               UART_CPutString(" FAIL\r\n");
 018C 50B9              mov A,>L13
 018E 08                push A
 018F 50B9              mov A,<L13
 0191 5C                mov X,A
 0192 18                pop A
 0193 7C0000            xcall _UART_CPutString
 0196 20                pop X
 0197                   .dbline 168
 0197           ;                               return(1);
 0197 62D000            mov REG[0xd0],>__r0
 019A 550001            mov [__r1],1
 019D 550000            mov [__r0],0
 01A0 8059              xjmp L15
 01A2           L27:
 01A2                   .dbline 170
 01A2           ;                       }
 01A2           ;                       if (!b)
 01A2 3D0000            cmp [X+0],0
 01A5 B006              jnz L29
 01A7                   .dbline 171
 01A7           ;                               b = 0x01;
 01A7 560001            mov [X+0],1
 01AA 8003              xjmp L30
 01AC           L29:
 01AC                   .dbline 173
 01AC           ;                       else
 01AC           ;                               b = b << 1;
 01AC 6600              asl [X+0]
 01AE           L30:
 01AE                   .dbline 174
 01AE           ;               } while(b);
 01AE           L25:
 01AE                   .dbline 174
 01AE 3D0000            cmp [X+0],0
 01B1 BFA2              jnz L24
 01B3                   .dbline 175
 01B3           ;               if (UART_cReadChar()) {
 01B3 10                push X
 01B4 7C0000            xcall _UART_cReadChar
 01B7 20                pop X
 01B8 62D000            mov REG[0xd0],>__r0
 01BB 3900              cmp A,0
 01BD A018              jz L31
 01BF                   .dbline 176
 01BF           ;                       UART_CPutString("\b\b\b\b\b\b\b\b\b\b\b\b ABORTED    \r\n");
 01BF                   .dbline 176
 01BF 10                push X
 01C0 5066              mov A,>L33
 01C2 08                push A
 01C3 5066              mov A,<L33
 01C5 5C                mov X,A
 01C6 18                pop A
 01C7 7C0000            xcall _UART_CPutString
 01CA 20                pop X
 01CB                   .dbline 177
 01CB           ;                       return(0);
 01CB 62D000            mov REG[0xd0],>__r0
 01CE 550000            mov [__r1],0
 01D1 550000            mov [__r0],0
 01D4 8025              xjmp L15
 01D6           L31:
 01D6                   .dbline 179
 01D6           ;               }
 01D6           ;       }
 01D6           L18:
 01D6                   .dbline 155
 01D6 7702              inc [X+2]
 01D8 0F0100            adc [X+1],0
 01DB           L20:
 01DB                   .dbline 155
 01DB 5202              mov A,[X+2]
 01DD 1100              sub A,0
 01DF 5201              mov A,[X+1]
 01E1 1980              sbb A,-128
 01E3 CF3A              jc L17
 01E5           X3:
 01E5                   .dbline 180
 01E5           ;       UART_CPutString("\b\b\b\b\b\b\b\b\b\b\b\b PASS       \r\n");
 01E5 10                push X
 01E6 504B              mov A,>L34
 01E8 08                push A
 01E9 504B              mov A,<L34
 01EB 5C                mov X,A
 01EC 18                pop A
 01ED 7C0000            xcall _UART_CPutString
 01F0 20                pop X
 01F1                   .dbline 181
 01F1           ;       return(0);
 01F1 62D000            mov REG[0xd0],>__r0
 01F4 550000            mov [__r1],0
 01F7 550000            mov [__r0],0
 01FA                   .dbline -2
 01FA           L15:
 01FA 38FB              add SP,-5
 01FC 20                pop X
 01FD                   .dbline 0 ; func end
 01FD 7F                ret
 01FE                   .dbsym l status 4 c
 01FE                   .dbsym l in 3 c
 01FE                   .dbsym l addr 1 i
 01FE                   .dbsym l b 0 c
 01FE                   .dbend
 01FE                   .dbfunc e SPIRAM_SequentialModeTest _SPIRAM_SequentialModeTest fi
 01FE           ;             in -> X+5
 01FE           ;         status -> X+4
 01FE           ;           addr -> X+2
 01FE           ;              b -> X+1
 01FE           ;              a -> X+0
 01FE           _SPIRAM_SequentialModeTest::
 01FE                   .dbline -1
 01FE 10                push X
 01FF 4F                mov X,SP
 0200 3806              add SP,6
 0202                   .dbline 186
 0202           ; }
 0202           ; 
 0202           ; // Test reading and writing the 23K256 in Sequential Mode:
 0202           ; WORD SPIRAM_SequentialModeTest(void)
 0202           ; {
 0202                   .dbline 193
 0202           ;       BYTE status;
 0202           ;       BYTE a;
 0202           ;       BYTE b;
 0202           ;       BYTE in;
 0202           ;       WORD addr;
 0202           ; 
 0202           ;       SPIRAM_WriteStatusRegister(SPIRAM_SEQUENTIAL_MODE|SPIRAM_DISABLE_HOLD);
 0202 5041              mov A,65
 0204 08                push A
 0205 7C0000            xcall _SPIRAM_WriteStatusRegister
 0208 38FF              add SP,-1
 020A 62D000            mov REG[0xd0],>__r0
 020D                   .dbline 194
 020D           ;       UART_CPutString("Sequential Mode W/R Test: Addr 0x    ");
 020D 10                push X
 020E 5025              mov A,>L36
 0210 08                push A
 0211 5025              mov A,<L36
 0213 5C                mov X,A
 0214 18                pop A
 0215 7C0000            xcall _UART_CPutString
 0218 20                pop X
 0219                   .dbline 196
 0219           ; 
 0219           ;       for (addr=0; addr<0x8000 ; addr+=ARRAY_SIZE) {
 0219 560300            mov [X+3],0
 021C 560200            mov [X+2],0
 021F 8103              xjmp L40
 0221           L37:
 0221                   .dbline 196
 0221                   .dbline 197
 0221           ;               UART_CPutString("\b\b\b\b");
 0221 10                push X
 0222 5081              mov A,>L23
 0224 08                push A
 0225 5081              mov A,<L23
 0227 5C                mov X,A
 0228 18                pop A
 0229 7C0000            xcall _UART_CPutString
 022C 20                pop X
 022D                   .dbline 198
 022D           ;               UART_PutSHexInt(addr);
 022D 10                push X
 022E 5202              mov A,[X+2]
 0230 08                push A
 0231 5203              mov A,[X+3]
 0233 20                pop X
 0234 7C0000            xcall _UART_PutSHexInt
 0237 20                pop X
 0238                   .dbline 199
 0238           ;               b = 0;
 0238 560100            mov [X+1],0
 023B           L41:
 023B                   .dbline 200
 023B           ;               do {
 023B                   .dbline 201
 023B           ;                       for (a=0 ; a<ARRAY_SIZE ; a++) {
 023B 560000            mov [X+0],0
 023E 801B              xjmp L47
 0240           L44:
 0240                   .dbline 201
 0240                   .dbline 202
 0240           ;                               DataOut[a] = b;
 0240 62D000            mov REG[0xd0],>__r0
 0243 5200              mov A,[X+0]
 0245 5300              mov [__r1],A
 0247 550000            mov [__r0],0
 024A 060000            add [__r1],<_DataOut
 024D 0E0000            adc [__r0],>_DataOut
 0250 5100              mov A,[__r0]
 0252 60D5              mov REG[0xd5],A
 0254 5201              mov A,[X+1]
 0256 3F00              mvi [__r1],A
 0258                   .dbline 203
 0258           ;                       }
 0258           L45:
 0258                   .dbline 201
 0258 7700              inc [X+0]
 025A           L47:
 025A                   .dbline 201
 025A 3D0040            cmp [X+0],64
 025D CFE2              jc L44
 025F           X4:
 025F                   .dbline 204
 025F           ;                       SPIRAM_WriteArray(addr, DataOut, ARRAY_SIZE);
 025F 5040              mov A,64
 0261 08                push A
 0262 5000              mov A,>_DataOut
 0264 08                push A
 0265 5000              mov A,<_DataOut
 0267 08                push A
 0268 5202              mov A,[X+2]
 026A 08                push A
 026B 5203              mov A,[X+3]
 026D 08                push A
 026E 7C0000            xcall _SPIRAM_WriteArray
 0271                   .dbline 205
 0271           ;                       SPIRAM_ReadArray(addr, DataIn, ARRAY_SIZE);
 0271 5040              mov A,64
 0273 08                push A
 0274 5000              mov A,>_DataIn
 0276 08                push A
 0277 5000              mov A,<_DataIn
 0279 08                push A
 027A 5202              mov A,[X+2]
 027C 08                push A
 027D 5203              mov A,[X+3]
 027F 08                push A
 0280 7C0000            xcall _SPIRAM_ReadArray
 0283 38F6              add SP,-10
 0285                   .dbline 206
 0285           ;                       for (a=0 ; a<ARRAY_SIZE ; a++) {
 0285 560000            mov [X+0],0
 0288 805B              xjmp L51
 028A           L48:
 028A                   .dbline 206
 028A                   .dbline 207
 028A           ;                               if (DataIn[a] != b) {
 028A 62D000            mov REG[0xd0],>__r0
 028D 5200              mov A,[X+0]
 028F 5300              mov [__r1],A
 0291 550000            mov [__r0],0
 0294 060000            add [__r1],<_DataIn
 0297 0E0000            adc [__r0],>_DataIn
 029A 5100              mov A,[__r0]
 029C 60D4              mov REG[0xd4],A
 029E 3E00              mvi A,[__r1]
 02A0 3B01              cmp A,[X+1]
 02A2 A03F              jz L52
 02A4                   .dbline 208
 02A4           ;                                       UART_CPutString("\b\b\b\b");
 02A4                   .dbline 208
 02A4 10                push X
 02A5 5081              mov A,>L23
 02A7 08                push A
 02A8 5081              mov A,<L23
 02AA 5C                mov X,A
 02AB 18                pop A
 02AC 7C0000            xcall _UART_CPutString
 02AF 20                pop X
 02B0                   .dbline 209
 02B0           ;                                       UART_PutSHexInt(addr+a);
 02B0 62D000            mov REG[0xd0],>__r0
 02B3 5200              mov A,[X+0]
 02B5 5300              mov [__r1],A
 02B7 550000            mov [__r0],0
 02BA 5203              mov A,[X+3]
 02BC 0200              add A,[__r1]
 02BE 5300              mov [__r1],A
 02C0 5202              mov A,[X+2]
 02C2 0A00              adc A,[__r0]
 02C4 10                push X
 02C5 08                push A
 02C6 5100              mov A,[__r1]
 02C8 20                pop X
 02C9 7C0000            xcall _UART_PutSHexInt
 02CC                   .dbline 210
 02CC           ;                                       UART_CPutString(" FAIL\r\n");
 02CC 50B9              mov A,>L13
 02CE 08                push A
 02CF 50B9              mov A,<L13
 02D1 5C                mov X,A
 02D2 18                pop A
 02D3 7C0000            xcall _UART_CPutString
 02D6 20                pop X
 02D7                   .dbline 211
 02D7           ;                                       return(1);
 02D7 62D000            mov REG[0xd0],>__r0
 02DA 550001            mov [__r1],1
 02DD 550000            mov [__r0],0
 02E0 8061              xjmp L35
 02E2           L52:
 02E2                   .dbline 213
 02E2           ;                               }
 02E2           ;                       }
 02E2           L49:
 02E2                   .dbline 206
 02E2 7700              inc [X+0]
 02E4           L51:
 02E4                   .dbline 206
 02E4 3D0040            cmp [X+0],64
 02E7 CFA2              jc L48
 02E9           X5:
 02E9                   .dbline 214
 02E9           ;                       if (!b)
 02E9 3D0100            cmp [X+1],0
 02EC B006              jnz L54
 02EE                   .dbline 215
 02EE           ;                               b = 0x01;
 02EE 560101            mov [X+1],1
 02F1 8003              xjmp L55
 02F3           L54:
 02F3                   .dbline 217
 02F3           ;                       else
 02F3           ;                               b = b << 1;
 02F3 6601              asl [X+1]
 02F5           L55:
 02F5                   .dbline 218
 02F5           ;               } while(b);
 02F5           L42:
 02F5                   .dbline 218
 02F5 3D0100            cmp [X+1],0
 02F8 BF42              jnz L41
 02FA                   .dbline 219
 02FA           ;               if (UART_cReadChar()) {
 02FA 10                push X
 02FB 7C0000            xcall _UART_cReadChar
 02FE 20                pop X
 02FF 62D000            mov REG[0xd0],>__r0
 0302 3900              cmp A,0
 0304 A018              jz L56
 0306                   .dbline 220
 0306           ;                       UART_CPutString("\b\b\b\b\b\b\b\b\b\b\b\b ABORTED    \r\n");
 0306                   .dbline 220
 0306 10                push X
 0307 5066              mov A,>L33
 0309 08                push A
 030A 5066              mov A,<L33
 030C 5C                mov X,A
 030D 18                pop A
 030E 7C0000            xcall _UART_CPutString
 0311 20                pop X
 0312                   .dbline 221
 0312           ;                       return(0);
 0312 62D000            mov REG[0xd0],>__r0
 0315 550000            mov [__r1],0
 0318 550000            mov [__r0],0
 031B 8026              xjmp L35
 031D           L56:
 031D                   .dbline 223
 031D           ;               }
 031D           ;       }
 031D           L38:
 031D                   .dbline 196
 031D 070340            add [X+3],64
 0320 0F0200            adc [X+2],0
 0323           L40:
 0323                   .dbline 196
 0323 5203              mov A,[X+3]
 0325 1100              sub A,0
 0327 5202              mov A,[X+2]
 0329 1980              sbb A,-128
 032B CEF5              jc L37
 032D           X6:
 032D                   .dbline 224
 032D           ;       UART_CPutString("\b\b\b\b\b\b\b\b\b\b\b\b PASS       \r\n");
 032D 10                push X
 032E 504B              mov A,>L34
 0330 08                push A
 0331 504B              mov A,<L34
 0333 5C                mov X,A
 0334 18                pop A
 0335 7C0000            xcall _UART_CPutString
 0338 20                pop X
 0339                   .dbline 225
 0339           ;       return(0);
 0339 62D000            mov REG[0xd0],>__r0
 033C 550000            mov [__r1],0
 033F 550000            mov [__r0],0
 0342                   .dbline -2
 0342           L35:
 0342 38FA              add SP,-6
 0344 20                pop X
 0345                   .dbline 0 ; func end
 0345 7F                ret
 0346                   .dbsym l in 5 c
 0346                   .dbsym l status 4 c
 0346                   .dbsym l addr 2 i
 0346                   .dbsym l b 1 c
 0346                   .dbsym l a 0 c
 0346                   .dbend
 0346                   .dbfunc e GetNumber _GetNumber fc
 0346           ;              c -> X+0
 0346           ;            max -> X-5
 0346           ;            min -> X-4
 0346           _GetNumber::
 0346                   .dbline -1
 0346 10                push X
 0347 4F                mov X,SP
 0348 3801              add SP,1
 034A                   .dbline 231
 034A           ; }
 034A           ; 
 034A           ; // This function reads characters from the serial until a character is entered that is within the min & max ASCII characters.
 034A           ; // That character is returned
 034A           ; char GetNumber(char min, char max)
 034A           ; {
 034A 8037              xjmp L60
 034C           L59:
 034C                   .dbline 235
 034C           ;       char c;
 034C           ;       
 034C           ;       while (1)
 034C           ;       {
 034C                   .dbline 236
 034C           ;               c = UART_cReadChar(); // Read the character
 034C 10                push X
 034D 7C0000            xcall _UART_cReadChar
 0350 20                pop X
 0351 62D000            mov REG[0xd0],>__r0
 0354 5400              mov [X+0],A
 0356                   .dbline 237
 0356           ;               if (c < ('0' + min) || c > ('0' + max)) // If the character is not within min to max range, continue the loop
 0356 52FC              mov A,[X-4]
 0358 0130              add A,48
 035A 5300              mov [__r0],A
 035C 5200              mov A,[X+0]
 035E 3A00              cmp A,[__r0]
 0360 C00C              jc L64
 0362           X8:
 0362 62D000            mov REG[0xd0],>__r0
 0365 52FB              mov A,[X-5]
 0367 0130              add A,48
 0369 3B00              cmp A,[X+0]
 036B D003              jnc L62
 036D           X9:
 036D           L64:
 036D                   .dbline 238
 036D           ;                       continue;
 036D 8014              xjmp L60
 036F           L62:
 036F                   .dbline 240
 036F           ;               
 036F           ;               UART_PutChar(c); // Put the character on the serial
 036F 10                push X
 0370 5200              mov A,[X+0]
 0372 7C0000            xcall _UART_PutChar
 0375                   .dbline 241
 0375           ;               UART_PutCRLF();
 0375 7C0000            xcall _UART_PutCRLF
 0378 20                pop X
 0379                   .dbline 242
 0379           ;               return (c - '0'); // This returns the integer number entered instead of the ASCII value
 0379 62D000            mov REG[0xd0],>__r0
 037C 5200              mov A,[X+0]
 037E 1130              sub A,48
 0380 8003              xjmp L58
 0382           L60:
 0382                   .dbline 234
 0382 8FC9              xjmp L59
 0384           X7:
 0384                   .dbline -2
 0384           L58:
 0384 38FF              add SP,-1
 0386 20                pop X
 0387                   .dbline 0 ; func end
 0387 7F                ret
 0388                   .dbsym l c 0 c
 0388                   .dbsym l max -5 c
 0388                   .dbsym l min -4 c
 0388                   .dbend
 0388                   .dbfunc e PlayBlock _PlayBlock fV
 0388           ;      startAddr -> X+4
 0388           ;        endAddr -> X+2
 0388           ;           addr -> X+0
 0388           ;             id -> X-4
 0388           _PlayBlock::
 0388                   .dbline -1
 0388 10                push X
 0389 4F                mov X,SP
 038A 3806              add SP,6
 038C                   .dbline 250
 038C           ;       }
 038C           ;       
 038C           ;       return 0;
 038C           ; }
 038C           ; 
 038C           ; // This function plays a block of data where opt is the data block 0-3.
 038C           ; void PlayBlock(char id)
 038C           ; {     
 038C                   .dbline 251
 038C           ;       WORD startAddr = id * 0x2000; // Where the address starts for block
 038C 62D000            mov REG[0xd0],>__r0
 038F 52FC              mov A,[X-4]
 0391 5300              mov [__r0],A
 0393 550000            mov [__r1],0
 0396 6500              asl [__r0]
 0398 6500              asl [__r1]
 039A 6B00              rlc [__r0]
 039C 6500              asl [__r1]
 039E 6B00              rlc [__r0]
 03A0 6500              asl [__r1]
 03A2 6B00              rlc [__r0]
 03A4 6500              asl [__r1]
 03A6 6B00              rlc [__r0]
 03A8 5100              mov A,[__r1]
 03AA 5405              mov [X+5],A
 03AC 5100              mov A,[__r0]
 03AE 5404              mov [X+4],A
 03B0                   .dbline 252
 03B0           ;       WORD endAddr = startAddr + 0x2000; // Where the address ends for block
 03B0 5205              mov A,[X+5]
 03B2 0100              add A,0
 03B4 5403              mov [X+3],A
 03B6 5204              mov A,[X+4]
 03B8 0920              adc A,32
 03BA 5402              mov [X+2],A
 03BC                   .dbline 253
 03BC           ;       WORD addr = startAddr;
 03BC 5205              mov A,[X+5]
 03BE 5401              mov [X+1],A
 03C0 5204              mov A,[X+4]
 03C2 5400              mov [X+0],A
 03C4                   .dbline 255
 03C4           ;       
 03C4           ;       SPIRAM_WriteStatusRegister(SPIRAM_BYTE_MODE | SPIRAM_DISABLE_HOLD);
 03C4 5001              mov A,1
 03C6 08                push A
 03C7 7C0000            xcall _SPIRAM_WriteStatusRegister
 03CA 38FF              add SP,-1
 03CC 62D000            mov REG[0xd0],>__r0
 03CF                   .dbline 256
 03CF           ;       UART_CPutString("Press any key to abort\r\n");
 03CF 10                push X
 03D0 500C              mov A,>L66
 03D2 08                push A
 03D3 500C              mov A,<L66
 03D5 5C                mov X,A
 03D6 18                pop A
 03D7 7C0000            xcall _UART_CPutString
 03DA 20                pop X
 03DB 803D              xjmp L68
 03DD           L67:
 03DD                   .dbline 258
 03DD           ;       while (!UART_cReadChar())
 03DD           ;       {
 03DD                   .dbline 259
 03DD           ;               DAC8_WriteStall(SPIRAM_ReadByte(addr));
 03DD 5200              mov A,[X+0]
 03DF 08                push A
 03E0 5201              mov A,[X+1]
 03E2 08                push A
 03E3 7C0000            xcall _SPIRAM_ReadByte
 03E6 38FE              add SP,-2
 03E8 62D000            mov REG[0xd0],>__r0
 03EB 10                push X
 03EC 7C0000            xcall _DAC8_WriteStall
 03EF 20                pop X
 03F0                   .dbline 260
 03F0           ;               if (++addr > endAddr) addr = startAddr;
 03F0 62D000            mov REG[0xd0],>__r0
 03F3 5201              mov A,[X+1]
 03F5 0101              add A,1
 03F7 5300              mov [__r1],A
 03F9 5200              mov A,[X+0]
 03FB 0900              adc A,0
 03FD 5300              mov [__r0],A
 03FF 5100              mov A,[__r1]
 0401 5401              mov [X+1],A
 0403 5100              mov A,[__r0]
 0405 5400              mov [X+0],A
 0407 5203              mov A,[X+3]
 0409 1200              sub A,[__r1]
 040B 5202              mov A,[X+2]
 040D 1A00              sbb A,[__r0]
 040F D009              jnc L70
 0411           X10:
 0411                   .dbline 260
 0411 5205              mov A,[X+5]
 0413 5401              mov [X+1],A
 0415 5204              mov A,[X+4]
 0417 5400              mov [X+0],A
 0419           L70:
 0419                   .dbline 261
 0419           ;       }
 0419           L68:
 0419                   .dbline 257
 0419 10                push X
 041A 7C0000            xcall _UART_cReadChar
 041D 20                pop X
 041E 62D000            mov REG[0xd0],>__r0
 0421 3900              cmp A,0
 0423 AFB9              jz L67
 0425                   .dbline -2
 0425           L65:
 0425 38FA              add SP,-6
 0427 20                pop X
 0428                   .dbline 0 ; func end
 0428 7F                ret
 0429                   .dbsym l startAddr 4 i
 0429                   .dbsym l endAddr 2 i
 0429                   .dbsym l addr 0 i
 0429                   .dbsym l id -4 c
 0429                   .dbend
 0429                   .dbfunc e WriteBlock _WriteBlock fV
 0429           ;             ii -> X+139
 0429           ;        endAddr -> X+137
 0429           ;           temp -> X+9
 0429           ;             pi -> X+5
 0429           ;      startAddr -> X+3
 0429           ;           addr -> X+1
 0429           ;              i -> X+0
 0429           ;             id -> X-4
 0429           _WriteBlock::
 0429                   .dbline -1
 0429 10                push X
 042A 4F                mov X,SP
 042B 3894              add SP,-108
 042D                   .dbline 264
 042D           ; }
 042D           ; void WriteBlock(char id)
 042D           ; {     
 042D                   .dbline 266
 042D           ; 
 042D           ;       WORD startAddr = 0x2000 *id; // Where the address starts for block
 042D 62D000            mov REG[0xd0],>__r0
 0430 52FC              mov A,[X-4]
 0432 5300              mov [__r0],A
 0434 550000            mov [__r1],0
 0437 6500              asl [__r0]
 0439 6500              asl [__r1]
 043B 6B00              rlc [__r0]
 043D 6500              asl [__r1]
 043F 6B00              rlc [__r0]
 0441 6500              asl [__r1]
 0443 6B00              rlc [__r0]
 0445 6500              asl [__r1]
 0447 6B00              rlc [__r0]
 0449 5100              mov A,[__r1]
 044B 5404              mov [X+4],A
 044D 5100              mov A,[__r0]
 044F 5403              mov [X+3],A
 0451                   .dbline 267
 0451           ;       WORD endAddr = startAddr + 0x2000; // Where the address ends for block
 0451 5204              mov A,[X+4]
 0453 0100              add A,0
 0455 548A              mov [X-118],A
 0457 5203              mov A,[X+3]
 0459 0920              adc A,32
 045B 5489              mov [X-119],A
 045D                   .dbline 270
 045D           ;       WORD addr;
 045D           ;       BYTE i, ii;
 045D           ;       float pi = 3.1415;
 045D 560540            mov [X+5],64
 0460 560649            mov [X+6],73
 0463 56070E            mov [X+7],14
 0466 560856            mov [X+8],86
 0469                   .dbline 273
 0469           ;       char temp[128];
 0469           ;       
 0469           ;       SPIRAM_WriteStatusRegister(SPIRAM_SEQUENTIAL_MODE | SPIRAM_DISABLE_HOLD);
 0469 5041              mov A,65
 046B 08                push A
 046C 7C0000            xcall _SPIRAM_WriteStatusRegister
 046F 38FF              add SP,-1
 0471 62D000            mov REG[0xd0],>__r0
 0474                   .dbline 274
 0474           ;       switch (id)
 0474 52FC              mov A,[X-4]
 0476 548D              mov [X-115],A
 0478 568C00            mov [X-116],0
 047B 3D8C00            cmp [X-116],0
 047E B006              jnz X11
 0480 3D8D00            cmp [X-115],0
 0483 A028              jz L76
 0485           X11:
 0485 3D8C00            cmp [X-116],0
 0488 B006              jnz X12
 048A 3D8D01            cmp [X-115],1
 048D A4A2              jz L90
 048F           X12:
 048F 3D8C00            cmp [X-116],0
 0492 B009              jnz X13
 0494 3D8D02            cmp [X-115],2
 0497 B004              jnz X55
 0499 7D0D96            ljmp L102
 049C           X55:
 049C           X13:
 049C 3D8C00            cmp [X-116],0
 049F B009              jnz X14
 04A1 3D8D03            cmp [X-115],3
 04A4 B004              jnz X56
 04A6 7D11FC            ljmp L114
 04A9           X56:
 04A9           X14:
 04A9 7D14AD            xjmp L73
 04AC           L76:
 04AC                   .dbline 277
 04AC           ;       {
 04AC           ;               case 0: 
 04AC           ;                       for (addr = startAddr; addr < endAddr; addr += 128)
 04AC 5204              mov A,[X+4]
 04AE 5402              mov [X+2],A
 04B0 5203              mov A,[X+3]
 04B2 5401              mov [X+1],A
 04B4 846E              xjmp L80
 04B6           L77:
 04B6                   .dbline 278
 04B6           ;                       {
 04B6                   .dbline 279
 04B6           ;                               for(i = 0; i < 128; i++)
 04B6 560000            mov [X+0],0
 04B9 8421              xjmp L84
 04BB           L81:
 04BB                   .dbline 280
 04BB           ;                               {
 04BB                   .dbline 281
 04BB           ;                                       temp[i] = (char)(0.5 + 0.5*sin(800*pi*((addr - startAddr) + i)) + 0.5*sin(800*pi*((addr - startAddr) + i))*(128/2.5));  
 04BB 62D000            mov REG[0xd0],>__r0
 04BE 5200              mov A,[X+0]
 04C0 5300              mov [__r1],A
 04C2 550000            mov [__r0],0
 04C5 5202              mov A,[X+2]
 04C7 1304              sub A,[X+4]
 04C9 5300              mov [__r3],A
 04CB 5201              mov A,[X+1]
 04CD 1B03              sbb A,[X+3]
 04CF 5300              mov [__r2],A
 04D1 5100              mov A,[__r3]
 04D3 0200              add A,[__r1]
 04D5 5300              mov [__r1],A
 04D7 5100              mov A,[__r2]
 04D9 0A00              adc A,[__r0]
 04DB 5300              mov [__r0],A
 04DD 5100              mov A,[__r1]
 04DF 2101              and A,1
 04E1 5300              mov [__r3],A
 04E3 5100              mov A,[__r0]
 04E5 2100              and A,0
 04E7 5300              mov [__r2],A
 04E9 5100              mov A,[__r3]
 04EB 5300              mov [__r7],A
 04ED 5100              mov A,[__r2]
 04EF 5300              mov [__r6],A
 04F1 470080            tst [__r6],-128
 04F4 A009              jz X15
 04F6 5500FF            mov [__r5],-1
 04F9 5500FF            mov [__r4],-1
 04FC 800A              jmp X16
 04FE           X15:
 04FE 62D000            mov REG[0xd0],>__r0
 0501 550000            mov [__r5],0
 0504 550000            mov [__r4],0
 0507           X16:
 0507 62D000            mov REG[0xd0],>__r0
 050A 5100              mov A,[__r4]
 050C 08                push A
 050D 5100              mov A,[__r5]
 050F 08                push A
 0510 5100              mov A,[__r6]
 0512 08                push A
 0513 5100              mov A,[__r7]
 0515 08                push A
 0516 7C0000            xcall __long2fp
 0519 18                pop A
 051A 5300              mov [__r7],A
 051C 18                pop A
 051D 5300              mov [__r6],A
 051F 18                pop A
 0520 5300              mov [__r5],A
 0522 18                pop A
 0523 5300              mov [__r4],A
 0525 70FB              and F,-5
 0527 6E00              rrc [__r0]
 0529 6E00              rrc [__r1]
 052B 5100              mov A,[__r1]
 052D 5300              mov [__r3],A
 052F 5100              mov A,[__r0]
 0531 5300              mov [__r2],A
 0533 470080            tst [__r2],-128
 0536 A009              jz X17
 0538 5500FF            mov [__r1],-1
 053B 5500FF            mov [__r0],-1
 053E 800A              jmp X18
 0540           X17:
 0540 62D000            mov REG[0xd0],>__r0
 0543 550000            mov [__r1],0
 0546 550000            mov [__r0],0
 0549           X18:
 0549 62D000            mov REG[0xd0],>__r0
 054C 5100              mov A,[__r0]
 054E 08                push A
 054F 5100              mov A,[__r1]
 0551 08                push A
 0552 5100              mov A,[__r2]
 0554 08                push A
 0555 5100              mov A,[__r3]
 0557 08                push A
 0558 7C0000            xcall __long2fp
 055B 18                pop A
 055C 5300              mov [__r3],A
 055E 18                pop A
 055F 5300              mov [__r2],A
 0561 18                pop A
 0562 5300              mov [__r1],A
 0564 18                pop A
 0565 08                push A
 0566 5100              mov A,[__r1]
 0568 08                push A
 0569 5100              mov A,[__r2]
 056B 08                push A
 056C 5100              mov A,[__r3]
 056E 08                push A
 056F 5040              mov A,64
 0571 08                push A
 0572 5000              mov A,0
 0574 08                push A
 0575 08                push A
 0576 08                push A
 0577 7C0000            xcall __fpmul
 057A 18                pop A
 057B 5300              mov [__r3],A
 057D 18                pop A
 057E 5300              mov [__r2],A
 0580 18                pop A
 0581 5300              mov [__r1],A
 0583 18                pop A
 0584 5300              mov [__r0],A
 0586 38FC              add SP,-4
 0588 5100              mov A,[__r4]
 058A 08                push A
 058B 5100              mov A,[__r5]
 058D 08                push A
 058E 5100              mov A,[__r6]
 0590 08                push A
 0591 5100              mov A,[__r7]
 0593 08                push A
 0594 5100              mov A,[__r0]
 0596 08                push A
 0597 5100              mov A,[__r1]
 0599 08                push A
 059A 5100              mov A,[__r2]
 059C 08                push A
 059D 5100              mov A,[__r3]
 059F 08                push A
 05A0 7C0000            xcall __fpadd
 05A3 18                pop A
 05A4 5300              mov [__r3],A
 05A6 18                pop A
 05A7 5300              mov [__r2],A
 05A9 18                pop A
 05AA 5300              mov [__r1],A
 05AC 18                pop A
 05AD 5300              mov [__r0],A
 05AF 38FC              add SP,-4
 05B1 5205              mov A,[X+5]
 05B3 08                push A
 05B4 5206              mov A,[X+6]
 05B6 08                push A
 05B7 5207              mov A,[X+7]
 05B9 08                push A
 05BA 5208              mov A,[X+8]
 05BC 08                push A
 05BD 5044              mov A,68
 05BF 08                push A
 05C0 5048              mov A,72
 05C2 08                push A
 05C3 5000              mov A,0
 05C5 08                push A
 05C6 08                push A
 05C7 7C0000            xcall __fpmul
 05CA 18                pop A
 05CB 5300              mov [__r7],A
 05CD 18                pop A
 05CE 5300              mov [__r6],A
 05D0 18                pop A
 05D1 5300              mov [__r5],A
 05D3 18                pop A
 05D4 5300              mov [__r4],A
 05D6 38FC              add SP,-4
 05D8 5100              mov A,[__r0]
 05DA 08                push A
 05DB 5100              mov A,[__r1]
 05DD 08                push A
 05DE 5100              mov A,[__r2]
 05E0 08                push A
 05E1 5100              mov A,[__r3]
 05E3 08                push A
 05E4 5100              mov A,[__r4]
 05E6 08                push A
 05E7 5100              mov A,[__r5]
 05E9 08                push A
 05EA 5100              mov A,[__r6]
 05EC 08                push A
 05ED 5100              mov A,[__r7]
 05EF 08                push A
 05F0 7C0000            xcall __fpmul
 05F3 18                pop A
 05F4 5300              mov [__r3],A
 05F6 18                pop A
 05F7 5300              mov [__r2],A
 05F9 18                pop A
 05FA 5300              mov [__r1],A
 05FC 18                pop A
 05FD 38FC              add SP,-4
 05FF 08                push A
 0600 5100              mov A,[__r1]
 0602 08                push A
 0603 5100              mov A,[__r2]
 0605 08                push A
 0606 5100              mov A,[__r3]
 0608 08                push A
 0609 7C0000            xcall _sinf
 060C 38FC              add SP,-4
 060E 62D000            mov REG[0xd0],>__r0
 0611 5100              mov A,[__r0]
 0613 5490              mov [X-112],A
 0615 5100              mov A,[__r1]
 0617 5491              mov [X-111],A
 0619 5100              mov A,[__r2]
 061B 5492              mov [X-110],A
 061D 5100              mov A,[__r3]
 061F 5493              mov [X-109],A
 0621 5200              mov A,[X+0]
 0623 5300              mov [__r5],A
 0625 550000            mov [__r4],0
 0628 5202              mov A,[X+2]
 062A 1304              sub A,[X+4]
 062C 5300              mov [__r7],A
 062E 5201              mov A,[X+1]
 0630 1B03              sbb A,[X+3]
 0632 5300              mov [__r6],A
 0634 5100              mov A,[__r7]
 0636 0200              add A,[__r5]
 0638 5300              mov [__r5],A
 063A 5100              mov A,[__r6]
 063C 0A00              adc A,[__r4]
 063E 5300              mov [__r4],A
 0640 5100              mov A,[__r5]
 0642 2101              and A,1
 0644 5300              mov [__r7],A
 0646 5100              mov A,[__r4]
 0648 2100              and A,0
 064A 5300              mov [__r6],A
 064C 5100              mov A,[__r7]
 064E 5300              mov [__r11],A
 0650 5100              mov A,[__r6]
 0652 5300              mov [__r10],A
 0654 470080            tst [__r10],-128
 0657 A009              jz X19
 0659 5500FF            mov [__r9],-1
 065C 5500FF            mov [__r8],-1
 065F 800A              jmp X20
 0661           X19:
 0661 62D000            mov REG[0xd0],>__r0
 0664 550000            mov [__r9],0
 0667 550000            mov [__r8],0
 066A           X20:
 066A 62D000            mov REG[0xd0],>__r0
 066D 5100              mov A,[__r8]
 066F 08                push A
 0670 5100              mov A,[__r9]
 0672 08                push A
 0673 5100              mov A,[__r10]
 0675 08                push A
 0676 5100              mov A,[__r11]
 0678 08                push A
 0679 7C0000            xcall __long2fp
 067C 18                pop A
 067D 5300              mov [__r11],A
 067F 18                pop A
 0680 5300              mov [__r10],A
 0682 18                pop A
 0683 5300              mov [__r9],A
 0685 18                pop A
 0686 5300              mov [__r8],A
 0688 70FB              and F,-5
 068A 6E00              rrc [__r4]
 068C 6E00              rrc [__r5]
 068E 5100              mov A,[__r5]
 0690 5300              mov [__r7],A
 0692 5100              mov A,[__r4]
 0694 5300              mov [__r6],A
 0696 470080            tst [__r6],-128
 0699 A009              jz X21
 069B 5500FF            mov [__r5],-1
 069E 5500FF            mov [__r4],-1
 06A1 800A              jmp X22
 06A3           X21:
 06A3 62D000            mov REG[0xd0],>__r0
 06A6 550000            mov [__r5],0
 06A9 550000            mov [__r4],0
 06AC           X22:
 06AC 62D000            mov REG[0xd0],>__r0
 06AF 5100              mov A,[__r4]
 06B1 08                push A
 06B2 5100              mov A,[__r5]
 06B4 08                push A
 06B5 5100              mov A,[__r6]
 06B7 08                push A
 06B8 5100              mov A,[__r7]
 06BA 08                push A
 06BB 7C0000            xcall __long2fp
 06BE 18                pop A
 06BF 5300              mov [__r7],A
 06C1 18                pop A
 06C2 5300              mov [__r6],A
 06C4 18                pop A
 06C5 5300              mov [__r5],A
 06C7 18                pop A
 06C8 08                push A
 06C9 5100              mov A,[__r5]
 06CB 08                push A
 06CC 5100              mov A,[__r6]
 06CE 08                push A
 06CF 5100              mov A,[__r7]
 06D1 08                push A
 06D2 5040              mov A,64
 06D4 08                push A
 06D5 5000              mov A,0
 06D7 08                push A
 06D8 08                push A
 06D9 08                push A
 06DA 7C0000            xcall __fpmul
 06DD 18                pop A
 06DE 5300              mov [__r7],A
 06E0 18                pop A
 06E1 5300              mov [__r6],A
 06E3 18                pop A
 06E4 5300              mov [__r5],A
 06E6 18                pop A
 06E7 5300              mov [__r4],A
 06E9 38FC              add SP,-4
 06EB 5100              mov A,[__r8]
 06ED 08                push A
 06EE 5100              mov A,[__r9]
 06F0 08                push A
 06F1 5100              mov A,[__r10]
 06F3 08                push A
 06F4 5100              mov A,[__r11]
 06F6 08                push A
 06F7 5100              mov A,[__r4]
 06F9 08                push A
 06FA 5100              mov A,[__r5]
 06FC 08                push A
 06FD 5100              mov A,[__r6]
 06FF 08                push A
 0700 5100              mov A,[__r7]
 0702 08                push A
 0703 7C0000            xcall __fpadd
 0706 18                pop A
 0707 5300              mov [__r7],A
 0709 18                pop A
 070A 5300              mov [__r6],A
 070C 18                pop A
 070D 5300              mov [__r5],A
 070F 18                pop A
 0710 5300              mov [__r4],A
 0712 38FC              add SP,-4
 0714 5205              mov A,[X+5]
 0716 08                push A
 0717 5206              mov A,[X+6]
 0719 08                push A
 071A 5207              mov A,[X+7]
 071C 08                push A
 071D 5208              mov A,[X+8]
 071F 08                push A
 0720 5044              mov A,68
 0722 08                push A
 0723 5048              mov A,72
 0725 08                push A
 0726 5000              mov A,0
 0728 08                push A
 0729 08                push A
 072A 7C0000            xcall __fpmul
 072D 18                pop A
 072E 5300              mov [__r11],A
 0730 18                pop A
 0731 5300              mov [__r10],A
 0733 18                pop A
 0734 5300              mov [__r9],A
 0736 18                pop A
 0737 5300              mov [__r8],A
 0739 38FC              add SP,-4
 073B 5100              mov A,[__r4]
 073D 08                push A
 073E 5100              mov A,[__r5]
 0740 08                push A
 0741 5100              mov A,[__r6]
 0743 08                push A
 0744 5100              mov A,[__r7]
 0746 08                push A
 0747 5100              mov A,[__r8]
 0749 08                push A
 074A 5100              mov A,[__r9]
 074C 08                push A
 074D 5100              mov A,[__r10]
 074F 08                push A
 0750 5100              mov A,[__r11]
 0752 08                push A
 0753 7C0000            xcall __fpmul
 0756 18                pop A
 0757 5300              mov [__r7],A
 0759 18                pop A
 075A 5300              mov [__r6],A
 075C 18                pop A
 075D 5300              mov [__r5],A
 075F 18                pop A
 0760 38FC              add SP,-4
 0762 08                push A
 0763 5100              mov A,[__r5]
 0765 08                push A
 0766 5100              mov A,[__r6]
 0768 08                push A
 0769 5100              mov A,[__r7]
 076B 08                push A
 076C 7C0000            xcall _sinf
 076F 38FC              add SP,-4
 0771 62D000            mov REG[0xd0],>__r0
 0774 5100              mov A,[__r0]
 0776 08                push A
 0777 5100              mov A,[__r1]
 0779 08                push A
 077A 5100              mov A,[__r2]
 077C 08                push A
 077D 5100              mov A,[__r3]
 077F 08                push A
 0780 503F              mov A,63
 0782 08                push A
 0783 5000              mov A,0
 0785 08                push A
 0786 08                push A
 0787 08                push A
 0788 7C0000            xcall __fpmul
 078B 18                pop A
 078C 5300              mov [__r3],A
 078E 18                pop A
 078F 5300              mov [__r2],A
 0791 18                pop A
 0792 5300              mov [__r1],A
 0794 18                pop A
 0795 38FC              add SP,-4
 0797 08                push A
 0798 5100              mov A,[__r1]
 079A 08                push A
 079B 5100              mov A,[__r2]
 079D 08                push A
 079E 5100              mov A,[__r3]
 07A0 08                push A
 07A1 5042              mov A,66
 07A3 08                push A
 07A4 504C              mov A,76
 07A6 08                push A
 07A7 50CC              mov A,-52
 07A9 08                push A
 07AA 50CD              mov A,-51
 07AC 08                push A
 07AD 7C0000            xcall __fpmul
 07B0 18                pop A
 07B1 5300              mov [__r3],A
 07B3 18                pop A
 07B4 5300              mov [__r2],A
 07B6 18                pop A
 07B7 5300              mov [__r1],A
 07B9 18                pop A
 07BA 5300              mov [__r0],A
 07BC 38FC              add SP,-4
 07BE 5290              mov A,[X-112]
 07C0 08                push A
 07C1 5291              mov A,[X-111]
 07C3 08                push A
 07C4 5292              mov A,[X-110]
 07C6 08                push A
 07C7 5293              mov A,[X-109]
 07C9 08                push A
 07CA 503F              mov A,63
 07CC 08                push A
 07CD 5000              mov A,0
 07CF 08                push A
 07D0 08                push A
 07D1 08                push A
 07D2 7C0000            xcall __fpmul
 07D5 18                pop A
 07D6 5300              mov [__r7],A
 07D8 18                pop A
 07D9 5300              mov [__r6],A
 07DB 18                pop A
 07DC 5300              mov [__r5],A
 07DE 18                pop A
 07DF 5300              mov [__r4],A
 07E1 38FC              add SP,-4
 07E3 503F              mov A,63
 07E5 08                push A
 07E6 5000              mov A,0
 07E8 08                push A
 07E9 08                push A
 07EA 08                push A
 07EB 5100              mov A,[__r4]
 07ED 08                push A
 07EE 5100              mov A,[__r5]
 07F0 08                push A
 07F1 5100              mov A,[__r6]
 07F3 08                push A
 07F4 5100              mov A,[__r7]
 07F6 08                push A
 07F7 7C0000            xcall __fpadd
 07FA 18                pop A
 07FB 5300              mov [__r7],A
 07FD 18                pop A
 07FE 5300              mov [__r6],A
 0800 18                pop A
 0801 5300              mov [__r5],A
 0803 18                pop A
 0804 5300              mov [__r4],A
 0806 38FC              add SP,-4
 0808 5100              mov A,[__r0]
 080A 08                push A
 080B 5100              mov A,[__r1]
 080D 08                push A
 080E 5100              mov A,[__r2]
 0810 08                push A
 0811 5100              mov A,[__r3]
 0813 08                push A
 0814 5100              mov A,[__r4]
 0816 08                push A
 0817 5100              mov A,[__r5]
 0819 08                push A
 081A 5100              mov A,[__r6]
 081C 08                push A
 081D 5100              mov A,[__r7]
 081F 08                push A
 0820 7C0000            xcall __fpadd
 0823 18                pop A
 0824 5300              mov [__r3],A
 0826 18                pop A
 0827 5300              mov [__r2],A
 0829 18                pop A
 082A 5300              mov [__r1],A
 082C 18                pop A
 082D 5300              mov [__r0],A
 082F 38FC              add SP,-4
 0831 5047              mov A,71
 0833 08                push A
 0834 5000              mov A,0
 0836 08                push A
 0837 08                push A
 0838 08                push A
 0839 5100              mov A,[__r0]
 083B 08                push A
 083C 5100              mov A,[__r1]
 083E 08                push A
 083F 5100              mov A,[__r2]
 0841 08                push A
 0842 5100              mov A,[__r3]
 0844 08                push A
 0845 7C0000            xcall __fpcmp
 0848 38F8              add SP,-8
 084A 39FF              cmp A,-1
 084C A047              jz L86
 084E 5047              mov A,71
 0850 08                push A
 0851 5000              mov A,0
 0853 08                push A
 0854 08                push A
 0855 08                push A
 0856 5100              mov A,[__r0]
 0858 08                push A
 0859 5100              mov A,[__r1]
 085B 08                push A
 085C 5100              mov A,[__r2]
 085E 08                push A
 085F 5100              mov A,[__r3]
 0861 08                push A
 0862 7C0000            xcall __fpsub
 0865 18                pop A
 0866 5300              mov [__r7],A
 0868 18                pop A
 0869 5300              mov [__r6],A
 086B 18                pop A
 086C 5300              mov [__r5],A
 086E 18                pop A
 086F 38FC              add SP,-4
 0871 08                push A
 0872 5100              mov A,[__r5]
 0874 08                push A
 0875 5100              mov A,[__r6]
 0877 08                push A
 0878 5100              mov A,[__r7]
 087A 08                push A
 087B 7C0000            xcall __fp2long
 087E 18                pop A
 087F 5300              mov [__r5],A
 0881 18                pop A
 0882 5300              mov [__r4],A
 0884 38FE              add SP,-2
 0886 5100              mov A,[__r5]
 0888 0100              add A,0
 088A 548F              mov [X-113],A
 088C 5100              mov A,[__r4]
 088E 0980              adc A,-128
 0890 548E              mov [X-114],A
 0892 8023              xjmp L87
 0894           L86:
 0894 62D000            mov REG[0xd0],>__r0
 0897 5100              mov A,[__r0]
 0899 08                push A
 089A 5100              mov A,[__r1]
 089C 08                push A
 089D 5100              mov A,[__r2]
 089F 08                push A
 08A0 5100              mov A,[__r3]
 08A2 08                push A
 08A3 7C0000            xcall __fp2long
 08A6 18                pop A
 08A7 5300              mov [__r1],A
 08A9 18                pop A
 08AA 5300              mov [__r0],A
 08AC 38FE              add SP,-2
 08AE 5100              mov A,[__r1]
 08B0 548F              mov [X-113],A
 08B2 5100              mov A,[__r0]
 08B4 548E              mov [X-114],A
 08B6           L87:
 08B6 62D000            mov REG[0xd0],>__r0
 08B9 550007            mov [__r0],7
 08BC 5A00              mov [__r1],X
 08BE 060009            add [__r1],9
 08C1 5200              mov A,[X+0]
 08C3 0200              add A,[__r1]
 08C5 5300              mov [__r1],A
 08C7 5000              mov A,0
 08C9 0A00              adc A,[__r0]
 08CB 5300              mov [__r0],A
 08CD 528F              mov A,[X-113]
 08CF 5300              mov [__r2],A
 08D1 5100              mov A,[__r0]
 08D3 60D5              mov REG[0xd5],A
 08D5 5100              mov A,[__r2]
 08D7 3F00              mvi [__r1],A
 08D9                   .dbline 282
 08D9           ;                               }       
 08D9           L82:
 08D9                   .dbline 279
 08D9 7700              inc [X+0]
 08DB           L84:
 08DB                   .dbline 279
 08DB 3D0080            cmp [X+0],-128
 08DE CBDC              jc L81
 08E0           X24:
 08E0                   .dbline 283
 08E0           ;                               SPIRAM_WriteArray(addr, temp, 128);
 08E0 5080              mov A,-128
 08E2 08                push A
 08E3 62D000            mov REG[0xd0],>__r0
 08E6 5A00              mov [__r1],X
 08E8 060009            add [__r1],9
 08EB 5007              mov A,7
 08ED 08                push A
 08EE 5100              mov A,[__r1]
 08F0 08                push A
 08F1 5201              mov A,[X+1]
 08F3 08                push A
 08F4 5202              mov A,[X+2]
 08F6 08                push A
 08F7 7C0000            xcall _SPIRAM_WriteArray
 08FA 38FB              add SP,-5
 08FC                   .dbline 284
 08FC           ;                               UART_CPutString("Writing to ");
 08FC 10                push X
 08FD 5000              mov A,>L88
 08FF 08                push A
 0900 5000              mov A,<L88
 0902 5C                mov X,A
 0903 18                pop A
 0904 7C0000            xcall _UART_CPutString
 0907 20                pop X
 0908                   .dbline 285
 0908           ;                               UART_PutSHexInt(addr);
 0908 10                push X
 0909 5201              mov A,[X+1]
 090B 08                push A
 090C 5202              mov A,[X+2]
 090E 20                pop X
 090F 7C0000            xcall _UART_PutSHexInt
 0912                   .dbline 286
 0912           ;                               UART_CPutString("\r\n");
 0912 50FD              mov A,>L89
 0914 08                push A
 0915 50FD              mov A,<L89
 0917 5C                mov X,A
 0918 18                pop A
 0919 7C0000            xcall _UART_CPutString
 091C 20                pop X
 091D                   .dbline 287
 091D           ;                       }
 091D           L78:
 091D                   .dbline 277
 091D 070280            add [X+2],-128
 0920 0F0100            adc [X+1],0
 0923           L80:
 0923                   .dbline 277
 0923 5202              mov A,[X+2]
 0925 138A              sub A,[X-118]
 0927 5201              mov A,[X+1]
 0929 1B89              sbb A,[X-119]
 092B CB8A              jc L77
 092D           X25:
 092D                   .dbline 288
 092D           ;                       break;
 092D 7D14AD            xjmp L74
 0930           L90:
 0930                   .dbline 291
 0930           ;               
 0930           ;               case 1: 
 0930           ;                       for (addr = startAddr; addr < endAddr; addr += 128)
 0930 5204              mov A,[X+4]
 0932 5402              mov [X+2],A
 0934 5203              mov A,[X+3]
 0936 5401              mov [X+1],A
 0938 8451              xjmp L94
 093A           L91:
 093A                   .dbline 292
 093A           ;                       {
 093A                   .dbline 293
 093A           ;                               for(i = 0; i < 128; i++)
 093A 560000            mov [X+0],0
 093D 8425              xjmp L98
 093F           L95:
 093F                   .dbline 294
 093F           ;                               {
 093F                   .dbline 295
 093F           ;                                       temp[i] = (char)(0.2 + 0.5*sin(600*pi*((addr - startAddr) + i)) + 0.5*sin(200*pi*((addr - startAddr) + i))*(128/2.5));
 093F 62D000            mov REG[0xd0],>__r0
 0942 5200              mov A,[X+0]
 0944 5300              mov [__r1],A
 0946 550000            mov [__r0],0
 0949 5202              mov A,[X+2]
 094B 1304              sub A,[X+4]
 094D 5300              mov [__r3],A
 094F 5201              mov A,[X+1]
 0951 1B03              sbb A,[X+3]
 0953 5300              mov [__r2],A
 0955 5100              mov A,[__r3]
 0957 0200              add A,[__r1]
 0959 5300              mov [__r1],A
 095B 5100              mov A,[__r2]
 095D 0A00              adc A,[__r0]
 095F 5300              mov [__r0],A
 0961 5100              mov A,[__r1]
 0963 2101              and A,1
 0965 5300              mov [__r3],A
 0967 5100              mov A,[__r0]
 0969 2100              and A,0
 096B 5300              mov [__r2],A
 096D 5100              mov A,[__r3]
 096F 5300              mov [__r7],A
 0971 5100              mov A,[__r2]
 0973 5300              mov [__r6],A
 0975 470080            tst [__r6],-128
 0978 A009              jz X26
 097A 5500FF            mov [__r5],-1
 097D 5500FF            mov [__r4],-1
 0980 800A              jmp X27
 0982           X26:
 0982 62D000            mov REG[0xd0],>__r0
 0985 550000            mov [__r5],0
 0988 550000            mov [__r4],0
 098B           X27:
 098B 62D000            mov REG[0xd0],>__r0
 098E 5100              mov A,[__r4]
 0990 08                push A
 0991 5100              mov A,[__r5]
 0993 08                push A
 0994 5100              mov A,[__r6]
 0996 08                push A
 0997 5100              mov A,[__r7]
 0999 08                push A
 099A 7C0000            xcall __long2fp
 099D 18                pop A
 099E 5300              mov [__r7],A
 09A0 18                pop A
 09A1 5300              mov [__r6],A
 09A3 18                pop A
 09A4 5300              mov [__r5],A
 09A6 18                pop A
 09A7 5300              mov [__r4],A
 09A9 70FB              and F,-5
 09AB 6E00              rrc [__r0]
 09AD 6E00              rrc [__r1]
 09AF 5100              mov A,[__r1]
 09B1 5300              mov [__r3],A
 09B3 5100              mov A,[__r0]
 09B5 5300              mov [__r2],A
 09B7 470080            tst [__r2],-128
 09BA A009              jz X28
 09BC 5500FF            mov [__r1],-1
 09BF 5500FF            mov [__r0],-1
 09C2 800A              jmp X29
 09C4           X28:
 09C4 62D000            mov REG[0xd0],>__r0
 09C7 550000            mov [__r1],0
 09CA 550000            mov [__r0],0
 09CD           X29:
 09CD 62D000            mov REG[0xd0],>__r0
 09D0 5100              mov A,[__r0]
 09D2 08                push A
 09D3 5100              mov A,[__r1]
 09D5 08                push A
 09D6 5100              mov A,[__r2]
 09D8 08                push A
 09D9 5100              mov A,[__r3]
 09DB 08                push A
 09DC 7C0000            xcall __long2fp
 09DF 18                pop A
 09E0 5300              mov [__r3],A
 09E2 18                pop A
 09E3 5300              mov [__r2],A
 09E5 18                pop A
 09E6 5300              mov [__r1],A
 09E8 18                pop A
 09E9 08                push A
 09EA 5100              mov A,[__r1]
 09EC 08                push A
 09ED 5100              mov A,[__r2]
 09EF 08                push A
 09F0 5100              mov A,[__r3]
 09F2 08                push A
 09F3 5040              mov A,64
 09F5 08                push A
 09F6 5000              mov A,0
 09F8 08                push A
 09F9 08                push A
 09FA 08                push A
 09FB 7C0000            xcall __fpmul
 09FE 18                pop A
 09FF 5300              mov [__r3],A
 0A01 18                pop A
 0A02 5300              mov [__r2],A
 0A04 18                pop A
 0A05 5300              mov [__r1],A
 0A07 18                pop A
 0A08 5300              mov [__r0],A
 0A0A 38FC              add SP,-4
 0A0C 5100              mov A,[__r4]
 0A0E 08                push A
 0A0F 5100              mov A,[__r5]
 0A11 08                push A
 0A12 5100              mov A,[__r6]
 0A14 08                push A
 0A15 5100              mov A,[__r7]
 0A17 08                push A
 0A18 5100              mov A,[__r0]
 0A1A 08                push A
 0A1B 5100              mov A,[__r1]
 0A1D 08                push A
 0A1E 5100              mov A,[__r2]
 0A20 08                push A
 0A21 5100              mov A,[__r3]
 0A23 08                push A
 0A24 7C0000            xcall __fpadd
 0A27 18                pop A
 0A28 5300              mov [__r3],A
 0A2A 18                pop A
 0A2B 5300              mov [__r2],A
 0A2D 18                pop A
 0A2E 5300              mov [__r1],A
 0A30 18                pop A
 0A31 5300              mov [__r0],A
 0A33 38FC              add SP,-4
 0A35 5205              mov A,[X+5]
 0A37 08                push A
 0A38 5206              mov A,[X+6]
 0A3A 08                push A
 0A3B 5207              mov A,[X+7]
 0A3D 08                push A
 0A3E 5208              mov A,[X+8]
 0A40 08                push A
 0A41 5044              mov A,68
 0A43 08                push A
 0A44 5016              mov A,22
 0A46 08                push A
 0A47 5000              mov A,0
 0A49 08                push A
 0A4A 08                push A
 0A4B 7C0000            xcall __fpmul
 0A4E 18                pop A
 0A4F 5300              mov [__r7],A
 0A51 18                pop A
 0A52 5300              mov [__r6],A
 0A54 18                pop A
 0A55 5300              mov [__r5],A
 0A57 18                pop A
 0A58 5300              mov [__r4],A
 0A5A 38FC              add SP,-4
 0A5C 5100              mov A,[__r0]
 0A5E 08                push A
 0A5F 5100              mov A,[__r1]
 0A61 08                push A
 0A62 5100              mov A,[__r2]
 0A64 08                push A
 0A65 5100              mov A,[__r3]
 0A67 08                push A
 0A68 5100              mov A,[__r4]
 0A6A 08                push A
 0A6B 5100              mov A,[__r5]
 0A6D 08                push A
 0A6E 5100              mov A,[__r6]
 0A70 08                push A
 0A71 5100              mov A,[__r7]
 0A73 08                push A
 0A74 7C0000            xcall __fpmul
 0A77 18                pop A
 0A78 5300              mov [__r3],A
 0A7A 18                pop A
 0A7B 5300              mov [__r2],A
 0A7D 18                pop A
 0A7E 5300              mov [__r1],A
 0A80 18                pop A
 0A81 38FC              add SP,-4
 0A83 08                push A
 0A84 5100              mov A,[__r1]
 0A86 08                push A
 0A87 5100              mov A,[__r2]
 0A89 08                push A
 0A8A 5100              mov A,[__r3]
 0A8C 08                push A
 0A8D 7C0000            xcall _sinf
 0A90 38FC              add SP,-4
 0A92 62D000            mov REG[0xd0],>__r0
 0A95 5100              mov A,[__r0]
 0A97 5490              mov [X-112],A
 0A99 5100              mov A,[__r1]
 0A9B 5491              mov [X-111],A
 0A9D 5100              mov A,[__r2]
 0A9F 5492              mov [X-110],A
 0AA1 5100              mov A,[__r3]
 0AA3 5493              mov [X-109],A
 0AA5 5200              mov A,[X+0]
 0AA7 5300              mov [__r5],A
 0AA9 550000            mov [__r4],0
 0AAC 5202              mov A,[X+2]
 0AAE 1304              sub A,[X+4]
 0AB0 5300              mov [__r7],A
 0AB2 5201              mov A,[X+1]
 0AB4 1B03              sbb A,[X+3]
 0AB6 5300              mov [__r6],A
 0AB8 5100              mov A,[__r7]
 0ABA 0200              add A,[__r5]
 0ABC 5300              mov [__r5],A
 0ABE 5100              mov A,[__r6]
 0AC0 0A00              adc A,[__r4]
 0AC2 5300              mov [__r4],A
 0AC4 5100              mov A,[__r5]
 0AC6 2101              and A,1
 0AC8 5300              mov [__r7],A
 0ACA 5100              mov A,[__r4]
 0ACC 2100              and A,0
 0ACE 5300              mov [__r6],A
 0AD0 5100              mov A,[__r7]
 0AD2 5300              mov [__r11],A
 0AD4 5100              mov A,[__r6]
 0AD6 5300              mov [__r10],A
 0AD8 470080            tst [__r10],-128
 0ADB A009              jz X30
 0ADD 5500FF            mov [__r9],-1
 0AE0 5500FF            mov [__r8],-1
 0AE3 800A              jmp X31
 0AE5           X30:
 0AE5 62D000            mov REG[0xd0],>__r0
 0AE8 550000            mov [__r9],0
 0AEB 550000            mov [__r8],0
 0AEE           X31:
 0AEE 62D000            mov REG[0xd0],>__r0
 0AF1 5100              mov A,[__r8]
 0AF3 08                push A
 0AF4 5100              mov A,[__r9]
 0AF6 08                push A
 0AF7 5100              mov A,[__r10]
 0AF9 08                push A
 0AFA 5100              mov A,[__r11]
 0AFC 08                push A
 0AFD 7C0000            xcall __long2fp
 0B00 18                pop A
 0B01 5300              mov [__r11],A
 0B03 18                pop A
 0B04 5300              mov [__r10],A
 0B06 18                pop A
 0B07 5300              mov [__r9],A
 0B09 18                pop A
 0B0A 5300              mov [__r8],A
 0B0C 70FB              and F,-5
 0B0E 6E00              rrc [__r4]
 0B10 6E00              rrc [__r5]
 0B12 5100              mov A,[__r5]
 0B14 5300              mov [__r7],A
 0B16 5100              mov A,[__r4]
 0B18 5300              mov [__r6],A
 0B1A 470080            tst [__r6],-128
 0B1D A009              jz X32
 0B1F 5500FF            mov [__r5],-1
 0B22 5500FF            mov [__r4],-1
 0B25 800A              jmp X33
 0B27           X32:
 0B27 62D000            mov REG[0xd0],>__r0
 0B2A 550000            mov [__r5],0
 0B2D 550000            mov [__r4],0
 0B30           X33:
 0B30 62D000            mov REG[0xd0],>__r0
 0B33 5100              mov A,[__r4]
 0B35 08                push A
 0B36 5100              mov A,[__r5]
 0B38 08                push A
 0B39 5100              mov A,[__r6]
 0B3B 08                push A
 0B3C 5100              mov A,[__r7]
 0B3E 08                push A
 0B3F 7C0000            xcall __long2fp
 0B42 18                pop A
 0B43 5300              mov [__r7],A
 0B45 18                pop A
 0B46 5300              mov [__r6],A
 0B48 18                pop A
 0B49 5300              mov [__r5],A
 0B4B 18                pop A
 0B4C 08                push A
 0B4D 5100              mov A,[__r5]
 0B4F 08                push A
 0B50 5100              mov A,[__r6]
 0B52 08                push A
 0B53 5100              mov A,[__r7]
 0B55 08                push A
 0B56 5040              mov A,64
 0B58 08                push A
 0B59 5000              mov A,0
 0B5B 08                push A
 0B5C 08                push A
 0B5D 08                push A
 0B5E 7C0000            xcall __fpmul
 0B61 18                pop A
 0B62 5300              mov [__r7],A
 0B64 18                pop A
 0B65 5300              mov [__r6],A
 0B67 18                pop A
 0B68 5300              mov [__r5],A
 0B6A 18                pop A
 0B6B 5300              mov [__r4],A
 0B6D 38FC              add SP,-4
 0B6F 5100              mov A,[__r8]
 0B71 08                push A
 0B72 5100              mov A,[__r9]
 0B74 08                push A
 0B75 5100              mov A,[__r10]
 0B77 08                push A
 0B78 5100              mov A,[__r11]
 0B7A 08                push A
 0B7B 5100              mov A,[__r4]
 0B7D 08                push A
 0B7E 5100              mov A,[__r5]
 0B80 08                push A
 0B81 5100              mov A,[__r6]
 0B83 08                push A
 0B84 5100              mov A,[__r7]
 0B86 08                push A
 0B87 7C0000            xcall __fpadd
 0B8A 18                pop A
 0B8B 5300              mov [__r7],A
 0B8D 18                pop A
 0B8E 5300              mov [__r6],A
 0B90 18                pop A
 0B91 5300              mov [__r5],A
 0B93 18                pop A
 0B94 5300              mov [__r4],A
 0B96 38FC              add SP,-4
 0B98 5205              mov A,[X+5]
 0B9A 08                push A
 0B9B 5206              mov A,[X+6]
 0B9D 08                push A
 0B9E 5207              mov A,[X+7]
 0BA0 08                push A
 0BA1 5208              mov A,[X+8]
 0BA3 08                push A
 0BA4 5043              mov A,67
 0BA6 08                push A
 0BA7 5048              mov A,72
 0BA9 08                push A
 0BAA 5000              mov A,0
 0BAC 08                push A
 0BAD 08                push A
 0BAE 7C0000            xcall __fpmul
 0BB1 18                pop A
 0BB2 5300              mov [__r11],A
 0BB4 18                pop A
 0BB5 5300              mov [__r10],A
 0BB7 18                pop A
 0BB8 5300              mov [__r9],A
 0BBA 18                pop A
 0BBB 5300              mov [__r8],A
 0BBD 38FC              add SP,-4
 0BBF 5100              mov A,[__r4]
 0BC1 08                push A
 0BC2 5100              mov A,[__r5]
 0BC4 08                push A
 0BC5 5100              mov A,[__r6]
 0BC7 08                push A
 0BC8 5100              mov A,[__r7]
 0BCA 08                push A
 0BCB 5100              mov A,[__r8]
 0BCD 08                push A
 0BCE 5100              mov A,[__r9]
 0BD0 08                push A
 0BD1 5100              mov A,[__r10]
 0BD3 08                push A
 0BD4 5100              mov A,[__r11]
 0BD6 08                push A
 0BD7 7C0000            xcall __fpmul
 0BDA 18                pop A
 0BDB 5300              mov [__r7],A
 0BDD 18                pop A
 0BDE 5300              mov [__r6],A
 0BE0 18                pop A
 0BE1 5300              mov [__r5],A
 0BE3 18                pop A
 0BE4 38FC              add SP,-4
 0BE6 08                push A
 0BE7 5100              mov A,[__r5]
 0BE9 08                push A
 0BEA 5100              mov A,[__r6]
 0BEC 08                push A
 0BED 5100              mov A,[__r7]
 0BEF 08                push A
 0BF0 7C0000            xcall _sinf
 0BF3 38FC              add SP,-4
 0BF5 62D000            mov REG[0xd0],>__r0
 0BF8 5100              mov A,[__r0]
 0BFA 08                push A
 0BFB 5100              mov A,[__r1]
 0BFD 08                push A
 0BFE 5100              mov A,[__r2]
 0C00 08                push A
 0C01 5100              mov A,[__r3]
 0C03 08                push A
 0C04 503F              mov A,63
 0C06 08                push A
 0C07 5000              mov A,0
 0C09 08                push A
 0C0A 08                push A
 0C0B 08                push A
 0C0C 7C0000            xcall __fpmul
 0C0F 18                pop A
 0C10 5300              mov [__r3],A
 0C12 18                pop A
 0C13 5300              mov [__r2],A
 0C15 18                pop A
 0C16 5300              mov [__r1],A
 0C18 18                pop A
 0C19 38FC              add SP,-4
 0C1B 08                push A
 0C1C 5100              mov A,[__r1]
 0C1E 08                push A
 0C1F 5100              mov A,[__r2]
 0C21 08                push A
 0C22 5100              mov A,[__r3]
 0C24 08                push A
 0C25 5042              mov A,66
 0C27 08                push A
 0C28 504C              mov A,76
 0C2A 08                push A
 0C2B 50CC              mov A,-52
 0C2D 08                push A
 0C2E 50CD              mov A,-51
 0C30 08                push A
 0C31 7C0000            xcall __fpmul
 0C34 18                pop A
 0C35 5300              mov [__r3],A
 0C37 18                pop A
 0C38 5300              mov [__r2],A
 0C3A 18                pop A
 0C3B 5300              mov [__r1],A
 0C3D 18                pop A
 0C3E 5300              mov [__r0],A
 0C40 38FC              add SP,-4
 0C42 5290              mov A,[X-112]
 0C44 08                push A
 0C45 5291              mov A,[X-111]
 0C47 08                push A
 0C48 5292              mov A,[X-110]
 0C4A 08                push A
 0C4B 5293              mov A,[X-109]
 0C4D 08                push A
 0C4E 503F              mov A,63
 0C50 08                push A
 0C51 5000              mov A,0
 0C53 08                push A
 0C54 08                push A
 0C55 08                push A
 0C56 7C0000            xcall __fpmul
 0C59 18                pop A
 0C5A 5300              mov [__r7],A
 0C5C 18                pop A
 0C5D 5300              mov [__r6],A
 0C5F 18                pop A
 0C60 5300              mov [__r5],A
 0C62 18                pop A
 0C63 5300              mov [__r4],A
 0C65 38FC              add SP,-4
 0C67 503E              mov A,62
 0C69 08                push A
 0C6A 504C              mov A,76
 0C6C 08                push A
 0C6D 50CC              mov A,-52
 0C6F 08                push A
 0C70 50CD              mov A,-51
 0C72 08                push A
 0C73 5100              mov A,[__r4]
 0C75 08                push A
 0C76 5100              mov A,[__r5]
 0C78 08                push A
 0C79 5100              mov A,[__r6]
 0C7B 08                push A
 0C7C 5100              mov A,[__r7]
 0C7E 08                push A
 0C7F 7C0000            xcall __fpadd
 0C82 18                pop A
 0C83 5300              mov [__r7],A
 0C85 18                pop A
 0C86 5300              mov [__r6],A
 0C88 18                pop A
 0C89 5300              mov [__r5],A
 0C8B 18                pop A
 0C8C 5300              mov [__r4],A
 0C8E 38FC              add SP,-4
 0C90 5100              mov A,[__r0]
 0C92 08                push A
 0C93 5100              mov A,[__r1]
 0C95 08                push A
 0C96 5100              mov A,[__r2]
 0C98 08                push A
 0C99 5100              mov A,[__r3]
 0C9B 08                push A
 0C9C 5100              mov A,[__r4]
 0C9E 08                push A
 0C9F 5100              mov A,[__r5]
 0CA1 08                push A
 0CA2 5100              mov A,[__r6]
 0CA4 08                push A
 0CA5 5100              mov A,[__r7]
 0CA7 08                push A
 0CA8 7C0000            xcall __fpadd
 0CAB 18                pop A
 0CAC 5300              mov [__r3],A
 0CAE 18                pop A
 0CAF 5300              mov [__r2],A
 0CB1 18                pop A
 0CB2 5300              mov [__r1],A
 0CB4 18                pop A
 0CB5 5300              mov [__r0],A
 0CB7 38FC              add SP,-4
 0CB9 5047              mov A,71
 0CBB 08                push A
 0CBC 5000              mov A,0
 0CBE 08                push A
 0CBF 08                push A
 0CC0 08                push A
 0CC1 5100              mov A,[__r0]
 0CC3 08                push A
 0CC4 5100              mov A,[__r1]
 0CC6 08                push A
 0CC7 5100              mov A,[__r2]
 0CC9 08                push A
 0CCA 5100              mov A,[__r3]
 0CCC 08                push A
 0CCD 7C0000            xcall __fpcmp
 0CD0 38F8              add SP,-8
 0CD2 39FF              cmp A,-1
 0CD4 A047              jz L100
 0CD6 5047              mov A,71
 0CD8 08                push A
 0CD9 5000              mov A,0
 0CDB 08                push A
 0CDC 08                push A
 0CDD 08                push A
 0CDE 5100              mov A,[__r0]
 0CE0 08                push A
 0CE1 5100              mov A,[__r1]
 0CE3 08                push A
 0CE4 5100              mov A,[__r2]
 0CE6 08                push A
 0CE7 5100              mov A,[__r3]
 0CE9 08                push A
 0CEA 7C0000            xcall __fpsub
 0CED 18                pop A
 0CEE 5300              mov [__r7],A
 0CF0 18                pop A
 0CF1 5300              mov [__r6],A
 0CF3 18                pop A
 0CF4 5300              mov [__r5],A
 0CF6 18                pop A
 0CF7 38FC              add SP,-4
 0CF9 08                push A
 0CFA 5100              mov A,[__r5]
 0CFC 08                push A
 0CFD 5100              mov A,[__r6]
 0CFF 08                push A
 0D00 5100              mov A,[__r7]
 0D02 08                push A
 0D03 7C0000            xcall __fp2long
 0D06 18                pop A
 0D07 5300              mov [__r5],A
 0D09 18                pop A
 0D0A 5300              mov [__r4],A
 0D0C 38FE              add SP,-2
 0D0E 5100              mov A,[__r5]
 0D10 0100              add A,0
 0D12 548F              mov [X-113],A
 0D14 5100              mov A,[__r4]
 0D16 0980              adc A,-128
 0D18 548E              mov [X-114],A
 0D1A 8023              xjmp L101
 0D1C           L100:
 0D1C 62D000            mov REG[0xd0],>__r0
 0D1F 5100              mov A,[__r0]
 0D21 08                push A
 0D22 5100              mov A,[__r1]
 0D24 08                push A
 0D25 5100              mov A,[__r2]
 0D27 08                push A
 0D28 5100              mov A,[__r3]
 0D2A 08                push A
 0D2B 7C0000            xcall __fp2long
 0D2E 18                pop A
 0D2F 5300              mov [__r1],A
 0D31 18                pop A
 0D32 5300              mov [__r0],A
 0D34 38FE              add SP,-2
 0D36 5100              mov A,[__r1]
 0D38 548F              mov [X-113],A
 0D3A 5100              mov A,[__r0]
 0D3C 548E              mov [X-114],A
 0D3E           L101:
 0D3E 62D000            mov REG[0xd0],>__r0
 0D41 550007            mov [__r0],7
 0D44 5A00              mov [__r1],X
 0D46 060009            add [__r1],9
 0D49 5200              mov A,[X+0]
 0D4B 0200              add A,[__r1]
 0D4D 5300              mov [__r1],A
 0D4F 5000              mov A,0
 0D51 0A00              adc A,[__r0]
 0D53 5300              mov [__r0],A
 0D55 528F              mov A,[X-113]
 0D57 5300              mov [__r2],A
 0D59 5100              mov A,[__r0]
 0D5B 60D5              mov REG[0xd5],A
 0D5D 5100              mov A,[__r2]
 0D5F 3F00              mvi [__r1],A
 0D61                   .dbline 296
 0D61           ;                               }       
 0D61           L96:
 0D61                   .dbline 293
 0D61 7700              inc [X+0]
 0D63           L98:
 0D63                   .dbline 293
 0D63 3D0080            cmp [X+0],-128
 0D66 CBD8              jc L95
 0D68           X35:
 0D68                   .dbline 297
 0D68           ;                               SPIRAM_WriteArray(addr, temp, 128);
 0D68 5080              mov A,-128
 0D6A 08                push A
 0D6B 62D000            mov REG[0xd0],>__r0
 0D6E 5A00              mov [__r1],X
 0D70 060009            add [__r1],9
 0D73 5007              mov A,7
 0D75 08                push A
 0D76 5100              mov A,[__r1]
 0D78 08                push A
 0D79 5201              mov A,[X+1]
 0D7B 08                push A
 0D7C 5202              mov A,[X+2]
 0D7E 08                push A
 0D7F 7C0000            xcall _SPIRAM_WriteArray
 0D82 38FB              add SP,-5
 0D84                   .dbline 298
 0D84           ;                       }
 0D84           L92:
 0D84                   .dbline 291
 0D84 070280            add [X+2],-128
 0D87 0F0100            adc [X+1],0
 0D8A           L94:
 0D8A                   .dbline 291
 0D8A 5202              mov A,[X+2]
 0D8C 138A              sub A,[X-118]
 0D8E 5201              mov A,[X+1]
 0D90 1B89              sbb A,[X-119]
 0D92 CBA7              jc L91
 0D94           X36:
 0D94                   .dbline 299
 0D94           ;                       break;
 0D94 8718              xjmp L74
 0D96           L102:
 0D96                   .dbline 302
 0D96           ;               
 0D96           ;               case 2: 
 0D96           ;                       for (addr = startAddr; addr < endAddr; addr += 128)
 0D96 5204              mov A,[X+4]
 0D98 5402              mov [X+2],A
 0D9A 5203              mov A,[X+3]
 0D9C 5401              mov [X+1],A
 0D9E 8451              xjmp L106
 0DA0           L103:
 0DA0                   .dbline 303
 0DA0           ;                       {
 0DA0                   .dbline 304
 0DA0           ;                               for(i = 0; i < 128; i++)
 0DA0 560000            mov [X+0],0
 0DA3 8425              xjmp L110
 0DA5           L107:
 0DA5                   .dbline 305
 0DA5           ;                               {
 0DA5                   .dbline 306
 0DA5           ;                                       temp[i] = (char)(0.1 + 0.5*sin(1500*pi*((addr - startAddr) + i)) + 0.5*sin(700*pi*((addr - startAddr) + i))*(128/2.5)); 
 0DA5 62D000            mov REG[0xd0],>__r0
 0DA8 5200              mov A,[X+0]
 0DAA 5300              mov [__r1],A
 0DAC 550000            mov [__r0],0
 0DAF 5202              mov A,[X+2]
 0DB1 1304              sub A,[X+4]
 0DB3 5300              mov [__r3],A
 0DB5 5201              mov A,[X+1]
 0DB7 1B03              sbb A,[X+3]
 0DB9 5300              mov [__r2],A
 0DBB 5100              mov A,[__r3]
 0DBD 0200              add A,[__r1]
 0DBF 5300              mov [__r1],A
 0DC1 5100              mov A,[__r2]
 0DC3 0A00              adc A,[__r0]
 0DC5 5300              mov [__r0],A
 0DC7 5100              mov A,[__r1]
 0DC9 2101              and A,1
 0DCB 5300              mov [__r3],A
 0DCD 5100              mov A,[__r0]
 0DCF 2100              and A,0
 0DD1 5300              mov [__r2],A
 0DD3 5100              mov A,[__r3]
 0DD5 5300              mov [__r7],A
 0DD7 5100              mov A,[__r2]
 0DD9 5300              mov [__r6],A
 0DDB 470080            tst [__r6],-128
 0DDE A009              jz X37
 0DE0 5500FF            mov [__r5],-1
 0DE3 5500FF            mov [__r4],-1
 0DE6 800A              jmp X38
 0DE8           X37:
 0DE8 62D000            mov REG[0xd0],>__r0
 0DEB 550000            mov [__r5],0
 0DEE 550000            mov [__r4],0
 0DF1           X38:
 0DF1 62D000            mov REG[0xd0],>__r0
 0DF4 5100              mov A,[__r4]
 0DF6 08                push A
 0DF7 5100              mov A,[__r5]
 0DF9 08                push A
 0DFA 5100              mov A,[__r6]
 0DFC 08                push A
 0DFD 5100              mov A,[__r7]
 0DFF 08                push A
 0E00 7C0000            xcall __long2fp
 0E03 18                pop A
 0E04 5300              mov [__r7],A
 0E06 18                pop A
 0E07 5300              mov [__r6],A
 0E09 18                pop A
 0E0A 5300              mov [__r5],A
 0E0C 18                pop A
 0E0D 5300              mov [__r4],A
 0E0F 70FB              and F,-5
 0E11 6E00              rrc [__r0]
 0E13 6E00              rrc [__r1]
 0E15 5100              mov A,[__r1]
 0E17 5300              mov [__r3],A
 0E19 5100              mov A,[__r0]
 0E1B 5300              mov [__r2],A
 0E1D 470080            tst [__r2],-128
 0E20 A009              jz X39
 0E22 5500FF            mov [__r1],-1
 0E25 5500FF            mov [__r0],-1
 0E28 800A              jmp X40
 0E2A           X39:
 0E2A 62D000            mov REG[0xd0],>__r0
 0E2D 550000            mov [__r1],0
 0E30 550000            mov [__r0],0
 0E33           X40:
 0E33 62D000            mov REG[0xd0],>__r0
 0E36 5100              mov A,[__r0]
 0E38 08                push A
 0E39 5100              mov A,[__r1]
 0E3B 08                push A
 0E3C 5100              mov A,[__r2]
 0E3E 08                push A
 0E3F 5100              mov A,[__r3]
 0E41 08                push A
 0E42 7C0000            xcall __long2fp
 0E45 18                pop A
 0E46 5300              mov [__r3],A
 0E48 18                pop A
 0E49 5300              mov [__r2],A
 0E4B 18                pop A
 0E4C 5300              mov [__r1],A
 0E4E 18                pop A
 0E4F 08                push A
 0E50 5100              mov A,[__r1]
 0E52 08                push A
 0E53 5100              mov A,[__r2]
 0E55 08                push A
 0E56 5100              mov A,[__r3]
 0E58 08                push A
 0E59 5040              mov A,64
 0E5B 08                push A
 0E5C 5000              mov A,0
 0E5E 08                push A
 0E5F 08                push A
 0E60 08                push A
 0E61 7C0000            xcall __fpmul
 0E64 18                pop A
 0E65 5300              mov [__r3],A
 0E67 18                pop A
 0E68 5300              mov [__r2],A
 0E6A 18                pop A
 0E6B 5300              mov [__r1],A
 0E6D 18                pop A
 0E6E 5300              mov [__r0],A
 0E70 38FC              add SP,-4
 0E72 5100              mov A,[__r4]
 0E74 08                push A
 0E75 5100              mov A,[__r5]
 0E77 08                push A
 0E78 5100              mov A,[__r6]
 0E7A 08                push A
 0E7B 5100              mov A,[__r7]
 0E7D 08                push A
 0E7E 5100              mov A,[__r0]
 0E80 08                push A
 0E81 5100              mov A,[__r1]
 0E83 08                push A
 0E84 5100              mov A,[__r2]
 0E86 08                push A
 0E87 5100              mov A,[__r3]
 0E89 08                push A
 0E8A 7C0000            xcall __fpadd
 0E8D 18                pop A
 0E8E 5300              mov [__r3],A
 0E90 18                pop A
 0E91 5300              mov [__r2],A
 0E93 18                pop A
 0E94 5300              mov [__r1],A
 0E96 18                pop A
 0E97 5300              mov [__r0],A
 0E99 38FC              add SP,-4
 0E9B 5205              mov A,[X+5]
 0E9D 08                push A
 0E9E 5206              mov A,[X+6]
 0EA0 08                push A
 0EA1 5207              mov A,[X+7]
 0EA3 08                push A
 0EA4 5208              mov A,[X+8]
 0EA6 08                push A
 0EA7 5044              mov A,68
 0EA9 08                push A
 0EAA 50BB              mov A,-69
 0EAC 08                push A
 0EAD 5080              mov A,-128
 0EAF 08                push A
 0EB0 5000              mov A,0
 0EB2 08                push A
 0EB3 7C0000            xcall __fpmul
 0EB6 18                pop A
 0EB7 5300              mov [__r7],A
 0EB9 18                pop A
 0EBA 5300              mov [__r6],A
 0EBC 18                pop A
 0EBD 5300              mov [__r5],A
 0EBF 18                pop A
 0EC0 5300              mov [__r4],A
 0EC2 38FC              add SP,-4
 0EC4 5100              mov A,[__r0]
 0EC6 08                push A
 0EC7 5100              mov A,[__r1]
 0EC9 08                push A
 0ECA 5100              mov A,[__r2]
 0ECC 08                push A
 0ECD 5100              mov A,[__r3]
 0ECF 08                push A
 0ED0 5100              mov A,[__r4]
 0ED2 08                push A
 0ED3 5100              mov A,[__r5]
 0ED5 08                push A
 0ED6 5100              mov A,[__r6]
 0ED8 08                push A
 0ED9 5100              mov A,[__r7]
 0EDB 08                push A
 0EDC 7C0000            xcall __fpmul
 0EDF 18                pop A
 0EE0 5300              mov [__r3],A
 0EE2 18                pop A
 0EE3 5300              mov [__r2],A
 0EE5 18                pop A
 0EE6 5300              mov [__r1],A
 0EE8 18                pop A
 0EE9 38FC              add SP,-4
 0EEB 08                push A
 0EEC 5100              mov A,[__r1]
 0EEE 08                push A
 0EEF 5100              mov A,[__r2]
 0EF1 08                push A
 0EF2 5100              mov A,[__r3]
 0EF4 08                push A
 0EF5 7C0000            xcall _sinf
 0EF8 38FC              add SP,-4
 0EFA 62D000            mov REG[0xd0],>__r0
 0EFD 5100              mov A,[__r0]
 0EFF 5490              mov [X-112],A
 0F01 5100              mov A,[__r1]
 0F03 5491              mov [X-111],A
 0F05 5100              mov A,[__r2]
 0F07 5492              mov [X-110],A
 0F09 5100              mov A,[__r3]
 0F0B 5493              mov [X-109],A
 0F0D 5200              mov A,[X+0]
 0F0F 5300              mov [__r5],A
 0F11 550000            mov [__r4],0
 0F14 5202              mov A,[X+2]
 0F16 1304              sub A,[X+4]
 0F18 5300              mov [__r7],A
 0F1A 5201              mov A,[X+1]
 0F1C 1B03              sbb A,[X+3]
 0F1E 5300              mov [__r6],A
 0F20 5100              mov A,[__r7]
 0F22 0200              add A,[__r5]
 0F24 5300              mov [__r5],A
 0F26 5100              mov A,[__r6]
 0F28 0A00              adc A,[__r4]
 0F2A 5300              mov [__r4],A
 0F2C 5100              mov A,[__r5]
 0F2E 2101              and A,1
 0F30 5300              mov [__r7],A
 0F32 5100              mov A,[__r4]
 0F34 2100              and A,0
 0F36 5300              mov [__r6],A
 0F38 5100              mov A,[__r7]
 0F3A 5300              mov [__r11],A
 0F3C 5100              mov A,[__r6]
 0F3E 5300              mov [__r10],A
 0F40 470080            tst [__r10],-128
 0F43 A009              jz X41
 0F45 5500FF            mov [__r9],-1
 0F48 5500FF            mov [__r8],-1
 0F4B 800A              jmp X42
 0F4D           X41:
 0F4D 62D000            mov REG[0xd0],>__r0
 0F50 550000            mov [__r9],0
 0F53 550000            mov [__r8],0
 0F56           X42:
 0F56 62D000            mov REG[0xd0],>__r0
 0F59 5100              mov A,[__r8]
 0F5B 08                push A
 0F5C 5100              mov A,[__r9]
 0F5E 08                push A
 0F5F 5100              mov A,[__r10]
 0F61 08                push A
 0F62 5100              mov A,[__r11]
 0F64 08                push A
 0F65 7C0000            xcall __long2fp
 0F68 18                pop A
 0F69 5300              mov [__r11],A
 0F6B 18                pop A
 0F6C 5300              mov [__r10],A
 0F6E 18                pop A
 0F6F 5300              mov [__r9],A
 0F71 18                pop A
 0F72 5300              mov [__r8],A
 0F74 70FB              and F,-5
 0F76 6E00              rrc [__r4]
 0F78 6E00              rrc [__r5]
 0F7A 5100              mov A,[__r5]
 0F7C 5300              mov [__r7],A
 0F7E 5100              mov A,[__r4]
 0F80 5300              mov [__r6],A
 0F82 470080            tst [__r6],-128
 0F85 A009              jz X43
 0F87 5500FF            mov [__r5],-1
 0F8A 5500FF            mov [__r4],-1
 0F8D 800A              jmp X44
 0F8F           X43:
 0F8F 62D000            mov REG[0xd0],>__r0
 0F92 550000            mov [__r5],0
 0F95 550000            mov [__r4],0
 0F98           X44:
 0F98 62D000            mov REG[0xd0],>__r0
 0F9B 5100              mov A,[__r4]
 0F9D 08                push A
 0F9E 5100              mov A,[__r5]
 0FA0 08                push A
 0FA1 5100              mov A,[__r6]
 0FA3 08                push A
 0FA4 5100              mov A,[__r7]
 0FA6 08                push A
 0FA7 7C0000            xcall __long2fp
 0FAA 18                pop A
 0FAB 5300              mov [__r7],A
 0FAD 18                pop A
 0FAE 5300              mov [__r6],A
 0FB0 18                pop A
 0FB1 5300              mov [__r5],A
 0FB3 18                pop A
 0FB4 08                push A
 0FB5 5100              mov A,[__r5]
 0FB7 08                push A
 0FB8 5100              mov A,[__r6]
 0FBA 08                push A
 0FBB 5100              mov A,[__r7]
 0FBD 08                push A
 0FBE 5040              mov A,64
 0FC0 08                push A
 0FC1 5000              mov A,0
 0FC3 08                push A
 0FC4 08                push A
 0FC5 08                push A
 0FC6 7C0000            xcall __fpmul
 0FC9 18                pop A
 0FCA 5300              mov [__r7],A
 0FCC 18                pop A
 0FCD 5300              mov [__r6],A
 0FCF 18                pop A
 0FD0 5300              mov [__r5],A
 0FD2 18                pop A
 0FD3 5300              mov [__r4],A
 0FD5 38FC              add SP,-4
 0FD7 5100              mov A,[__r8]
 0FD9 08                push A
 0FDA 5100              mov A,[__r9]
 0FDC 08                push A
 0FDD 5100              mov A,[__r10]
 0FDF 08                push A
 0FE0 5100              mov A,[__r11]
 0FE2 08                push A
 0FE3 5100              mov A,[__r4]
 0FE5 08                push A
 0FE6 5100              mov A,[__r5]
 0FE8 08                push A
 0FE9 5100              mov A,[__r6]
 0FEB 08                push A
 0FEC 5100              mov A,[__r7]
 0FEE 08                push A
 0FEF 7C0000            xcall __fpadd
 0FF2 18                pop A
 0FF3 5300              mov [__r7],A
 0FF5 18                pop A
 0FF6 5300              mov [__r6],A
 0FF8 18                pop A
 0FF9 5300              mov [__r5],A
 0FFB 18                pop A
 0FFC 5300              mov [__r4],A
 0FFE 38FC              add SP,-4
 1000 5205              mov A,[X+5]
 1002 08                push A
 1003 5206              mov A,[X+6]
 1005 08                push A
 1006 5207              mov A,[X+7]
 1008 08                push A
 1009 5208              mov A,[X+8]
 100B 08                push A
 100C 5044              mov A,68
 100E 08                push A
 100F 502F              mov A,47
 1011 08                push A
 1012 5000              mov A,0
 1014 08                push A
 1015 08                push A
 1016 7C0000            xcall __fpmul
 1019 18                pop A
 101A 5300              mov [__r11],A
 101C 18                pop A
 101D 5300              mov [__r10],A
 101F 18                pop A
 1020 5300              mov [__r9],A
 1022 18                pop A
 1023 5300              mov [__r8],A
 1025 38FC              add SP,-4
 1027 5100              mov A,[__r4]
 1029 08                push A
 102A 5100              mov A,[__r5]
 102C 08                push A
 102D 5100              mov A,[__r6]
 102F 08                push A
 1030 5100              mov A,[__r7]
 1032 08                push A
 1033 5100              mov A,[__r8]
 1035 08                push A
 1036 5100              mov A,[__r9]
 1038 08                push A
 1039 5100              mov A,[__r10]
 103B 08                push A
 103C 5100              mov A,[__r11]
 103E 08                push A
 103F 7C0000            xcall __fpmul
 1042 18                pop A
 1043 5300              mov [__r7],A
 1045 18                pop A
 1046 5300              mov [__r6],A
 1048 18                pop A
 1049 5300              mov [__r5],A
 104B 18                pop A
 104C 38FC              add SP,-4
 104E 08                push A
 104F 5100              mov A,[__r5]
 1051 08                push A
 1052 5100              mov A,[__r6]
 1054 08                push A
 1055 5100              mov A,[__r7]
 1057 08                push A
 1058 7C0000            xcall _sinf
 105B 38FC              add SP,-4
 105D 62D000            mov REG[0xd0],>__r0
 1060 5100              mov A,[__r0]
 1062 08                push A
 1063 5100              mov A,[__r1]
 1065 08                push A
 1066 5100              mov A,[__r2]
 1068 08                push A
 1069 5100              mov A,[__r3]
 106B 08                push A
 106C 503F              mov A,63
 106E 08                push A
 106F 5000              mov A,0
 1071 08                push A
 1072 08                push A
 1073 08                push A
 1074 7C0000            xcall __fpmul
 1077 18                pop A
 1078 5300              mov [__r3],A
 107A 18                pop A
 107B 5300              mov [__r2],A
 107D 18                pop A
 107E 5300              mov [__r1],A
 1080 18                pop A
 1081 38FC              add SP,-4
 1083 08                push A
 1084 5100              mov A,[__r1]
 1086 08                push A
 1087 5100              mov A,[__r2]
 1089 08                push A
 108A 5100              mov A,[__r3]
 108C 08                push A
 108D 5042              mov A,66
 108F 08                push A
 1090 504C              mov A,76
 1092 08                push A
 1093 50CC              mov A,-52
 1095 08                push A
 1096 50CD              mov A,-51
 1098 08                push A
 1099 7C0000            xcall __fpmul
 109C 18                pop A
 109D 5300              mov [__r3],A
 109F 18                pop A
 10A0 5300              mov [__r2],A
 10A2 18                pop A
 10A3 5300              mov [__r1],A
 10A5 18                pop A
 10A6 5300              mov [__r0],A
 10A8 38FC              add SP,-4
 10AA 5290              mov A,[X-112]
 10AC 08                push A
 10AD 5291              mov A,[X-111]
 10AF 08                push A
 10B0 5292              mov A,[X-110]
 10B2 08                push A
 10B3 5293              mov A,[X-109]
 10B5 08                push A
 10B6 503F              mov A,63
 10B8 08                push A
 10B9 5000              mov A,0
 10BB 08                push A
 10BC 08                push A
 10BD 08                push A
 10BE 7C0000            xcall __fpmul
 10C1 18                pop A
 10C2 5300              mov [__r7],A
 10C4 18                pop A
 10C5 5300              mov [__r6],A
 10C7 18                pop A
 10C8 5300              mov [__r5],A
 10CA 18                pop A
 10CB 5300              mov [__r4],A
 10CD 38FC              add SP,-4
 10CF 503D              mov A,61
 10D1 08                push A
 10D2 50CC              mov A,-52
 10D4 08                push A
 10D5 08                push A
 10D6 50CD              mov A,-51
 10D8 08                push A
 10D9 5100              mov A,[__r4]
 10DB 08                push A
 10DC 5100              mov A,[__r5]
 10DE 08                push A
 10DF 5100              mov A,[__r6]
 10E1 08                push A
 10E2 5100              mov A,[__r7]
 10E4 08                push A
 10E5 7C0000            xcall __fpadd
 10E8 18                pop A
 10E9 5300              mov [__r7],A
 10EB 18                pop A
 10EC 5300              mov [__r6],A
 10EE 18                pop A
 10EF 5300              mov [__r5],A
 10F1 18                pop A
 10F2 5300              mov [__r4],A
 10F4 38FC              add SP,-4
 10F6 5100              mov A,[__r0]
 10F8 08                push A
 10F9 5100              mov A,[__r1]
 10FB 08                push A
 10FC 5100              mov A,[__r2]
 10FE 08                push A
 10FF 5100              mov A,[__r3]
 1101 08                push A
 1102 5100              mov A,[__r4]
 1104 08                push A
 1105 5100              mov A,[__r5]
 1107 08                push A
 1108 5100              mov A,[__r6]
 110A 08                push A
 110B 5100              mov A,[__r7]
 110D 08                push A
 110E 7C0000            xcall __fpadd
 1111 18                pop A
 1112 5300              mov [__r3],A
 1114 18                pop A
 1115 5300              mov [__r2],A
 1117 18                pop A
 1118 5300              mov [__r1],A
 111A 18                pop A
 111B 5300              mov [__r0],A
 111D 38FC              add SP,-4
 111F 5047              mov A,71
 1121 08                push A
 1122 5000              mov A,0
 1124 08                push A
 1125 08                push A
 1126 08                push A
 1127 5100              mov A,[__r0]
 1129 08                push A
 112A 5100              mov A,[__r1]
 112C 08                push A
 112D 5100              mov A,[__r2]
 112F 08                push A
 1130 5100              mov A,[__r3]
 1132 08                push A
 1133 7C0000            xcall __fpcmp
 1136 38F8              add SP,-8
 1138 39FF              cmp A,-1
 113A A047              jz L112
 113C 5047              mov A,71
 113E 08                push A
 113F 5000              mov A,0
 1141 08                push A
 1142 08                push A
 1143 08                push A
 1144 5100              mov A,[__r0]
 1146 08                push A
 1147 5100              mov A,[__r1]
 1149 08                push A
 114A 5100              mov A,[__r2]
 114C 08                push A
 114D 5100              mov A,[__r3]
 114F 08                push A
 1150 7C0000            xcall __fpsub
 1153 18                pop A
 1154 5300              mov [__r7],A
 1156 18                pop A
 1157 5300              mov [__r6],A
 1159 18                pop A
 115A 5300              mov [__r5],A
 115C 18                pop A
 115D 38FC              add SP,-4
 115F 08                push A
 1160 5100              mov A,[__r5]
 1162 08                push A
 1163 5100              mov A,[__r6]
 1165 08                push A
 1166 5100              mov A,[__r7]
 1168 08                push A
 1169 7C0000            xcall __fp2long
 116C 18                pop A
 116D 5300              mov [__r5],A
 116F 18                pop A
 1170 5300              mov [__r4],A
 1172 38FE              add SP,-2
 1174 5100              mov A,[__r5]
 1176 0100              add A,0
 1178 548F              mov [X-113],A
 117A 5100              mov A,[__r4]
 117C 0980              adc A,-128
 117E 548E              mov [X-114],A
 1180 8023              xjmp L113
 1182           L112:
 1182 62D000            mov REG[0xd0],>__r0
 1185 5100              mov A,[__r0]
 1187 08                push A
 1188 5100              mov A,[__r1]
 118A 08                push A
 118B 5100              mov A,[__r2]
 118D 08                push A
 118E 5100              mov A,[__r3]
 1190 08                push A
 1191 7C0000            xcall __fp2long
 1194 18                pop A
 1195 5300              mov [__r1],A
 1197 18                pop A
 1198 5300              mov [__r0],A
 119A 38FE              add SP,-2
 119C 5100              mov A,[__r1]
 119E 548F              mov [X-113],A
 11A0 5100              mov A,[__r0]
 11A2 548E              mov [X-114],A
 11A4           L113:
 11A4 62D000            mov REG[0xd0],>__r0
 11A7 550007            mov [__r0],7
 11AA 5A00              mov [__r1],X
 11AC 060009            add [__r1],9
 11AF 5200              mov A,[X+0]
 11B1 0200              add A,[__r1]
 11B3 5300              mov [__r1],A
 11B5 5000              mov A,0
 11B7 0A00              adc A,[__r0]
 11B9 5300              mov [__r0],A
 11BB 528F              mov A,[X-113]
 11BD 5300              mov [__r2],A
 11BF 5100              mov A,[__r0]
 11C1 60D5              mov REG[0xd5],A
 11C3 5100              mov A,[__r2]
 11C5 3F00              mvi [__r1],A
 11C7                   .dbline 307
 11C7           ;                               }       
 11C7           L108:
 11C7                   .dbline 304
 11C7 7700              inc [X+0]
 11C9           L110:
 11C9                   .dbline 304
 11C9 3D0080            cmp [X+0],-128
 11CC CBD8              jc L107
 11CE           X46:
 11CE                   .dbline 308
 11CE           ;                               SPIRAM_WriteArray(addr, temp, 128);
 11CE 5080              mov A,-128
 11D0 08                push A
 11D1 62D000            mov REG[0xd0],>__r0
 11D4 5A00              mov [__r1],X
 11D6 060009            add [__r1],9
 11D9 5007              mov A,7
 11DB 08                push A
 11DC 5100              mov A,[__r1]
 11DE 08                push A
 11DF 5201              mov A,[X+1]
 11E1 08                push A
 11E2 5202              mov A,[X+2]
 11E4 08                push A
 11E5 7C0000            xcall _SPIRAM_WriteArray
 11E8 38FB              add SP,-5
 11EA                   .dbline 309
 11EA           ;                       }
 11EA           L104:
 11EA                   .dbline 302
 11EA 070280            add [X+2],-128
 11ED 0F0100            adc [X+1],0
 11F0           L106:
 11F0                   .dbline 302
 11F0 5202              mov A,[X+2]
 11F2 138A              sub A,[X-118]
 11F4 5201              mov A,[X+1]
 11F6 1B89              sbb A,[X-119]
 11F8 CBA7              jc L103
 11FA           X47:
 11FA                   .dbline 310
 11FA           ;                       break;
 11FA 82B2              xjmp L74
 11FC           L114:
 11FC                   .dbline 313
 11FC           ;               
 11FC           ;               case 3:
 11FC           ;                       for (addr = startAddr; addr < endAddr; addr += 128)
 11FC 5204              mov A,[X+4]
 11FE 5402              mov [X+2],A
 1200 5203              mov A,[X+3]
 1202 5401              mov [X+1],A
 1204 829E              xjmp L118
 1206           L115:
 1206                   .dbline 314
 1206           ;                       {
 1206                   .dbline 315
 1206           ;                               for(i = 0; i < 128; i++)
 1206 560000            mov [X+0],0
 1209 8272              xjmp L122
 120B           L119:
 120B                   .dbline 316
 120B           ;                               {
 120B                   .dbline 317
 120B           ;                                       temp[i] = (char)(0.4 + 0.5*sin(100*pi*((addr - startAddr) + i))*(128/2.5));
 120B 62D000            mov REG[0xd0],>__r0
 120E 5200              mov A,[X+0]
 1210 5300              mov [__r1],A
 1212 550000            mov [__r0],0
 1215 5202              mov A,[X+2]
 1217 1304              sub A,[X+4]
 1219 5300              mov [__r3],A
 121B 5201              mov A,[X+1]
 121D 1B03              sbb A,[X+3]
 121F 5300              mov [__r2],A
 1221 5100              mov A,[__r3]
 1223 0200              add A,[__r1]
 1225 5300              mov [__r1],A
 1227 5100              mov A,[__r2]
 1229 0A00              adc A,[__r0]
 122B 5300              mov [__r0],A
 122D 5100              mov A,[__r1]
 122F 2101              and A,1
 1231 5300              mov [__r3],A
 1233 5100              mov A,[__r0]
 1235 2100              and A,0
 1237 5300              mov [__r2],A
 1239 5100              mov A,[__r3]
 123B 5300              mov [__r7],A
 123D 5100              mov A,[__r2]
 123F 5300              mov [__r6],A
 1241 470080            tst [__r6],-128
 1244 A009              jz X48
 1246 5500FF            mov [__r5],-1
 1249 5500FF            mov [__r4],-1
 124C 800A              jmp X49
 124E           X48:
 124E 62D000            mov REG[0xd0],>__r0
 1251 550000            mov [__r5],0
 1254 550000            mov [__r4],0
 1257           X49:
 1257 62D000            mov REG[0xd0],>__r0
 125A 5100              mov A,[__r4]
 125C 08                push A
 125D 5100              mov A,[__r5]
 125F 08                push A
 1260 5100              mov A,[__r6]
 1262 08                push A
 1263 5100              mov A,[__r7]
 1265 08                push A
 1266 7C0000            xcall __long2fp
 1269 18                pop A
 126A 5300              mov [__r7],A
 126C 18                pop A
 126D 5300              mov [__r6],A
 126F 18                pop A
 1270 5300              mov [__r5],A
 1272 18                pop A
 1273 5300              mov [__r4],A
 1275 70FB              and F,-5
 1277 6E00              rrc [__r0]
 1279 6E00              rrc [__r1]
 127B 5100              mov A,[__r1]
 127D 5300              mov [__r3],A
 127F 5100              mov A,[__r0]
 1281 5300              mov [__r2],A
 1283 470080            tst [__r2],-128
 1286 A009              jz X50
 1288 5500FF            mov [__r1],-1
 128B 5500FF            mov [__r0],-1
 128E 800A              jmp X51
 1290           X50:
 1290 62D000            mov REG[0xd0],>__r0
 1293 550000            mov [__r1],0
 1296 550000            mov [__r0],0
 1299           X51:
 1299 62D000            mov REG[0xd0],>__r0
 129C 5100              mov A,[__r0]
 129E 08                push A
 129F 5100              mov A,[__r1]
 12A1 08                push A
 12A2 5100              mov A,[__r2]
 12A4 08                push A
 12A5 5100              mov A,[__r3]
 12A7 08                push A
 12A8 7C0000            xcall __long2fp
 12AB 18                pop A
 12AC 5300              mov [__r3],A
 12AE 18                pop A
 12AF 5300              mov [__r2],A
 12B1 18                pop A
 12B2 5300              mov [__r1],A
 12B4 18                pop A
 12B5 08                push A
 12B6 5100              mov A,[__r1]
 12B8 08                push A
 12B9 5100              mov A,[__r2]
 12BB 08                push A
 12BC 5100              mov A,[__r3]
 12BE 08                push A
 12BF 5040              mov A,64
 12C1 08                push A
 12C2 5000              mov A,0
 12C4 08                push A
 12C5 08                push A
 12C6 08                push A
 12C7 7C0000            xcall __fpmul
 12CA 18                pop A
 12CB 5300              mov [__r3],A
 12CD 18                pop A
 12CE 5300              mov [__r2],A
 12D0 18                pop A
 12D1 5300              mov [__r1],A
 12D3 18                pop A
 12D4 5300              mov [__r0],A
 12D6 38FC              add SP,-4
 12D8 5100              mov A,[__r4]
 12DA 08                push A
 12DB 5100              mov A,[__r5]
 12DD 08                push A
 12DE 5100              mov A,[__r6]
 12E0 08                push A
 12E1 5100              mov A,[__r7]
 12E3 08                push A
 12E4 5100              mov A,[__r0]
 12E6 08                push A
 12E7 5100              mov A,[__r1]
 12E9 08                push A
 12EA 5100              mov A,[__r2]
 12EC 08                push A
 12ED 5100              mov A,[__r3]
 12EF 08                push A
 12F0 7C0000            xcall __fpadd
 12F3 18                pop A
 12F4 5300              mov [__r3],A
 12F6 18                pop A
 12F7 5300              mov [__r2],A
 12F9 18                pop A
 12FA 5300              mov [__r1],A
 12FC 18                pop A
 12FD 5300              mov [__r0],A
 12FF 38FC              add SP,-4
 1301 5205              mov A,[X+5]
 1303 08                push A
 1304 5206              mov A,[X+6]
 1306 08                push A
 1307 5207              mov A,[X+7]
 1309 08                push A
 130A 5208              mov A,[X+8]
 130C 08                push A
 130D 5042              mov A,66
 130F 08                push A
 1310 50C8              mov A,-56
 1312 08                push A
 1313 5000              mov A,0
 1315 08                push A
 1316 08                push A
 1317 7C0000            xcall __fpmul
 131A 18                pop A
 131B 5300              mov [__r7],A
 131D 18                pop A
 131E 5300              mov [__r6],A
 1320 18                pop A
 1321 5300              mov [__r5],A
 1323 18                pop A
 1324 5300              mov [__r4],A
 1326 38FC              add SP,-4
 1328 5100              mov A,[__r0]
 132A 08                push A
 132B 5100              mov A,[__r1]
 132D 08                push A
 132E 5100              mov A,[__r2]
 1330 08                push A
 1331 5100              mov A,[__r3]
 1333 08                push A
 1334 5100              mov A,[__r4]
 1336 08                push A
 1337 5100              mov A,[__r5]
 1339 08                push A
 133A 5100              mov A,[__r6]
 133C 08                push A
 133D 5100              mov A,[__r7]
 133F 08                push A
 1340 7C0000            xcall __fpmul
 1343 18                pop A
 1344 5300              mov [__r3],A
 1346 18                pop A
 1347 5300              mov [__r2],A
 1349 18                pop A
 134A 5300              mov [__r1],A
 134C 18                pop A
 134D 38FC              add SP,-4
 134F 08                push A
 1350 5100              mov A,[__r1]
 1352 08                push A
 1353 5100              mov A,[__r2]
 1355 08                push A
 1356 5100              mov A,[__r3]
 1358 08                push A
 1359 7C0000            xcall _sinf
 135C 38FC              add SP,-4
 135E 62D000            mov REG[0xd0],>__r0
 1361 5100              mov A,[__r0]
 1363 08                push A
 1364 5100              mov A,[__r1]
 1366 08                push A
 1367 5100              mov A,[__r2]
 1369 08                push A
 136A 5100              mov A,[__r3]
 136C 08                push A
 136D 503F              mov A,63
 136F 08                push A
 1370 5000              mov A,0
 1372 08                push A
 1373 08                push A
 1374 08                push A
 1375 7C0000            xcall __fpmul
 1378 18                pop A
 1379 5300              mov [__r3],A
 137B 18                pop A
 137C 5300              mov [__r2],A
 137E 18                pop A
 137F 5300              mov [__r1],A
 1381 18                pop A
 1382 38FC              add SP,-4
 1384 08                push A
 1385 5100              mov A,[__r1]
 1387 08                push A
 1388 5100              mov A,[__r2]
 138A 08                push A
 138B 5100              mov A,[__r3]
 138D 08                push A
 138E 5042              mov A,66
 1390 08                push A
 1391 504C              mov A,76
 1393 08                push A
 1394 50CC              mov A,-52
 1396 08                push A
 1397 50CD              mov A,-51
 1399 08                push A
 139A 7C0000            xcall __fpmul
 139D 18                pop A
 139E 5300              mov [__r3],A
 13A0 18                pop A
 13A1 5300              mov [__r2],A
 13A3 18                pop A
 13A4 5300              mov [__r1],A
 13A6 18                pop A
 13A7 5300              mov [__r0],A
 13A9 38FC              add SP,-4
 13AB 503E              mov A,62
 13AD 08                push A
 13AE 50CC              mov A,-52
 13B0 08                push A
 13B1 08                push A
 13B2 50CD              mov A,-51
 13B4 08                push A
 13B5 5100              mov A,[__r0]
 13B7 08                push A
 13B8 5100              mov A,[__r1]
 13BA 08                push A
 13BB 5100              mov A,[__r2]
 13BD 08                push A
 13BE 5100              mov A,[__r3]
 13C0 08                push A
 13C1 7C0000            xcall __fpadd
 13C4 18                pop A
 13C5 5300              mov [__r3],A
 13C7 18                pop A
 13C8 5300              mov [__r2],A
 13CA 18                pop A
 13CB 5300              mov [__r1],A
 13CD 18                pop A
 13CE 5300              mov [__r0],A
 13D0 38FC              add SP,-4
 13D2 5047              mov A,71
 13D4 08                push A
 13D5 5000              mov A,0
 13D7 08                push A
 13D8 08                push A
 13D9 08                push A
 13DA 5100              mov A,[__r0]
 13DC 08                push A
 13DD 5100              mov A,[__r1]
 13DF 08                push A
 13E0 5100              mov A,[__r2]
 13E2 08                push A
 13E3 5100              mov A,[__r3]
 13E5 08                push A
 13E6 7C0000            xcall __fpcmp
 13E9 38F8              add SP,-8
 13EB 39FF              cmp A,-1
 13ED A047              jz L124
 13EF 5047              mov A,71
 13F1 08                push A
 13F2 5000              mov A,0
 13F4 08                push A
 13F5 08                push A
 13F6 08                push A
 13F7 5100              mov A,[__r0]
 13F9 08                push A
 13FA 5100              mov A,[__r1]
 13FC 08                push A
 13FD 5100              mov A,[__r2]
 13FF 08                push A
 1400 5100              mov A,[__r3]
 1402 08                push A
 1403 7C0000            xcall __fpsub
 1406 18                pop A
 1407 5300              mov [__r7],A
 1409 18                pop A
 140A 5300              mov [__r6],A
 140C 18                pop A
 140D 5300              mov [__r5],A
 140F 18                pop A
 1410 38FC              add SP,-4
 1412 08                push A
 1413 5100              mov A,[__r5]
 1415 08                push A
 1416 5100              mov A,[__r6]
 1418 08                push A
 1419 5100              mov A,[__r7]
 141B 08                push A
 141C 7C0000            xcall __fp2long
 141F 18                pop A
 1420 5300              mov [__r5],A
 1422 18                pop A
 1423 5300              mov [__r4],A
 1425 38FE              add SP,-2
 1427 5100              mov A,[__r5]
 1429 0100              add A,0
 142B 548F              mov [X-113],A
 142D 5100              mov A,[__r4]
 142F 0980              adc A,-128
 1431 548E              mov [X-114],A
 1433 8023              xjmp L125
 1435           L124:
 1435 62D000            mov REG[0xd0],>__r0
 1438 5100              mov A,[__r0]
 143A 08                push A
 143B 5100              mov A,[__r1]
 143D 08                push A
 143E 5100              mov A,[__r2]
 1440 08                push A
 1441 5100              mov A,[__r3]
 1443 08                push A
 1444 7C0000            xcall __fp2long
 1447 18                pop A
 1448 5300              mov [__r1],A
 144A 18                pop A
 144B 5300              mov [__r0],A
 144D 38FE              add SP,-2
 144F 5100              mov A,[__r1]
 1451 548F              mov [X-113],A
 1453 5100              mov A,[__r0]
 1455 548E              mov [X-114],A
 1457           L125:
 1457 62D000            mov REG[0xd0],>__r0
 145A 550007            mov [__r0],7
 145D 5A00              mov [__r1],X
 145F 060009            add [__r1],9
 1462 5200              mov A,[X+0]
 1464 0200              add A,[__r1]
 1466 5300              mov [__r1],A
 1468 5000              mov A,0
 146A 0A00              adc A,[__r0]
 146C 5300              mov [__r0],A
 146E 528F              mov A,[X-113]
 1470 5300              mov [__r2],A
 1472 5100              mov A,[__r0]
 1474 60D5              mov REG[0xd5],A
 1476 5100              mov A,[__r2]
 1478 3F00              mvi [__r1],A
 147A                   .dbline 318
 147A           ;                               }       
 147A           L120:
 147A                   .dbline 315
 147A 7700              inc [X+0]
 147C           L122:
 147C                   .dbline 315
 147C 3D0080            cmp [X+0],-128
 147F CD8B              jc L119
 1481           X53:
 1481                   .dbline 319
 1481           ;                               SPIRAM_WriteArray(addr, temp, 128);
 1481 5080              mov A,-128
 1483 08                push A
 1484 62D000            mov REG[0xd0],>__r0
 1487 5A00              mov [__r1],X
 1489 060009            add [__r1],9
 148C 5007              mov A,7
 148E 08                push A
 148F 5100              mov A,[__r1]
 1491 08                push A
 1492 5201              mov A,[X+1]
 1494 08                push A
 1495 5202              mov A,[X+2]
 1497 08                push A
 1498 7C0000            xcall _SPIRAM_WriteArray
 149B 38FB              add SP,-5
 149D                   .dbline 320
 149D           ;                       }
 149D           L116:
 149D                   .dbline 313
 149D 070280            add [X+2],-128
 14A0 0F0100            adc [X+1],0
 14A3           L118:
 14A3                   .dbline 313
 14A3 5202              mov A,[X+2]
 14A5 138A              sub A,[X-118]
 14A7 5201              mov A,[X+1]
 14A9 1B89              sbb A,[X-119]
 14AB CD5A              jc L115
 14AD           X54:
 14AD                   .dbline 321
 14AD           ;                       break;
 14AD           L73:
 14AD           L74:
 14AD                   .dbline -2
 14AD           L72:
 14AD 386C              add SP,-148
 14AF 20                pop X
 14B0                   .dbline 0 ; func end
 14B0 7F                ret
 14B1                   .dbsym l ii 139 c
 14B1                   .dbsym l endAddr 137 i
 14B1                   .dbsym l temp 9 A[128:128]c
 14B1                   .dbsym l pi 5 D
 14B1                   .dbsym l startAddr 3 i
 14B1                   .dbsym l addr 1 i
 14B1                   .dbsym l i 0 c
 14B1                   .dbsym l id -4 c
 14B1                   .dbend
 14B1                   .dbfunc e main _main fV
 14B1           ;            opt -> X+0
 14B1           _main::
 14B1                   .dbline -1
 14B1 10                push X
 14B2 4F                mov X,SP
 14B3 3803              add SP,3
 14B5                   .dbline 327
 14B5           ;       }
 14B5           ;       
 14B5           ; }
 14B5           ; 
 14B5           ; void main(void)
 14B5           ; {
 14B5                   .dbline 331
 14B5           ;       char opt;
 14B5           ;       
 14B5           ;       // Make sure nCS is high before doing anything
 14B5           ;       nCS_HIGH;
 14B5                   .dbline 331
 14B5 430404            or REG[0x4],4
 14B8                   .dbline 331
 14B8                   .dbline 331
 14B8                   .dbline 334
 14B8           ;       
 14B8           ;       // Enable user module interrupts
 14B8           ;       SleepTimer_EnableInt();
 14B8 10                push X
 14B9 7C0000            xcall _SleepTimer_EnableInt
 14BC 20                pop X
 14BD                   .dbline 337
 14BD           ; 
 14BD           ;       // Enable global interrutps
 14BD           ;       M8C_EnableGInt;
 14BD 7101                      or  F, 01h
 14BF           
 14BF                   .dbline 340
 14BF           ; 
 14BF           ;       // Start the user modules
 14BF           ;       UART_Start(UART_PARITY_NONE);
 14BF 10                push X
 14C0 5000              mov A,0
 14C2 7C0000            xcall _UART_Start
 14C5                   .dbline 341
 14C5           ;       UART_PutCRLF();
 14C5 7C0000            xcall _UART_PutCRLF
 14C8                   .dbline 342
 14C8           ;       SPIM_Start(SPIM_SPIM_MODE_0 | SPIM_SPIM_MSB_FIRST);
 14C8 5000              mov A,0
 14CA 7C0000            xcall _SPIM_Start
 14CD                   .dbline 343
 14CD           ;       SleepTimer_Start();
 14CD 7C0000            xcall _SleepTimer_Start
 14D0                   .dbline 344
 14D0           ;       DAC8_Start(DAC8_FULLPOWER);
 14D0 5003              mov A,3
 14D2 7C0000            xcall _DAC8_Start
 14D5                   .dbline 345
 14D5           ;       UART_CPutString("Synthesiszing waveforms\r\n");
 14D5 50E3              mov A,>L127
 14D7 08                push A
 14D8 50E3              mov A,<L127
 14DA 5C                mov X,A
 14DB 18                pop A
 14DC 7C0000            xcall _UART_CPutString
 14DF 20                pop X
 14E0                   .dbline 346
 14E0           ;       WriteBlock(0);
 14E0 5000              mov A,0
 14E2 08                push A
 14E3 7C0429            xcall _WriteBlock
 14E6                   .dbline 347
 14E6           ;       WriteBlock(1);
 14E6 5001              mov A,1
 14E8 08                push A
 14E9 7C0429            xcall _WriteBlock
 14EC 38FE              add SP,-2
 14EE                   .dbline 348
 14EE           ;       WriteBlock(2);
 14EE 5002              mov A,2
 14F0 08                push A
 14F1 7C0429            xcall _WriteBlock
 14F4                   .dbline 349
 14F4           ;       WriteBlock(3);
 14F4 5003              mov A,3
 14F6 08                push A
 14F7 7C0429            xcall _WriteBlock
 14FA 38FE              add SP,-2
 14FC 8097              xjmp L129
 14FE           L128:
 14FE                   .dbline 351
 14FE           ;       while(1) 
 14FE           ;       {
 14FE                   .dbline 352
 14FE           ;               UART_CPutString("Synthetic wave output is on Port0[4]\r\nCowabunga Dude! Time to catch some waves.\r\n\r\n0. Play block 0\r\n1. Play block 1\r\n2. Play block 2\r\n3. Play block 3\r\n4. Test status register\r\n5. Test byte mode\r\n6. Test sequential mode\r\n");
 14FE 10                push X
 14FF 5006              mov A,>L131
 1501 08                push A
 1502 5006              mov A,<L131
 1504 5C                mov X,A
 1505 18                pop A
 1506 7C0000            xcall _UART_CPutString
 1509 20                pop X
 150A                   .dbline 354
 150A           ;               
 150A           ;               opt = GetNumber(0, 6);
 150A 5006              mov A,6
 150C 08                push A
 150D 5000              mov A,0
 150F 08                push A
 1510 7C0346            xcall _GetNumber
 1513 38FE              add SP,-2
 1515 62D000            mov REG[0xd0],>__r0
 1518 5400              mov [X+0],A
 151A                   .dbline 355
 151A           ;               switch (opt)
 151A 5200              mov A,[X+0]
 151C 5402              mov [X+2],A
 151E 560100            mov [X+1],0
 1521 3D0100            cmp [X+1],0
 1524 B006              jnz X58
 1526 3D0204            cmp [X+2],4
 1529 A020              jz L137
 152B           X58:
 152B 3D0100            cmp [X+1],0
 152E B006              jnz X59
 1530 3D0205            cmp [X+2],5
 1533 A02B              jz L141
 1535           X59:
 1535 3D0100            cmp [X+1],0
 1538 B006              jnz X60
 153A 3D0206            cmp [X+2],6
 153D A03C              jz L145
 153F           X60:
 153F 804C              xjmp L132
 1541           L136:
 1541                   .dbline 359
 1541           ;               {
 1541           ;                       case 4:
 1541           ;                               while(SPIRAM_StatusRegisterTest()) 
 1541           ;                                       SleepTimer_SyncWait(4, SleepTimer_WAIT_RELOAD);
 1541 10                push X
 1542 5700              mov X,0
 1544 5004              mov A,4
 1546 7C0000            xcall _SleepTimer_SyncWait
 1549 20                pop X
 154A           L137:
 154A                   .dbline 358
 154A 7C0000            xcall _SPIRAM_StatusRegisterTest
 154D 62D000            mov REG[0xd0],>__r0
 1550 3900              cmp A,0
 1552 BFEE              jnz L136
 1554                   .dbline 360
 1554           ;                               break;
 1554 803F              xjmp L133
 1556           L140:
 1556                   .dbline 364
 1556           ;                       
 1556           ;                       case 5:
 1556           ;                               while(SPIRAM_ByteModeTest()) 
 1556           ;                                       SleepTimer_SyncWait(4, SleepTimer_WAIT_RELOAD); 
 1556 10                push X
 1557 5700              mov X,0
 1559 5004              mov A,4
 155B 7C0000            xcall _SleepTimer_SyncWait
 155E 20                pop X
 155F           L141:
 155F                   .dbline 363
 155F 7C00FB            xcall _SPIRAM_ByteModeTest
 1562 62D000            mov REG[0xd0],>__r0
 1565 3C0000            cmp [__r0],0
 1568 BFED              jnz L140
 156A 3C0000            cmp [__r1],0
 156D BFE8              jnz L140
 156F           X61:
 156F                   .dbline 365
 156F           ;                               break;
 156F 8024              xjmp L133
 1571           L144:
 1571                   .dbline 369
 1571           ;                       
 1571           ;                       case 6:
 1571           ;                               while(SPIRAM_SequentialModeTest()) 
 1571           ;                                       SleepTimer_SyncWait(4, SleepTimer_WAIT_RELOAD);
 1571 10                push X
 1572 5700              mov X,0
 1574 5004              mov A,4
 1576 7C0000            xcall _SleepTimer_SyncWait
 1579 20                pop X
 157A           L145:
 157A                   .dbline 368
 157A 7C01FE            xcall _SPIRAM_SequentialModeTest
 157D 62D000            mov REG[0xd0],>__r0
 1580 3C0000            cmp [__r0],0
 1583 BFED              jnz L144
 1585 3C0000            cmp [__r1],0
 1588 BFE8              jnz L144
 158A           X62:
 158A                   .dbline 370
 158A           ;                               break;
 158A 8009              xjmp L133
 158C           L132:
 158C                   .dbline 373
 158C           ;                       
 158C           ;                       default:
 158C           ;                               PlayBlock(opt);
 158C 5200              mov A,[X+0]
 158E 08                push A
 158F 7C0388            xcall _PlayBlock
 1592 38FF              add SP,-1
 1594                   .dbline 374
 1594           ;                               break;  
 1594           L133:
 1594                   .dbline 376
 1594           ;               }
 1594           ;       }
 1594           L129:
 1594                   .dbline 350
 1594 8F69              xjmp L128
 1596           X57:
 1596                   .dbline -2
 1596           L126:
 1596 38FD              add SP,-3
 1598 20                pop X
 1599                   .dbline 0 ; func end
 1599 8FFF              jmp .
 159B                   .dbsym l opt 0 c
 159B                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Jacob\Desktop\ECE381\SPI_SRAM\SPI_SRAM\main.c
 0000           _DataOut::
 0000 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 003C 00000000          .byte 0,0,0,0
 0040                   .dbsym e DataOut _DataOut A[64:64]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Jacob\Desktop\ECE381\SPI_SRAM\SPI_SRAM\main.c
 0000           _DataIn::
 0000 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 003C 00000000          .byte 0,0,0,0
 0040                   .dbsym e DataIn _DataIn A[64:64]c
                        .area lit(rom, con, rel, lit)
 0006           L131:
 0006 53796E7468657469632077617665206F  .byte 'S,'y,'n,'t,'h,'e,'t,'i,'c,32,'w,'a,'v,'e,32,'o
 0016 7574707574206973206F6E20506F7274  .byte 'u,'t,'p,'u,'t,32,'i,'s,32,'o,'n,32,'P,'o,'r,'t
 0026 305B345D0D0A436F776162756E676120  .byte 48,91,52,93,13,10,'C,'o,'w,'a,'b,'u,'n,'g,'a,32
 0036 44756465212054696D6520746F206361  .byte 'D,'u,'d,'e,33,32,'T,'i,'m,'e,32,'t,'o,32,'c,'a
 0046 74636820736F6D652077617665732E0D  .byte 't,'c,'h,32,'s,'o,'m,'e,32,'w,'a,'v,'e,'s,46,13
 0056 0A0D0A302E20506C617920626C6F636B  .byte 10,13,10,48,46,32,'P,'l,'a,'y,32,'b,'l,'o,'c,'k
 0066 20300D0A312E20506C617920626C6F63  .byte 32,48,13,10,49,46,32,'P,'l,'a,'y,32,'b,'l,'o,'c
 0076 6B20310D0A322E20506C617920626C6F  .byte 'k,32,49,13,10,50,46,32,'P,'l,'a,'y,32,'b,'l,'o
 0086 636B20320D0A332E20506C617920626C  .byte 'c,'k,32,50,13,10,51,46,32,'P,'l,'a,'y,32,'b,'l
 0096 6F636B20330D0A342E20546573742073  .byte 'o,'c,'k,32,51,13,10,52,46,32,'T,'e,'s,'t,32,'s
 00A6 74617475732072656769737465720D0A  .byte 't,'a,'t,'u,'s,32,'r,'e,'g,'i,'s,'t,'e,'r,13,10
 00B6 352E20546573742062797465206D6F64  .byte 53,46,32,'T,'e,'s,'t,32,'b,'y,'t,'e,32,'m,'o,'d
 00C6 650D0A362E2054657374207365717565  .byte 'e,13,10,54,46,32,'T,'e,'s,'t,32,'s,'e,'q,'u,'e
 00D6 6E7469616C206D6F64650D0A00        .byte 'n,'t,'i,'a,'l,32,'m,'o,'d,'e,13,10,0
 00E3           L127:
 00E3 53796E7468657369737A696E67207761  .byte 'S,'y,'n,'t,'h,'e,'s,'i,'s,'z,'i,'n,'g,32,'w,'a
 00F3 7665666F726D730D0A00      .byte 'v,'e,'f,'o,'r,'m,'s,13,10,0
 00FD           L89:
 00FD 0D0A00            .byte 13,10,0
 0100           L88:
 0100 57726974696E6720746F2000  .byte 'W,'r,'i,'t,'i,'n,'g,32,'t,'o,32,0
 010C           L66:
 010C 507265737320616E79206B657920746F  .byte 'P,'r,'e,'s,'s,32,'a,'n,'y,32,'k,'e,'y,32,'t,'o
 011C 2061626F72740D0A00        .byte 32,'a,'b,'o,'r,'t,13,10,0
 0125           L36:
 0125 53657175656E7469616C204D6F646520  .byte 'S,'e,'q,'u,'e,'n,'t,'i,'a,'l,32,'M,'o,'d,'e,32
 0135 572F5220546573743A20416464722030  .byte 'W,47,'R,32,'T,'e,'s,'t,58,32,'A,'d,'d,'r,32,48
 0145 782020202000      .byte 'x,32,32,32,32,0
 014B           L34:
 014B 08080808080808080808080820504153  .byte 8,8,8,8,8,8,8,8,8,8,8,8,32,'P,'A,'S
 015B 53202020202020200D0A00    .byte 'S,32,32,32,32,32,32,32,13,10,0
 0166           L33:
 0166 0808080808080808080808082041424F  .byte 8,8,8,8,8,8,8,8,8,8,8,8,32,'A,'B,'O
 0176 52544544202020200D0A00    .byte 'R,'T,'E,'D,32,32,32,32,13,10,0
 0181           L23:
 0181 0808080800        .byte 8,8,8,8,0
 0186           L16:
 0186 20202020202042797465204D6F646520  .byte 32,32,32,32,32,32,'B,'y,'t,'e,32,'M,'o,'d,'e,32
 0196 572F5220546573743A20416464722030  .byte 'W,47,'R,32,'T,'e,'s,'t,58,32,'A,'d,'d,'r,32,48
 01A6 782020202000      .byte 'x,32,32,32,32,0
 01AC           L14:
 01AC 080808080820504153530D0A00        .byte 8,8,8,8,8,32,'P,'A,'S,'S,13,10,0
 01B9           L13:
 01B9 204641494C0D0A00  .byte 32,'F,'A,'I,'L,13,10,0
 01C1           L10:
 01C1 0D0A5772697465206F6620696E76616C  .byte 13,10,'W,'r,'i,'t,'e,32,'o,'f,32,'i,'n,'v,'a,'l
 01D1 69642053746174757320526567697374  .byte 'i,'d,32,'S,'t,'a,'t,'u,'s,32,'R,'e,'g,'i,'s,'t
 01E1 65722076616C75652E2053797374656D  .byte 'e,'r,32,'v,'a,'l,'u,'e,46,32,'S,'y,'s,'t,'e,'m
 01F1 2068616C7465642E0D0A00    .byte 32,'h,'a,'l,'t,'e,'d,46,13,10,0
 01FC           L3:
 01FC 53746174757320526567697374657220  .byte 'S,'t,'a,'t,'u,'s,32,'R,'e,'g,'i,'s,'t,'e,'r,32
 020C 572F5220546573743A203078202000    .byte 'W,47,'R,32,'T,'e,'s,'t,58,32,48,'x,32,32,0
