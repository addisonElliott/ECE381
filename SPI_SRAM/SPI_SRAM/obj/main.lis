 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area lit(rom, con, rel, lit)
 0000           L2:
 0000 0001              .byte 0,1
 0002 4041              .byte 64,'A
 0004 8081              .byte 128,129
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Jacob\Desktop\ECE381\SPI_SRAM\SPI_SRAM\main.c
 0000                   .dbfunc e SPIRAM_StatusRegisterTest _SPIRAM_StatusRegisterTest fc
 0000           ;         status -> X+7
 0000           ;           mode -> X+1
 0000           ;              b -> X+0
 0000           _SPIRAM_StatusRegisterTest::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3808              add SP,8
 0004                   .dbline 112
 0004           ; 
 0004           ; //----------------------------------------------------------------------------
 0004           ; // 23K256 SPI SRAM Program
 0004           ; //
 0004           ; // PSoC Global Resources:
 0004           ; //   Power Setting     5.0V/24MHz
 0004           ; //   CPU_Clock         SysClk/1
 0004           ; //   32K_Select        Internal
 0004           ; //   PLL_Mode          Off
 0004           ; //   Sleep_Timer       8_Hz
 0004           ; //   VC1=SysClk/N     *12
 0004           ; //   VC2=VC1/N        *2
 0004           ; //                    * VC1 & VC2 values make VC2 = 1MHz = SPIM Clock
 0004           ; //   VC3_Source        SysClk/1
 0004           ; //   VC3 Divider      *52
 0004           ; //                    *Used to set UART baud rate to 57600
 0004           ; //   SysClk Source     Internal
 0004           ; //   SysClk*2 Disable  { Any }
 0004           ; //   Analog Power      { Any }
 0004           ; //   Ref Mux           { Any }
 0004           ; //   AGndBypass        { Any }
 0004           ; //   Op-Amp Bias       { Any }
 0004           ; //   A_Buff_Power      { Any }
 0004           ; //   SwitchModePump    OFF
 0004           ; //   Trip Voltage      { Any }
 0004           ; //   LVD ThrottleBack  Disable
 0004           ; //                    *When enabled, an LVD event forces the CPU Clock to SysClk/8.
 0004           ; //   Watchdog Enable  *{ Any }
 0004           ; //                    *Incautious use of the Watchdog may adversely affect timing
 0004           ; //
 0004           ; // SPIM Parameters
 0004           ; //   Name              SPIM
 0004           ; //   Clock            *VC2
 0004           ; //                    *1MHz = 500kbps SPI bit rate.
 0004           ; //   MISO              Row_2_Input_1
 0004           ; //   MOSI              Row_2_Output_0
 0004           ; //   SClk              Row_2_Output_3
 0004           ; //   Interrupt Mode    TXRegEmpty
 0004           ; //   ClockSync         Sync to SysClk
 0004           ; //   InvertMISO        Normal
 0004           ; //
 0004           ; // SPIM Module Notes
 0004           ; //   The 23K256 SPI SRAM has a maximum clock speed of 20MHz
 0004           ; //   SPIM Clock must be set to two times the desired bit rate
 0004           ; //   My prototype uses VC2 = SysClk/48 = 500kHz, yielding a bit rate of 250kbps
 0004           ; //   CS   = P12 (StdCPU:    Open Drain Low)
 0004           ; //   SCLK = P13 (GlobalOut: Open Drain Low)
 0004           ; //   MOSI = P14 (GlobalOut: Open Drain Low)
 0004           ; //   MISO = P15 (GlobalIn:  High Z)
 0004           ; //
 0004           ; // SPIM Modules Notes:
 0004           ; //  -Per Datasheet: The Row Input synchronization for MISO should be set to
 0004           ; //   Async for high SPI bit rates (>1Mbps).
 0004           ; //  -The SPIM Control Register contains the flags that are read by the
 0004           ; //   SPIM_bReadStatus() function. Reading clears all flags.
 0004           ; //  -The Datasheet for the SPIM Datasheet is inconsistent in its referral to
 0004           ; //   the SPIM_SPI_COMPLETE flag.  In the SPIM Control Register, it is named
 0004           ; //   SPI Done.
 0004           ; //  -The SPIM Module always transfers data present on the MISO pin when it
 0004           ; //   writes to the MOSI pin. In other words, it always transfers data into
 0004           ; //   the receive buffer while it is transferring data out of the transmit
 0004           ; //   buffer; it is essential to keep this in mind when checking flags.
 0004           ; //  -TX_BUFFER_EMPTY indicates that a new byte can be written to the TX Buffer.
 0004           ; //  -RX_BUFFER_FULL is set on the edge that captures the 8th bit of receive data.
 0004           ; //  -SPI_COMPLETE (an optional interrupt) is set when eight bits
 0004           ; //   of data and clock have been sent. In modes 0 and 1, this occurs one-half
 0004           ; //   cycle after RX_BUFFER_FULL is set; because in these modes, data is latched
 0004           ; //   on the leading edge of the clock and there is an additional one-half cycle
 0004           ; //   remaining to complete that clock. In modes 2 and 3, this occurs at the
 0004           ; //   same edge that the receive data is latched. This signal may be used to
 0004           ; //   read the received byte or it may be used by the SPIM to disable the
 0004           ; //   block after data transmission is complete.
 0004           ; //   See PSoC TRM, Document No. 001-14463 Rev. *G, Figure 17-19, page 358.
 0004           ; //  -Once the first byte to be transmitted is moved into the transmit buffer
 0004           ; //   by calling the SendTxData API, the SPIM module immediately moves the
 0004           ; //   byte into the transmit shift register one SPIM Clock Input cycle later
 0004           ; //   whereupon the TX_BUFFER_EMPTY flag is set immediately.
 0004           ; //   If another byte is written before the first byte has been fully shifted
 0004           ; //   out, it is placed in the transmit buffer and remains there until half-way
 0004           ; //   through the transmission of the 8th and final bit whereupon it is
 0004           ; //   automatically loaded into the transmit buffer which again sets the
 0004           ; //   TX_BUFFER_EMPTY flag and the 1st bit of the second byte begins
 0004           ; //   its transfer immediately after the 8th bit of the 1st byte. This allows
 0004           ; //   for uninterrupted back-to-back transmission.
 0004           ; //
 0004           ; // 23K256 Notes:
 0004           ; //  -Pins 4 & 8, the power pins, must have a 0.1uF decoupling capacitor
 0004           ; //   physically placed as close as possible to the IC package.
 0004           ; //  -Pin 7 (nHOLD) must be tied to Vcc since it is not used here.
 0004           ; //  -Pin 3 should be left floating since it is NC (no connection)
 0004           ; //  -3.3V SPI to 5V PSoC voltage translation is accomplished through 2.2k
 0004           ; //   pull-up resistors. This also limits the maximum reliable data transfer
 0004           ; //   rate due to the 2.2k*Cpin+wire time constant. Long wires are detrimental!
 0004           ; //
 0004           ; // bnoble@siue.edu 20140320
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "stdlib.h"
 0004           ; #include "spi_sram.h"
 0004           ; #include "math.h"
 0004           ; // Define our I/O array size. Powers of 2 are nice but not necessary
 0004           ; #define ARRAY_SIZE 64
 0004           ; 
 0004           ; // Globals
 0004           ; BYTE DataIn[ARRAY_SIZE];
 0004           ; BYTE DataOut[ARRAY_SIZE];
 0004           ; 
 0004           ; // Test reading and writing the 23K256 status register:
 0004           ; BYTE SPIRAM_StatusRegisterTest(void)
 0004           ; {
 0004                   .dbline 114
 0004           ;       // NOTE: SPIRAM_SEQUENTIAL_MODE|SPIRAM_PAGE_MODE is "Reserved", don't use it
 0004           ;       BYTE mode[6] = { SPIRAM_BYTE_MODE,
 0004 62D000            mov REG[0xd0],>__r0
 0007 550000            mov [__r1],<L2
 000A 550000            mov [__r0],>L2
 000D 5A00              mov [__r3],X
 000F 060001            add [__r3],1
 0012 62D507            mov REG[0xd5],7
 0015 10                push X
 0016 550000            mov [__rX],0
 0019 5100              mov A,[__r0]
 001B 5800              mov X,[__r1]
 001D           X0:
 001D 08                push A
 001E 28                romx
 001F 62D000            mov REG[0xd0],>__r0
 0022 3F00              mvi [__r3],A
 0024 18                pop A
 0025 75                inc X
 0026 0900              adc A,0
 0028 7600              inc [__rX]
 002A 3C0006            cmp [__rX],6
 002D BFEF              jnz X0
 002F                   .dbline 123
 002F           ;                                        SPIRAM_BYTE_MODE|SPIRAM_DISABLE_HOLD,
 002F           ;                                        SPIRAM_SEQUENTIAL_MODE,
 002F           ;                                        SPIRAM_SEQUENTIAL_MODE|SPIRAM_DISABLE_HOLD,
 002F           ;                                        SPIRAM_PAGE_MODE,
 002F           ;                                        SPIRAM_PAGE_MODE|SPIRAM_DISABLE_HOLD };
 002F           ;       BYTE status;
 002F           ;       BYTE b;
 002F           ; 
 002F           ;       UART_CPutString("Status Register W/R Test: 0x  ");
 002F 50ED              mov A,>L3
 0031 08                push A
 0032 50ED              mov A,<L3
 0034 5C                mov X,A
 0035 18                pop A
 0036 7C0000            xcall _UART_CPutString
 0039 20                pop X
 003A                   .dbline 124
 003A           ;       for (b=0; b<6 ; b++) {
 003A 560000            mov [X+0],0
 003D 809B              xjmp L7
 003F           L4:
 003F                   .dbline 124
 003F                   .dbline 125
 003F           ;               UART_PutChar(0x08);
 003F 10                push X
 0040 5008              mov A,8
 0042 7C0000            xcall _UART_PutChar
 0045                   .dbline 126
 0045           ;               UART_PutChar(0x08);
 0045 5008              mov A,8
 0047 7C0000            xcall _UART_PutChar
 004A 20                pop X
 004B                   .dbline 127
 004B           ;               UART_PutSHexByte(mode[b]);
 004B 62D000            mov REG[0xd0],>__r0
 004E 550007            mov [__r0],7
 0051 5A00              mov [__r1],X
 0053 060001            add [__r1],1
 0056 5200              mov A,[X+0]
 0058 0200              add A,[__r1]
 005A 5300              mov [__r1],A
 005C 5000              mov A,0
 005E 0A00              adc A,[__r0]
 0060 60D4              mov REG[0xd4],A
 0062 3E00              mvi A,[__r1]
 0064 10                push X
 0065 7C0000            xcall _UART_PutSHexByte
 0068 20                pop X
 0069                   .dbline 128
 0069           ;               if (SPIRAM_WriteStatusRegister(mode[b])) {
 0069 62D000            mov REG[0xd0],>__r0
 006C 550007            mov [__r0],7
 006F 5A00              mov [__r1],X
 0071 060001            add [__r1],1
 0074 5200              mov A,[X+0]
 0076 0200              add A,[__r1]
 0078 5300              mov [__r1],A
 007A 5000              mov A,0
 007C 0A00              adc A,[__r0]
 007E 60D4              mov REG[0xd4],A
 0080 3E00              mvi A,[__r1]
 0082 08                push A
 0083 7C0000            xcall _SPIRAM_WriteStatusRegister
 0086 38FF              add SP,-1
 0088 62D000            mov REG[0xd0],>__r0
 008B 3900              cmp A,0
 008D A010              jz L8
 008F                   .dbline 129
 008F           ;                       UART_CPutString("\r\nWrite of invalid Status Register value. System halted.\r\n");
 008F                   .dbline 129
 008F 10                push X
 0090 50B2              mov A,>L10
 0092 08                push A
 0093 50B2              mov A,<L10
 0095 5C                mov X,A
 0096 18                pop A
 0097 7C0000            xcall _UART_CPutString
 009A 20                pop X
 009B                   .dbline 130
 009B           ;                       M8C_Stop;
 009B 43FF01            or REG[0xff],1
 009E                   .dbline 131
 009E           ;               }
 009E           L8:
 009E                   .dbline 132
 009E           ;               status = SPIRAM_ReadStatusRegister();
 009E 7C0000            xcall _SPIRAM_ReadStatusRegister
 00A1 62D000            mov REG[0xd0],>__r0
 00A4 5407              mov [X+7],A
 00A6                   .dbline 133
 00A6           ;               if (status != mode[b]) {
 00A6 550007            mov [__r0],7
 00A9 5A00              mov [__r1],X
 00AB 060001            add [__r1],1
 00AE 5200              mov A,[X+0]
 00B0 0200              add A,[__r1]
 00B2 5300              mov [__r1],A
 00B4 5000              mov A,0
 00B6 0A00              adc A,[__r0]
 00B8 60D4              mov REG[0xd4],A
 00BA 3E00              mvi A,[__r1]
 00BC 5300              mov [__r0],A
 00BE 5207              mov A,[X+7]
 00C0 3A00              cmp A,[__r0]
 00C2 A014              jz L11
 00C4                   .dbline 134
 00C4           ;                       UART_CPutString(" FAIL\r\n");
 00C4                   .dbline 134
 00C4 10                push X
 00C5 50AA              mov A,>L13
 00C7 08                push A
 00C8 50AA              mov A,<L13
 00CA 5C                mov X,A
 00CB 18                pop A
 00CC 7C0000            xcall _UART_CPutString
 00CF 20                pop X
 00D0                   .dbline 135
 00D0           ;                       return(1);
 00D0 62D000            mov REG[0xd0],>__r0
 00D3 5001              mov A,1
 00D5 8021              xjmp L1
 00D7           L11:
 00D7                   .dbline 137
 00D7           ;               }
 00D7           ;       }
 00D7           L5:
 00D7                   .dbline 124
 00D7 7700              inc [X+0]
 00D9           L7:
 00D9                   .dbline 124
 00D9 3D0006            cmp [X+0],6
 00DC CF62              jc L4
 00DE           X1:
 00DE                   .dbline 138
 00DE           ;       UART_CPutString("\b\b\b\b\b PASS\r\n");
 00DE 10                push X
 00DF 509D              mov A,>L14
 00E1 08                push A
 00E2 509D              mov A,<L14
 00E4 5C                mov X,A
 00E5 18                pop A
 00E6 7C0000            xcall _UART_CPutString
 00E9 20                pop X
 00EA                   .dbline 140
 00EA           ;       // Place the SRAM back in Byte Mode
 00EA           ;       SPIRAM_WriteStatusRegister(SPIRAM_BYTE_MODE|SPIRAM_DISABLE_HOLD);
 00EA 5001              mov A,1
 00EC 08                push A
 00ED 7C0000            xcall _SPIRAM_WriteStatusRegister
 00F0 38FF              add SP,-1
 00F2 62D000            mov REG[0xd0],>__r0
 00F5                   .dbline 141
 00F5           ;       return(0);
 00F5 5000              mov A,0
 00F7                   .dbline -2
 00F7           L1:
 00F7 38F8              add SP,-8
 00F9 20                pop X
 00FA                   .dbline 0 ; func end
 00FA 7F                ret
 00FB                   .dbsym l status 7 c
 00FB                   .dbsym l mode 1 A[6:6]c
 00FB                   .dbsym l b 0 c
 00FB                   .dbend
 00FB                   .dbfunc e SPIRAM_ByteModeTest _SPIRAM_ByteModeTest fi
 00FB           ;         status -> X+4
 00FB           ;             in -> X+3
 00FB           ;           addr -> X+1
 00FB           ;              b -> X+0
 00FB           _SPIRAM_ByteModeTest::
 00FB                   .dbline -1
 00FB 10                push X
 00FC 4F                mov X,SP
 00FD 3805              add SP,5
 00FF                   .dbline 146
 00FF           ; }
 00FF           ; 
 00FF           ; // Test reading and writing the 23K256 in Byte Mode:
 00FF           ; WORD SPIRAM_ByteModeTest(void)
 00FF           ; {
 00FF                   .dbline 152
 00FF           ;       BYTE status;
 00FF           ;       BYTE b;
 00FF           ;       BYTE in;
 00FF           ;       WORD addr;
 00FF           ; 
 00FF           ;       SPIRAM_WriteStatusRegister(SPIRAM_BYTE_MODE|SPIRAM_DISABLE_HOLD);
 00FF 5001              mov A,1
 0101 08                push A
 0102 7C0000            xcall _SPIRAM_WriteStatusRegister
 0105 38FF              add SP,-1
 0107 62D000            mov REG[0xd0],>__r0
 010A                   .dbline 153
 010A           ;       UART_CPutString("      Byte Mode W/R Test: Addr 0x    ");
 010A 10                push X
 010B 5077              mov A,>L16
 010D 08                push A
 010E 5077              mov A,<L16
 0110 5C                mov X,A
 0111 18                pop A
 0112 7C0000            xcall _UART_CPutString
 0115 20                pop X
 0116                   .dbline 155
 0116           ; 
 0116           ;       for (addr=0; addr<0x8000 ; addr++) {
 0116 560200            mov [X+2],0
 0119 560100            mov [X+1],0
 011C 80BE              xjmp L20
 011E           L17:
 011E                   .dbline 155
 011E                   .dbline 156
 011E           ;               if (((addr-1) & 0x000f) == 0x000f) {
 011E 62D000            mov REG[0xd0],>__r0
 0121 5202              mov A,[X+2]
 0123 1101              sub A,1
 0125 5300              mov [__r1],A
 0127 5201              mov A,[X+1]
 0129 1900              sbb A,0
 012B 5300              mov [__r0],A
 012D 26000F            and [__r1],15
 0130 260000            and [__r0],0
 0133 B01D              jnz L21
 0135 3C000F            cmp [__r1],15
 0138 B018              jnz L21
 013A           X2:
 013A                   .dbline 157
 013A           ;                       UART_CPutString("\b\b\b\b");
 013A                   .dbline 157
 013A 10                push X
 013B 5072              mov A,>L23
 013D 08                push A
 013E 5072              mov A,<L23
 0140 5C                mov X,A
 0141 18                pop A
 0142 7C0000            xcall _UART_CPutString
 0145 20                pop X
 0146                   .dbline 158
 0146           ;                       UART_PutSHexInt(addr);
 0146 10                push X
 0147 5201              mov A,[X+1]
 0149 08                push A
 014A 5202              mov A,[X+2]
 014C 20                pop X
 014D 7C0000            xcall _UART_PutSHexInt
 0150 20                pop X
 0151                   .dbline 159
 0151           ;               }
 0151           L21:
 0151                   .dbline 160
 0151           ;               b = 0;
 0151 560000            mov [X+0],0
 0154           L24:
 0154                   .dbline 161
 0154           ;               do {
 0154                   .dbline 162
 0154           ;                       SPIRAM_WriteByte(addr, b);
 0154 5200              mov A,[X+0]
 0156 08                push A
 0157 5201              mov A,[X+1]
 0159 08                push A
 015A 5202              mov A,[X+2]
 015C 08                push A
 015D 7C0000            xcall _SPIRAM_WriteByte
 0160                   .dbline 163
 0160           ;                       in = SPIRAM_ReadByte(addr);
 0160 5201              mov A,[X+1]
 0162 08                push A
 0163 5202              mov A,[X+2]
 0165 08                push A
 0166 7C0000            xcall _SPIRAM_ReadByte
 0169 38FB              add SP,-5
 016B 62D000            mov REG[0xd0],>__r0
 016E 5403              mov [X+3],A
 0170                   .dbline 164
 0170           ;                       if (in != b) {
 0170 5203              mov A,[X+3]
 0172 3B00              cmp A,[X+0]
 0174 A02D              jz L27
 0176                   .dbline 165
 0176           ;                               UART_CPutString("\b\b\b\b");
 0176                   .dbline 165
 0176 10                push X
 0177 5072              mov A,>L23
 0179 08                push A
 017A 5072              mov A,<L23
 017C 5C                mov X,A
 017D 18                pop A
 017E 7C0000            xcall _UART_CPutString
 0181 20                pop X
 0182                   .dbline 166
 0182           ;                               UART_PutSHexInt(addr);
 0182 10                push X
 0183 5201              mov A,[X+1]
 0185 08                push A
 0186 5202              mov A,[X+2]
 0188 20                pop X
 0189 7C0000            xcall _UART_PutSHexInt
 018C                   .dbline 167
 018C           ;                               UART_CPutString(" FAIL\r\n");
 018C 50AA              mov A,>L13
 018E 08                push A
 018F 50AA              mov A,<L13
 0191 5C                mov X,A
 0192 18                pop A
 0193 7C0000            xcall _UART_CPutString
 0196 20                pop X
 0197                   .dbline 168
 0197           ;                               return(1);
 0197 62D000            mov REG[0xd0],>__r0
 019A 550001            mov [__r1],1
 019D 550000            mov [__r0],0
 01A0 8059              xjmp L15
 01A2           L27:
 01A2                   .dbline 170
 01A2           ;                       }
 01A2           ;                       if (!b)
 01A2 3D0000            cmp [X+0],0
 01A5 B006              jnz L29
 01A7                   .dbline 171
 01A7           ;                               b = 0x01;
 01A7 560001            mov [X+0],1
 01AA 8003              xjmp L30
 01AC           L29:
 01AC                   .dbline 173
 01AC           ;                       else
 01AC           ;                               b = b << 1;
 01AC 6600              asl [X+0]
 01AE           L30:
 01AE                   .dbline 174
 01AE           ;               } while(b);
 01AE           L25:
 01AE                   .dbline 174
 01AE 3D0000            cmp [X+0],0
 01B1 BFA2              jnz L24
 01B3                   .dbline 175
 01B3           ;               if (UART_cReadChar()) {
 01B3 10                push X
 01B4 7C0000            xcall _UART_cReadChar
 01B7 20                pop X
 01B8 62D000            mov REG[0xd0],>__r0
 01BB 3900              cmp A,0
 01BD A018              jz L31
 01BF                   .dbline 176
 01BF           ;                       UART_CPutString("\b\b\b\b\b\b\b\b\b\b\b\b ABORTED    \r\n");
 01BF                   .dbline 176
 01BF 10                push X
 01C0 5057              mov A,>L33
 01C2 08                push A
 01C3 5057              mov A,<L33
 01C5 5C                mov X,A
 01C6 18                pop A
 01C7 7C0000            xcall _UART_CPutString
 01CA 20                pop X
 01CB                   .dbline 177
 01CB           ;                       return(0);
 01CB 62D000            mov REG[0xd0],>__r0
 01CE 550000            mov [__r1],0
 01D1 550000            mov [__r0],0
 01D4 8025              xjmp L15
 01D6           L31:
 01D6                   .dbline 179
 01D6           ;               }
 01D6           ;       }
 01D6           L18:
 01D6                   .dbline 155
 01D6 7702              inc [X+2]
 01D8 0F0100            adc [X+1],0
 01DB           L20:
 01DB                   .dbline 155
 01DB 5202              mov A,[X+2]
 01DD 1100              sub A,0
 01DF 5201              mov A,[X+1]
 01E1 1980              sbb A,-128
 01E3 CF3A              jc L17
 01E5           X3:
 01E5                   .dbline 180
 01E5           ;       UART_CPutString("\b\b\b\b\b\b\b\b\b\b\b\b PASS       \r\n");
 01E5 10                push X
 01E6 503C              mov A,>L34
 01E8 08                push A
 01E9 503C              mov A,<L34
 01EB 5C                mov X,A
 01EC 18                pop A
 01ED 7C0000            xcall _UART_CPutString
 01F0 20                pop X
 01F1                   .dbline 181
 01F1           ;       return(0);
 01F1 62D000            mov REG[0xd0],>__r0
 01F4 550000            mov [__r1],0
 01F7 550000            mov [__r0],0
 01FA                   .dbline -2
 01FA           L15:
 01FA 38FB              add SP,-5
 01FC 20                pop X
 01FD                   .dbline 0 ; func end
 01FD 7F                ret
 01FE                   .dbsym l status 4 c
 01FE                   .dbsym l in 3 c
 01FE                   .dbsym l addr 1 i
 01FE                   .dbsym l b 0 c
 01FE                   .dbend
 01FE                   .dbfunc e SPIRAM_SequentialModeTest _SPIRAM_SequentialModeTest fi
 01FE           ;             in -> X+5
 01FE           ;         status -> X+4
 01FE           ;           addr -> X+2
 01FE           ;              b -> X+1
 01FE           ;              a -> X+0
 01FE           _SPIRAM_SequentialModeTest::
 01FE                   .dbline -1
 01FE 10                push X
 01FF 4F                mov X,SP
 0200 3806              add SP,6
 0202                   .dbline 186
 0202           ; }
 0202           ; 
 0202           ; // Test reading and writing the 23K256 in Sequential Mode:
 0202           ; WORD SPIRAM_SequentialModeTest(void)
 0202           ; {
 0202                   .dbline 193
 0202           ;       BYTE status;
 0202           ;       BYTE a;
 0202           ;       BYTE b;
 0202           ;       BYTE in;
 0202           ;       WORD addr;
 0202           ; 
 0202           ;       SPIRAM_WriteStatusRegister(SPIRAM_SEQUENTIAL_MODE|SPIRAM_DISABLE_HOLD);
 0202 5041              mov A,65
 0204 08                push A
 0205 7C0000            xcall _SPIRAM_WriteStatusRegister
 0208 38FF              add SP,-1
 020A 62D000            mov REG[0xd0],>__r0
 020D                   .dbline 194
 020D           ;       UART_CPutString("Sequential Mode W/R Test: Addr 0x    ");
 020D 10                push X
 020E 5016              mov A,>L36
 0210 08                push A
 0211 5016              mov A,<L36
 0213 5C                mov X,A
 0214 18                pop A
 0215 7C0000            xcall _UART_CPutString
 0218 20                pop X
 0219                   .dbline 196
 0219           ; 
 0219           ;       for (addr=0; addr<0x8000 ; addr+=ARRAY_SIZE) {
 0219 560300            mov [X+3],0
 021C 560200            mov [X+2],0
 021F 8103              xjmp L40
 0221           L37:
 0221                   .dbline 196
 0221                   .dbline 197
 0221           ;               UART_CPutString("\b\b\b\b");
 0221 10                push X
 0222 5072              mov A,>L23
 0224 08                push A
 0225 5072              mov A,<L23
 0227 5C                mov X,A
 0228 18                pop A
 0229 7C0000            xcall _UART_CPutString
 022C 20                pop X
 022D                   .dbline 198
 022D           ;               UART_PutSHexInt(addr);
 022D 10                push X
 022E 5202              mov A,[X+2]
 0230 08                push A
 0231 5203              mov A,[X+3]
 0233 20                pop X
 0234 7C0000            xcall _UART_PutSHexInt
 0237 20                pop X
 0238                   .dbline 199
 0238           ;               b = 0;
 0238 560100            mov [X+1],0
 023B           L41:
 023B                   .dbline 200
 023B           ;               do {
 023B                   .dbline 201
 023B           ;                       for (a=0 ; a<ARRAY_SIZE ; a++) {
 023B 560000            mov [X+0],0
 023E 801B              xjmp L47
 0240           L44:
 0240                   .dbline 201
 0240                   .dbline 202
 0240           ;                               DataOut[a] = b;
 0240 62D000            mov REG[0xd0],>__r0
 0243 5200              mov A,[X+0]
 0245 5300              mov [__r1],A
 0247 550000            mov [__r0],0
 024A 060000            add [__r1],<_DataOut
 024D 0E0000            adc [__r0],>_DataOut
 0250 5100              mov A,[__r0]
 0252 60D5              mov REG[0xd5],A
 0254 5201              mov A,[X+1]
 0256 3F00              mvi [__r1],A
 0258                   .dbline 203
 0258           ;                       }
 0258           L45:
 0258                   .dbline 201
 0258 7700              inc [X+0]
 025A           L47:
 025A                   .dbline 201
 025A 3D0040            cmp [X+0],64
 025D CFE2              jc L44
 025F           X4:
 025F                   .dbline 204
 025F           ;                       SPIRAM_WriteArray(addr, DataOut, ARRAY_SIZE);
 025F 5040              mov A,64
 0261 08                push A
 0262 5000              mov A,>_DataOut
 0264 08                push A
 0265 5000              mov A,<_DataOut
 0267 08                push A
 0268 5202              mov A,[X+2]
 026A 08                push A
 026B 5203              mov A,[X+3]
 026D 08                push A
 026E 7C0000            xcall _SPIRAM_WriteArray
 0271                   .dbline 205
 0271           ;                       SPIRAM_ReadArray(addr, DataIn, ARRAY_SIZE);
 0271 5040              mov A,64
 0273 08                push A
 0274 5000              mov A,>_DataIn
 0276 08                push A
 0277 5000              mov A,<_DataIn
 0279 08                push A
 027A 5202              mov A,[X+2]
 027C 08                push A
 027D 5203              mov A,[X+3]
 027F 08                push A
 0280 7C0000            xcall _SPIRAM_ReadArray
 0283 38F6              add SP,-10
 0285                   .dbline 206
 0285           ;                       for (a=0 ; a<ARRAY_SIZE ; a++) {
 0285 560000            mov [X+0],0
 0288 805B              xjmp L51
 028A           L48:
 028A                   .dbline 206
 028A                   .dbline 207
 028A           ;                               if (DataIn[a] != b) {
 028A 62D000            mov REG[0xd0],>__r0
 028D 5200              mov A,[X+0]
 028F 5300              mov [__r1],A
 0291 550000            mov [__r0],0
 0294 060000            add [__r1],<_DataIn
 0297 0E0000            adc [__r0],>_DataIn
 029A 5100              mov A,[__r0]
 029C 60D4              mov REG[0xd4],A
 029E 3E00              mvi A,[__r1]
 02A0 3B01              cmp A,[X+1]
 02A2 A03F              jz L52
 02A4                   .dbline 208
 02A4           ;                                       UART_CPutString("\b\b\b\b");
 02A4                   .dbline 208
 02A4 10                push X
 02A5 5072              mov A,>L23
 02A7 08                push A
 02A8 5072              mov A,<L23
 02AA 5C                mov X,A
 02AB 18                pop A
 02AC 7C0000            xcall _UART_CPutString
 02AF 20                pop X
 02B0                   .dbline 209
 02B0           ;                                       UART_PutSHexInt(addr+a);
 02B0 62D000            mov REG[0xd0],>__r0
 02B3 5200              mov A,[X+0]
 02B5 5300              mov [__r1],A
 02B7 550000            mov [__r0],0
 02BA 5203              mov A,[X+3]
 02BC 0200              add A,[__r1]
 02BE 5300              mov [__r1],A
 02C0 5202              mov A,[X+2]
 02C2 0A00              adc A,[__r0]
 02C4 10                push X
 02C5 08                push A
 02C6 5100              mov A,[__r1]
 02C8 20                pop X
 02C9 7C0000            xcall _UART_PutSHexInt
 02CC                   .dbline 210
 02CC           ;                                       UART_CPutString(" FAIL\r\n");
 02CC 50AA              mov A,>L13
 02CE 08                push A
 02CF 50AA              mov A,<L13
 02D1 5C                mov X,A
 02D2 18                pop A
 02D3 7C0000            xcall _UART_CPutString
 02D6 20                pop X
 02D7                   .dbline 211
 02D7           ;                                       return(1);
 02D7 62D000            mov REG[0xd0],>__r0
 02DA 550001            mov [__r1],1
 02DD 550000            mov [__r0],0
 02E0 8061              xjmp L35
 02E2           L52:
 02E2                   .dbline 213
 02E2           ;                               }
 02E2           ;                       }
 02E2           L49:
 02E2                   .dbline 206
 02E2 7700              inc [X+0]
 02E4           L51:
 02E4                   .dbline 206
 02E4 3D0040            cmp [X+0],64
 02E7 CFA2              jc L48
 02E9           X5:
 02E9                   .dbline 214
 02E9           ;                       if (!b)
 02E9 3D0100            cmp [X+1],0
 02EC B006              jnz L54
 02EE                   .dbline 215
 02EE           ;                               b = 0x01;
 02EE 560101            mov [X+1],1
 02F1 8003              xjmp L55
 02F3           L54:
 02F3                   .dbline 217
 02F3           ;                       else
 02F3           ;                               b = b << 1;
 02F3 6601              asl [X+1]
 02F5           L55:
 02F5                   .dbline 218
 02F5           ;               } while(b);
 02F5           L42:
 02F5                   .dbline 218
 02F5 3D0100            cmp [X+1],0
 02F8 BF42              jnz L41
 02FA                   .dbline 219
 02FA           ;               if (UART_cReadChar()) {
 02FA 10                push X
 02FB 7C0000            xcall _UART_cReadChar
 02FE 20                pop X
 02FF 62D000            mov REG[0xd0],>__r0
 0302 3900              cmp A,0
 0304 A018              jz L56
 0306                   .dbline 220
 0306           ;                       UART_CPutString("\b\b\b\b\b\b\b\b\b\b\b\b ABORTED    \r\n");
 0306                   .dbline 220
 0306 10                push X
 0307 5057              mov A,>L33
 0309 08                push A
 030A 5057              mov A,<L33
 030C 5C                mov X,A
 030D 18                pop A
 030E 7C0000            xcall _UART_CPutString
 0311 20                pop X
 0312                   .dbline 221
 0312           ;                       return(0);
 0312 62D000            mov REG[0xd0],>__r0
 0315 550000            mov [__r1],0
 0318 550000            mov [__r0],0
 031B 8026              xjmp L35
 031D           L56:
 031D                   .dbline 223
 031D           ;               }
 031D           ;       }
 031D           L38:
 031D                   .dbline 196
 031D 070340            add [X+3],64
 0320 0F0200            adc [X+2],0
 0323           L40:
 0323                   .dbline 196
 0323 5203              mov A,[X+3]
 0325 1100              sub A,0
 0327 5202              mov A,[X+2]
 0329 1980              sbb A,-128
 032B CEF5              jc L37
 032D           X6:
 032D                   .dbline 224
 032D           ;       UART_CPutString("\b\b\b\b\b\b\b\b\b\b\b\b PASS       \r\n");
 032D 10                push X
 032E 503C              mov A,>L34
 0330 08                push A
 0331 503C              mov A,<L34
 0333 5C                mov X,A
 0334 18                pop A
 0335 7C0000            xcall _UART_CPutString
 0338 20                pop X
 0339                   .dbline 225
 0339           ;       return(0);
 0339 62D000            mov REG[0xd0],>__r0
 033C 550000            mov [__r1],0
 033F 550000            mov [__r0],0
 0342                   .dbline -2
 0342           L35:
 0342 38FA              add SP,-6
 0344 20                pop X
 0345                   .dbline 0 ; func end
 0345 7F                ret
 0346                   .dbsym l in 5 c
 0346                   .dbsym l status 4 c
 0346                   .dbsym l addr 2 i
 0346                   .dbsym l b 1 c
 0346                   .dbsym l a 0 c
 0346                   .dbend
 0346                   .dbfunc e GetNumber _GetNumber fc
 0346           ;              c -> X+0
 0346           ;            max -> X-5
 0346           ;            min -> X-4
 0346           _GetNumber::
 0346                   .dbline -1
 0346 10                push X
 0347 4F                mov X,SP
 0348 3801              add SP,1
 034A                   .dbline 231
 034A           ; }
 034A           ; 
 034A           ; // This function reads characters from the serial until a character is entered that is within the min & max ASCII characters.
 034A           ; // That character is returned
 034A           ; char GetNumber(char min, char max)
 034A           ; {
 034A 8037              xjmp L60
 034C           L59:
 034C                   .dbline 235
 034C           ;       char c;
 034C           ;       
 034C           ;       while (1)
 034C           ;       {
 034C                   .dbline 236
 034C           ;               c = UART_cReadChar(); // Read the character
 034C 10                push X
 034D 7C0000            xcall _UART_cReadChar
 0350 20                pop X
 0351 62D000            mov REG[0xd0],>__r0
 0354 5400              mov [X+0],A
 0356                   .dbline 237
 0356           ;               if (c < ('0' + min) || c > ('0' + max)) // If the character is not within min to max range, continue the loop
 0356 52FC              mov A,[X-4]
 0358 0130              add A,48
 035A 5300              mov [__r0],A
 035C 5200              mov A,[X+0]
 035E 3A00              cmp A,[__r0]
 0360 C00C              jc L64
 0362           X8:
 0362 62D000            mov REG[0xd0],>__r0
 0365 52FB              mov A,[X-5]
 0367 0130              add A,48
 0369 3B00              cmp A,[X+0]
 036B D003              jnc L62
 036D           X9:
 036D           L64:
 036D                   .dbline 238
 036D           ;                       continue;
 036D 8014              xjmp L60
 036F           L62:
 036F                   .dbline 240
 036F           ;               
 036F           ;               UART_PutChar(c); // Put the character on the serial
 036F 10                push X
 0370 5200              mov A,[X+0]
 0372 7C0000            xcall _UART_PutChar
 0375                   .dbline 241
 0375           ;               UART_PutCRLF();
 0375 7C0000            xcall _UART_PutCRLF
 0378 20                pop X
 0379                   .dbline 242
 0379           ;               return (c - '0'); // This returns the integer number entered instead of the ASCII value
 0379 62D000            mov REG[0xd0],>__r0
 037C 5200              mov A,[X+0]
 037E 1130              sub A,48
 0380 8003              xjmp L58
 0382           L60:
 0382                   .dbline 234
 0382 8FC9              xjmp L59
 0384           X7:
 0384                   .dbline -2
 0384           L58:
 0384 38FF              add SP,-1
 0386 20                pop X
 0387                   .dbline 0 ; func end
 0387 7F                ret
 0388                   .dbsym l c 0 c
 0388                   .dbsym l max -5 c
 0388                   .dbsym l min -4 c
 0388                   .dbend
 0388                   .dbfunc e PlayBlock _PlayBlock fV
 0388           ;      startAddr -> X+4
 0388           ;        endAddr -> X+2
 0388           ;           addr -> X+0
 0388           ;             id -> X-4
 0388           _PlayBlock::
 0388                   .dbline -1
 0388 10                push X
 0389 4F                mov X,SP
 038A 3806              add SP,6
 038C                   .dbline 250
 038C           ;       }
 038C           ;       
 038C           ;       return 0;
 038C           ; }
 038C           ; 
 038C           ; // This function plays a block of data where opt is the data block 0-3.
 038C           ; void PlayBlock(char id)
 038C           ; {     
 038C                   .dbline 251
 038C           ;       WORD startAddr = id * 0x2000; // Where the address starts for block
 038C 62D000            mov REG[0xd0],>__r0
 038F 52FC              mov A,[X-4]
 0391 5300              mov [__r0],A
 0393 550000            mov [__r1],0
 0396 6500              asl [__r0]
 0398 6500              asl [__r1]
 039A 6B00              rlc [__r0]
 039C 6500              asl [__r1]
 039E 6B00              rlc [__r0]
 03A0 6500              asl [__r1]
 03A2 6B00              rlc [__r0]
 03A4 6500              asl [__r1]
 03A6 6B00              rlc [__r0]
 03A8 5100              mov A,[__r1]
 03AA 5405              mov [X+5],A
 03AC 5100              mov A,[__r0]
 03AE 5404              mov [X+4],A
 03B0                   .dbline 252
 03B0           ;       WORD endAddr = startAddr + 0x2000; // Where the address ends for block
 03B0 5205              mov A,[X+5]
 03B2 0100              add A,0
 03B4 5403              mov [X+3],A
 03B6 5204              mov A,[X+4]
 03B8 0920              adc A,32
 03BA 5402              mov [X+2],A
 03BC                   .dbline 253
 03BC           ;       WORD addr = startAddr;
 03BC 5205              mov A,[X+5]
 03BE 5401              mov [X+1],A
 03C0 5204              mov A,[X+4]
 03C2 5400              mov [X+0],A
 03C4                   .dbline 255
 03C4           ;       
 03C4           ;       SPIRAM_WriteStatusRegister(SPIRAM_BYTE_MODE | SPIRAM_DISABLE_HOLD);
 03C4 5001              mov A,1
 03C6 08                push A
 03C7 7C0000            xcall _SPIRAM_WriteStatusRegister
 03CA 38FF              add SP,-1
 03CC 62D000            mov REG[0xd0],>__r0
 03CF                   .dbline 256
 03CF           ;       UART_CPutString("Press any key to abort\r\n");
 03CF 10                push X
 03D0 50FD              mov A,>L66
 03D2 08                push A
 03D3 50FD              mov A,<L66
 03D5 5C                mov X,A
 03D6 18                pop A
 03D7 7C0000            xcall _UART_CPutString
 03DA 20                pop X
 03DB 803D              xjmp L68
 03DD           L67:
 03DD                   .dbline 258
 03DD           ;       while (!UART_cReadChar())
 03DD           ;       {
 03DD                   .dbline 259
 03DD           ;               DAC8_WriteStall(SPIRAM_ReadByte(addr));
 03DD 5200              mov A,[X+0]
 03DF 08                push A
 03E0 5201              mov A,[X+1]
 03E2 08                push A
 03E3 7C0000            xcall _SPIRAM_ReadByte
 03E6 38FE              add SP,-2
 03E8 62D000            mov REG[0xd0],>__r0
 03EB 10                push X
 03EC 7C0000            xcall _DAC8_WriteStall
 03EF 20                pop X
 03F0                   .dbline 260
 03F0           ;               if (++addr > endAddr) addr = startAddr;
 03F0 62D000            mov REG[0xd0],>__r0
 03F3 5201              mov A,[X+1]
 03F5 0101              add A,1
 03F7 5300              mov [__r1],A
 03F9 5200              mov A,[X+0]
 03FB 0900              adc A,0
 03FD 5300              mov [__r0],A
 03FF 5100              mov A,[__r1]
 0401 5401              mov [X+1],A
 0403 5100              mov A,[__r0]
 0405 5400              mov [X+0],A
 0407 5203              mov A,[X+3]
 0409 1200              sub A,[__r1]
 040B 5202              mov A,[X+2]
 040D 1A00              sbb A,[__r0]
 040F D009              jnc L70
 0411           X10:
 0411                   .dbline 260
 0411 5205              mov A,[X+5]
 0413 5401              mov [X+1],A
 0415 5204              mov A,[X+4]
 0417 5400              mov [X+0],A
 0419           L70:
 0419                   .dbline 261
 0419           ;       }
 0419           L68:
 0419                   .dbline 257
 0419 10                push X
 041A 7C0000            xcall _UART_cReadChar
 041D 20                pop X
 041E 62D000            mov REG[0xd0],>__r0
 0421 3900              cmp A,0
 0423 AFB9              jz L67
 0425                   .dbline -2
 0425           L65:
 0425 38FA              add SP,-6
 0427 20                pop X
 0428                   .dbline 0 ; func end
 0428 7F                ret
 0429                   .dbsym l startAddr 4 i
 0429                   .dbsym l endAddr 2 i
 0429                   .dbsym l addr 0 i
 0429                   .dbsym l id -4 c
 0429                   .dbend
 0429                   .dbfunc e WriteBlock _WriteBlock fV
 0429           ;             ii -> X+139
 0429           ;        endAddr -> X+137
 0429           ;           temp -> X+9
 0429           ;             pi -> X+5
 0429           ;      startAddr -> X+3
 0429           ;           addr -> X+1
 0429           ;              i -> X+0
 0429           ;             id -> X-4
 0429           _WriteBlock::
 0429                   .dbline -1
 0429 10                push X
 042A 4F                mov X,SP
 042B 3894              add SP,-108
 042D                   .dbline 265
 042D           ; }
 042D           ; 
 042D           ; void WriteBlock(char id)
 042D           ; {     
 042D                   .dbline 267
 042D           ; 
 042D           ;       WORD startAddr = 0x2000 *id; // Where the address starts for block
 042D 62D000            mov REG[0xd0],>__r0
 0430 52FC              mov A,[X-4]
 0432 5300              mov [__r0],A
 0434 550000            mov [__r1],0
 0437 6500              asl [__r0]
 0439 6500              asl [__r1]
 043B 6B00              rlc [__r0]
 043D 6500              asl [__r1]
 043F 6B00              rlc [__r0]
 0441 6500              asl [__r1]
 0443 6B00              rlc [__r0]
 0445 6500              asl [__r1]
 0447 6B00              rlc [__r0]
 0449 5100              mov A,[__r1]
 044B 5404              mov [X+4],A
 044D 5100              mov A,[__r0]
 044F 5403              mov [X+3],A
 0451                   .dbline 268
 0451           ;       WORD endAddr = startAddr + 0x2000; // Where the address ends for block
 0451 5204              mov A,[X+4]
 0453 0100              add A,0
 0455 548A              mov [X-118],A
 0457 5203              mov A,[X+3]
 0459 0920              adc A,32
 045B 5489              mov [X-119],A
 045D                   .dbline 271
 045D           ;       WORD addr;
 045D           ;       BYTE i, ii;
 045D           ;       float pi = 3.1415;
 045D 560540            mov [X+5],64
 0460 560649            mov [X+6],73
 0463 56070E            mov [X+7],14
 0466 560856            mov [X+8],86
 0469                   .dbline 274
 0469           ;       char temp[128];
 0469           ;       
 0469           ;       SPIRAM_WriteStatusRegister(SPIRAM_SEQUENTIAL_MODE | SPIRAM_DISABLE_HOLD);
 0469 5041              mov A,65
 046B 08                push A
 046C 7C0000            xcall _SPIRAM_WriteStatusRegister
 046F 38FF              add SP,-1
 0471 62D000            mov REG[0xd0],>__r0
 0474                   .dbline 275
 0474           ;       switch (id)
 0474 52FC              mov A,[X-4]
 0476 548D              mov [X-115],A
 0478 568C00            mov [X-116],0
 047B 3D8C00            cmp [X-116],0
 047E B006              jnz X11
 0480 3D8D00            cmp [X-115],0
 0483 A028              jz L76
 0485           X11:
 0485 3D8C00            cmp [X-116],0
 0488 B006              jnz X12
 048A 3D8D01            cmp [X-115],1
 048D A481              jz L88
 048F           X12:
 048F 3D8C00            cmp [X-116],0
 0492 B009              jnz X13
 0494 3D8D02            cmp [X-115],2
 0497 B004              jnz X55
 0499 7D0D75            ljmp L100
 049C           X55:
 049C           X13:
 049C 3D8C00            cmp [X-116],0
 049F B009              jnz X14
 04A1 3D8D03            cmp [X-115],3
 04A4 B004              jnz X56
 04A6 7D11DB            ljmp L112
 04A9           X56:
 04A9           X14:
 04A9 7D148C            xjmp L73
 04AC           L76:
 04AC                   .dbline 278
 04AC           ;       {
 04AC           ;               case 0: 
 04AC           ;                       for (addr = startAddr; addr < endAddr; addr += 128)
 04AC 5204              mov A,[X+4]
 04AE 5402              mov [X+2],A
 04B0 5203              mov A,[X+3]
 04B2 5401              mov [X+1],A
 04B4 844D              xjmp L80
 04B6           L77:
 04B6                   .dbline 279
 04B6           ;                       {
 04B6                   .dbline 280
 04B6           ;                               for(i = 0; i < 128; i++)
 04B6 560000            mov [X+0],0
 04B9 8421              xjmp L84
 04BB           L81:
 04BB                   .dbline 281
 04BB           ;                               {
 04BB                   .dbline 282
 04BB           ;                                       temp[i] = (char)(0.5 + 0.5*sin(800*pi*((addr - startAddr) + i)) + 0.5*sin(800*pi*((addr - startAddr) + i))*(128/2.5));  
 04BB 62D000            mov REG[0xd0],>__r0
 04BE 5200              mov A,[X+0]
 04C0 5300              mov [__r1],A
 04C2 550000            mov [__r0],0
 04C5 5202              mov A,[X+2]
 04C7 1304              sub A,[X+4]
 04C9 5300              mov [__r3],A
 04CB 5201              mov A,[X+1]
 04CD 1B03              sbb A,[X+3]
 04CF 5300              mov [__r2],A
 04D1 5100              mov A,[__r3]
 04D3 0200              add A,[__r1]
 04D5 5300              mov [__r1],A
 04D7 5100              mov A,[__r2]
 04D9 0A00              adc A,[__r0]
 04DB 5300              mov [__r0],A
 04DD 5100              mov A,[__r1]
 04DF 2101              and A,1
 04E1 5300              mov [__r3],A
 04E3 5100              mov A,[__r0]
 04E5 2100              and A,0
 04E7 5300              mov [__r2],A
 04E9 5100              mov A,[__r3]
 04EB 5300              mov [__r7],A
 04ED 5100              mov A,[__r2]
 04EF 5300              mov [__r6],A
 04F1 470080            tst [__r6],-128
 04F4 A009              jz X15
 04F6 5500FF            mov [__r5],-1
 04F9 5500FF            mov [__r4],-1
 04FC 800A              jmp X16
 04FE           X15:
 04FE 62D000            mov REG[0xd0],>__r0
 0501 550000            mov [__r5],0
 0504 550000            mov [__r4],0
 0507           X16:
 0507 62D000            mov REG[0xd0],>__r0
 050A 5100              mov A,[__r4]
 050C 08                push A
 050D 5100              mov A,[__r5]
 050F 08                push A
 0510 5100              mov A,[__r6]
 0512 08                push A
 0513 5100              mov A,[__r7]
 0515 08                push A
 0516 7C0000            xcall __long2fp
 0519 18                pop A
 051A 5300              mov [__r7],A
 051C 18                pop A
 051D 5300              mov [__r6],A
 051F 18                pop A
 0520 5300              mov [__r5],A
 0522 18                pop A
 0523 5300              mov [__r4],A
 0525 70FB              and F,-5
 0527 6E00              rrc [__r0]
 0529 6E00              rrc [__r1]
 052B 5100              mov A,[__r1]
 052D 5300              mov [__r3],A
 052F 5100              mov A,[__r0]
 0531 5300              mov [__r2],A
 0533 470080            tst [__r2],-128
 0536 A009              jz X17
 0538 5500FF            mov [__r1],-1
 053B 5500FF            mov [__r0],-1
 053E 800A              jmp X18
 0540           X17:
 0540 62D000            mov REG[0xd0],>__r0
 0543 550000            mov [__r1],0
 0546 550000            mov [__r0],0
 0549           X18:
 0549 62D000            mov REG[0xd0],>__r0
 054C 5100              mov A,[__r0]
 054E 08                push A
 054F 5100              mov A,[__r1]
 0551 08                push A
 0552 5100              mov A,[__r2]
 0554 08                push A
 0555 5100              mov A,[__r3]
 0557 08                push A
 0558 7C0000            xcall __long2fp
 055B 18                pop A
 055C 5300              mov [__r3],A
 055E 18                pop A
 055F 5300              mov [__r2],A
 0561 18                pop A
 0562 5300              mov [__r1],A
 0564 18                pop A
 0565 08                push A
 0566 5100              mov A,[__r1]
 0568 08                push A
 0569 5100              mov A,[__r2]
 056B 08                push A
 056C 5100              mov A,[__r3]
 056E 08                push A
 056F 5040              mov A,64
 0571 08                push A
 0572 5000              mov A,0
 0574 08                push A
 0575 08                push A
 0576 08                push A
 0577 7C0000            xcall __fpmul
 057A 18                pop A
 057B 5300              mov [__r3],A
 057D 18                pop A
 057E 5300              mov [__r2],A
 0580 18                pop A
 0581 5300              mov [__r1],A
 0583 18                pop A
 0584 5300              mov [__r0],A
 0586 38FC              add SP,-4
 0588 5100              mov A,[__r4]
 058A 08                push A
 058B 5100              mov A,[__r5]
 058D 08                push A
 058E 5100              mov A,[__r6]
 0590 08                push A
 0591 5100              mov A,[__r7]
 0593 08                push A
 0594 5100              mov A,[__r0]
 0596 08                push A
 0597 5100              mov A,[__r1]
 0599 08                push A
 059A 5100              mov A,[__r2]
 059C 08                push A
 059D 5100              mov A,[__r3]
 059F 08                push A
 05A0 7C0000            xcall __fpadd
 05A3 18                pop A
 05A4 5300              mov [__r3],A
 05A6 18                pop A
 05A7 5300              mov [__r2],A
 05A9 18                pop A
 05AA 5300              mov [__r1],A
 05AC 18                pop A
 05AD 5300              mov [__r0],A
 05AF 38FC              add SP,-4
 05B1 5205              mov A,[X+5]
 05B3 08                push A
 05B4 5206              mov A,[X+6]
 05B6 08                push A
 05B7 5207              mov A,[X+7]
 05B9 08                push A
 05BA 5208              mov A,[X+8]
 05BC 08                push A
 05BD 5044              mov A,68
 05BF 08                push A
 05C0 5048              mov A,72
 05C2 08                push A
 05C3 5000              mov A,0
 05C5 08                push A
 05C6 08                push A
 05C7 7C0000            xcall __fpmul
 05CA 18                pop A
 05CB 5300              mov [__r7],A
 05CD 18                pop A
 05CE 5300              mov [__r6],A
 05D0 18                pop A
 05D1 5300              mov [__r5],A
 05D3 18                pop A
 05D4 5300              mov [__r4],A
 05D6 38FC              add SP,-4
 05D8 5100              mov A,[__r0]
 05DA 08                push A
 05DB 5100              mov A,[__r1]
 05DD 08                push A
 05DE 5100              mov A,[__r2]
 05E0 08                push A
 05E1 5100              mov A,[__r3]
 05E3 08                push A
 05E4 5100              mov A,[__r4]
 05E6 08                push A
 05E7 5100              mov A,[__r5]
 05E9 08                push A
 05EA 5100              mov A,[__r6]
 05EC 08                push A
 05ED 5100              mov A,[__r7]
 05EF 08                push A
 05F0 7C0000            xcall __fpmul
 05F3 18                pop A
 05F4 5300              mov [__r3],A
 05F6 18                pop A
 05F7 5300              mov [__r2],A
 05F9 18                pop A
 05FA 5300              mov [__r1],A
 05FC 18                pop A
 05FD 38FC              add SP,-4
 05FF 08                push A
 0600 5100              mov A,[__r1]
 0602 08                push A
 0603 5100              mov A,[__r2]
 0605 08                push A
 0606 5100              mov A,[__r3]
 0608 08                push A
 0609 7C0000            xcall _sinf
 060C 38FC              add SP,-4
 060E 62D000            mov REG[0xd0],>__r0
 0611 5100              mov A,[__r0]
 0613 5490              mov [X-112],A
 0615 5100              mov A,[__r1]
 0617 5491              mov [X-111],A
 0619 5100              mov A,[__r2]
 061B 5492              mov [X-110],A
 061D 5100              mov A,[__r3]
 061F 5493              mov [X-109],A
 0621 5200              mov A,[X+0]
 0623 5300              mov [__r5],A
 0625 550000            mov [__r4],0
 0628 5202              mov A,[X+2]
 062A 1304              sub A,[X+4]
 062C 5300              mov [__r7],A
 062E 5201              mov A,[X+1]
 0630 1B03              sbb A,[X+3]
 0632 5300              mov [__r6],A
 0634 5100              mov A,[__r7]
 0636 0200              add A,[__r5]
 0638 5300              mov [__r5],A
 063A 5100              mov A,[__r6]
 063C 0A00              adc A,[__r4]
 063E 5300              mov [__r4],A
 0640 5100              mov A,[__r5]
 0642 2101              and A,1
 0644 5300              mov [__r7],A
 0646 5100              mov A,[__r4]
 0648 2100              and A,0
 064A 5300              mov [__r6],A
 064C 5100              mov A,[__r7]
 064E 5300              mov [__r11],A
 0650 5100              mov A,[__r6]
 0652 5300              mov [__r10],A
 0654 470080            tst [__r10],-128
 0657 A009              jz X19
 0659 5500FF            mov [__r9],-1
 065C 5500FF            mov [__r8],-1
 065F 800A              jmp X20
 0661           X19:
 0661 62D000            mov REG[0xd0],>__r0
 0664 550000            mov [__r9],0
 0667 550000            mov [__r8],0
 066A           X20:
 066A 62D000            mov REG[0xd0],>__r0
 066D 5100              mov A,[__r8]
 066F 08                push A
 0670 5100              mov A,[__r9]
 0672 08                push A
 0673 5100              mov A,[__r10]
 0675 08                push A
 0676 5100              mov A,[__r11]
 0678 08                push A
 0679 7C0000            xcall __long2fp
 067C 18                pop A
 067D 5300              mov [__r11],A
 067F 18                pop A
 0680 5300              mov [__r10],A
 0682 18                pop A
 0683 5300              mov [__r9],A
 0685 18                pop A
 0686 5300              mov [__r8],A
 0688 70FB              and F,-5
 068A 6E00              rrc [__r4]
 068C 6E00              rrc [__r5]
 068E 5100              mov A,[__r5]
 0690 5300              mov [__r7],A
 0692 5100              mov A,[__r4]
 0694 5300              mov [__r6],A
 0696 470080            tst [__r6],-128
 0699 A009              jz X21
 069B 5500FF            mov [__r5],-1
 069E 5500FF            mov [__r4],-1
 06A1 800A              jmp X22
 06A3           X21:
 06A3 62D000            mov REG[0xd0],>__r0
 06A6 550000            mov [__r5],0
 06A9 550000            mov [__r4],0
 06AC           X22:
 06AC 62D000            mov REG[0xd0],>__r0
 06AF 5100              mov A,[__r4]
 06B1 08                push A
 06B2 5100              mov A,[__r5]
 06B4 08                push A
 06B5 5100              mov A,[__r6]
 06B7 08                push A
 06B8 5100              mov A,[__r7]
 06BA 08                push A
 06BB 7C0000            xcall __long2fp
 06BE 18                pop A
 06BF 5300              mov [__r7],A
 06C1 18                pop A
 06C2 5300              mov [__r6],A
 06C4 18                pop A
 06C5 5300              mov [__r5],A
 06C7 18                pop A
 06C8 08                push A
 06C9 5100              mov A,[__r5]
 06CB 08                push A
 06CC 5100              mov A,[__r6]
 06CE 08                push A
 06CF 5100              mov A,[__r7]
 06D1 08                push A
 06D2 5040              mov A,64
 06D4 08                push A
 06D5 5000              mov A,0
 06D7 08                push A
 06D8 08                push A
 06D9 08                push A
 06DA 7C0000            xcall __fpmul
 06DD 18                pop A
 06DE 5300              mov [__r7],A
 06E0 18                pop A
 06E1 5300              mov [__r6],A
 06E3 18                pop A
 06E4 5300              mov [__r5],A
 06E6 18                pop A
 06E7 5300              mov [__r4],A
 06E9 38FC              add SP,-4
 06EB 5100              mov A,[__r8]
 06ED 08                push A
 06EE 5100              mov A,[__r9]
 06F0 08                push A
 06F1 5100              mov A,[__r10]
 06F3 08                push A
 06F4 5100              mov A,[__r11]
 06F6 08                push A
 06F7 5100              mov A,[__r4]
 06F9 08                push A
 06FA 5100              mov A,[__r5]
 06FC 08                push A
 06FD 5100              mov A,[__r6]
 06FF 08                push A
 0700 5100              mov A,[__r7]
 0702 08                push A
 0703 7C0000            xcall __fpadd
 0706 18                pop A
 0707 5300              mov [__r7],A
 0709 18                pop A
 070A 5300              mov [__r6],A
 070C 18                pop A
 070D 5300              mov [__r5],A
 070F 18                pop A
 0710 5300              mov [__r4],A
 0712 38FC              add SP,-4
 0714 5205              mov A,[X+5]
 0716 08                push A
 0717 5206              mov A,[X+6]
 0719 08                push A
 071A 5207              mov A,[X+7]
 071C 08                push A
 071D 5208              mov A,[X+8]
 071F 08                push A
 0720 5044              mov A,68
 0722 08                push A
 0723 5048              mov A,72
 0725 08                push A
 0726 5000              mov A,0
 0728 08                push A
 0729 08                push A
 072A 7C0000            xcall __fpmul
 072D 18                pop A
 072E 5300              mov [__r11],A
 0730 18                pop A
 0731 5300              mov [__r10],A
 0733 18                pop A
 0734 5300              mov [__r9],A
 0736 18                pop A
 0737 5300              mov [__r8],A
 0739 38FC              add SP,-4
 073B 5100              mov A,[__r4]
 073D 08                push A
 073E 5100              mov A,[__r5]
 0740 08                push A
 0741 5100              mov A,[__r6]
 0743 08                push A
 0744 5100              mov A,[__r7]
 0746 08                push A
 0747 5100              mov A,[__r8]
 0749 08                push A
 074A 5100              mov A,[__r9]
 074C 08                push A
 074D 5100              mov A,[__r10]
 074F 08                push A
 0750 5100              mov A,[__r11]
 0752 08                push A
 0753 7C0000            xcall __fpmul
 0756 18                pop A
 0757 5300              mov [__r7],A
 0759 18                pop A
 075A 5300              mov [__r6],A
 075C 18                pop A
 075D 5300              mov [__r5],A
 075F 18                pop A
 0760 38FC              add SP,-4
 0762 08                push A
 0763 5100              mov A,[__r5]
 0765 08                push A
 0766 5100              mov A,[__r6]
 0768 08                push A
 0769 5100              mov A,[__r7]
 076B 08                push A
 076C 7C0000            xcall _sinf
 076F 38FC              add SP,-4
 0771 62D000            mov REG[0xd0],>__r0
 0774 5100              mov A,[__r0]
 0776 08                push A
 0777 5100              mov A,[__r1]
 0779 08                push A
 077A 5100              mov A,[__r2]
 077C 08                push A
 077D 5100              mov A,[__r3]
 077F 08                push A
 0780 503F              mov A,63
 0782 08                push A
 0783 5000              mov A,0
 0785 08                push A
 0786 08                push A
 0787 08                push A
 0788 7C0000            xcall __fpmul
 078B 18                pop A
 078C 5300              mov [__r3],A
 078E 18                pop A
 078F 5300              mov [__r2],A
 0791 18                pop A
 0792 5300              mov [__r1],A
 0794 18                pop A
 0795 38FC              add SP,-4
 0797 08                push A
 0798 5100              mov A,[__r1]
 079A 08                push A
 079B 5100              mov A,[__r2]
 079D 08                push A
 079E 5100              mov A,[__r3]
 07A0 08                push A
 07A1 5042              mov A,66
 07A3 08                push A
 07A4 504C              mov A,76
 07A6 08                push A
 07A7 50CC              mov A,-52
 07A9 08                push A
 07AA 50CD              mov A,-51
 07AC 08                push A
 07AD 7C0000            xcall __fpmul
 07B0 18                pop A
 07B1 5300              mov [__r3],A
 07B3 18                pop A
 07B4 5300              mov [__r2],A
 07B6 18                pop A
 07B7 5300              mov [__r1],A
 07B9 18                pop A
 07BA 5300              mov [__r0],A
 07BC 38FC              add SP,-4
 07BE 5290              mov A,[X-112]
 07C0 08                push A
 07C1 5291              mov A,[X-111]
 07C3 08                push A
 07C4 5292              mov A,[X-110]
 07C6 08                push A
 07C7 5293              mov A,[X-109]
 07C9 08                push A
 07CA 503F              mov A,63
 07CC 08                push A
 07CD 5000              mov A,0
 07CF 08                push A
 07D0 08                push A
 07D1 08                push A
 07D2 7C0000            xcall __fpmul
 07D5 18                pop A
 07D6 5300              mov [__r7],A
 07D8 18                pop A
 07D9 5300              mov [__r6],A
 07DB 18                pop A
 07DC 5300              mov [__r5],A
 07DE 18                pop A
 07DF 5300              mov [__r4],A
 07E1 38FC              add SP,-4
 07E3 503F              mov A,63
 07E5 08                push A
 07E6 5000              mov A,0
 07E8 08                push A
 07E9 08                push A
 07EA 08                push A
 07EB 5100              mov A,[__r4]
 07ED 08                push A
 07EE 5100              mov A,[__r5]
 07F0 08                push A
 07F1 5100              mov A,[__r6]
 07F3 08                push A
 07F4 5100              mov A,[__r7]
 07F6 08                push A
 07F7 7C0000            xcall __fpadd
 07FA 18                pop A
 07FB 5300              mov [__r7],A
 07FD 18                pop A
 07FE 5300              mov [__r6],A
 0800 18                pop A
 0801 5300              mov [__r5],A
 0803 18                pop A
 0804 5300              mov [__r4],A
 0806 38FC              add SP,-4
 0808 5100              mov A,[__r0]
 080A 08                push A
 080B 5100              mov A,[__r1]
 080D 08                push A
 080E 5100              mov A,[__r2]
 0810 08                push A
 0811 5100              mov A,[__r3]
 0813 08                push A
 0814 5100              mov A,[__r4]
 0816 08                push A
 0817 5100              mov A,[__r5]
 0819 08                push A
 081A 5100              mov A,[__r6]
 081C 08                push A
 081D 5100              mov A,[__r7]
 081F 08                push A
 0820 7C0000            xcall __fpadd
 0823 18                pop A
 0824 5300              mov [__r3],A
 0826 18                pop A
 0827 5300              mov [__r2],A
 0829 18                pop A
 082A 5300              mov [__r1],A
 082C 18                pop A
 082D 5300              mov [__r0],A
 082F 38FC              add SP,-4
 0831 5047              mov A,71
 0833 08                push A
 0834 5000              mov A,0
 0836 08                push A
 0837 08                push A
 0838 08                push A
 0839 5100              mov A,[__r0]
 083B 08                push A
 083C 5100              mov A,[__r1]
 083E 08                push A
 083F 5100              mov A,[__r2]
 0841 08                push A
 0842 5100              mov A,[__r3]
 0844 08                push A
 0845 7C0000            xcall __fpcmp
 0848 38F8              add SP,-8
 084A 39FF              cmp A,-1
 084C A047              jz L86
 084E 5047              mov A,71
 0850 08                push A
 0851 5000              mov A,0
 0853 08                push A
 0854 08                push A
 0855 08                push A
 0856 5100              mov A,[__r0]
 0858 08                push A
 0859 5100              mov A,[__r1]
 085B 08                push A
 085C 5100              mov A,[__r2]
 085E 08                push A
 085F 5100              mov A,[__r3]
 0861 08                push A
 0862 7C0000            xcall __fpsub
 0865 18                pop A
 0866 5300              mov [__r7],A
 0868 18                pop A
 0869 5300              mov [__r6],A
 086B 18                pop A
 086C 5300              mov [__r5],A
 086E 18                pop A
 086F 38FC              add SP,-4
 0871 08                push A
 0872 5100              mov A,[__r5]
 0874 08                push A
 0875 5100              mov A,[__r6]
 0877 08                push A
 0878 5100              mov A,[__r7]
 087A 08                push A
 087B 7C0000            xcall __fp2long
 087E 18                pop A
 087F 5300              mov [__r5],A
 0881 18                pop A
 0882 5300              mov [__r4],A
 0884 38FE              add SP,-2
 0886 5100              mov A,[__r5]
 0888 0100              add A,0
 088A 548F              mov [X-113],A
 088C 5100              mov A,[__r4]
 088E 0980              adc A,-128
 0890 548E              mov [X-114],A
 0892 8023              xjmp L87
 0894           L86:
 0894 62D000            mov REG[0xd0],>__r0
 0897 5100              mov A,[__r0]
 0899 08                push A
 089A 5100              mov A,[__r1]
 089C 08                push A
 089D 5100              mov A,[__r2]
 089F 08                push A
 08A0 5100              mov A,[__r3]
 08A2 08                push A
 08A3 7C0000            xcall __fp2long
 08A6 18                pop A
 08A7 5300              mov [__r1],A
 08A9 18                pop A
 08AA 5300              mov [__r0],A
 08AC 38FE              add SP,-2
 08AE 5100              mov A,[__r1]
 08B0 548F              mov [X-113],A
 08B2 5100              mov A,[__r0]
 08B4 548E              mov [X-114],A
 08B6           L87:
 08B6 62D000            mov REG[0xd0],>__r0
 08B9 550007            mov [__r0],7
 08BC 5A00              mov [__r1],X
 08BE 060009            add [__r1],9
 08C1 5200              mov A,[X+0]
 08C3 0200              add A,[__r1]
 08C5 5300              mov [__r1],A
 08C7 5000              mov A,0
 08C9 0A00              adc A,[__r0]
 08CB 5300              mov [__r0],A
 08CD 528F              mov A,[X-113]
 08CF 5300              mov [__r2],A
 08D1 5100              mov A,[__r0]
 08D3 60D5              mov REG[0xd5],A
 08D5 5100              mov A,[__r2]
 08D7 3F00              mvi [__r1],A
 08D9                   .dbline 283
 08D9           ;                               }       
 08D9           L82:
 08D9                   .dbline 280
 08D9 7700              inc [X+0]
 08DB           L84:
 08DB                   .dbline 280
 08DB 3D0080            cmp [X+0],-128
 08DE CBDC              jc L81
 08E0           X24:
 08E0                   .dbline 284
 08E0           ;                               SPIRAM_WriteArray(addr, temp, 128);
 08E0 5080              mov A,-128
 08E2 08                push A
 08E3 62D000            mov REG[0xd0],>__r0
 08E6 5A00              mov [__r1],X
 08E8 060009            add [__r1],9
 08EB 5007              mov A,7
 08ED 08                push A
 08EE 5100              mov A,[__r1]
 08F0 08                push A
 08F1 5201              mov A,[X+1]
 08F3 08                push A
 08F4 5202              mov A,[X+2]
 08F6 08                push A
 08F7 7C0000            xcall _SPIRAM_WriteArray
 08FA 38FB              add SP,-5
 08FC                   .dbline 285
 08FC           ;                       }
 08FC           L78:
 08FC                   .dbline 278
 08FC 070280            add [X+2],-128
 08FF 0F0100            adc [X+1],0
 0902           L80:
 0902                   .dbline 278
 0902 5202              mov A,[X+2]
 0904 138A              sub A,[X-118]
 0906 5201              mov A,[X+1]
 0908 1B89              sbb A,[X-119]
 090A CBAB              jc L77
 090C           X25:
 090C                   .dbline 286
 090C           ;                       break;
 090C 7D148C            xjmp L74
 090F           L88:
 090F                   .dbline 289
 090F           ;               
 090F           ;               case 1: 
 090F           ;                       for (addr = startAddr; addr < endAddr; addr += 128)
 090F 5204              mov A,[X+4]
 0911 5402              mov [X+2],A
 0913 5203              mov A,[X+3]
 0915 5401              mov [X+1],A
 0917 8451              xjmp L92
 0919           L89:
 0919                   .dbline 290
 0919           ;                       {
 0919                   .dbline 291
 0919           ;                               for(i = 0; i < 128; i++)
 0919 560000            mov [X+0],0
 091C 8425              xjmp L96
 091E           L93:
 091E                   .dbline 292
 091E           ;                               {
 091E                   .dbline 293
 091E           ;                                       temp[i] = (char)(0.2 + 0.5*sin(600*pi*((addr - startAddr) + i)) + 0.5*sin(200*pi*((addr - startAddr) + i))*(128/2.5));
 091E 62D000            mov REG[0xd0],>__r0
 0921 5200              mov A,[X+0]
 0923 5300              mov [__r1],A
 0925 550000            mov [__r0],0
 0928 5202              mov A,[X+2]
 092A 1304              sub A,[X+4]
 092C 5300              mov [__r3],A
 092E 5201              mov A,[X+1]
 0930 1B03              sbb A,[X+3]
 0932 5300              mov [__r2],A
 0934 5100              mov A,[__r3]
 0936 0200              add A,[__r1]
 0938 5300              mov [__r1],A
 093A 5100              mov A,[__r2]
 093C 0A00              adc A,[__r0]
 093E 5300              mov [__r0],A
 0940 5100              mov A,[__r1]
 0942 2101              and A,1
 0944 5300              mov [__r3],A
 0946 5100              mov A,[__r0]
 0948 2100              and A,0
 094A 5300              mov [__r2],A
 094C 5100              mov A,[__r3]
 094E 5300              mov [__r7],A
 0950 5100              mov A,[__r2]
 0952 5300              mov [__r6],A
 0954 470080            tst [__r6],-128
 0957 A009              jz X26
 0959 5500FF            mov [__r5],-1
 095C 5500FF            mov [__r4],-1
 095F 800A              jmp X27
 0961           X26:
 0961 62D000            mov REG[0xd0],>__r0
 0964 550000            mov [__r5],0
 0967 550000            mov [__r4],0
 096A           X27:
 096A 62D000            mov REG[0xd0],>__r0
 096D 5100              mov A,[__r4]
 096F 08                push A
 0970 5100              mov A,[__r5]
 0972 08                push A
 0973 5100              mov A,[__r6]
 0975 08                push A
 0976 5100              mov A,[__r7]
 0978 08                push A
 0979 7C0000            xcall __long2fp
 097C 18                pop A
 097D 5300              mov [__r7],A
 097F 18                pop A
 0980 5300              mov [__r6],A
 0982 18                pop A
 0983 5300              mov [__r5],A
 0985 18                pop A
 0986 5300              mov [__r4],A
 0988 70FB              and F,-5
 098A 6E00              rrc [__r0]
 098C 6E00              rrc [__r1]
 098E 5100              mov A,[__r1]
 0990 5300              mov [__r3],A
 0992 5100              mov A,[__r0]
 0994 5300              mov [__r2],A
 0996 470080            tst [__r2],-128
 0999 A009              jz X28
 099B 5500FF            mov [__r1],-1
 099E 5500FF            mov [__r0],-1
 09A1 800A              jmp X29
 09A3           X28:
 09A3 62D000            mov REG[0xd0],>__r0
 09A6 550000            mov [__r1],0
 09A9 550000            mov [__r0],0
 09AC           X29:
 09AC 62D000            mov REG[0xd0],>__r0
 09AF 5100              mov A,[__r0]
 09B1 08                push A
 09B2 5100              mov A,[__r1]
 09B4 08                push A
 09B5 5100              mov A,[__r2]
 09B7 08                push A
 09B8 5100              mov A,[__r3]
 09BA 08                push A
 09BB 7C0000            xcall __long2fp
 09BE 18                pop A
 09BF 5300              mov [__r3],A
 09C1 18                pop A
 09C2 5300              mov [__r2],A
 09C4 18                pop A
 09C5 5300              mov [__r1],A
 09C7 18                pop A
 09C8 08                push A
 09C9 5100              mov A,[__r1]
 09CB 08                push A
 09CC 5100              mov A,[__r2]
 09CE 08                push A
 09CF 5100              mov A,[__r3]
 09D1 08                push A
 09D2 5040              mov A,64
 09D4 08                push A
 09D5 5000              mov A,0
 09D7 08                push A
 09D8 08                push A
 09D9 08                push A
 09DA 7C0000            xcall __fpmul
 09DD 18                pop A
 09DE 5300              mov [__r3],A
 09E0 18                pop A
 09E1 5300              mov [__r2],A
 09E3 18                pop A
 09E4 5300              mov [__r1],A
 09E6 18                pop A
 09E7 5300              mov [__r0],A
 09E9 38FC              add SP,-4
 09EB 5100              mov A,[__r4]
 09ED 08                push A
 09EE 5100              mov A,[__r5]
 09F0 08                push A
 09F1 5100              mov A,[__r6]
 09F3 08                push A
 09F4 5100              mov A,[__r7]
 09F6 08                push A
 09F7 5100              mov A,[__r0]
 09F9 08                push A
 09FA 5100              mov A,[__r1]
 09FC 08                push A
 09FD 5100              mov A,[__r2]
 09FF 08                push A
 0A00 5100              mov A,[__r3]
 0A02 08                push A
 0A03 7C0000            xcall __fpadd
 0A06 18                pop A
 0A07 5300              mov [__r3],A
 0A09 18                pop A
 0A0A 5300              mov [__r2],A
 0A0C 18                pop A
 0A0D 5300              mov [__r1],A
 0A0F 18                pop A
 0A10 5300              mov [__r0],A
 0A12 38FC              add SP,-4
 0A14 5205              mov A,[X+5]
 0A16 08                push A
 0A17 5206              mov A,[X+6]
 0A19 08                push A
 0A1A 5207              mov A,[X+7]
 0A1C 08                push A
 0A1D 5208              mov A,[X+8]
 0A1F 08                push A
 0A20 5044              mov A,68
 0A22 08                push A
 0A23 5016              mov A,22
 0A25 08                push A
 0A26 5000              mov A,0
 0A28 08                push A
 0A29 08                push A
 0A2A 7C0000            xcall __fpmul
 0A2D 18                pop A
 0A2E 5300              mov [__r7],A
 0A30 18                pop A
 0A31 5300              mov [__r6],A
 0A33 18                pop A
 0A34 5300              mov [__r5],A
 0A36 18                pop A
 0A37 5300              mov [__r4],A
 0A39 38FC              add SP,-4
 0A3B 5100              mov A,[__r0]
 0A3D 08                push A
 0A3E 5100              mov A,[__r1]
 0A40 08                push A
 0A41 5100              mov A,[__r2]
 0A43 08                push A
 0A44 5100              mov A,[__r3]
 0A46 08                push A
 0A47 5100              mov A,[__r4]
 0A49 08                push A
 0A4A 5100              mov A,[__r5]
 0A4C 08                push A
 0A4D 5100              mov A,[__r6]
 0A4F 08                push A
 0A50 5100              mov A,[__r7]
 0A52 08                push A
 0A53 7C0000            xcall __fpmul
 0A56 18                pop A
 0A57 5300              mov [__r3],A
 0A59 18                pop A
 0A5A 5300              mov [__r2],A
 0A5C 18                pop A
 0A5D 5300              mov [__r1],A
 0A5F 18                pop A
 0A60 38FC              add SP,-4
 0A62 08                push A
 0A63 5100              mov A,[__r1]
 0A65 08                push A
 0A66 5100              mov A,[__r2]
 0A68 08                push A
 0A69 5100              mov A,[__r3]
 0A6B 08                push A
 0A6C 7C0000            xcall _sinf
 0A6F 38FC              add SP,-4
 0A71 62D000            mov REG[0xd0],>__r0
 0A74 5100              mov A,[__r0]
 0A76 5490              mov [X-112],A
 0A78 5100              mov A,[__r1]
 0A7A 5491              mov [X-111],A
 0A7C 5100              mov A,[__r2]
 0A7E 5492              mov [X-110],A
 0A80 5100              mov A,[__r3]
 0A82 5493              mov [X-109],A
 0A84 5200              mov A,[X+0]
 0A86 5300              mov [__r5],A
 0A88 550000            mov [__r4],0
 0A8B 5202              mov A,[X+2]
 0A8D 1304              sub A,[X+4]
 0A8F 5300              mov [__r7],A
 0A91 5201              mov A,[X+1]
 0A93 1B03              sbb A,[X+3]
 0A95 5300              mov [__r6],A
 0A97 5100              mov A,[__r7]
 0A99 0200              add A,[__r5]
 0A9B 5300              mov [__r5],A
 0A9D 5100              mov A,[__r6]
 0A9F 0A00              adc A,[__r4]
 0AA1 5300              mov [__r4],A
 0AA3 5100              mov A,[__r5]
 0AA5 2101              and A,1
 0AA7 5300              mov [__r7],A
 0AA9 5100              mov A,[__r4]
 0AAB 2100              and A,0
 0AAD 5300              mov [__r6],A
 0AAF 5100              mov A,[__r7]
 0AB1 5300              mov [__r11],A
 0AB3 5100              mov A,[__r6]
 0AB5 5300              mov [__r10],A
 0AB7 470080            tst [__r10],-128
 0ABA A009              jz X30
 0ABC 5500FF            mov [__r9],-1
 0ABF 5500FF            mov [__r8],-1
 0AC2 800A              jmp X31
 0AC4           X30:
 0AC4 62D000            mov REG[0xd0],>__r0
 0AC7 550000            mov [__r9],0
 0ACA 550000            mov [__r8],0
 0ACD           X31:
 0ACD 62D000            mov REG[0xd0],>__r0
 0AD0 5100              mov A,[__r8]
 0AD2 08                push A
 0AD3 5100              mov A,[__r9]
 0AD5 08                push A
 0AD6 5100              mov A,[__r10]
 0AD8 08                push A
 0AD9 5100              mov A,[__r11]
 0ADB 08                push A
 0ADC 7C0000            xcall __long2fp
 0ADF 18                pop A
 0AE0 5300              mov [__r11],A
 0AE2 18                pop A
 0AE3 5300              mov [__r10],A
 0AE5 18                pop A
 0AE6 5300              mov [__r9],A
 0AE8 18                pop A
 0AE9 5300              mov [__r8],A
 0AEB 70FB              and F,-5
 0AED 6E00              rrc [__r4]
 0AEF 6E00              rrc [__r5]
 0AF1 5100              mov A,[__r5]
 0AF3 5300              mov [__r7],A
 0AF5 5100              mov A,[__r4]
 0AF7 5300              mov [__r6],A
 0AF9 470080            tst [__r6],-128
 0AFC A009              jz X32
 0AFE 5500FF            mov [__r5],-1
 0B01 5500FF            mov [__r4],-1
 0B04 800A              jmp X33
 0B06           X32:
 0B06 62D000            mov REG[0xd0],>__r0
 0B09 550000            mov [__r5],0
 0B0C 550000            mov [__r4],0
 0B0F           X33:
 0B0F 62D000            mov REG[0xd0],>__r0
 0B12 5100              mov A,[__r4]
 0B14 08                push A
 0B15 5100              mov A,[__r5]
 0B17 08                push A
 0B18 5100              mov A,[__r6]
 0B1A 08                push A
 0B1B 5100              mov A,[__r7]
 0B1D 08                push A
 0B1E 7C0000            xcall __long2fp
 0B21 18                pop A
 0B22 5300              mov [__r7],A
 0B24 18                pop A
 0B25 5300              mov [__r6],A
 0B27 18                pop A
 0B28 5300              mov [__r5],A
 0B2A 18                pop A
 0B2B 08                push A
 0B2C 5100              mov A,[__r5]
 0B2E 08                push A
 0B2F 5100              mov A,[__r6]
 0B31 08                push A
 0B32 5100              mov A,[__r7]
 0B34 08                push A
 0B35 5040              mov A,64
 0B37 08                push A
 0B38 5000              mov A,0
 0B3A 08                push A
 0B3B 08                push A
 0B3C 08                push A
 0B3D 7C0000            xcall __fpmul
 0B40 18                pop A
 0B41 5300              mov [__r7],A
 0B43 18                pop A
 0B44 5300              mov [__r6],A
 0B46 18                pop A
 0B47 5300              mov [__r5],A
 0B49 18                pop A
 0B4A 5300              mov [__r4],A
 0B4C 38FC              add SP,-4
 0B4E 5100              mov A,[__r8]
 0B50 08                push A
 0B51 5100              mov A,[__r9]
 0B53 08                push A
 0B54 5100              mov A,[__r10]
 0B56 08                push A
 0B57 5100              mov A,[__r11]
 0B59 08                push A
 0B5A 5100              mov A,[__r4]
 0B5C 08                push A
 0B5D 5100              mov A,[__r5]
 0B5F 08                push A
 0B60 5100              mov A,[__r6]
 0B62 08                push A
 0B63 5100              mov A,[__r7]
 0B65 08                push A
 0B66 7C0000            xcall __fpadd
 0B69 18                pop A
 0B6A 5300              mov [__r7],A
 0B6C 18                pop A
 0B6D 5300              mov [__r6],A
 0B6F 18                pop A
 0B70 5300              mov [__r5],A
 0B72 18                pop A
 0B73 5300              mov [__r4],A
 0B75 38FC              add SP,-4
 0B77 5205              mov A,[X+5]
 0B79 08                push A
 0B7A 5206              mov A,[X+6]
 0B7C 08                push A
 0B7D 5207              mov A,[X+7]
 0B7F 08                push A
 0B80 5208              mov A,[X+8]
 0B82 08                push A
 0B83 5043              mov A,67
 0B85 08                push A
 0B86 5048              mov A,72
 0B88 08                push A
 0B89 5000              mov A,0
 0B8B 08                push A
 0B8C 08                push A
 0B8D 7C0000            xcall __fpmul
 0B90 18                pop A
 0B91 5300              mov [__r11],A
 0B93 18                pop A
 0B94 5300              mov [__r10],A
 0B96 18                pop A
 0B97 5300              mov [__r9],A
 0B99 18                pop A
 0B9A 5300              mov [__r8],A
 0B9C 38FC              add SP,-4
 0B9E 5100              mov A,[__r4]
 0BA0 08                push A
 0BA1 5100              mov A,[__r5]
 0BA3 08                push A
 0BA4 5100              mov A,[__r6]
 0BA6 08                push A
 0BA7 5100              mov A,[__r7]
 0BA9 08                push A
 0BAA 5100              mov A,[__r8]
 0BAC 08                push A
 0BAD 5100              mov A,[__r9]
 0BAF 08                push A
 0BB0 5100              mov A,[__r10]
 0BB2 08                push A
 0BB3 5100              mov A,[__r11]
 0BB5 08                push A
 0BB6 7C0000            xcall __fpmul
 0BB9 18                pop A
 0BBA 5300              mov [__r7],A
 0BBC 18                pop A
 0BBD 5300              mov [__r6],A
 0BBF 18                pop A
 0BC0 5300              mov [__r5],A
 0BC2 18                pop A
 0BC3 38FC              add SP,-4
 0BC5 08                push A
 0BC6 5100              mov A,[__r5]
 0BC8 08                push A
 0BC9 5100              mov A,[__r6]
 0BCB 08                push A
 0BCC 5100              mov A,[__r7]
 0BCE 08                push A
 0BCF 7C0000            xcall _sinf
 0BD2 38FC              add SP,-4
 0BD4 62D000            mov REG[0xd0],>__r0
 0BD7 5100              mov A,[__r0]
 0BD9 08                push A
 0BDA 5100              mov A,[__r1]
 0BDC 08                push A
 0BDD 5100              mov A,[__r2]
 0BDF 08                push A
 0BE0 5100              mov A,[__r3]
 0BE2 08                push A
 0BE3 503F              mov A,63
 0BE5 08                push A
 0BE6 5000              mov A,0
 0BE8 08                push A
 0BE9 08                push A
 0BEA 08                push A
 0BEB 7C0000            xcall __fpmul
 0BEE 18                pop A
 0BEF 5300              mov [__r3],A
 0BF1 18                pop A
 0BF2 5300              mov [__r2],A
 0BF4 18                pop A
 0BF5 5300              mov [__r1],A
 0BF7 18                pop A
 0BF8 38FC              add SP,-4
 0BFA 08                push A
 0BFB 5100              mov A,[__r1]
 0BFD 08                push A
 0BFE 5100              mov A,[__r2]
 0C00 08                push A
 0C01 5100              mov A,[__r3]
 0C03 08                push A
 0C04 5042              mov A,66
 0C06 08                push A
 0C07 504C              mov A,76
 0C09 08                push A
 0C0A 50CC              mov A,-52
 0C0C 08                push A
 0C0D 50CD              mov A,-51
 0C0F 08                push A
 0C10 7C0000            xcall __fpmul
 0C13 18                pop A
 0C14 5300              mov [__r3],A
 0C16 18                pop A
 0C17 5300              mov [__r2],A
 0C19 18                pop A
 0C1A 5300              mov [__r1],A
 0C1C 18                pop A
 0C1D 5300              mov [__r0],A
 0C1F 38FC              add SP,-4
 0C21 5290              mov A,[X-112]
 0C23 08                push A
 0C24 5291              mov A,[X-111]
 0C26 08                push A
 0C27 5292              mov A,[X-110]
 0C29 08                push A
 0C2A 5293              mov A,[X-109]
 0C2C 08                push A
 0C2D 503F              mov A,63
 0C2F 08                push A
 0C30 5000              mov A,0
 0C32 08                push A
 0C33 08                push A
 0C34 08                push A
 0C35 7C0000            xcall __fpmul
 0C38 18                pop A
 0C39 5300              mov [__r7],A
 0C3B 18                pop A
 0C3C 5300              mov [__r6],A
 0C3E 18                pop A
 0C3F 5300              mov [__r5],A
 0C41 18                pop A
 0C42 5300              mov [__r4],A
 0C44 38FC              add SP,-4
 0C46 503E              mov A,62
 0C48 08                push A
 0C49 504C              mov A,76
 0C4B 08                push A
 0C4C 50CC              mov A,-52
 0C4E 08                push A
 0C4F 50CD              mov A,-51
 0C51 08                push A
 0C52 5100              mov A,[__r4]
 0C54 08                push A
 0C55 5100              mov A,[__r5]
 0C57 08                push A
 0C58 5100              mov A,[__r6]
 0C5A 08                push A
 0C5B 5100              mov A,[__r7]
 0C5D 08                push A
 0C5E 7C0000            xcall __fpadd
 0C61 18                pop A
 0C62 5300              mov [__r7],A
 0C64 18                pop A
 0C65 5300              mov [__r6],A
 0C67 18                pop A
 0C68 5300              mov [__r5],A
 0C6A 18                pop A
 0C6B 5300              mov [__r4],A
 0C6D 38FC              add SP,-4
 0C6F 5100              mov A,[__r0]
 0C71 08                push A
 0C72 5100              mov A,[__r1]
 0C74 08                push A
 0C75 5100              mov A,[__r2]
 0C77 08                push A
 0C78 5100              mov A,[__r3]
 0C7A 08                push A
 0C7B 5100              mov A,[__r4]
 0C7D 08                push A
 0C7E 5100              mov A,[__r5]
 0C80 08                push A
 0C81 5100              mov A,[__r6]
 0C83 08                push A
 0C84 5100              mov A,[__r7]
 0C86 08                push A
 0C87 7C0000            xcall __fpadd
 0C8A 18                pop A
 0C8B 5300              mov [__r3],A
 0C8D 18                pop A
 0C8E 5300              mov [__r2],A
 0C90 18                pop A
 0C91 5300              mov [__r1],A
 0C93 18                pop A
 0C94 5300              mov [__r0],A
 0C96 38FC              add SP,-4
 0C98 5047              mov A,71
 0C9A 08                push A
 0C9B 5000              mov A,0
 0C9D 08                push A
 0C9E 08                push A
 0C9F 08                push A
 0CA0 5100              mov A,[__r0]
 0CA2 08                push A
 0CA3 5100              mov A,[__r1]
 0CA5 08                push A
 0CA6 5100              mov A,[__r2]
 0CA8 08                push A
 0CA9 5100              mov A,[__r3]
 0CAB 08                push A
 0CAC 7C0000            xcall __fpcmp
 0CAF 38F8              add SP,-8
 0CB1 39FF              cmp A,-1
 0CB3 A047              jz L98
 0CB5 5047              mov A,71
 0CB7 08                push A
 0CB8 5000              mov A,0
 0CBA 08                push A
 0CBB 08                push A
 0CBC 08                push A
 0CBD 5100              mov A,[__r0]
 0CBF 08                push A
 0CC0 5100              mov A,[__r1]
 0CC2 08                push A
 0CC3 5100              mov A,[__r2]
 0CC5 08                push A
 0CC6 5100              mov A,[__r3]
 0CC8 08                push A
 0CC9 7C0000            xcall __fpsub
 0CCC 18                pop A
 0CCD 5300              mov [__r7],A
 0CCF 18                pop A
 0CD0 5300              mov [__r6],A
 0CD2 18                pop A
 0CD3 5300              mov [__r5],A
 0CD5 18                pop A
 0CD6 38FC              add SP,-4
 0CD8 08                push A
 0CD9 5100              mov A,[__r5]
 0CDB 08                push A
 0CDC 5100              mov A,[__r6]
 0CDE 08                push A
 0CDF 5100              mov A,[__r7]
 0CE1 08                push A
 0CE2 7C0000            xcall __fp2long
 0CE5 18                pop A
 0CE6 5300              mov [__r5],A
 0CE8 18                pop A
 0CE9 5300              mov [__r4],A
 0CEB 38FE              add SP,-2
 0CED 5100              mov A,[__r5]
 0CEF 0100              add A,0
 0CF1 548F              mov [X-113],A
 0CF3 5100              mov A,[__r4]
 0CF5 0980              adc A,-128
 0CF7 548E              mov [X-114],A
 0CF9 8023              xjmp L99
 0CFB           L98:
 0CFB 62D000            mov REG[0xd0],>__r0
 0CFE 5100              mov A,[__r0]
 0D00 08                push A
 0D01 5100              mov A,[__r1]
 0D03 08                push A
 0D04 5100              mov A,[__r2]
 0D06 08                push A
 0D07 5100              mov A,[__r3]
 0D09 08                push A
 0D0A 7C0000            xcall __fp2long
 0D0D 18                pop A
 0D0E 5300              mov [__r1],A
 0D10 18                pop A
 0D11 5300              mov [__r0],A
 0D13 38FE              add SP,-2
 0D15 5100              mov A,[__r1]
 0D17 548F              mov [X-113],A
 0D19 5100              mov A,[__r0]
 0D1B 548E              mov [X-114],A
 0D1D           L99:
 0D1D 62D000            mov REG[0xd0],>__r0
 0D20 550007            mov [__r0],7
 0D23 5A00              mov [__r1],X
 0D25 060009            add [__r1],9
 0D28 5200              mov A,[X+0]
 0D2A 0200              add A,[__r1]
 0D2C 5300              mov [__r1],A
 0D2E 5000              mov A,0
 0D30 0A00              adc A,[__r0]
 0D32 5300              mov [__r0],A
 0D34 528F              mov A,[X-113]
 0D36 5300              mov [__r2],A
 0D38 5100              mov A,[__r0]
 0D3A 60D5              mov REG[0xd5],A
 0D3C 5100              mov A,[__r2]
 0D3E 3F00              mvi [__r1],A
 0D40                   .dbline 294
 0D40           ;                               }       
 0D40           L94:
 0D40                   .dbline 291
 0D40 7700              inc [X+0]
 0D42           L96:
 0D42                   .dbline 291
 0D42 3D0080            cmp [X+0],-128
 0D45 CBD8              jc L93
 0D47           X35:
 0D47                   .dbline 295
 0D47           ;                               SPIRAM_WriteArray(addr, temp, 128);
 0D47 5080              mov A,-128
 0D49 08                push A
 0D4A 62D000            mov REG[0xd0],>__r0
 0D4D 5A00              mov [__r1],X
 0D4F 060009            add [__r1],9
 0D52 5007              mov A,7
 0D54 08                push A
 0D55 5100              mov A,[__r1]
 0D57 08                push A
 0D58 5201              mov A,[X+1]
 0D5A 08                push A
 0D5B 5202              mov A,[X+2]
 0D5D 08                push A
 0D5E 7C0000            xcall _SPIRAM_WriteArray
 0D61 38FB              add SP,-5
 0D63                   .dbline 296
 0D63           ;                       }
 0D63           L90:
 0D63                   .dbline 289
 0D63 070280            add [X+2],-128
 0D66 0F0100            adc [X+1],0
 0D69           L92:
 0D69                   .dbline 289
 0D69 5202              mov A,[X+2]
 0D6B 138A              sub A,[X-118]
 0D6D 5201              mov A,[X+1]
 0D6F 1B89              sbb A,[X-119]
 0D71 CBA7              jc L89
 0D73           X36:
 0D73                   .dbline 297
 0D73           ;                       break;
 0D73 8718              xjmp L74
 0D75           L100:
 0D75                   .dbline 300
 0D75           ;               
 0D75           ;               case 2: 
 0D75           ;                       for (addr = startAddr; addr < endAddr; addr += 128)
 0D75 5204              mov A,[X+4]
 0D77 5402              mov [X+2],A
 0D79 5203              mov A,[X+3]
 0D7B 5401              mov [X+1],A
 0D7D 8451              xjmp L104
 0D7F           L101:
 0D7F                   .dbline 301
 0D7F           ;                       {
 0D7F                   .dbline 302
 0D7F           ;                               for(i = 0; i < 128; i++)
 0D7F 560000            mov [X+0],0
 0D82 8425              xjmp L108
 0D84           L105:
 0D84                   .dbline 303
 0D84           ;                               {
 0D84                   .dbline 304
 0D84           ;                                       temp[i] = (char)(0.1 + 0.5*sin(1500*pi*((addr - startAddr) + i)) + 0.5*sin(700*pi*((addr - startAddr) + i))*(128/2.5)); 
 0D84 62D000            mov REG[0xd0],>__r0
 0D87 5200              mov A,[X+0]
 0D89 5300              mov [__r1],A
 0D8B 550000            mov [__r0],0
 0D8E 5202              mov A,[X+2]
 0D90 1304              sub A,[X+4]
 0D92 5300              mov [__r3],A
 0D94 5201              mov A,[X+1]
 0D96 1B03              sbb A,[X+3]
 0D98 5300              mov [__r2],A
 0D9A 5100              mov A,[__r3]
 0D9C 0200              add A,[__r1]
 0D9E 5300              mov [__r1],A
 0DA0 5100              mov A,[__r2]
 0DA2 0A00              adc A,[__r0]
 0DA4 5300              mov [__r0],A
 0DA6 5100              mov A,[__r1]
 0DA8 2101              and A,1
 0DAA 5300              mov [__r3],A
 0DAC 5100              mov A,[__r0]
 0DAE 2100              and A,0
 0DB0 5300              mov [__r2],A
 0DB2 5100              mov A,[__r3]
 0DB4 5300              mov [__r7],A
 0DB6 5100              mov A,[__r2]
 0DB8 5300              mov [__r6],A
 0DBA 470080            tst [__r6],-128
 0DBD A009              jz X37
 0DBF 5500FF            mov [__r5],-1
 0DC2 5500FF            mov [__r4],-1
 0DC5 800A              jmp X38
 0DC7           X37:
 0DC7 62D000            mov REG[0xd0],>__r0
 0DCA 550000            mov [__r5],0
 0DCD 550000            mov [__r4],0
 0DD0           X38:
 0DD0 62D000            mov REG[0xd0],>__r0
 0DD3 5100              mov A,[__r4]
 0DD5 08                push A
 0DD6 5100              mov A,[__r5]
 0DD8 08                push A
 0DD9 5100              mov A,[__r6]
 0DDB 08                push A
 0DDC 5100              mov A,[__r7]
 0DDE 08                push A
 0DDF 7C0000            xcall __long2fp
 0DE2 18                pop A
 0DE3 5300              mov [__r7],A
 0DE5 18                pop A
 0DE6 5300              mov [__r6],A
 0DE8 18                pop A
 0DE9 5300              mov [__r5],A
 0DEB 18                pop A
 0DEC 5300              mov [__r4],A
 0DEE 70FB              and F,-5
 0DF0 6E00              rrc [__r0]
 0DF2 6E00              rrc [__r1]
 0DF4 5100              mov A,[__r1]
 0DF6 5300              mov [__r3],A
 0DF8 5100              mov A,[__r0]
 0DFA 5300              mov [__r2],A
 0DFC 470080            tst [__r2],-128
 0DFF A009              jz X39
 0E01 5500FF            mov [__r1],-1
 0E04 5500FF            mov [__r0],-1
 0E07 800A              jmp X40
 0E09           X39:
 0E09 62D000            mov REG[0xd0],>__r0
 0E0C 550000            mov [__r1],0
 0E0F 550000            mov [__r0],0
 0E12           X40:
 0E12 62D000            mov REG[0xd0],>__r0
 0E15 5100              mov A,[__r0]
 0E17 08                push A
 0E18 5100              mov A,[__r1]
 0E1A 08                push A
 0E1B 5100              mov A,[__r2]
 0E1D 08                push A
 0E1E 5100              mov A,[__r3]
 0E20 08                push A
 0E21 7C0000            xcall __long2fp
 0E24 18                pop A
 0E25 5300              mov [__r3],A
 0E27 18                pop A
 0E28 5300              mov [__r2],A
 0E2A 18                pop A
 0E2B 5300              mov [__r1],A
 0E2D 18                pop A
 0E2E 08                push A
 0E2F 5100              mov A,[__r1]
 0E31 08                push A
 0E32 5100              mov A,[__r2]
 0E34 08                push A
 0E35 5100              mov A,[__r3]
 0E37 08                push A
 0E38 5040              mov A,64
 0E3A 08                push A
 0E3B 5000              mov A,0
 0E3D 08                push A
 0E3E 08                push A
 0E3F 08                push A
 0E40 7C0000            xcall __fpmul
 0E43 18                pop A
 0E44 5300              mov [__r3],A
 0E46 18                pop A
 0E47 5300              mov [__r2],A
 0E49 18                pop A
 0E4A 5300              mov [__r1],A
 0E4C 18                pop A
 0E4D 5300              mov [__r0],A
 0E4F 38FC              add SP,-4
 0E51 5100              mov A,[__r4]
 0E53 08                push A
 0E54 5100              mov A,[__r5]
 0E56 08                push A
 0E57 5100              mov A,[__r6]
 0E59 08                push A
 0E5A 5100              mov A,[__r7]
 0E5C 08                push A
 0E5D 5100              mov A,[__r0]
 0E5F 08                push A
 0E60 5100              mov A,[__r1]
 0E62 08                push A
 0E63 5100              mov A,[__r2]
 0E65 08                push A
 0E66 5100              mov A,[__r3]
 0E68 08                push A
 0E69 7C0000            xcall __fpadd
 0E6C 18                pop A
 0E6D 5300              mov [__r3],A
 0E6F 18                pop A
 0E70 5300              mov [__r2],A
 0E72 18                pop A
 0E73 5300              mov [__r1],A
 0E75 18                pop A
 0E76 5300              mov [__r0],A
 0E78 38FC              add SP,-4
 0E7A 5205              mov A,[X+5]
 0E7C 08                push A
 0E7D 5206              mov A,[X+6]
 0E7F 08                push A
 0E80 5207              mov A,[X+7]
 0E82 08                push A
 0E83 5208              mov A,[X+8]
 0E85 08                push A
 0E86 5044              mov A,68
 0E88 08                push A
 0E89 50BB              mov A,-69
 0E8B 08                push A
 0E8C 5080              mov A,-128
 0E8E 08                push A
 0E8F 5000              mov A,0
 0E91 08                push A
 0E92 7C0000            xcall __fpmul
 0E95 18                pop A
 0E96 5300              mov [__r7],A
 0E98 18                pop A
 0E99 5300              mov [__r6],A
 0E9B 18                pop A
 0E9C 5300              mov [__r5],A
 0E9E 18                pop A
 0E9F 5300              mov [__r4],A
 0EA1 38FC              add SP,-4
 0EA3 5100              mov A,[__r0]
 0EA5 08                push A
 0EA6 5100              mov A,[__r1]
 0EA8 08                push A
 0EA9 5100              mov A,[__r2]
 0EAB 08                push A
 0EAC 5100              mov A,[__r3]
 0EAE 08                push A
 0EAF 5100              mov A,[__r4]
 0EB1 08                push A
 0EB2 5100              mov A,[__r5]
 0EB4 08                push A
 0EB5 5100              mov A,[__r6]
 0EB7 08                push A
 0EB8 5100              mov A,[__r7]
 0EBA 08                push A
 0EBB 7C0000            xcall __fpmul
 0EBE 18                pop A
 0EBF 5300              mov [__r3],A
 0EC1 18                pop A
 0EC2 5300              mov [__r2],A
 0EC4 18                pop A
 0EC5 5300              mov [__r1],A
 0EC7 18                pop A
 0EC8 38FC              add SP,-4
 0ECA 08                push A
 0ECB 5100              mov A,[__r1]
 0ECD 08                push A
 0ECE 5100              mov A,[__r2]
 0ED0 08                push A
 0ED1 5100              mov A,[__r3]
 0ED3 08                push A
 0ED4 7C0000            xcall _sinf
 0ED7 38FC              add SP,-4
 0ED9 62D000            mov REG[0xd0],>__r0
 0EDC 5100              mov A,[__r0]
 0EDE 5490              mov [X-112],A
 0EE0 5100              mov A,[__r1]
 0EE2 5491              mov [X-111],A
 0EE4 5100              mov A,[__r2]
 0EE6 5492              mov [X-110],A
 0EE8 5100              mov A,[__r3]
 0EEA 5493              mov [X-109],A
 0EEC 5200              mov A,[X+0]
 0EEE 5300              mov [__r5],A
 0EF0 550000            mov [__r4],0
 0EF3 5202              mov A,[X+2]
 0EF5 1304              sub A,[X+4]
 0EF7 5300              mov [__r7],A
 0EF9 5201              mov A,[X+1]
 0EFB 1B03              sbb A,[X+3]
 0EFD 5300              mov [__r6],A
 0EFF 5100              mov A,[__r7]
 0F01 0200              add A,[__r5]
 0F03 5300              mov [__r5],A
 0F05 5100              mov A,[__r6]
 0F07 0A00              adc A,[__r4]
 0F09 5300              mov [__r4],A
 0F0B 5100              mov A,[__r5]
 0F0D 2101              and A,1
 0F0F 5300              mov [__r7],A
 0F11 5100              mov A,[__r4]
 0F13 2100              and A,0
 0F15 5300              mov [__r6],A
 0F17 5100              mov A,[__r7]
 0F19 5300              mov [__r11],A
 0F1B 5100              mov A,[__r6]
 0F1D 5300              mov [__r10],A
 0F1F 470080            tst [__r10],-128
 0F22 A009              jz X41
 0F24 5500FF            mov [__r9],-1
 0F27 5500FF            mov [__r8],-1
 0F2A 800A              jmp X42
 0F2C           X41:
 0F2C 62D000            mov REG[0xd0],>__r0
 0F2F 550000            mov [__r9],0
 0F32 550000            mov [__r8],0
 0F35           X42:
 0F35 62D000            mov REG[0xd0],>__r0
 0F38 5100              mov A,[__r8]
 0F3A 08                push A
 0F3B 5100              mov A,[__r9]
 0F3D 08                push A
 0F3E 5100              mov A,[__r10]
 0F40 08                push A
 0F41 5100              mov A,[__r11]
 0F43 08                push A
 0F44 7C0000            xcall __long2fp
 0F47 18                pop A
 0F48 5300              mov [__r11],A
 0F4A 18                pop A
 0F4B 5300              mov [__r10],A
 0F4D 18                pop A
 0F4E 5300              mov [__r9],A
 0F50 18                pop A
 0F51 5300              mov [__r8],A
 0F53 70FB              and F,-5
 0F55 6E00              rrc [__r4]
 0F57 6E00              rrc [__r5]
 0F59 5100              mov A,[__r5]
 0F5B 5300              mov [__r7],A
 0F5D 5100              mov A,[__r4]
 0F5F 5300              mov [__r6],A
 0F61 470080            tst [__r6],-128
 0F64 A009              jz X43
 0F66 5500FF            mov [__r5],-1
 0F69 5500FF            mov [__r4],-1
 0F6C 800A              jmp X44
 0F6E           X43:
 0F6E 62D000            mov REG[0xd0],>__r0
 0F71 550000            mov [__r5],0
 0F74 550000            mov [__r4],0
 0F77           X44:
 0F77 62D000            mov REG[0xd0],>__r0
 0F7A 5100              mov A,[__r4]
 0F7C 08                push A
 0F7D 5100              mov A,[__r5]
 0F7F 08                push A
 0F80 5100              mov A,[__r6]
 0F82 08                push A
 0F83 5100              mov A,[__r7]
 0F85 08                push A
 0F86 7C0000            xcall __long2fp
 0F89 18                pop A
 0F8A 5300              mov [__r7],A
 0F8C 18                pop A
 0F8D 5300              mov [__r6],A
 0F8F 18                pop A
 0F90 5300              mov [__r5],A
 0F92 18                pop A
 0F93 08                push A
 0F94 5100              mov A,[__r5]
 0F96 08                push A
 0F97 5100              mov A,[__r6]
 0F99 08                push A
 0F9A 5100              mov A,[__r7]
 0F9C 08                push A
 0F9D 5040              mov A,64
 0F9F 08                push A
 0FA0 5000              mov A,0
 0FA2 08                push A
 0FA3 08                push A
 0FA4 08                push A
 0FA5 7C0000            xcall __fpmul
 0FA8 18                pop A
 0FA9 5300              mov [__r7],A
 0FAB 18                pop A
 0FAC 5300              mov [__r6],A
 0FAE 18                pop A
 0FAF 5300              mov [__r5],A
 0FB1 18                pop A
 0FB2 5300              mov [__r4],A
 0FB4 38FC              add SP,-4
 0FB6 5100              mov A,[__r8]
 0FB8 08                push A
 0FB9 5100              mov A,[__r9]
 0FBB 08                push A
 0FBC 5100              mov A,[__r10]
 0FBE 08                push A
 0FBF 5100              mov A,[__r11]
 0FC1 08                push A
 0FC2 5100              mov A,[__r4]
 0FC4 08                push A
 0FC5 5100              mov A,[__r5]
 0FC7 08                push A
 0FC8 5100              mov A,[__r6]
 0FCA 08                push A
 0FCB 5100              mov A,[__r7]
 0FCD 08                push A
 0FCE 7C0000            xcall __fpadd
 0FD1 18                pop A
 0FD2 5300              mov [__r7],A
 0FD4 18                pop A
 0FD5 5300              mov [__r6],A
 0FD7 18                pop A
 0FD8 5300              mov [__r5],A
 0FDA 18                pop A
 0FDB 5300              mov [__r4],A
 0FDD 38FC              add SP,-4
 0FDF 5205              mov A,[X+5]
 0FE1 08                push A
 0FE2 5206              mov A,[X+6]
 0FE4 08                push A
 0FE5 5207              mov A,[X+7]
 0FE7 08                push A
 0FE8 5208              mov A,[X+8]
 0FEA 08                push A
 0FEB 5044              mov A,68
 0FED 08                push A
 0FEE 502F              mov A,47
 0FF0 08                push A
 0FF1 5000              mov A,0
 0FF3 08                push A
 0FF4 08                push A
 0FF5 7C0000            xcall __fpmul
 0FF8 18                pop A
 0FF9 5300              mov [__r11],A
 0FFB 18                pop A
 0FFC 5300              mov [__r10],A
 0FFE 18                pop A
 0FFF 5300              mov [__r9],A
 1001 18                pop A
 1002 5300              mov [__r8],A
 1004 38FC              add SP,-4
 1006 5100              mov A,[__r4]
 1008 08                push A
 1009 5100              mov A,[__r5]
 100B 08                push A
 100C 5100              mov A,[__r6]
 100E 08                push A
 100F 5100              mov A,[__r7]
 1011 08                push A
 1012 5100              mov A,[__r8]
 1014 08                push A
 1015 5100              mov A,[__r9]
 1017 08                push A
 1018 5100              mov A,[__r10]
 101A 08                push A
 101B 5100              mov A,[__r11]
 101D 08                push A
 101E 7C0000            xcall __fpmul
 1021 18                pop A
 1022 5300              mov [__r7],A
 1024 18                pop A
 1025 5300              mov [__r6],A
 1027 18                pop A
 1028 5300              mov [__r5],A
 102A 18                pop A
 102B 38FC              add SP,-4
 102D 08                push A
 102E 5100              mov A,[__r5]
 1030 08                push A
 1031 5100              mov A,[__r6]
 1033 08                push A
 1034 5100              mov A,[__r7]
 1036 08                push A
 1037 7C0000            xcall _sinf
 103A 38FC              add SP,-4
 103C 62D000            mov REG[0xd0],>__r0
 103F 5100              mov A,[__r0]
 1041 08                push A
 1042 5100              mov A,[__r1]
 1044 08                push A
 1045 5100              mov A,[__r2]
 1047 08                push A
 1048 5100              mov A,[__r3]
 104A 08                push A
 104B 503F              mov A,63
 104D 08                push A
 104E 5000              mov A,0
 1050 08                push A
 1051 08                push A
 1052 08                push A
 1053 7C0000            xcall __fpmul
 1056 18                pop A
 1057 5300              mov [__r3],A
 1059 18                pop A
 105A 5300              mov [__r2],A
 105C 18                pop A
 105D 5300              mov [__r1],A
 105F 18                pop A
 1060 38FC              add SP,-4
 1062 08                push A
 1063 5100              mov A,[__r1]
 1065 08                push A
 1066 5100              mov A,[__r2]
 1068 08                push A
 1069 5100              mov A,[__r3]
 106B 08                push A
 106C 5042              mov A,66
 106E 08                push A
 106F 504C              mov A,76
 1071 08                push A
 1072 50CC              mov A,-52
 1074 08                push A
 1075 50CD              mov A,-51
 1077 08                push A
 1078 7C0000            xcall __fpmul
 107B 18                pop A
 107C 5300              mov [__r3],A
 107E 18                pop A
 107F 5300              mov [__r2],A
 1081 18                pop A
 1082 5300              mov [__r1],A
 1084 18                pop A
 1085 5300              mov [__r0],A
 1087 38FC              add SP,-4
 1089 5290              mov A,[X-112]
 108B 08                push A
 108C 5291              mov A,[X-111]
 108E 08                push A
 108F 5292              mov A,[X-110]
 1091 08                push A
 1092 5293              mov A,[X-109]
 1094 08                push A
 1095 503F              mov A,63
 1097 08                push A
 1098 5000              mov A,0
 109A 08                push A
 109B 08                push A
 109C 08                push A
 109D 7C0000            xcall __fpmul
 10A0 18                pop A
 10A1 5300              mov [__r7],A
 10A3 18                pop A
 10A4 5300              mov [__r6],A
 10A6 18                pop A
 10A7 5300              mov [__r5],A
 10A9 18                pop A
 10AA 5300              mov [__r4],A
 10AC 38FC              add SP,-4
 10AE 503D              mov A,61
 10B0 08                push A
 10B1 50CC              mov A,-52
 10B3 08                push A
 10B4 08                push A
 10B5 50CD              mov A,-51
 10B7 08                push A
 10B8 5100              mov A,[__r4]
 10BA 08                push A
 10BB 5100              mov A,[__r5]
 10BD 08                push A
 10BE 5100              mov A,[__r6]
 10C0 08                push A
 10C1 5100              mov A,[__r7]
 10C3 08                push A
 10C4 7C0000            xcall __fpadd
 10C7 18                pop A
 10C8 5300              mov [__r7],A
 10CA 18                pop A
 10CB 5300              mov [__r6],A
 10CD 18                pop A
 10CE 5300              mov [__r5],A
 10D0 18                pop A
 10D1 5300              mov [__r4],A
 10D3 38FC              add SP,-4
 10D5 5100              mov A,[__r0]
 10D7 08                push A
 10D8 5100              mov A,[__r1]
 10DA 08                push A
 10DB 5100              mov A,[__r2]
 10DD 08                push A
 10DE 5100              mov A,[__r3]
 10E0 08                push A
 10E1 5100              mov A,[__r4]
 10E3 08                push A
 10E4 5100              mov A,[__r5]
 10E6 08                push A
 10E7 5100              mov A,[__r6]
 10E9 08                push A
 10EA 5100              mov A,[__r7]
 10EC 08                push A
 10ED 7C0000            xcall __fpadd
 10F0 18                pop A
 10F1 5300              mov [__r3],A
 10F3 18                pop A
 10F4 5300              mov [__r2],A
 10F6 18                pop A
 10F7 5300              mov [__r1],A
 10F9 18                pop A
 10FA 5300              mov [__r0],A
 10FC 38FC              add SP,-4
 10FE 5047              mov A,71
 1100 08                push A
 1101 5000              mov A,0
 1103 08                push A
 1104 08                push A
 1105 08                push A
 1106 5100              mov A,[__r0]
 1108 08                push A
 1109 5100              mov A,[__r1]
 110B 08                push A
 110C 5100              mov A,[__r2]
 110E 08                push A
 110F 5100              mov A,[__r3]
 1111 08                push A
 1112 7C0000            xcall __fpcmp
 1115 38F8              add SP,-8
 1117 39FF              cmp A,-1
 1119 A047              jz L110
 111B 5047              mov A,71
 111D 08                push A
 111E 5000              mov A,0
 1120 08                push A
 1121 08                push A
 1122 08                push A
 1123 5100              mov A,[__r0]
 1125 08                push A
 1126 5100              mov A,[__r1]
 1128 08                push A
 1129 5100              mov A,[__r2]
 112B 08                push A
 112C 5100              mov A,[__r3]
 112E 08                push A
 112F 7C0000            xcall __fpsub
 1132 18                pop A
 1133 5300              mov [__r7],A
 1135 18                pop A
 1136 5300              mov [__r6],A
 1138 18                pop A
 1139 5300              mov [__r5],A
 113B 18                pop A
 113C 38FC              add SP,-4
 113E 08                push A
 113F 5100              mov A,[__r5]
 1141 08                push A
 1142 5100              mov A,[__r6]
 1144 08                push A
 1145 5100              mov A,[__r7]
 1147 08                push A
 1148 7C0000            xcall __fp2long
 114B 18                pop A
 114C 5300              mov [__r5],A
 114E 18                pop A
 114F 5300              mov [__r4],A
 1151 38FE              add SP,-2
 1153 5100              mov A,[__r5]
 1155 0100              add A,0
 1157 548F              mov [X-113],A
 1159 5100              mov A,[__r4]
 115B 0980              adc A,-128
 115D 548E              mov [X-114],A
 115F 8023              xjmp L111
 1161           L110:
 1161 62D000            mov REG[0xd0],>__r0
 1164 5100              mov A,[__r0]
 1166 08                push A
 1167 5100              mov A,[__r1]
 1169 08                push A
 116A 5100              mov A,[__r2]
 116C 08                push A
 116D 5100              mov A,[__r3]
 116F 08                push A
 1170 7C0000            xcall __fp2long
 1173 18                pop A
 1174 5300              mov [__r1],A
 1176 18                pop A
 1177 5300              mov [__r0],A
 1179 38FE              add SP,-2
 117B 5100              mov A,[__r1]
 117D 548F              mov [X-113],A
 117F 5100              mov A,[__r0]
 1181 548E              mov [X-114],A
 1183           L111:
 1183 62D000            mov REG[0xd0],>__r0
 1186 550007            mov [__r0],7
 1189 5A00              mov [__r1],X
 118B 060009            add [__r1],9
 118E 5200              mov A,[X+0]
 1190 0200              add A,[__r1]
 1192 5300              mov [__r1],A
 1194 5000              mov A,0
 1196 0A00              adc A,[__r0]
 1198 5300              mov [__r0],A
 119A 528F              mov A,[X-113]
 119C 5300              mov [__r2],A
 119E 5100              mov A,[__r0]
 11A0 60D5              mov REG[0xd5],A
 11A2 5100              mov A,[__r2]
 11A4 3F00              mvi [__r1],A
 11A6                   .dbline 305
 11A6           ;                               }       
 11A6           L106:
 11A6                   .dbline 302
 11A6 7700              inc [X+0]
 11A8           L108:
 11A8                   .dbline 302
 11A8 3D0080            cmp [X+0],-128
 11AB CBD8              jc L105
 11AD           X46:
 11AD                   .dbline 306
 11AD           ;                               SPIRAM_WriteArray(addr, temp, 128);
 11AD 5080              mov A,-128
 11AF 08                push A
 11B0 62D000            mov REG[0xd0],>__r0
 11B3 5A00              mov [__r1],X
 11B5 060009            add [__r1],9
 11B8 5007              mov A,7
 11BA 08                push A
 11BB 5100              mov A,[__r1]
 11BD 08                push A
 11BE 5201              mov A,[X+1]
 11C0 08                push A
 11C1 5202              mov A,[X+2]
 11C3 08                push A
 11C4 7C0000            xcall _SPIRAM_WriteArray
 11C7 38FB              add SP,-5
 11C9                   .dbline 307
 11C9           ;                       }
 11C9           L102:
 11C9                   .dbline 300
 11C9 070280            add [X+2],-128
 11CC 0F0100            adc [X+1],0
 11CF           L104:
 11CF                   .dbline 300
 11CF 5202              mov A,[X+2]
 11D1 138A              sub A,[X-118]
 11D3 5201              mov A,[X+1]
 11D5 1B89              sbb A,[X-119]
 11D7 CBA7              jc L101
 11D9           X47:
 11D9                   .dbline 308
 11D9           ;                       break;
 11D9 82B2              xjmp L74
 11DB           L112:
 11DB                   .dbline 311
 11DB           ;               
 11DB           ;               case 3:
 11DB           ;                       for (addr = startAddr; addr < endAddr; addr += 128)
 11DB 5204              mov A,[X+4]
 11DD 5402              mov [X+2],A
 11DF 5203              mov A,[X+3]
 11E1 5401              mov [X+1],A
 11E3 829E              xjmp L116
 11E5           L113:
 11E5                   .dbline 312
 11E5           ;                       {
 11E5                   .dbline 313
 11E5           ;                               for(i = 0; i < 128; i++)
 11E5 560000            mov [X+0],0
 11E8 8272              xjmp L120
 11EA           L117:
 11EA                   .dbline 314
 11EA           ;                               {
 11EA                   .dbline 315
 11EA           ;                                       temp[i] = (char)(0.4 + 0.5*sin(100*pi*((addr - startAddr) + i))*(128/2.5));
 11EA 62D000            mov REG[0xd0],>__r0
 11ED 5200              mov A,[X+0]
 11EF 5300              mov [__r1],A
 11F1 550000            mov [__r0],0
 11F4 5202              mov A,[X+2]
 11F6 1304              sub A,[X+4]
 11F8 5300              mov [__r3],A
 11FA 5201              mov A,[X+1]
 11FC 1B03              sbb A,[X+3]
 11FE 5300              mov [__r2],A
 1200 5100              mov A,[__r3]
 1202 0200              add A,[__r1]
 1204 5300              mov [__r1],A
 1206 5100              mov A,[__r2]
 1208 0A00              adc A,[__r0]
 120A 5300              mov [__r0],A
 120C 5100              mov A,[__r1]
 120E 2101              and A,1
 1210 5300              mov [__r3],A
 1212 5100              mov A,[__r0]
 1214 2100              and A,0
 1216 5300              mov [__r2],A
 1218 5100              mov A,[__r3]
 121A 5300              mov [__r7],A
 121C 5100              mov A,[__r2]
 121E 5300              mov [__r6],A
 1220 470080            tst [__r6],-128
 1223 A009              jz X48
 1225 5500FF            mov [__r5],-1
 1228 5500FF            mov [__r4],-1
 122B 800A              jmp X49
 122D           X48:
 122D 62D000            mov REG[0xd0],>__r0
 1230 550000            mov [__r5],0
 1233 550000            mov [__r4],0
 1236           X49:
 1236 62D000            mov REG[0xd0],>__r0
 1239 5100              mov A,[__r4]
 123B 08                push A
 123C 5100              mov A,[__r5]
 123E 08                push A
 123F 5100              mov A,[__r6]
 1241 08                push A
 1242 5100              mov A,[__r7]
 1244 08                push A
 1245 7C0000            xcall __long2fp
 1248 18                pop A
 1249 5300              mov [__r7],A
 124B 18                pop A
 124C 5300              mov [__r6],A
 124E 18                pop A
 124F 5300              mov [__r5],A
 1251 18                pop A
 1252 5300              mov [__r4],A
 1254 70FB              and F,-5
 1256 6E00              rrc [__r0]
 1258 6E00              rrc [__r1]
 125A 5100              mov A,[__r1]
 125C 5300              mov [__r3],A
 125E 5100              mov A,[__r0]
 1260 5300              mov [__r2],A
 1262 470080            tst [__r2],-128
 1265 A009              jz X50
 1267 5500FF            mov [__r1],-1
 126A 5500FF            mov [__r0],-1
 126D 800A              jmp X51
 126F           X50:
 126F 62D000            mov REG[0xd0],>__r0
 1272 550000            mov [__r1],0
 1275 550000            mov [__r0],0
 1278           X51:
 1278 62D000            mov REG[0xd0],>__r0
 127B 5100              mov A,[__r0]
 127D 08                push A
 127E 5100              mov A,[__r1]
 1280 08                push A
 1281 5100              mov A,[__r2]
 1283 08                push A
 1284 5100              mov A,[__r3]
 1286 08                push A
 1287 7C0000            xcall __long2fp
 128A 18                pop A
 128B 5300              mov [__r3],A
 128D 18                pop A
 128E 5300              mov [__r2],A
 1290 18                pop A
 1291 5300              mov [__r1],A
 1293 18                pop A
 1294 08                push A
 1295 5100              mov A,[__r1]
 1297 08                push A
 1298 5100              mov A,[__r2]
 129A 08                push A
 129B 5100              mov A,[__r3]
 129D 08                push A
 129E 5040              mov A,64
 12A0 08                push A
 12A1 5000              mov A,0
 12A3 08                push A
 12A4 08                push A
 12A5 08                push A
 12A6 7C0000            xcall __fpmul
 12A9 18                pop A
 12AA 5300              mov [__r3],A
 12AC 18                pop A
 12AD 5300              mov [__r2],A
 12AF 18                pop A
 12B0 5300              mov [__r1],A
 12B2 18                pop A
 12B3 5300              mov [__r0],A
 12B5 38FC              add SP,-4
 12B7 5100              mov A,[__r4]
 12B9 08                push A
 12BA 5100              mov A,[__r5]
 12BC 08                push A
 12BD 5100              mov A,[__r6]
 12BF 08                push A
 12C0 5100              mov A,[__r7]
 12C2 08                push A
 12C3 5100              mov A,[__r0]
 12C5 08                push A
 12C6 5100              mov A,[__r1]
 12C8 08                push A
 12C9 5100              mov A,[__r2]
 12CB 08                push A
 12CC 5100              mov A,[__r3]
 12CE 08                push A
 12CF 7C0000            xcall __fpadd
 12D2 18                pop A
 12D3 5300              mov [__r3],A
 12D5 18                pop A
 12D6 5300              mov [__r2],A
 12D8 18                pop A
 12D9 5300              mov [__r1],A
 12DB 18                pop A
 12DC 5300              mov [__r0],A
 12DE 38FC              add SP,-4
 12E0 5205              mov A,[X+5]
 12E2 08                push A
 12E3 5206              mov A,[X+6]
 12E5 08                push A
 12E6 5207              mov A,[X+7]
 12E8 08                push A
 12E9 5208              mov A,[X+8]
 12EB 08                push A
 12EC 5042              mov A,66
 12EE 08                push A
 12EF 50C8              mov A,-56
 12F1 08                push A
 12F2 5000              mov A,0
 12F4 08                push A
 12F5 08                push A
 12F6 7C0000            xcall __fpmul
 12F9 18                pop A
 12FA 5300              mov [__r7],A
 12FC 18                pop A
 12FD 5300              mov [__r6],A
 12FF 18                pop A
 1300 5300              mov [__r5],A
 1302 18                pop A
 1303 5300              mov [__r4],A
 1305 38FC              add SP,-4
 1307 5100              mov A,[__r0]
 1309 08                push A
 130A 5100              mov A,[__r1]
 130C 08                push A
 130D 5100              mov A,[__r2]
 130F 08                push A
 1310 5100              mov A,[__r3]
 1312 08                push A
 1313 5100              mov A,[__r4]
 1315 08                push A
 1316 5100              mov A,[__r5]
 1318 08                push A
 1319 5100              mov A,[__r6]
 131B 08                push A
 131C 5100              mov A,[__r7]
 131E 08                push A
 131F 7C0000            xcall __fpmul
 1322 18                pop A
 1323 5300              mov [__r3],A
 1325 18                pop A
 1326 5300              mov [__r2],A
 1328 18                pop A
 1329 5300              mov [__r1],A
 132B 18                pop A
 132C 38FC              add SP,-4
 132E 08                push A
 132F 5100              mov A,[__r1]
 1331 08                push A
 1332 5100              mov A,[__r2]
 1334 08                push A
 1335 5100              mov A,[__r3]
 1337 08                push A
 1338 7C0000            xcall _sinf
 133B 38FC              add SP,-4
 133D 62D000            mov REG[0xd0],>__r0
 1340 5100              mov A,[__r0]
 1342 08                push A
 1343 5100              mov A,[__r1]
 1345 08                push A
 1346 5100              mov A,[__r2]
 1348 08                push A
 1349 5100              mov A,[__r3]
 134B 08                push A
 134C 503F              mov A,63
 134E 08                push A
 134F 5000              mov A,0
 1351 08                push A
 1352 08                push A
 1353 08                push A
 1354 7C0000            xcall __fpmul
 1357 18                pop A
 1358 5300              mov [__r3],A
 135A 18                pop A
 135B 5300              mov [__r2],A
 135D 18                pop A
 135E 5300              mov [__r1],A
 1360 18                pop A
 1361 38FC              add SP,-4
 1363 08                push A
 1364 5100              mov A,[__r1]
 1366 08                push A
 1367 5100              mov A,[__r2]
 1369 08                push A
 136A 5100              mov A,[__r3]
 136C 08                push A
 136D 5042              mov A,66
 136F 08                push A
 1370 504C              mov A,76
 1372 08                push A
 1373 50CC              mov A,-52
 1375 08                push A
 1376 50CD              mov A,-51
 1378 08                push A
 1379 7C0000            xcall __fpmul
 137C 18                pop A
 137D 5300              mov [__r3],A
 137F 18                pop A
 1380 5300              mov [__r2],A
 1382 18                pop A
 1383 5300              mov [__r1],A
 1385 18                pop A
 1386 5300              mov [__r0],A
 1388 38FC              add SP,-4
 138A 503E              mov A,62
 138C 08                push A
 138D 50CC              mov A,-52
 138F 08                push A
 1390 08                push A
 1391 50CD              mov A,-51
 1393 08                push A
 1394 5100              mov A,[__r0]
 1396 08                push A
 1397 5100              mov A,[__r1]
 1399 08                push A
 139A 5100              mov A,[__r2]
 139C 08                push A
 139D 5100              mov A,[__r3]
 139F 08                push A
 13A0 7C0000            xcall __fpadd
 13A3 18                pop A
 13A4 5300              mov [__r3],A
 13A6 18                pop A
 13A7 5300              mov [__r2],A
 13A9 18                pop A
 13AA 5300              mov [__r1],A
 13AC 18                pop A
 13AD 5300              mov [__r0],A
 13AF 38FC              add SP,-4
 13B1 5047              mov A,71
 13B3 08                push A
 13B4 5000              mov A,0
 13B6 08                push A
 13B7 08                push A
 13B8 08                push A
 13B9 5100              mov A,[__r0]
 13BB 08                push A
 13BC 5100              mov A,[__r1]
 13BE 08                push A
 13BF 5100              mov A,[__r2]
 13C1 08                push A
 13C2 5100              mov A,[__r3]
 13C4 08                push A
 13C5 7C0000            xcall __fpcmp
 13C8 38F8              add SP,-8
 13CA 39FF              cmp A,-1
 13CC A047              jz L122
 13CE 5047              mov A,71
 13D0 08                push A
 13D1 5000              mov A,0
 13D3 08                push A
 13D4 08                push A
 13D5 08                push A
 13D6 5100              mov A,[__r0]
 13D8 08                push A
 13D9 5100              mov A,[__r1]
 13DB 08                push A
 13DC 5100              mov A,[__r2]
 13DE 08                push A
 13DF 5100              mov A,[__r3]
 13E1 08                push A
 13E2 7C0000            xcall __fpsub
 13E5 18                pop A
 13E6 5300              mov [__r7],A
 13E8 18                pop A
 13E9 5300              mov [__r6],A
 13EB 18                pop A
 13EC 5300              mov [__r5],A
 13EE 18                pop A
 13EF 38FC              add SP,-4
 13F1 08                push A
 13F2 5100              mov A,[__r5]
 13F4 08                push A
 13F5 5100              mov A,[__r6]
 13F7 08                push A
 13F8 5100              mov A,[__r7]
 13FA 08                push A
 13FB 7C0000            xcall __fp2long
 13FE 18                pop A
 13FF 5300              mov [__r5],A
 1401 18                pop A
 1402 5300              mov [__r4],A
 1404 38FE              add SP,-2
 1406 5100              mov A,[__r5]
 1408 0100              add A,0
 140A 548F              mov [X-113],A
 140C 5100              mov A,[__r4]
 140E 0980              adc A,-128
 1410 548E              mov [X-114],A
 1412 8023              xjmp L123
 1414           L122:
 1414 62D000            mov REG[0xd0],>__r0
 1417 5100              mov A,[__r0]
 1419 08                push A
 141A 5100              mov A,[__r1]
 141C 08                push A
 141D 5100              mov A,[__r2]
 141F 08                push A
 1420 5100              mov A,[__r3]
 1422 08                push A
 1423 7C0000            xcall __fp2long
 1426 18                pop A
 1427 5300              mov [__r1],A
 1429 18                pop A
 142A 5300              mov [__r0],A
 142C 38FE              add SP,-2
 142E 5100              mov A,[__r1]
 1430 548F              mov [X-113],A
 1432 5100              mov A,[__r0]
 1434 548E              mov [X-114],A
 1436           L123:
 1436 62D000            mov REG[0xd0],>__r0
 1439 550007            mov [__r0],7
 143C 5A00              mov [__r1],X
 143E 060009            add [__r1],9
 1441 5200              mov A,[X+0]
 1443 0200              add A,[__r1]
 1445 5300              mov [__r1],A
 1447 5000              mov A,0
 1449 0A00              adc A,[__r0]
 144B 5300              mov [__r0],A
 144D 528F              mov A,[X-113]
 144F 5300              mov [__r2],A
 1451 5100              mov A,[__r0]
 1453 60D5              mov REG[0xd5],A
 1455 5100              mov A,[__r2]
 1457 3F00              mvi [__r1],A
 1459                   .dbline 316
 1459           ;                               }       
 1459           L118:
 1459                   .dbline 313
 1459 7700              inc [X+0]
 145B           L120:
 145B                   .dbline 313
 145B 3D0080            cmp [X+0],-128
 145E CD8B              jc L117
 1460           X53:
 1460                   .dbline 317
 1460           ;                               SPIRAM_WriteArray(addr, temp, 128);
 1460 5080              mov A,-128
 1462 08                push A
 1463 62D000            mov REG[0xd0],>__r0
 1466 5A00              mov [__r1],X
 1468 060009            add [__r1],9
 146B 5007              mov A,7
 146D 08                push A
 146E 5100              mov A,[__r1]
 1470 08                push A
 1471 5201              mov A,[X+1]
 1473 08                push A
 1474 5202              mov A,[X+2]
 1476 08                push A
 1477 7C0000            xcall _SPIRAM_WriteArray
 147A 38FB              add SP,-5
 147C                   .dbline 318
 147C           ;                       }
 147C           L114:
 147C                   .dbline 311
 147C 070280            add [X+2],-128
 147F 0F0100            adc [X+1],0
 1482           L116:
 1482                   .dbline 311
 1482 5202              mov A,[X+2]
 1484 138A              sub A,[X-118]
 1486 5201              mov A,[X+1]
 1488 1B89              sbb A,[X-119]
 148A CD5A              jc L113
 148C           X54:
 148C                   .dbline 319
 148C           ;                       break;
 148C           L73:
 148C           L74:
 148C                   .dbline -2
 148C           L72:
 148C 386C              add SP,-148
 148E 20                pop X
 148F                   .dbline 0 ; func end
 148F 7F                ret
 1490                   .dbsym l ii 139 c
 1490                   .dbsym l endAddr 137 i
 1490                   .dbsym l temp 9 A[128:128]c
 1490                   .dbsym l pi 5 D
 1490                   .dbsym l startAddr 3 i
 1490                   .dbsym l addr 1 i
 1490                   .dbsym l i 0 c
 1490                   .dbsym l id -4 c
 1490                   .dbend
 1490                   .dbfunc e main _main fV
 1490           ;            opt -> X+0
 1490           _main::
 1490                   .dbline -1
 1490 10                push X
 1491 4F                mov X,SP
 1492 3803              add SP,3
 1494                   .dbline 325
 1494           ;       }
 1494           ;       
 1494           ; }
 1494           ; 
 1494           ; void main(void)
 1494           ; {
 1494                   .dbline 329
 1494           ;       char opt;
 1494           ;       
 1494           ;       // Make sure nCS is high before doing anything
 1494           ;       nCS_HIGH;
 1494                   .dbline 329
 1494 430404            or REG[0x4],4
 1497                   .dbline 329
 1497                   .dbline 329
 1497                   .dbline 332
 1497           ;       
 1497           ;       // Enable user module interrupts
 1497           ;       SleepTimer_EnableInt();
 1497 10                push X
 1498 7C0000            xcall _SleepTimer_EnableInt
 149B 20                pop X
 149C                   .dbline 335
 149C           ; 
 149C           ;       // Enable global interrutps
 149C           ;       M8C_EnableGInt;
 149C 7101                      or  F, 01h
 149E           
 149E                   .dbline 338
 149E           ; 
 149E           ;       // Start the user modules
 149E           ;       UART_Start(UART_PARITY_NONE);
 149E 10                push X
 149F 5000              mov A,0
 14A1 7C0000            xcall _UART_Start
 14A4                   .dbline 339
 14A4           ;       UART_PutCRLF();
 14A4 7C0000            xcall _UART_PutCRLF
 14A7                   .dbline 340
 14A7           ;       SPIM_Start(SPIM_SPIM_MODE_0 | SPIM_SPIM_MSB_FIRST);
 14A7 5000              mov A,0
 14A9 7C0000            xcall _SPIM_Start
 14AC                   .dbline 341
 14AC           ;       SleepTimer_Start();
 14AC 7C0000            xcall _SleepTimer_Start
 14AF                   .dbline 342
 14AF           ;       DAC8_Start(DAC8_FULLPOWER);
 14AF 5003              mov A,3
 14B1 7C0000            xcall _DAC8_Start
 14B4                   .dbline 343
 14B4           ;       UART_CPutString("Synthesiszing waveforms\r\n");
 14B4 50E3              mov A,>L125
 14B6 08                push A
 14B7 50E3              mov A,<L125
 14B9 5C                mov X,A
 14BA 18                pop A
 14BB 7C0000            xcall _UART_CPutString
 14BE 20                pop X
 14BF                   .dbline 344
 14BF           ;       WriteBlock(0);
 14BF 5000              mov A,0
 14C1 08                push A
 14C2 7C0429            xcall _WriteBlock
 14C5                   .dbline 345
 14C5           ;       WriteBlock(1);
 14C5 5001              mov A,1
 14C7 08                push A
 14C8 7C0429            xcall _WriteBlock
 14CB 38FE              add SP,-2
 14CD                   .dbline 346
 14CD           ;       WriteBlock(2);
 14CD 5002              mov A,2
 14CF 08                push A
 14D0 7C0429            xcall _WriteBlock
 14D3                   .dbline 347
 14D3           ;       WriteBlock(3);
 14D3 5003              mov A,3
 14D5 08                push A
 14D6 7C0429            xcall _WriteBlock
 14D9 38FE              add SP,-2
 14DB 8097              xjmp L127
 14DD           L126:
 14DD                   .dbline 349
 14DD           ;       while(1) 
 14DD           ;       {
 14DD                   .dbline 350
 14DD           ;               UART_CPutString("Synthetic wave output is on Port0[4]\r\nCowabunga Dude! Time to catch some waves.\r\n\r\n0. Play block 0\r\n1. Play block 1\r\n2. Play block 2\r\n3. Play block 3\r\n4. Test status register\r\n5. Test byte mode\r\n6. Test sequential mode\r\n");
 14DD 10                push X
 14DE 5006              mov A,>L129
 14E0 08                push A
 14E1 5006              mov A,<L129
 14E3 5C                mov X,A
 14E4 18                pop A
 14E5 7C0000            xcall _UART_CPutString
 14E8 20                pop X
 14E9                   .dbline 352
 14E9           ;               
 14E9           ;               opt = GetNumber(0, 6);
 14E9 5006              mov A,6
 14EB 08                push A
 14EC 5000              mov A,0
 14EE 08                push A
 14EF 7C0346            xcall _GetNumber
 14F2 38FE              add SP,-2
 14F4 62D000            mov REG[0xd0],>__r0
 14F7 5400              mov [X+0],A
 14F9                   .dbline 353
 14F9           ;               switch (opt)
 14F9 5200              mov A,[X+0]
 14FB 5402              mov [X+2],A
 14FD 560100            mov [X+1],0
 1500 3D0100            cmp [X+1],0
 1503 B006              jnz X58
 1505 3D0204            cmp [X+2],4
 1508 A020              jz L135
 150A           X58:
 150A 3D0100            cmp [X+1],0
 150D B006              jnz X59
 150F 3D0205            cmp [X+2],5
 1512 A02B              jz L139
 1514           X59:
 1514 3D0100            cmp [X+1],0
 1517 B006              jnz X60
 1519 3D0206            cmp [X+2],6
 151C A03C              jz L143
 151E           X60:
 151E 804C              xjmp L130
 1520           L134:
 1520                   .dbline 357
 1520           ;               {
 1520           ;                       case 4:
 1520           ;                               while(SPIRAM_StatusRegisterTest()) 
 1520           ;                                       SleepTimer_SyncWait(4, SleepTimer_WAIT_RELOAD);
 1520 10                push X
 1521 5700              mov X,0
 1523 5004              mov A,4
 1525 7C0000            xcall _SleepTimer_SyncWait
 1528 20                pop X
 1529           L135:
 1529                   .dbline 356
 1529 7C0000            xcall _SPIRAM_StatusRegisterTest
 152C 62D000            mov REG[0xd0],>__r0
 152F 3900              cmp A,0
 1531 BFEE              jnz L134
 1533                   .dbline 358
 1533           ;                               break;
 1533 803F              xjmp L131
 1535           L138:
 1535                   .dbline 362
 1535           ;                       
 1535           ;                       case 5:
 1535           ;                               while(SPIRAM_ByteModeTest()) 
 1535           ;                                       SleepTimer_SyncWait(4, SleepTimer_WAIT_RELOAD); 
 1535 10                push X
 1536 5700              mov X,0
 1538 5004              mov A,4
 153A 7C0000            xcall _SleepTimer_SyncWait
 153D 20                pop X
 153E           L139:
 153E                   .dbline 361
 153E 7C00FB            xcall _SPIRAM_ByteModeTest
 1541 62D000            mov REG[0xd0],>__r0
 1544 3C0000            cmp [__r0],0
 1547 BFED              jnz L138
 1549 3C0000            cmp [__r1],0
 154C BFE8              jnz L138
 154E           X61:
 154E                   .dbline 363
 154E           ;                               break;
 154E 8024              xjmp L131
 1550           L142:
 1550                   .dbline 367
 1550           ;                       
 1550           ;                       case 6:
 1550           ;                               while(SPIRAM_SequentialModeTest()) 
 1550           ;                                       SleepTimer_SyncWait(4, SleepTimer_WAIT_RELOAD);
 1550 10                push X
 1551 5700              mov X,0
 1553 5004              mov A,4
 1555 7C0000            xcall _SleepTimer_SyncWait
 1558 20                pop X
 1559           L143:
 1559                   .dbline 366
 1559 7C01FE            xcall _SPIRAM_SequentialModeTest
 155C 62D000            mov REG[0xd0],>__r0
 155F 3C0000            cmp [__r0],0
 1562 BFED              jnz L142
 1564 3C0000            cmp [__r1],0
 1567 BFE8              jnz L142
 1569           X62:
 1569                   .dbline 368
 1569           ;                               break;
 1569 8009              xjmp L131
 156B           L130:
 156B                   .dbline 371
 156B           ;                       
 156B           ;                       default:
 156B           ;                               PlayBlock(opt);
 156B 5200              mov A,[X+0]
 156D 08                push A
 156E 7C0388            xcall _PlayBlock
 1571 38FF              add SP,-1
 1573                   .dbline 372
 1573           ;                               break;  
 1573           L131:
 1573                   .dbline 374
 1573           ;               }
 1573           ;       }
 1573           L127:
 1573                   .dbline 348
 1573 8F69              xjmp L126
 1575           X57:
 1575                   .dbline -2
 1575           L124:
 1575 38FD              add SP,-3
 1577 20                pop X
 1578                   .dbline 0 ; func end
 1578 8FFF              jmp .
 157A                   .dbsym l opt 0 c
 157A                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Jacob\Desktop\ECE381\SPI_SRAM\SPI_SRAM\main.c
 0000           _DataOut::
 0000 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 003C 00000000          .byte 0,0,0,0
 0040                   .dbsym e DataOut _DataOut A[64:64]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Jacob\Desktop\ECE381\SPI_SRAM\SPI_SRAM\main.c
 0000           _DataIn::
 0000 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 003C 00000000          .byte 0,0,0,0
 0040                   .dbsym e DataIn _DataIn A[64:64]c
                        .area lit(rom, con, rel, lit)
 0006           L129:
 0006 53796E7468657469632077617665206F  .byte 'S,'y,'n,'t,'h,'e,'t,'i,'c,32,'w,'a,'v,'e,32,'o
 0016 7574707574206973206F6E20506F7274  .byte 'u,'t,'p,'u,'t,32,'i,'s,32,'o,'n,32,'P,'o,'r,'t
 0026 305B345D0D0A436F776162756E676120  .byte 48,91,52,93,13,10,'C,'o,'w,'a,'b,'u,'n,'g,'a,32
 0036 44756465212054696D6520746F206361  .byte 'D,'u,'d,'e,33,32,'T,'i,'m,'e,32,'t,'o,32,'c,'a
 0046 74636820736F6D652077617665732E0D  .byte 't,'c,'h,32,'s,'o,'m,'e,32,'w,'a,'v,'e,'s,46,13
 0056 0A0D0A302E20506C617920626C6F636B  .byte 10,13,10,48,46,32,'P,'l,'a,'y,32,'b,'l,'o,'c,'k
 0066 20300D0A312E20506C617920626C6F63  .byte 32,48,13,10,49,46,32,'P,'l,'a,'y,32,'b,'l,'o,'c
 0076 6B20310D0A322E20506C617920626C6F  .byte 'k,32,49,13,10,50,46,32,'P,'l,'a,'y,32,'b,'l,'o
 0086 636B20320D0A332E20506C617920626C  .byte 'c,'k,32,50,13,10,51,46,32,'P,'l,'a,'y,32,'b,'l
 0096 6F636B20330D0A342E20546573742073  .byte 'o,'c,'k,32,51,13,10,52,46,32,'T,'e,'s,'t,32,'s
 00A6 74617475732072656769737465720D0A  .byte 't,'a,'t,'u,'s,32,'r,'e,'g,'i,'s,'t,'e,'r,13,10
 00B6 352E20546573742062797465206D6F64  .byte 53,46,32,'T,'e,'s,'t,32,'b,'y,'t,'e,32,'m,'o,'d
 00C6 650D0A362E2054657374207365717565  .byte 'e,13,10,54,46,32,'T,'e,'s,'t,32,'s,'e,'q,'u,'e
 00D6 6E7469616C206D6F64650D0A00        .byte 'n,'t,'i,'a,'l,32,'m,'o,'d,'e,13,10,0
 00E3           L125:
 00E3 53796E7468657369737A696E67207761  .byte 'S,'y,'n,'t,'h,'e,'s,'i,'s,'z,'i,'n,'g,32,'w,'a
 00F3 7665666F726D730D0A00      .byte 'v,'e,'f,'o,'r,'m,'s,13,10,0
 00FD           L66:
 00FD 507265737320616E79206B657920746F  .byte 'P,'r,'e,'s,'s,32,'a,'n,'y,32,'k,'e,'y,32,'t,'o
 010D 2061626F72740D0A00        .byte 32,'a,'b,'o,'r,'t,13,10,0
 0116           L36:
 0116 53657175656E7469616C204D6F646520  .byte 'S,'e,'q,'u,'e,'n,'t,'i,'a,'l,32,'M,'o,'d,'e,32
 0126 572F5220546573743A20416464722030  .byte 'W,47,'R,32,'T,'e,'s,'t,58,32,'A,'d,'d,'r,32,48
 0136 782020202000      .byte 'x,32,32,32,32,0
 013C           L34:
 013C 08080808080808080808080820504153  .byte 8,8,8,8,8,8,8,8,8,8,8,8,32,'P,'A,'S
 014C 53202020202020200D0A00    .byte 'S,32,32,32,32,32,32,32,13,10,0
 0157           L33:
 0157 0808080808080808080808082041424F  .byte 8,8,8,8,8,8,8,8,8,8,8,8,32,'A,'B,'O
 0167 52544544202020200D0A00    .byte 'R,'T,'E,'D,32,32,32,32,13,10,0
 0172           L23:
 0172 0808080800        .byte 8,8,8,8,0
 0177           L16:
 0177 20202020202042797465204D6F646520  .byte 32,32,32,32,32,32,'B,'y,'t,'e,32,'M,'o,'d,'e,32
 0187 572F5220546573743A20416464722030  .byte 'W,47,'R,32,'T,'e,'s,'t,58,32,'A,'d,'d,'r,32,48
 0197 782020202000      .byte 'x,32,32,32,32,0
 019D           L14:
 019D 080808080820504153530D0A00        .byte 8,8,8,8,8,32,'P,'A,'S,'S,13,10,0
 01AA           L13:
 01AA 204641494C0D0A00  .byte 32,'F,'A,'I,'L,13,10,0
 01B2           L10:
 01B2 0D0A5772697465206F6620696E76616C  .byte 13,10,'W,'r,'i,'t,'e,32,'o,'f,32,'i,'n,'v,'a,'l
 01C2 69642053746174757320526567697374  .byte 'i,'d,32,'S,'t,'a,'t,'u,'s,32,'R,'e,'g,'i,'s,'t
 01D2 65722076616C75652E2053797374656D  .byte 'e,'r,32,'v,'a,'l,'u,'e,46,32,'S,'y,'s,'t,'e,'m
 01E2 2068616C7465642E0D0A00    .byte 32,'h,'a,'l,'t,'e,'d,46,13,10,0
 01ED           L3:
 01ED 53746174757320526567697374657220  .byte 'S,'t,'a,'t,'u,'s,32,'R,'e,'g,'i,'s,'t,'e,'r,32
 01FD 572F5220546573743A203078202000    .byte 'W,47,'R,32,'T,'e,'s,'t,58,32,48,'x,32,32,0
