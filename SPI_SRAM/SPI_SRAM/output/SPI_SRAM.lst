FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
004C: 7D 06 DC LJMP  _SPIM_ISR          (0193)     ljmp	_SPIM_ISR
004F: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
0058: 7D 05 8A LJMP  _UART_TX_ISR       (0205)     ljmp	_UART_TX_ISR
005B: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
005C: 7D 05 8B LJMP  _UART_RX_ISR       (0209)     ljmp	_UART_RX_ISR
005F: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
0064: 7D 06 F7 LJMP  _SleepTimer_ISR    (0217)     ljmp	_SleepTimer_ISR
0067: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [0xF8],0x0         (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [0xF9],0x0         (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 12 MOV   REG[0xE0],0x12     (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 05 28 LCALL 0x0528             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 04    MOV   A,0x4              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 21    MOV   X,0x21             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 88    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 88    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 88    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 87    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 88    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 88 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 87    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 87    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 88    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 88 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 87    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 13 MOV   REG[0xE0],0x13     (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 0C 18 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0423: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_spi_sram_Bank1
                                        (0019) export LoadConfigTBL_spi_sram_Bank0
                                        (0020) export LoadConfigTBL_spi_sram_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_spi_sram_Bank0:
                                        (0023) ;  Instance name DAC8, User Module DAC8
                                        (0024) ;       Instance name DAC8, Block Name LSB(ASD22)
                                        (0025) 	db		98h, 80h		;DAC8_LSB_CR0(ASD22CR0)
                                        (0026) 	db		99h, 80h		;DAC8_LSB_CR1(ASD22CR1)
                                        (0027) 	db		9ah, 20h		;DAC8_LSB_CR2(ASD22CR2)
                                        (0028) 	db		9bh, 30h		;DAC8_LSB_CR3(ASD22CR3)
                                        (0029) ;       Instance name DAC8, Block Name MSB(ASC12)
                                        (0030) 	db		88h, a0h		;DAC8_MSB_CR0(ASC12CR0)
                                        (0031) 	db		89h, 41h		;DAC8_MSB_CR1(ASC12CR1)
                                        (0032) 	db		8ah, a0h		;DAC8_MSB_CR2(ASC12CR2)
                                        (0033) 	db		8bh, 3ch		;DAC8_MSB_CR3(ASC12CR3)
                                        (0034) ;  Instance name SPIM, User Module SPIM
                                        (0035) ;       Instance name SPIM, Block Name SPIM(DCB23)
                                        (0036) 	db		4fh, 00h		;SPIM_CONTROL_REG  (DCB23CR0)
                                        (0037) 	db		4dh, 00h		;SPIM_TX_BUFFER_REG(DCB23DR1)
                                        (0038) 	db		4eh, 00h		;SPIM_RX_BUFFER_REG(DCB23DR2)
                                        (0039) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0040) ;  Instance name UART, User Module UART
                                        (0041) ;       Instance name UART, Block Name RX(DCB33)
                                        (0042) 	db		5fh, 00h		;UART_RX_CONTROL_REG(DCB33CR0)
                                        (0043) 	db		5dh, 00h		;UART_(DCB33DR1)
                                        (0044) 	db		5eh, 00h		;UART_RX_BUFFER_REG (DCB33DR2)
                                        (0045) ;       Instance name UART, Block Name TX(DCB32)
                                        (0046) 	db		5bh, 00h		;UART_TX_CONTROL_REG(DCB32CR0)
                                        (0047) 	db		59h, 00h		;UART_TX_BUFFER_REG (DCB32DR1)
                                        (0048) 	db		5ah, 00h		;UART_(DCB32DR2)
                                        (0049) ;  Global Register values Bank 0
                                        (0050) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0051) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0052) 	db		63h, 17h		; AnalogReferenceControl register (ARF_CR)
                                        (0053) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0054) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0055) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0056) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0057) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0058) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0059) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0060) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0061) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0062) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0063) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0064) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0065) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0066) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0067) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0068) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0069) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0070) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0071) 	db		c0h, 0ch		; Row_2_InputMux register (RDI2RI)
                                        (0072) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0073) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0074) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0075) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0076) 	db		c5h, 08h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0077) 	db		c6h, 40h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0078) 	db		c8h, 75h		; Row_3_InputMux register (RDI3RI)
                                        (0079) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0080) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0081) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0082) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0083) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0084) 	db		ceh, 20h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0085) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0086) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0087) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0088) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0089) 	db		ffh
                                        (0090) LoadConfigTBL_spi_sram_Bank1:
                                        (0091) ;  Instance name DAC8, User Module DAC8
                                        (0092) ;       Instance name DAC8, Block Name LSB(ASD22)
                                        (0093) ;       Instance name DAC8, Block Name MSB(ASC12)
                                        (0094) ;  Instance name SPIM, User Module SPIM
                                        (0095) ;       Instance name SPIM, Block Name SPIM(DCB23)
                                        (0096) 	db		4ch, 06h		;SPIM_FUNCTION_REG (DCB23FN)
                                        (0097) 	db		4dh, d6h		;SPIM_INPUT_REG    (DCB23IN)
                                        (0098) 	db		4eh, 7ch		;SPIM_OUTPUT_REG   (DCB23OU)
                                        (0099) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0100) ;  Instance name UART, User Module UART
                                        (0101) ;       Instance name UART, Block Name RX(DCB33)
                                        (0102) 	db		5ch, 05h		;UART_RX_FUNC_REG   (DCB33FN)
                                        (0103) 	db		5dh, e1h		;UART_RX_INPUT_REG  (DCB33IN)
                                        (0104) 	db		5eh, 40h		;UART_RX_OUTPUT_REG (DCB33OU)
                                        (0105) ;       Instance name UART, Block Name TX(DCB32)
                                        (0106) 	db		58h, 0dh		;UART_TX_FUNC_REG   (DCB32FN)
                                        (0107) 	db		59h, 01h		;UART_TX_INPUT_REG  (DCB32IN)
                                        (0108) 	db		5ah, 47h		;UART_TX_OUTPUT_REG (DCB32OU)
                                        (0109) ;  Global Register values Bank 1
                                        (0110) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0111) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0112) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0113) 	db		62h, 11h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0114) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0115) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0116) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0117) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0118) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0119) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0120) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0121) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0122) 	db		e1h, b1h		; OscillatorControl_1 register (OSC_CR1)
                                        (0123) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0124) 	db		dfh, 33h		; OscillatorControl_3 register (OSC_CR3)
                                        (0125) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0126) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0127) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0128) 	db		ffh
                                        (0129) AREA psoc_config(rom, rel)
                                        (0130) LoadConfigTBL_spi_sram_Ordered:
                                        (0131) ;  Ordered Global Register values
                                        (0132) 	M8C_SetBank0
0425: 62 00 00 MOV   REG[0x0],0x0       (0133) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0428: 71 10    OR    F,0x10             
                                        (0134) 	M8C_SetBank1
042A: 62 00 00 MOV   REG[0x0],0x0       (0135) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
042D: 62 01 FF MOV   REG[0x1],0xFF      (0136) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0430: 70 EF    AND   F,0xEF             
                                        (0137) 	M8C_SetBank0
0432: 62 03 FF MOV   REG[0x3],0xFF      (0138) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0435: 62 02 00 MOV   REG[0x2],0x0       (0139) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0438: 71 10    OR    F,0x10             
                                        (0140) 	M8C_SetBank1
043A: 62 02 00 MOV   REG[0x2],0x0       (0141) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
043D: 62 03 00 MOV   REG[0x3],0x0       (0142) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0440: 70 EF    AND   F,0xEF             
                                        (0143) 	M8C_SetBank0
0442: 62 01 00 MOV   REG[0x1],0x0       (0144) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0445: 62 04 1C MOV   REG[0x4],0x1C      (0145) 	mov	reg[04h], 1ch		; Port_1_Data register (PRT1DR)
0448: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
044A: 62 04 1C MOV   REG[0x4],0x1C      (0147) 	mov	reg[04h], 1ch		; Port_1_DriveMode_0 register (PRT1DM0)
044D: 62 05 FF MOV   REG[0x5],0xFF      (0148) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0450: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
0452: 62 07 9F MOV   REG[0x7],0x9F      (0150) 	mov	reg[07h], 9fh		; Port_1_DriveMode_2 register (PRT1DM2)
0455: 62 06 78 MOV   REG[0x6],0x78      (0151) 	mov	reg[06h], 78h		; Port_1_GlobalSelect register (PRT1GS)
0458: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
045A: 62 06 00 MOV   REG[0x6],0x0       (0153) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
045D: 62 07 00 MOV   REG[0x7],0x0       (0154) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0460: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
0462: 62 05 00 MOV   REG[0x5],0x0       (0156) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0465: 62 08 00 MOV   REG[0x8],0x0       (0157) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0468: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
046A: 62 08 80 MOV   REG[0x8],0x80      (0159) 	mov	reg[08h], 80h		; Port_2_DriveMode_0 register (PRT2DM0)
046D: 62 09 7F MOV   REG[0x9],0x7F      (0160) 	mov	reg[09h], 7fh		; Port_2_DriveMode_1 register (PRT2DM1)
0470: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
0472: 62 0B 7F MOV   REG[0xB],0x7F      (0162) 	mov	reg[0bh], 7fh		; Port_2_DriveMode_2 register (PRT2DM2)
0475: 62 0A 80 MOV   REG[0xA],0x80      (0163) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
0478: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
047A: 62 0A 00 MOV   REG[0xA],0x0       (0165) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
047D: 62 0B 00 MOV   REG[0xB],0x0       (0166) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0480: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
0482: 62 09 00 MOV   REG[0x9],0x0       (0168) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0485: 62 0C 00 MOV   REG[0xC],0x0       (0169) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0488: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
048A: 62 0C 00 MOV   REG[0xC],0x0       (0171) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
048D: 62 0D 00 MOV   REG[0xD],0x0       (0172) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0490: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
0492: 62 0F 00 MOV   REG[0xF],0x0       (0174) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0495: 62 0E 00 MOV   REG[0xE],0x0       (0175) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0498: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
049A: 62 0E 00 MOV   REG[0xE],0x0       (0177) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
049D: 62 0F 00 MOV   REG[0xF],0x0       (0178) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
04A0: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
04A2: 62 0D 00 MOV   REG[0xD],0x0       (0180) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
04A5: 62 10 00 MOV   REG[0x10],0x0      (0181) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
04A8: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
04AA: 62 10 00 MOV   REG[0x10],0x0      (0183) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
04AD: 62 11 00 MOV   REG[0x11],0x0      (0184) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
04B0: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
04B2: 62 13 00 MOV   REG[0x13],0x0      (0186) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
04B5: 62 12 00 MOV   REG[0x12],0x0      (0187) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
04B8: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
04BA: 62 12 00 MOV   REG[0x12],0x0      (0189) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
04BD: 62 13 00 MOV   REG[0x13],0x0      (0190) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
04C0: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
04C2: 62 11 00 MOV   REG[0x11],0x0      (0192) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
04C5: 62 14 00 MOV   REG[0x14],0x0      (0193) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
04C8: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
04CA: 62 14 00 MOV   REG[0x14],0x0      (0195) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
04CD: 62 15 00 MOV   REG[0x15],0x0      (0196) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
04D0: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
04D2: 62 17 00 MOV   REG[0x17],0x0      (0198) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
04D5: 62 16 00 MOV   REG[0x16],0x0      (0199) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
04D8: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
04DA: 62 16 00 MOV   REG[0x16],0x0      (0201) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
04DD: 62 17 00 MOV   REG[0x17],0x0      (0202) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
04E0: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
04E2: 62 15 00 MOV   REG[0x15],0x0      (0204) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
04E5: 62 18 00 MOV   REG[0x18],0x0      (0205) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
04E8: 71 10    OR    F,0x10             
                                        (0206) 	M8C_SetBank1
04EA: 62 18 00 MOV   REG[0x18],0x0      (0207) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
04ED: 62 19 00 MOV   REG[0x19],0x0      (0208) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
04F0: 70 EF    AND   F,0xEF             
                                        (0209) 	M8C_SetBank0
04F2: 62 1B 00 MOV   REG[0x1B],0x0      (0210) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
04F5: 62 1A 00 MOV   REG[0x1A],0x0      (0211) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
04F8: 71 10    OR    F,0x10             
                                        (0212) 	M8C_SetBank1
04FA: 62 1A 00 MOV   REG[0x1A],0x0      (0213) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
04FD: 62 1B 00 MOV   REG[0x1B],0x0      (0214) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0500: 70 EF    AND   F,0xEF             
                                        (0215) 	M8C_SetBank0
0502: 62 19 00 MOV   REG[0x19],0x0      (0216) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0505: 62 1C 00 MOV   REG[0x1C],0x0      (0217) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0508: 71 10    OR    F,0x10             
                                        (0218) 	M8C_SetBank1
050A: 62 1C 00 MOV   REG[0x1C],0x0      (0219) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
050D: 62 1D 00 MOV   REG[0x1D],0x0      (0220) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0510: 70 EF    AND   F,0xEF             
                                        (0221) 	M8C_SetBank0
0512: 62 1F 00 MOV   REG[0x1F],0x0      (0222) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0515: 62 1E 00 MOV   REG[0x1E],0x0      (0223) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0518: 71 10    OR    F,0x10             
                                        (0224) 	M8C_SetBank1
051A: 62 1E 00 MOV   REG[0x1E],0x0      (0225) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
051D: 62 1F 00 MOV   REG[0x1F],0x0      (0226) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0520: 70 EF    AND   F,0xEF             
                                        (0227) 	M8C_SetBank0
0522: 62 1D 00 MOV   REG[0x1D],0x0      (0228) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0525: 70 EF    AND   F,0xEF             
                                        (0229) 	M8C_SetBank0
0527: 7F       RET                      (0230) 	ret
                                        (0231) 
                                        (0232) 
                                        (0233) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_spi_sram
                                        (0026) export _LoadConfig_spi_sram
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
0528: 7C 05 2F LCALL 0x052F             (0058) 	lcall	LoadConfig_spi_sram
052B: 7C 04 23 LCALL 0x0423             (0059) 	lcall	LoadConfigTBL_spi_sram_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
052E: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration spi_sram
                                        (0067) ;
                                        (0068) ;    Load configuration registers for spi_sram.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_spi_sram:
                                        (0085)  LoadConfig_spi_sram:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
052F: 10       PUSH  X                  (0088) 	push	x
0530: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
0532: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0534: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0535: 50 03    MOV   A,0x3              (0093)     mov     A, >LoadConfigTBL_spi_sram_Bank0
0537: 57 79    MOV   X,0x79             (0094)     mov     X, <LoadConfigTBL_spi_sram_Bank0
0539: 7C 05 4A LCALL 0x054A             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
053C: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
053E: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
053F: 50 03    MOV   A,0x3              (0100)     mov     A, >LoadConfigTBL_spi_sram_Bank1
0541: 57 EA    MOV   X,0xEA             (0101)     mov     X, <LoadConfigTBL_spi_sram_Bank1
0543: 7C 05 4A LCALL 0x054A             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0546: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
0548: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
0549: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
054A: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
054C: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
054D: 08       PUSH  A                  (0132)     push    A
054E: 4F       MOV   X,SP               (0133)     mov     X, SP
054F: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0552: D0 04    JNC   0x0557             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0554: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
0557: 18       POP   A                  (0138)     pop     A
0558: 20       POP   X                  (0139)     pop     X
0559: 70 EF    AND   F,0xEF             
055B: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
055E: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
055F: 08       PUSH  A                  (0145)     push    A
0560: 28       ROMX                     (0146)     romx                            ; Load register address from table
0561: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
0563: A0 1F    JZ    0x0583             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
0565: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
0566: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
0569: A0 03    JZ    0x056D             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
056B: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
056D: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
056F: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
0570: 20       POP   X                  (0156)     pop     X
0571: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
0572: 09 00    ADC   A,0x0              (0158)     adc     A, 0
0574: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
0575: 08       PUSH  A                  (0160)     push    A
0576: 28       ROMX                     (0161)     romx                            ; load config data from the table
0577: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
0578: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
057A: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
057C: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
057D: 20       POP   X                  (0166)     pop     X
057E: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
057F: 09 00    ADC   A,0x0              (0168)     adc     A, 0
0581: 8F D7    JMP   0x0559             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
0583: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
0585: 70 3F    AND   F,0x3F             
0587: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
0589: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
058A: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
058B: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
058C: 43 DF 40 OR    REG[0xDF],0x40     (0002) ;;*****************************************************************************
058F: 43 DF 80 OR    REG[0xDF],0x80     
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0592: 7F       RET                      (0182)    ret
0593: 41 DF BF AND   REG[0xDF],0xBF     
0596: 41 DF 7F AND   REG[0xDF],0x7F     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0599: 7F       RET                      (0214)    ret
059A: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
059C: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
059E: A0 07    JZ    0x05A6             (0249)    jz    .SetModeRegEmpty
05A0: 43 58 10 OR    REG[0x58],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
05A3: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
05A5: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
05A6: 41 58 EF AND   REG[0x58],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
05A9: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
05AB: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
05AC: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
05AE: 60 5B    MOV   REG[0x5B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
05B0: 60 5F    MOV   REG[0x5F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
05B2: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
05B3: 41 5B FE AND   REG[0x5B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
05B6: 41 5F FE AND   REG[0x5F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
05B9: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
05BA: 60 59    MOV   REG[0x59],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
05BC: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
05BD: 5D 5B    MOV   A,REG[0x5B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
05BF: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
05C0: 5D 5E    MOV   A,REG[0x5E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
05C2: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
05C3: 5D 5F    MOV   A,REG[0x5F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
05C5: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
05C6: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
05C8: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
05CA: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
05CC: A0 06    JZ    0x05D3             (0492)    jz   .SetTxCmpMode
                                        (0493) 
05CE: 41 58 EF AND   REG[0x58],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
05D1: 80 04    JMP   0x05D6             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
05D3: 43 58 10 OR    REG[0x58],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
05D6: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
05D8: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
05D9: 08       PUSH  A                  (0536)    push A
05DA: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
05DC: A0 06    JZ    0x05E3             (0538)    jz   .DisRxInt
05DE: 43 DF 80 OR    REG[0xDF],0x80     
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
05E1: 80 04    JMP   0x05E6             (0541)    jmp  .CheckTxInt
05E3: 41 DF 7F AND   REG[0xDF],0x7F     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
05E6: 18       POP   A                  (0547)    pop  A
05E7: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
05E9: A0 06    JZ    0x05F0             (0549)    jz   .DisTxInt
05EB: 43 DF 40 OR    REG[0xDF],0x40     
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
05EE: 80 04    JMP   0x05F3             (0552)    jmp  .End_IntCntl
05F0: 41 DF BF AND   REG[0xDF],0xBF     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
05F3: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0604: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0605: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0606: 67       ASR   A                  (0603)    asr   A
0607: 67       ASR   A                  (0604)    asr   A
0608: 67       ASR   A                  (0605)    asr   A
0609: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
060B: FF E7    INDEX 0x05F4             (0607)    index UART_HEX_STR                  ; Get Hex value
060D: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
060F: 18       POP   A                  (0609)    pop   A                             ; Restore value
0610: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0612: FF E0    INDEX 0x05F4             (0611)    index UART_HEX_STR                  ; Get Hex value
0614: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0616: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0617: 4B       SWAP  A,X                (0645)    swap  A,X
0618: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
061A: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
061B: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
061D: 7F       RET                      (0650)    ret
061E: 49 5B 10 TST   REG[0x5B],0x10     
0621: AF FC    JZ    _UART_PutChar      
0623: 60 59    MOV   REG[0x59],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0625: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0626: 49 5F 08 TST   REG[0x5F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
0629: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
062B: 5D 5E    MOV   A,REG[0x5E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
062D: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
062E: 5D 5F    MOV   A,REG[0x5F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0630: 08       PUSH  A                  (0756)    push A
0631: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0633: B0 04    JNZ   0x0638             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0635: 18       POP   A                  (0759)    pop  A
0636: 80 0B    JMP   0x0642             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0638: 5D 5E    MOV   A,REG[0x5E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
063A: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
063B: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
063C: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
063E: B0 03    JNZ   0x0642             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0640: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0641: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0642: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0644: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0645: 5D 5F    MOV   A,REG[0x5F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0647: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0649: 08       PUSH  A                  (0819)    push A
064A: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
064C: B0 07    JNZ   0x0654             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
064E: 18       POP   A                  (0822)    pop  A
064F: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0651: 4B       SWAP  A,X                (0824)    swap A,X
0652: 80 07    JMP   0x065A             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0654: 18       POP   A                  (0828)    pop  A
0655: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0657: 4B       SWAP  A,X                (0830)    swap A,X
0658: 5D 5E    MOV   A,REG[0x5E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
065A: 7F       RET                      (0836)    ret
065B: 70 BF    AND   F,0xBF             
065D: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
065F: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0661: A0 06    JZ    0x0668             (0872)    jz    End_PutString                           ; Check for end of string
0663: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0665: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0666: 8F F8    JMP   0x065F             (0875)    jmp   .PutStringLoop                          ; Get next character
0668: 70 3F    AND   F,0x3F             
066A: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
066C: 7F       RET                      (0879)    ret
066D: 70 BF    AND   F,0xBF             
066F: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0672: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0673: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0675: A0 1A    JZ    0x0690             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0677: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
0679: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
067B: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
067D: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
067F: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0681: 49 5B 10 TST   REG[0x5B],0x10     
0684: AF FC    JZ    0x0681             
0686: 60 59    MOV   REG[0x59],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0688: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
0689: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
068C: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
068E: 8F E4    JMP   0x0673             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
0690: 70 3F    AND   F,0x3F             
0692: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0694: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0695: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0696: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
0699: B0 06    JNZ   0x06A0             (0980)    jnz   .CW_WRITEIT
069B: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
069E: A0 1D    JZ    0x06BC             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
06A0: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
06A1: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
06A3: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
06A5: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
06A6: 49 5B 10 TST   REG[0x5B],0x10     
06A9: AF FC    JZ    0x06A6             
06AB: 60 59    MOV   REG[0x59],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
06AD: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
06AE: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
06B1: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
06B4: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
06B7: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
06BA: 8F DB    JMP   0x0696             (0995)    jmp   .CW_Loop
06BC: 70 3F    AND   F,0x3F             
06BE: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
06C0: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
06C1: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
06C2: 10       PUSH  X                  (1030)    push  X
06C3: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
06C4: A0 0B    JZ    0x06D0             (1032)    jz    .End_CPutString
06C6: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
06C8: 20       POP   X                  (1034)    pop   X
06C9: 18       POP   A                  (1035)    pop   A
06CA: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
06CB: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
06CD: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
06CE: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
06D0: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
06D2: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
06D3: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
06D5: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
06D7: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
06D9: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
06DB: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\spimint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIMINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;    Interrupt handler routine for SPIM user module instance: SPIM.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "SPIM.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) export  _SPIM_ISR
                                        (0023) 
                                        (0024) 
                                        (0025) AREA InterruptRAM (RAM,REL,CON)
                                        (0026) 
                                        (0027) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0028) ;---------------------------------------------------
                                        (0029) ; Insert your custom declarations below this banner
                                        (0030) ;---------------------------------------------------
                                        (0031) 
                                        (0032) ;------------------------
                                        (0033) ; Includes
                                        (0034) ;------------------------
                                        (0035) 
                                        (0036) 	
                                        (0037) ;------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;------------------------
                                        (0040) 
                                        (0041) 
                                        (0042) ;------------------------
                                        (0043) ; Variable Allocation
                                        (0044) ;------------------------
                                        (0045) 
                                        (0046) 
                                        (0047) ;---------------------------------------------------
                                        (0048) ; Insert your custom declarations above this banner
                                        (0049) ;---------------------------------------------------
                                        (0050) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0051) 
                                        (0052) 
                                        (0053) AREA UserModules (ROM, REL)
                                        (0054) 
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;  FUNCTION NAME: _SPIM_ISR
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0059) ;
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;
                                        (0062) 
                                        (0063) _SPIM_ISR:
                                        (0064) 
                                        (0065)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0066)    ;---------------------------------------------------
                                        (0067)    ; Insert your custom assembly code below this banner
                                        (0068)    ;---------------------------------------------------
                                        (0069)    ;   NOTE: interrupt service routines must preserve
                                        (0070)    ;   the values of the A and X CPU registers.
                                        (0071)    
                                        (0072)    ;---------------------------------------------------
                                        (0073)    ; Insert your custom assembly code above this banner
                                        (0074)    ;---------------------------------------------------
                                        (0075)    
                                        (0076)    ;---------------------------------------------------
                                        (0077)    ; Insert a lcall to a C function below this banner
                                        (0078)    ; and un-comment the lines between these banners
                                        (0079)    ;---------------------------------------------------
                                        (0080)    
                                        (0081)    ;PRESERVE_CPU_CONTEXT
                                        (0082)    ;lcall _My_C_Function
                                        (0083)    ;RESTORE_CPU_CONTEXT
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
06DC: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file SPIMINT.asm
FILE: lib\spim.asm                      (0001) ;;*****************************************************************************
06DD: 43 DF 08 OR    REG[0xDF],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SPIM User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SPIM.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   SPIM_EnableInt
                                        (0030) export  _SPIM_EnableInt
                                        (0031) export   SPIM_DisableInt
                                        (0032) export  _SPIM_DisableInt
                                        (0033) export   SPIM_Start
                                        (0034) export  _SPIM_Start
                                        (0035) export   SPIM_Stop
                                        (0036) export  _SPIM_Stop
                                        (0037) export   SPIM_SendTxData
                                        (0038) export  _SPIM_SendTxData
                                        (0039) export   SPIM_bReadRxData
                                        (0040) export  _SPIM_bReadRxData
                                        (0041) export   SPIM_bReadStatus
                                        (0042) export  _SPIM_bReadStatus
                                        (0043) 
                                        (0044) // These globals will be removed in a future release
                                        (0045) // Do not use
                                        (0046) export   bSPIM_ReadRxData
                                        (0047) export  _bSPIM_ReadRxData
                                        (0048) export   bSPIM_ReadStatus
                                        (0049) export  _bSPIM_ReadStatus
                                        (0050) 
                                        (0051) ;-----------------------------------------------
                                        (0052) ;  Constant Definitions
                                        (0053) ;-----------------------------------------------
                                        (0054) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0055) 
                                        (0056) 
                                        (0057) area UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: SPIM_EnableInt
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Enables the SPIM interrupt by setting the interrupt enable mask
                                        (0065) ;     bit associated with this User Module.
                                        (0066) ;
                                        (0067) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0068) ;           M8C global macro: M8C_EnableGInt
                                        (0069) ;
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:  none
                                        (0073) ;
                                        (0074) ;  RETURNS:  none
                                        (0075) ;
                                        (0076) ;  SIDE EFFECTS: 
                                        (0077) ;    The A and X registers may be modified by this or future implementations
                                        (0078) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0079) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0080) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0081) ;    functions.
                                        (0082) ;
                                        (0083) ;  THEORY of OPERATION or PROCEDURE:
                                        (0084) ;     Sets the specific user module interrupt enable mask bit.
                                        (0085) ;
                                        (0086)  SPIM_EnableInt:
                                        (0087) _SPIM_EnableInt:
                                        (0088)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0089)    M8C_EnableIntMask SPIM_INT_REG, SPIM_bINT_MASK
                                        (0090)    RAM_EPILOGUE RAM_USE_CLASS_1
06E0: 7F       RET                      (0091)    ret
06E1: 41 DF F7 AND   REG[0xDF],0xF7     
                                        (0092) 
                                        (0093) .ENDSECTION
                                        (0094) 
                                        (0095) .SECTION
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;  FUNCTION NAME: SPIM_DisableInt
                                        (0098) ;
                                        (0099) ;  DESCRIPTION:
                                        (0100) ;     Disables this SPIM's interrupt by clearing the interrupt enable mask bit
                                        (0101) ;     associated with this User Module.
                                        (0102) ;
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;
                                        (0105) ;  ARGUMENTS:  none
                                        (0106) ;
                                        (0107) ;  RETURNS:  none
                                        (0108) ;
                                        (0109) ;  SIDE EFFECTS: 
                                        (0110) ;    The A and X registers may be modified by this or future implementations
                                        (0111) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0112) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0113) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0114) ;    functions.
                                        (0115) ;
                                        (0116) ;  THEORY of OPERATION or PROCEDURE:
                                        (0117) ;     Clears the specific user module interrupt enable mask bit.
                                        (0118) ;
                                        (0119)  SPIM_DisableInt:
                                        (0120) _SPIM_DisableInt:
                                        (0121)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0122)    M8C_DisableIntMask SPIM_INT_REG, SPIM_bINT_MASK
                                        (0123)    RAM_EPILOGUE RAM_USE_CLASS_1
06E4: 7F       RET                      (0124)    ret
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: SPIM_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit, SPI mode, and LSB/MSB first configuration of the SPIM
                                        (0134) ;     user module.
                                        (0135) ;
                                        (0136) ;     Transmission will begin transmitting when a byte is written into the TX buffer
                                        (0137) ;     using the SPIM_SendTxData function.
                                        (0138) ;
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140) ;
                                        (0141) ;  ARGUMENTS:
                                        (0142) ;     BYTE bConfiguration - Consists of SPI Mode and LSB/MSB first bit.
                                        (0143) ;           Use defined masks - masks can be OR'd together.
                                        (0144) ;     PASSED in Accumulator.
                                        (0145) ;
                                        (0146) ;  RETURNS:  none
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS: 
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155) ;  THEORY of OPERATION or PROCEDURE:
                                        (0156) ;     1) Set all Slave Select outputs high
                                        (0157) ;     2) Set the specified SPI configuration bits in the Control register.
                                        (0158) ;
                                        (0159)  SPIM_Start:
                                        (0160) _SPIM_Start:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    ; setup the SPIM configuration setting
06E5: 29 01    OR    A,0x1              (0163)    or    A, bfCONTROL_REG_START_BIT
06E7: 60 4F    MOV   REG[0x4F],A        (0164)    mov   REG[SPIM_CONTROL_REG], A
                                        (0165)    RAM_EPILOGUE RAM_USE_CLASS_1
06E9: 7F       RET                      (0166)    ret
                                        (0167) 
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: SPIM_Stop
                                        (0173) ;
                                        (0174) ;  DESCRIPTION:
                                        (0175) ;     Disables SPIM operation.
                                        (0176) ;
                                        (0177) ;-----------------------------------------------------------------------------
                                        (0178) ;
                                        (0179) ;  ARGUMENTS:  none
                                        (0180) ;
                                        (0181) ;  RETURNS:  none
                                        (0182) ;
                                        (0183) ;  SIDE EFFECTS: 
                                        (0184) ;    The A and X registers may be modified by this or future implementations
                                        (0185) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0186) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0187) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0188) ;    functions.
                                        (0189) ;
                                        (0190) ;  THEORY of OPERATION or PROCEDURE:
                                        (0191) ;     Clear the start bit in the Control register.
                                        (0192) ;
                                        (0193)  SPIM_Stop:
                                        (0194) _SPIM_Stop:
                                        (0195)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0196)    ; clear the SPIM stop bits
06EA: 41 4F FE AND   REG[0x4F],0xFE     (0197)    and   REG[SPIM_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_1
06ED: 7F       RET                      (0199)    ret
                                        (0200) 
                                        (0201) .ENDSECTION
                                        (0202) 
                                        (0203) .SECTION
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: SPIM_SendTxData
                                        (0206) ;
                                        (0207) ;  DESCRIPTION:
                                        (0208) ;     Initiates an SPI data transfer.
                                        (0209) ;
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:
                                        (0213) ;     BYTE  bTxData - data to transmit.
                                        (0214) ;        Passed in Accumulator.
                                        (0215) ;
                                        (0216) ;  RETURNS:  none
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS: 
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;
                                        (0225) ;  THEORY of OPERATION or PROCEDURE:
                                        (0226) ;     Writes data to the TX buffer register.
                                        (0227) ;
                                        (0228)  SPIM_SendTxData:
                                        (0229) _SPIM_SendTxData:
                                        (0230)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231)    ; Transmit the data!
06EE: 60 4D    MOV   REG[0x4D],A        (0232)    mov REG[SPIM_TX_BUFFER_REG], A
                                        (0233)    RAM_EPILOGUE RAM_USE_CLASS_1
06F0: 7F       RET                      (0234)    ret
                                        (0235) 
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: SPIM_bReadRxData
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0244) ;     sure data is valid.
                                        (0245) ;
                                        (0246) ;-----------------------------------------------------------------------------
                                        (0247) ;
                                        (0248) ;  ARGUMENTS:  none
                                        (0249) ;
                                        (0250) ;  RETURNS:
                                        (0251) ;     bRxData - returned in A.
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS: 
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260) ;  THEORY of OPERATION or PROCEDURE:
                                        (0261) ;
                                        (0262)  SPIM_bReadRxData:
                                        (0263) _SPIM_bReadRxData:
                                        (0264)  bSPIM_ReadRxData:
                                        (0265) _bSPIM_ReadRxData:
                                        (0266)    RAM_PROLOGUE RAM_USE_CLASS_1
06F1: 5D 4E    MOV   A,REG[0x4E]        (0267)    mov A, REG[SPIM_RX_BUFFER_REG]
                                        (0268)    RAM_EPILOGUE RAM_USE_CLASS_1   
06F3: 7F       RET                      (0269)    ret
                                        (0270) 
                                        (0271) 
                                        (0272) .ENDSECTION
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME: SPIM_ReadStatus
                                        (0277) ;
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;     Reads the SPIM Status bits in the Control/Status register.
                                        (0280) ;
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;
                                        (0283) ;  ARGUMENTS:  none
                                        (0284) ;
                                        (0285) ;  RETURNS:
                                        (0286) ;     BYTE  bStatus - transmit status data.  Use the defined bit masks.
                                        (0287) ;        Returned in Accumulator.
                                        (0288) ;
                                        (0289) ;  SIDE EFFECTS: 
                                        (0290) ;    The A and X registers may be modified by this or future implementations
                                        (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0294) ;    functions.
                                        (0295) ;
                                        (0296) ;  THEORY of OPERATION or PROCEDURE:
                                        (0297) ;     Read the status and control register.
                                        (0298) ;
                                        (0299)  SPIM_bReadStatus:
                                        (0300) _SPIM_bReadStatus:
                                        (0301)  bSPIM_ReadStatus:
                                        (0302) _bSPIM_ReadStatus:
                                        (0303)    RAM_PROLOGUE RAM_USE_CLASS_1
06F4: 5D 4F    MOV   A,REG[0x4F]        (0304)    mov A,  REG[SPIM_CONTROL_REG]
                                        (0305)    RAM_EPILOGUE RAM_USE_CLASS_1   
06F6: 7F       RET                      (0306)    ret
                                        (0307) 
                                        (0308) .ENDSECTION
                                        (0309) 
                                        (0310) ; End of File SPIM.asm
FILE: lib\sleeptimerint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimerINT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2015/3/4 at 22:26:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_fTick
                                        (0024) export _SleepTimer_fTick
                                        (0025) export  SleepTimer_bTimerValue
                                        (0026) export _SleepTimer_bTimerValue
                                        (0027) export  SleepTimer_bCountDown
                                        (0028) export _SleepTimer_bCountDown
                                        (0029) export  SleepTimer_TickCount
                                        (0030) export _SleepTimer_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_fTick:
                                        (0038) _SleepTimer_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_bTimerValue:
                                        (0041) _SleepTimer_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_bCountDown:
                                        (0044) _SleepTimer_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_TickCount:
                                        (0047) _SleepTimer_TickCount:    BLK  SleepTimer_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _SleepTimer_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;      interrupt handler for instance SleepTimer.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _SleepTimer_ISR:
                                        (0090) 
06F7: 2E 00 01 OR    [0x0],0x1          (0091)    or   [SleepTimer_fTick],0x01           ; Set tick flag
                                        (0092)  
                                        (0093)                                                 ; Decrement CountDown (Sync counter)
06FA: 47 02 FF TST   [0x2],0xFF         (0094)    tst  [SleepTimer_bCountDown],0xFF
06FD: A0 03    JZ    0x0701             (0095)    jz   .DoTimer
06FF: 7A 02    DEC   [0x2]              (0096)    dec  [SleepTimer_bCountDown]
                                        (0097) 
                                        (0098) .DoTimer:                                       ; Decrement TimerValue, if required
0701: 47 01 FF TST   [0x1],0xFF         (0099)    tst  [SleepTimer_bTimerValue],0xFF
0704: A0 03    JZ    0x0708             (0100)    jz   .IncBigCounter
0706: 7A 01    DEC   [0x1]              (0101)    dec  [SleepTimer_bTimerValue]
                                        (0102) 
                                        (0103) .IncBigCounter:                                 ; Increment big tick counter
                                        (0104) IF (SleepTimer_TICK_CNTR_SIZE & 0x04)
                                        (0105)    inc  [SleepTimer_TickCount+3]
                                        (0106)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0107) 
                                        (0108)    inc  [SleepTimer_TickCount+2]
                                        (0109)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0110) ENDIF
                                        (0111) 
                                        (0112) IF (SleepTimer_TICK_CNTR_SIZE & (0x04|0x02))
                                        (0113)    inc  [SleepTimer_TickCount+1]
                                        (0114)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0115) ENDIF
                                        (0116) 
0708: 76 03    INC   [0x3]              (0117)    inc  [SleepTimer_TickCount+0]
                                        (0118) 
                                        (0119) SleepTimer_SLEEP_ISR_END:
                                        (0120) 
                                        (0121)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code below this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    ;   NOTE: interrupt service routines must preserve
                                        (0126)    ;   the values of the A and X CPU registers.
                                        (0127)    
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ; Insert your custom assembly code above this banner
                                        (0130)    ;---------------------------------------------------
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert a lcall to a C function below this banner
                                        (0134)    ; and un-comment the lines between these banners
                                        (0135)    ;---------------------------------------------------
                                        (0136)    
                                        (0137)    ;PRESERVE_CPU_CONTEXT
                                        (0138)    ;lcall _My_C_Function
                                        (0139)    ;RESTORE_CPU_CONTEXT
                                        (0140)    
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert a lcall to a C function above this banner
                                        (0143)    ; and un-comment the lines between these banners
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0146) 
070A: 7E       RETI                     (0147)    reti
                                        (0148) 
                                        (0149) ; end of file SleepTimerINT.asm
                                        (0150) 
FILE: lib\sleeptimer.asm                (0001) ;;*****************************************************************************
070B: 43 E0 40 OR    REG[0xE0],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   SleepTimer.asm
                                        (0004) ;;  Version: 1.0, Updated on 2015/3/4 at 22:26:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer User Module software implementation file for the
                                        (0008) ;;                22/24/27/29xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "SleepTimer.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name reference for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  SleepTimer_EnableInt
                                        (0041) export _SleepTimer_EnableInt
                                        (0042) export  SleepTimer_DisableInt
                                        (0043) export _SleepTimer_DisableInt
                                        (0044) 
                                        (0045) export  SleepTimer_Start
                                        (0046) export _SleepTimer_Start
                                        (0047) export  SleepTimer_Stop
                                        (0048) export _SleepTimer_Stop
                                        (0049) 
                                        (0050) export  SleepTimer_TickWait
                                        (0051) export _SleepTimer_TickWait
                                        (0052) 
                                        (0053) export  SleepTimer_SyncWait
                                        (0054) export _SleepTimer_SyncWait
                                        (0055) 
                                        (0056) export  SleepTimer_SetInterval
                                        (0057) export _SleepTimer_SetInterval
                                        (0058) 	
                                        (0059) export  SleepTimer_bGetTickCntr
                                        (0060) export _SleepTimer_bGetTickCntr
                                        (0061) 
                                        (0062) export  SleepTimer_SetTimer
                                        (0063) export _SleepTimer_SetTimer
                                        (0064) 
                                        (0065) export  SleepTimer_bGetTimer
                                        (0066) export _SleepTimer_bGetTimer
                                        (0067) 
                                        (0068) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0069) export  SleepTimer_iGetTickCntr
                                        (0070) export _SleepTimer_iGetTickCntr
                                        (0071) ENDIF
                                        (0072) 
                                        (0073) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0074) export  SleepTimer_lGetTickCntr
                                        (0075) export _SleepTimer_lGetTickCntr
                                        (0076) ENDIF
                                        (0077) 
                                        (0078) 
                                        (0079) area text (ROM,REL)
                                        (0080) 
                                        (0081) ;-----------------------------------------------
                                        (0082) ;  EQUATES
                                        (0083) ;-----------------------------------------------
                                        (0084) 
                                        (0085) ; Counter LSB Offset if 4 byte tick counter
                                        (0086) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0087) ST_LSB_OFFSET:   equ  3
                                        (0088) ENDIF
                                        (0089) 
                                        (0090) ; Counter LSB Offset if 2 byte tick counter
                                        (0091) IF(SleepTimer_TICK_CNTR_SIZE & 2)
                                        (0092) ST_LSB_OFFSET:   equ  1
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ; Counter LSB Offset if 1 byte tick counter
                                        (0096) IF(SleepTimer_TICK_CNTR_SIZE & 1)
                                        (0097) ST_LSB_OFFSET:   equ  0
                                        (0098) ENDIF
                                        (0099) 
                                        (0100) 
                                        (0101) area UserModules (ROM, REL, CON)
                                        (0102) 
                                        (0103) ;=============================================================================
                                        (0104) ;=============================================================================
                                        (0105) ;
                                        (0106) ;     Low-Level Commands
                                        (0107) ;
                                        (0108) ;=============================================================================
                                        (0109) ;=============================================================================
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: SleepTimer_EnableInt
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Enables SleepTimer interrupts.
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;
                                        (0119) ;  ARGUMENTS:
                                        (0120) ;     none.
                                        (0121) ;
                                        (0122) ;  RETURNS:
                                        (0123) ;     none.
                                        (0124) ;
                                        (0125) ;  SIDE EFFECTS:
                                        (0126) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0127) ;
                                        (0128) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0129) ;
                                        (0130)  SleepTimer_EnableInt:
                                        (0131) _SleepTimer_EnableInt:
                                        (0132)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0133)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0134)    RAM_EPILOGUE RAM_USE_CLASS_1
070E: 7F       RET                      (0135)    ret
070F: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0136) .ENDSECTION
                                        (0137) 
                                        (0138)     
                                        (0139) .SECTION
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;  FUNCTION NAME: SleepTimer_DisableInt
                                        (0142) ;
                                        (0143) ;  DESCRIPTION:
                                        (0144) ;     Disables the sleep timer. 
                                        (0145) ;
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     none.
                                        (0150) ;
                                        (0151) ;  RETURNS:
                                        (0152) ;     none.
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0156) ;
                                        (0157) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0158) ;
                                        (0159)  SleepTimer_DisableInt:
                                        (0160) _SleepTimer_DisableInt:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
0712: 7F       RET                      (0164)    ret
0713: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0165) .ENDSECTION
                                        (0166) 
                                        (0167) 
                                        (0168) .SECTION
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;  FUNCTION NAME: SleepTimer_Start()
                                        (0171) ;
                                        (0172) ;  DESCRIPTION:
                                        (0173) ;     Clears all the variables.  
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS:
                                        (0177) ;      none
                                        (0178) ;
                                        (0179) ;  RETURNS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  SIDE EFFECTS;    
                                        (0183) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0184) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0185) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0186) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0187) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0188) ;          
                                        (0189) ;    Page Pointer Registers Modified: 
                                        (0190) ;          CUR_PP
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0193) ;
                                        (0194)  SleepTimer_Start:
                                        (0195) _SleepTimer_Start:
                                        (0196)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0197)    RAM_SETPAGE_CUR >SleepTimer_fTick      
0716: 50 00    MOV   A,0x0              (0198)    mov  A,0
0718: 53 00    MOV   [0x0],A            (0199)    mov  [SleepTimer_fTick],A
071A: 53 01    MOV   [0x1],A            (0200)    mov  [SleepTimer_bTimerValue],A
071C: 53 02    MOV   [0x2],A            (0201)    mov  [SleepTimer_bCountDown],A
071E: 53 03    MOV   [0x3],A            (0202)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET],A        ; Clear TickCount[0:7]
                                        (0203) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0204)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET - 1],A    ; Clear TickCount[8:15]
                                        (0205) ENDIF
                                        (0206) 
                                        (0207) 
                                        (0208) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0209)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 2],A    ; Clear TickCount[16:31]
                                        (0210)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 3],A    
                                        (0211) ENDIF
                                        (0212) 
                                        (0213) 
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_4
0720: 7F       RET                      (0215)    ret
                                        (0216) .ENDSECTION
                                        (0217) 
                                        (0218) 
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: SleepTimer_Stop
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:
                                        (0224) ;   This function does nothing at this time.  It is only here as a place 
                                        (0225) ;   holder.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;     none.
                                        (0230) ;
                                        (0231) ;  RETURNS:
                                        (0232) ;     none.
                                        (0233) ;
                                        (0234) ;  SIDE EFFECTS:
                                        (0235) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0236) ;
                                        (0237) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0238) ;
                                        (0239)  SleepTimer_Stop:
                                        (0240) _SleepTimer_Stop:
                                        (0241)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_1
0721: 7F       RET                      (0243)    ret
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: SleepTimer_SetInterval
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Sets sleep timer interval
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;     A <= Timer setting
                                        (0257) ;
                                        (0258) ;  RETURNS:
                                        (0259) ;     none.
                                        (0260) ;
                                        (0261) ;  SIDE EFFECTS:
                                        (0262) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0263) ;
                                        (0264) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0265) ;
                                        (0266)  SleepTimer_SetInterval:
                                        (0267) _SleepTimer_SetInterval:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
0722: 21 18    AND   A,0x18             (0269)    and  A,SleepTimer_CLOCK_MASK               ; Mask off invalid data
0724: 4F       MOV   X,SP               (0270)    mov  X, SP
0725: 08       PUSH  A                  (0271)    push A
0726: 71 10    OR    F,0x10             
                                        (0272)    M8C_SetBank1
0728: 5D E0    MOV   A,REG[0xE0]        (0273)    mov  A, reg[OSC_CR0]                  ; Get current timer value
072A: 21 E7    AND   A,0xE7             (0274)    and  A,~SleepTimer_CLOCK_MASK   ; Zero out old timer value
072C: 2B 00    OR    A,[X+0]            (0275)    or   A, [X]                           ; Set new timer values
072E: 60 E0    MOV   REG[0xE0],A        (0276)    mov  reg[OSC_CR0],A                   ; Write it
0730: 70 EF    AND   F,0xEF             
                                        (0277)    M8C_SetBank0
0732: 18       POP   A                  (0278)    pop  A
0733: 70 3F    AND   F,0x3F             
0735: 71 C0    OR    F,0xC0             
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_2
0737: 7F       RET                      (0280)    ret
0738: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0281) .ENDSECTION
                                        (0282) 
                                        (0283) 
                                        (0284) .SECTION
                                        (0285) ;-----------------------------------------------------------------------------
                                        (0286) ;  FUNCTION NAME: SleepTimer_TickWait(BYTE bTicks)
                                        (0287) ;
                                        (0288) ;  DESCRIPTION:
                                        (0289) ;     Wait X Ticks and return
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292) ;
                                        (0293) ;  ARGUMENTS:
                                        (0294) ;     A <= Count down time
                                        (0295) ;
                                        (0296) ;  RETURNS:
                                        (0297) ;     none.
                                        (0298) ;
                                        (0299) ;  SIDE EFFECTS;    
                                        (0300) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0301) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0302) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0303) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0304) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0305) ;          
                                        (0306) ;    Page Pointer Registers Modified: 
                                        (0307) ;          CUR_PP
                                        (0308) ;
                                        (0309) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0310) ;
                                        (0311)  SleepTimer_TickWait:
                                        (0312) _SleepTimer_TickWait:
                                        (0313)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0314)    RAM_SETPAGE_CUR >SleepTimer_fTick      
073B: 55 00 00 MOV   [0x0],0x0          (0315)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
                                        (0316) 
                                        (0317) .WaitTick:
073E: 47 00 FF TST   [0x0],0xFF         (0318)    tst   [SleepTimer_fTick],0xFF          ; Check for tick 
0741: AF FC    JZ    0x073E             (0319)    jz    .WaitTick
0743: 55 00 00 MOV   [0x0],0x0          (0320)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
0746: 78       DEC   A                  (0321)    dec   A                                      ; Dec the timer variable
0747: BF F6    JNZ   0x073E             (0322)    jnz   .WaitTick                              ; Loop until we count down to zero
                                        (0323) 
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
0749: 7F       RET                      (0325)    ret
074A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0326) .ENDSECTION
                                        (0327) 
                                        (0328) 
                                        (0329) .SECTION
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  FUNCTION NAME: SleepTimer_SyncWait(BYTE bCounts, BYTE fMode)
                                        (0332) ;
                                        (0333) ;  DESCRIPTION:
                                        (0334) ;     This function resets the SyncWait timer.  If fMode = 0, the timer
                                        (0335) ;     is set to the new value then exits the function immediatly.  If fMode
                                        (0336) ;     is set to 1, the firmware waits for the timer to expire before the
                                        (0337) ;     timer is reset and and exits.
                                        (0338) ;
                                        (0339) ;-----------------------------------------------------------------------------
                                        (0340) ;
                                        (0341) ;  ARGUMENTS:
                                        (0342) ;     A <= tCounts to wait
                                        (0343) ;     X <= fMode    fMode = 0  Just reload the value, do not wait
                                        (0344) ;                   fMode = 1  Wait for last value to count down to zero
                                        (0345) ;                              then reload.
                                        (0346) ;
                                        (0347) ;  RETURNS:
                                        (0348) ;     none.
                                        (0349) ;
                                        (0350) ;  SIDE EFFECTS;    
                                        (0351) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0353) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0354) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0355) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0356) ;          
                                        (0357) ;    Page Pointer Registers Modified: 
                                        (0358) ;          CUR_PP
                                        (0359) ;
                                        (0360) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0361) ;
                                        (0362)  SleepTimer_SyncWait:
                                        (0363) _SleepTimer_SyncWait:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >SleepTimer_bCountDown
074D: 4B       SWAP  A,X                (0366)    swap  A,X
074E: 21 01    AND   A,0x1              (0367)    AND   A,SleepTimer_FORCE_RELOAD
0750: B0 06    JNZ   0x0757             (0368)    jnz   .ReloadIt
                                        (0369) 
                                        (0370) .WaitLoop:
0752: 47 02 FF TST   [0x2],0xFF         (0371)    tst   [SleepTimer_bCountDown],0xFF
0755: BF FC    JNZ   0x0752             (0372)    jnz   .WaitLoop
                                        (0373) 
                                        (0374) 
                                        (0375) .ReloadIt:
0757: 4B       SWAP  A,X                (0376)    swap  A,X
0758: 53 02    MOV   [0x2],A            (0377)    mov   [SleepTimer_bCountDown],A 
                                        (0378) 
                                        (0379)    RAM_EPILOGUE RAM_USE_CLASS_4
075A: 7F       RET                      (0380)    ret
075B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) 
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: SleepTimer_bGetTickCntr
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:
                                        (0390) ;     Returns the LSB of the tick Counter
                                        (0391) ;
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;
                                        (0394) ;  ARGUMENTS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     LSB of lTickCount
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS;    
                                        (0401) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0402) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0403) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0404) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0405) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0406) ;          
                                        (0407) ;    Page Pointer Registers Modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0411) ;
                                        (0412)  SleepTimer_bGetTickCntr:
                                        (0413) _SleepTimer_bGetTickCntr:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0415)    RAM_SETPAGE_CUR >SleepTimer_TickCount
075E: 51 03    MOV   A,[0x3]            (0416)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
0760: 7F       RET                      (0418)    ret
0761: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: SleepTimer_SetTimer
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;     Set timer with parameter in A
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     A => Value used to set Timer value
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;     None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS;    
                                        (0437) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0438) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0439) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0440) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0441) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0442) ;          
                                        (0443) ;    Page Pointer Registers Modified: 
                                        (0444) ;          CUR_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0447) ;
                                        (0448)  SleepTimer_SetTimer:
                                        (0449) _SleepTimer_SetTimer:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0451)    RAM_SETPAGE_CUR >SleepTimer_TickCount
0764: 53 01    MOV   [0x1],A            (0452)    mov   [SleepTimer_bTimerValue],A
                                        (0453)    RAM_EPILOGUE RAM_USE_CLASS_4
0766: 7F       RET                      (0454)    ret
0767: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: SleepTimer_bGetTimer
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Returns timer value in A
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS:
                                        (0467) ;     None
                                        (0468) ;
                                        (0469) ;  RETURNS:
                                        (0470) ;     Return timer value in A
                                        (0471) ;
                                        (0472) ;  SIDE EFFECTS;    
                                        (0473) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0474) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0475) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0476) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0477) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0478) ;          
                                        (0479) ;    Page Pointer Registers Modified: 
                                        (0480) ;          CUR_PP
                                        (0481) ;
                                        (0482) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0483) ;
                                        (0484)  SleepTimer_bGetTimer:
                                        (0485) _SleepTimer_bGetTimer:
                                        (0486)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0487)    RAM_SETPAGE_CUR >SleepTimer_TickCount
076A: 51 01    MOV   A,[0x1]            (0488)    mov   A,[SleepTimer_bTimerValue]
                                        (0489)    RAM_EPILOGUE RAM_USE_CLASS_4
076C: 7F       RET                      (0490)    ret
                                        (0491) .ENDSECTION
                                        (0492) 
                                        (0493) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0494) .SECTION
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;  FUNCTION NAME: SleepTimer_iGetTickCntr
                                        (0497) ;
                                        (0498) ;  DESCRIPTION:
                                        (0499) ;     Returns the least significant 16 bits.
                                        (0500) ;
                                        (0501) ;-----------------------------------------------------------------------------
                                        (0502) ;
                                        (0503) ;  ARGUMENTS:
                                        (0504) ;     none
                                        (0505) ;
                                        (0506) ;  RETURNS:
                                        (0507) ;     (int)TickCount in A and X  
                                        (0508) ;     X  <= MSB
                                        (0509) ;     A  <= LSB
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS;    
                                        (0512) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0513) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0514) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0515) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0516) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0517) ;          
                                        (0518) ;    Page Pointer Registers Modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0522) ;
                                        (0523)  SleepTimer_iGetTickCntr:
                                        (0524) _SleepTimer_iGetTickCntr:
                                        (0525)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0526)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0527)    ; Disable interrupt here
                                        (0528)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0529)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]    ; Place LSB in A
                                        (0530)    mov   X,[SleepTimer_TickCount + ST_LSB_OFFSET - 1]    ; Place MSB in X
                                        (0531)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0532)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0533)    ret
                                        (0534) .ENDSECTION
                                        (0535) ENDIF
                                        (0536) 
                                        (0537) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0538) .SECTION
                                        (0539) ;-----------------------------------------------------------------------------
                                        (0540) ;  FUNCTION NAME: SleepTimer_lGetTickCntr
                                        (0541) ;
                                        (0542) ;  DESCRIPTION:
                                        (0543) ;     Returns a pointer to TickCount
                                        (0544) ;
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;
                                        (0547) ;  ARGUMENTS:
                                        (0548) ;     [A:X] => Pointer to 32 bit tick counter (X=LSB, A=MSB)
                                        (0549) ;
                                        (0550) ;  RETURNS:
                                        (0551) ;     Pointer to lTickCount
                                        (0552) ;
                                        (0553) ;  SIDE EFFECTS;    
                                        (0554) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0555) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0556) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0557) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0558) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0559) ;          
                                        (0560) ;    Page Pointer Registers Modified: 
                                        (0561) ;          CUR_PP
                                        (0562) ;
                                        (0563) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0564) ;
                                        (0565)  SleepTimer_lGetTickCntr:
                                        (0566) _SleepTimer_lGetTickCntr:
                                        (0567)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0568)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0569)    ; Disable interrupt here
                                        (0570)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0571)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0572)    RAM_SETPAGE_IDX A
                                        (0573)    push  A
                                        (0574)    mov   A,[SleepTimer_TickCount + 0]
                                        (0575)    mov   [X + 0],A
                                        (0576)    mov   A,[SleepTimer_TickCount + 1]
                                        (0577)    mov   [X + 1],A
                                        (0578)    mov   A,[SleepTimer_TickCount + 2]
                                        (0579)    mov   [X + 2],A
                                        (0580)    mov   A,[SleepTimer_TickCount + 3]
                                        (0581)    mov   [X + 3],A
                                        (0582)    pop   A
                                        (0583)    
                                        (0584)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0585)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0587)    ret
                                        (0588) .ENDSECTION
                                        (0589) ENDIF
                                        (0590) 
                                        (0591) 
                                        (0592) 
                                        (0593) 
                                        (0594) ; End of File SleepTimer.asm
FILE: lib\dac8.asm                      (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DAC8.asm
                                        (0004) ;;   Version: 2.2, Updated on 2015/3/4 at 22:25:12
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DAC8 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "DAC8.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  DAC8_Start
                                        (0030) export _DAC8_Start
                                        (0031) export  DAC8_SetPower
                                        (0032) export _DAC8_SetPower
                                        (0033) 
                                        (0034) export  DAC8_WriteBlind
                                        (0035) export _DAC8_WriteBlind
                                        (0036) export  DAC8_WriteBlind2B
                                        (0037) export _DAC8_WriteBlind2B
                                        (0038) 
                                        (0039) export  DAC8_WriteStall
                                        (0040) export _DAC8_WriteStall
                                        (0041) export  DAC8_WriteStall2B
                                        (0042) export _DAC8_WriteStall2B
                                        (0043) 
                                        (0044) export  DAC8_Stop
                                        (0045) export _DAC8_Stop
                                        (0046) 
                                        (0047) ;-----------------------------------------------
                                        (0048) ;  EQUATES
                                        (0049) ;-----------------------------------------------
                                        (0050) 
                                        (0051) cOFFSET:   equ 127              ; Conversion term for offset binary to 2's C
                                        (0052) bPWRMASK:  equ 03h              ; Power bitfield in Switched Cap CR3 reg
                                        (0053) bSPLITMASK:equ 03h              ; Marks split between MSB and LSB bits
                                        (0054) bSMMASK:   equ 3Fh              ; Sign and Magnitude bits mask
                                        (0055) bSIGNMASK: equ 20h              ; Sign bit mask
                                        (0056) 
                                        (0057)     AREA UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: DAC8_Start
                                        (0062) ;  FUNCTION NAME: DAC8_SetPower
                                        (0063) ;
                                        (0064) ;  DESCRIPTION:
                                        (0065) ;    Applies power setting to the module's analog PSoC blocks.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:
                                        (0070) ;    A contains the power setting 0=Off, 1=Low, 2=Med, 3=High.
                                        (0071) ;
                                        (0072) ;  RETURNS: none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  DAC8_Start:
                                        (0082) _DAC8_Start:
                                        (0083)  DAC8_SetPower:
                                        (0084) _DAC8_SetPower:
                                        (0085)     RAM_PROLOGUE RAM_USE_CLASS_2
076D: 21 03    AND   A,0x3              (0086)     and   A, bPWRMASK       ; trim input to bits of interest
076F: 4F       MOV   X,SP               (0087)     mov   X, SP             ; Set stack frame pointer
0770: 08       PUSH  A                  (0088)     push  A
                                        (0089)     ;; read CR3 registers, modify power bits & write back
0771: 5D 8B    MOV   A,REG[0x8B]        (0090)     mov   A, reg[DAC8_MSB_CR3]
0773: 21 FC    AND   A,0xFC             (0091)     and   a, ~bPWRMASK      ; clear old setting
0775: 2B 00    OR    A,[X+0]            (0092)     or    A, [X]            ; set power in MSB register image
0777: 60 8B    MOV   REG[0x8B],A        (0093)     mov   reg[DAC8_MSB_CR3], A
0779: 5D 9B    MOV   A,REG[0x9B]        (0094)     mov   A, reg[DAC8_LSB_CR3]
077B: 21 FC    AND   A,0xFC             (0095)     and   a, ~bPWRMASK      ; clear old setting
077D: 2B 00    OR    A,[X+0]            (0096)     or    A, [X]            ; set power in LSB register image
077F: 60 9B    MOV   REG[0x9B],A        (0097)     mov   reg[DAC8_LSB_CR3], A
0781: 18       POP   A                  (0098)     pop   A
0782: 70 3F    AND   F,0x3F             
0784: 71 C0    OR    F,0xC0             
                                        (0099)     RAM_EPILOGUE RAM_USE_CLASS_2
0786: 7F       RET                      (0100)     ret
                                        (0101) .ENDSECTION
                                        (0102) 
                                        (0103) .SECTION
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) ;  FUNCTION NAME: DAC8_WriteBlind
                                        (0106) ;  FUNCTION NAME: DAC8_WriteBlind2B
                                        (0107) ;
                                        (0108) ;  DESCRIPTION:
                                        (0109) ;    Modify the DAC's update value without worrying about the clocks
                                        (0110) ;    Lowest overhead, but may cause glitches on the output.
                                        (0111) ;
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;
                                        (0114) ;  ARGUMENTS:
                                        (0115) ;    A contains the update value if data format is offset binary or
                                        (0116) ;    2's complement. If format is 2-byte sign-and-magnitude, the LSB is in
                                        (0117) ;    A (as 00smmmmm) and the MSB is in X (as 00xmm000, where x=s\, the
                                        (0118) ;    inverted sign.
                                        (0119) ;
                                        (0120) ;  RETURNS: none
                                        (0121) ;
                                        (0122) ;  SIDE EFFECTS:
                                        (0123) ;    The A and X registers may be modified by this or future implementations
                                        (0124) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0125) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0126) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0127) ;    functions.
                                        (0128) ;
                                        (0129)  DAC8_WriteBlind:
                                        (0130) _DAC8_WriteBlind:
                                        (0131)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0132)   IF DAC8_OFFSETBINARY
                                        (0133)     ;; Data is an unsigned byte value in [0..254] (i.e., 255 unique values).
                                        (0134)     ;; Following converts it to 2's complement:
                                        (0135)     sub   A, cOFFSET            ; Convert to 2's Complement
                                        (0136)   ENDIF
                                        (0137)   IF DAC8_OFFSETBINARY | DAC8_TWOSCOMPLEMENT
0787: 4F       MOV   X,SP               (0138)     mov   X, SP
0788: 08       PUSH  A                  (0139)     push  A                     ; Preserve the sign
0789: 39 80    CMP   A,0x80             (0140)     cmp   A, 80h                ; negative (or zero)?
078B: C0 05    JC    0x0791             (0141)     jc    BlindAdjustCycles     ;   no: just go on
078D: 73       CPL   A                  (0142)     cpl   A                     ;  yes: take the 2's Complement
078E: 74       INC   A                  (0143)     inc   A
078F: 80 05    JMP   0x0795             (0144)     jmp   BlindMagSet
                                        (0145) BlindAdjustCycles:
0791: 73       CPL   A                  (0146)     cpl   A                     ; these 3 instructions implement a 13-cycle
0792: 73       CPL   A                  (0147)     cpl   A                     ;   NOP so it takes the same amount of time
0793: 80 01    JMP   0x0795             (0148)     jmp   BlindMagSet           ;   for both positive and negative numbers.
                                        (0149) BlindMagSet:
0795: 08       PUSH  A                  (0150)     push  A                     ; preserve LSB magnitude bits
0796: 27 01 03 AND   [X+1],0x3          (0151)     and   [X+1], bSPLITMASK
0799: 27 00 80 AND   [X+0],0x80         (0152)     and   [X], 80h              ; isolate the sign
079C: 2B 00    OR    A,[X+0]            (0153)     or    A, [X]                ; insert in MSB
079E: 67       ASR   A                  (0154)     asr   A                     ; justify MSB sign & mag
079F: 67       ASR   A                  (0155)     asr   A
07A0: 21 3F    AND   A,0x3F             (0156)     and   A, bSMMASK            ; clear sign extension bits
                                        (0157)                                 ; Set FCap and ClockPhase bits for MSB
07A2: 54 00    MOV   [X+0],A            (0158)     mov   [X], A                ; stash the MSB
07A4: 21 20    AND   A,0x20             (0159)     and   A, bSIGNMASK          ; isolate the sign
07A6: 31 20    XOR   A,0x20             (0160)     xor   A, bSIGNMASK          ;   and invert for LSB
07A8: 66 01    ASL   [X+1]              (0161)     asl   [X+1]                 ; justify LSB magnitude
07AA: 66 01    ASL   [X+1]              (0162)     asl   [X+1]
07AC: 66 01    ASL   [X+1]              (0163)     asl   [X+1]
07AE: 2B 01    OR    A,[X+1]            (0164)     or    A, [X+1]              ; combine LSB magnitude with sign
                                        (0165)                                 ; Set FCap and ClockPhase bits for LSB
07B0: 20       POP   X                  (0166)     pop   X                     ; Put MSB in X
07B1: 20       POP   X                  (0167)     pop   X
                                        (0168)   ENDIF
07B2: 29 80    OR    A,0x80             (0169)     or    A, DAC8_CR0_HIBITS
07B4: 4B       SWAP  A,X                (0170)     swap  A, X
07B5: 29 80    OR    A,0x80             (0171)     or    A, DAC8_CR0_HIBITS
07B7: 60 88    MOV   REG[0x88],A        (0172)     mov   reg[DAC8_MSB_CR0], A
07B9: 5B       MOV   A,X                (0173)     mov   A, X
07BA: 60 98    MOV   REG[0x98],A        (0174)     mov   reg[DAC8_LSB_CR0], A
07BC: 70 3F    AND   F,0x3F             
07BE: 71 C0    OR    F,0xC0             
                                        (0175)     RAM_EPILOGUE RAM_USE_CLASS_2
07C0: 7F       RET                      (0176)     ret
                                        (0177) 
                                        (0178) 
                                        (0179)  DAC8_WriteBlind2B:
                                        (0180) _DAC8_WriteBlind2B:
                                        (0181)     RAM_PROLOGUE RAM_USE_CLASS_1
07C1: 29 80    OR    A,0x80             (0182)     or    A, DAC8_CR0_HIBITS
07C3: 4B       SWAP  A,X                (0183)     swap  A, X
07C4: 29 80    OR    A,0x80             (0184)     or    A, DAC8_CR0_HIBITS
07C6: 60 88    MOV   REG[0x88],A        (0185)     mov   reg[DAC8_MSB_CR0], A
07C8: 5B       MOV   A,X                (0186)     mov   A, X
07C9: 60 98    MOV   REG[0x98],A        (0187)     mov   reg[DAC8_LSB_CR0], A
                                        (0188)     RAM_EPILOGUE RAM_USE_CLASS_1
07CB: 7F       RET                      (0189)     ret
                                        (0190) .ENDSECTION
                                        (0191) 
                                        (0192) .SECTION
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;  FUNCTION NAME: DAC8_WriteStall
                                        (0195) ;  FUNCTION NAME: DAC8_WriteStall2B
                                        (0196) ;
                                        (0197) ;  DESCRIPTION:
                                        (0198) ;    Modify the DAC's update value, stalling the CPU if necessary.
                                        (0199) ;    This routine should be used with faster analog clocks or when the
                                        (0200) ;    effect of prolonging interrupt latencies can be safely tolerated.
                                        (0201) ;
                                        (0202) ;-----------------------------------------------------------------------------
                                        (0203) ;
                                        (0204) ;  ARGUMENTS:
                                        (0205) ;   A contains the update value if data format is offset binary or
                                        (0206) ;   2's complement. If format is 2-byte sign-and-magnitude, the LSB is in
                                        (0207) ;   A (as 00smmmmm) and the MSB is in X (as 00xmm000, where x=s\, the
                                        (0208) ;   inverted sign.
                                        (0209) ;
                                        (0210) ;  RETURNS: none
                                        (0211) ;
                                        (0212) ;  SIDE EFFECTS:
                                        (0213) ;
                                        (0214) ;  THEORY of OPERATION or PROCEDURE:
                                        (0215) ;    The A and X registers may be modified by this or future implementations
                                        (0216) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0217) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0218) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0219) ;    functions.
                                        (0220) ;
                                        (0221)  DAC8_WriteStall:
                                        (0222) _DAC8_WriteStall:
                                        (0223)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0224)   IF DAC8_OFFSETBINARY
                                        (0225)     ;; Data is an unsigned byte value in [0..254] (i.e., 255 unique values).
                                        (0226)     ;; Following converts it to 2's complement:
                                        (0227)     sub   A, cOFFSET            ; Convert to 2's Complement
                                        (0228)   ENDIF
                                        (0229)   IF DAC8_OFFSETBINARY | DAC8_TWOSCOMPLEMENT
07CC: 4F       MOV   X,SP               (0230)     mov   X, SP
07CD: 08       PUSH  A                  (0231)     push  A                     ; Preserve the sign
07CE: 39 80    CMP   A,0x80             (0232)     cmp   A, 80h                ; negative (or zero)?
07D0: C0 05    JC    0x07D6             (0233)     jc    StallAdjustCycles     ;   no: just go on
07D2: 73       CPL   A                  (0234)     cpl   A                     ;  yes: take the 2's Complement
07D3: 74       INC   A                  (0235)     inc   A
07D4: 80 05    JMP   0x07DA             (0236)     jmp   StallMagSet
                                        (0237) StallAdjustCycles:
07D6: 73       CPL   A                  (0238)     cpl   A                     ; these 3 instructions implement a 13-cycle
07D7: 73       CPL   A                  (0239)     cpl   A                     ;   NOP so it takes the same amount of time
07D8: 80 01    JMP   0x07DA             (0240)     jmp   StallMagSet           ;   for both positive and negative numbers.
                                        (0241) StallMagSet:
07DA: 08       PUSH  A                  (0242)     push  A                     ; preserve LSB magnitude bits
07DB: 27 01 03 AND   [X+1],0x3          (0243)     and   [X+1], bSPLITMASK
07DE: 27 00 80 AND   [X+0],0x80         (0244)     and   [X], 80h              ; isolate the sign
07E1: 2B 00    OR    A,[X+0]            (0245)     or    A, [X]                ; insert in MSB
07E3: 67       ASR   A                  (0246)     asr   A                     ; justify MSB sign & mag
07E4: 67       ASR   A                  (0247)     asr   A
07E5: 21 3F    AND   A,0x3F             (0248)     and   A, bSMMASK            ; clear sign extension bits
                                        (0249)                                 ; Set FCap and ClockPhase bits for MSB
07E7: 54 00    MOV   [X+0],A            (0250)     mov   [X], A                ; stash the MSB
07E9: 21 20    AND   A,0x20             (0251)     and   A, bSIGNMASK          ; isolate the sign
07EB: 31 20    XOR   A,0x20             (0252)     xor   A, bSIGNMASK          ;   and invert for LSB
07ED: 66 01    ASL   [X+1]              (0253)     asl   [X+1]                 ; justify LSB magnitude
07EF: 66 01    ASL   [X+1]              (0254)     asl   [X+1]
07F1: 66 01    ASL   [X+1]              (0255)     asl   [X+1]
07F3: 2B 01    OR    A,[X+1]            (0256)     or    A, [X+1]              ; combine LSB magnitude with sign
                                        (0257)                                 ; Set FCap and ClockPhase bits for LSB
07F5: 20       POP   X                  (0258)     pop   X                     ; Put MSB in X
07F6: 20       POP   X                  (0259)     pop   X
                                        (0260)   ENDIF
07F7: 29 80    OR    A,0x80             (0261)     or    A, DAC8_CR0_HIBITS
07F9: 4B       SWAP  A,X                (0262)     swap  A, X
07FA: 29 80    OR    A,0x80             (0263)     or    A, DAC8_CR0_HIBITS
07FC: 43 65 01 OR    REG[0x65],0x1      
                                        (0264) 
                                        (0265)     M8C_Stall
07FF: 60 88    MOV   REG[0x88],A        (0266)     mov   reg[DAC8_MSB_CR0], A
0801: 41 65 FE AND   REG[0x65],0xFE     
                                        (0267)     M8C_Unstall
0804: 5B       MOV   A,X                (0268)     mov   A, X
0805: 60 98    MOV   REG[0x98],A        (0269)     mov   reg[DAC8_LSB_CR0], A
0807: 70 3F    AND   F,0x3F             
0809: 71 C0    OR    F,0xC0             
                                        (0270)     RAM_EPILOGUE RAM_USE_CLASS_2
080B: 7F       RET                      (0271)     ret
                                        (0272) 
                                        (0273)  DAC8_WriteStall2B:
                                        (0274) _DAC8_WriteStall2B:
                                        (0275)     RAM_PROLOGUE RAM_USE_CLASS_1
080C: 29 80    OR    A,0x80             (0276)     or    A, DAC8_CR0_HIBITS
080E: 4B       SWAP  A,X                (0277)     swap  A, X
080F: 29 80    OR    A,0x80             (0278)     or    A, DAC8_CR0_HIBITS
0811: 43 65 01 OR    REG[0x65],0x1      
                                        (0279) 
                                        (0280)     M8C_Stall
0814: 60 88    MOV   REG[0x88],A        (0281)     mov   reg[DAC8_MSB_CR0], A
0816: 41 65 FE AND   REG[0x65],0xFE     
                                        (0282)     M8C_Unstall
0819: 5B       MOV   A,X                (0283)     mov   A, X
081A: 60 98    MOV   REG[0x98],A        (0284)     mov   reg[DAC8_LSB_CR0], A
                                        (0285)     RAM_EPILOGUE RAM_USE_CLASS_1
081C: 7F       RET                      (0286)     ret
                                        (0287) .ENDSECTION
                                        (0288) 
                                        (0289) .SECTION
                                        (0290) ;-----------------------------------------------------------------------------
                                        (0291) ;  FUNCTION NAME: DAC8_Stop
                                        (0292) ;
                                        (0293) ;  DESCRIPTION:
                                        (0294) ;    Cuts power to the user module.
                                        (0295) ;
                                        (0296) ;-----------------------------------------------------------------------------
                                        (0297) ;
                                        (0298) ;  ARGUMENTS: none
                                        (0299) ;
                                        (0300) ;  RETURNS: none
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;
                                        (0309)  DAC8_Stop:
                                        (0310) _DAC8_Stop:
                                        (0311)     RAM_PROLOGUE RAM_USE_CLASS_1
081D: 41 8B FC AND   REG[0x8B],0xFC     (0312)     and  reg[DAC8_MSB_CR3], ~bPWRMASK
0820: 41 9B FC AND   REG[0x9B],0xFC     (0313)     and  reg[DAC8_LSB_CR3], ~bPWRMASK
                                        (0314)     RAM_EPILOGUE RAM_USE_CLASS_1
0823: 7F       RET                      (0315)     ret
                                        (0316) .ENDSECTION
                                        (0317) ; End of File DAC8.asm
FILE: C:\Users\addis\Desktop\ECE381\SPI_SRAM\SPI_SRAM\main.c
(0001) //----------------------------------------------------------------------------
(0002) // 23K256 SPI SRAM Program
(0003) //
(0004) // PSoC Global Resources:
(0005) //   Power Setting     5.0V/24MHz
(0006) //   CPU_Clock         SysClk/1
(0007) //   32K_Select        Internal
(0008) //   PLL_Mode          Off
(0009) //   Sleep_Timer       8_Hz
(0010) //   VC1=SysClk/N     *12
(0011) //   VC2=VC1/N        *2
(0012) //                    * VC1 & VC2 values make VC2 = 1MHz = SPIM Clock
(0013) //   VC3_Source        SysClk/1
(0014) //   VC3 Divider      *52
(0015) //                    *Used to set UART baud rate to 57600
(0016) //   SysClk Source     Internal
(0017) //   SysClk*2 Disable  { Any }
(0018) //   Analog Power      { Any }
(0019) //   Ref Mux           { Any }
(0020) //   AGndBypass        { Any }
(0021) //   Op-Amp Bias       { Any }
(0022) //   A_Buff_Power      { Any }
(0023) //   SwitchModePump    OFF
(0024) //   Trip Voltage      { Any }
(0025) //   LVD ThrottleBack  Disable
(0026) //                    *When enabled, an LVD event forces the CPU Clock to SysClk/8.
(0027) //   Watchdog Enable  *{ Any }
(0028) //                    *Incautious use of the Watchdog may adversely affect timing
(0029) //
(0030) // SPIM Parameters
(0031) //   Name              SPIM
(0032) //   Clock            *VC2
(0033) //                    *1MHz = 500kbps SPI bit rate.
(0034) //   MISO              Row_2_Input_1
(0035) //   MOSI              Row_2_Output_0
(0036) //   SClk              Row_2_Output_3
(0037) //   Interrupt Mode    TXRegEmpty
(0038) //   ClockSync         Sync to SysClk
(0039) //   InvertMISO        Normal
(0040) //
(0041) // SPIM Module Notes
(0042) //   The 23K256 SPI SRAM has a maximum clock speed of 20MHz
(0043) //   SPIM Clock must be set to two times the desired bit rate
(0044) //   My prototype uses VC2 = SysClk/48 = 500kHz, yielding a bit rate of 250kbps
(0045) //   CS   = P12 (StdCPU:    Open Drain Low)
(0046) //   SCLK = P13 (GlobalOut: Open Drain Low)
(0047) //   MOSI = P14 (GlobalOut: Open Drain Low)
(0048) //   MISO = P15 (GlobalIn:  High Z)
(0049) //
(0050) // SPIM Modules Notes:
(0051) //  -Per Datasheet: The Row Input synchronization for MISO should be set to
(0052) //   Async for high SPI bit rates (>1Mbps).
(0053) //  -The SPIM Control Register contains the flags that are read by the
(0054) //   SPIM_bReadStatus() function. Reading clears all flags.
(0055) //  -The Datasheet for the SPIM Datasheet is inconsistent in its referral to
(0056) //   the SPIM_SPI_COMPLETE flag.  In the SPIM Control Register, it is named
(0057) //   SPI Done.
(0058) //  -The SPIM Module always transfers data present on the MISO pin when it
(0059) //   writes to the MOSI pin. In other words, it always transfers data into
(0060) //   the receive buffer while it is transferring data out of the transmit
(0061) //   buffer; it is essential to keep this in mind when checking flags.
(0062) //  -TX_BUFFER_EMPTY indicates that a new byte can be written to the TX Buffer.
(0063) //  -RX_BUFFER_FULL is set on the edge that captures the 8th bit of receive data.
(0064) //  -SPI_COMPLETE (an optional interrupt) is set when eight bits
(0065) //   of data and clock have been sent. In modes 0 and 1, this occurs one-half
(0066) //   cycle after RX_BUFFER_FULL is set; because in these modes, data is latched
(0067) //   on the leading edge of the clock and there is an additional one-half cycle
(0068) //   remaining to complete that clock. In modes 2 and 3, this occurs at the
(0069) //   same edge that the receive data is latched. This signal may be used to
(0070) //   read the received byte or it may be used by the SPIM to disable the
(0071) //   block after data transmission is complete.
(0072) //   See PSoC TRM, Document No. 001-14463 Rev. *G, Figure 17-19, page 358.
(0073) //  -Once the first byte to be transmitted is moved into the transmit buffer
(0074) //   by calling the SendTxData API, the SPIM module immediately moves the
(0075) //   byte into the transmit shift register one SPIM Clock Input cycle later
(0076) //   whereupon the TX_BUFFER_EMPTY flag is set immediately.
(0077) //   If another byte is written before the first byte has been fully shifted
(0078) //   out, it is placed in the transmit buffer and remains there until half-way
(0079) //   through the transmission of the 8th and final bit whereupon it is
(0080) //   automatically loaded into the transmit buffer which again sets the
(0081) //   TX_BUFFER_EMPTY flag and the 1st bit of the second byte begins
(0082) //   its transfer immediately after the 8th bit of the 1st byte. This allows
(0083) //   for uninterrupted back-to-back transmission.
(0084) //
(0085) // 23K256 Notes:
(0086) //  -Pins 4 & 8, the power pins, must have a 0.1uF decoupling capacitor
(0087) //   physically placed as close as possible to the IC package.
(0088) //  -Pin 7 (nHOLD) must be tied to Vcc since it is not used here.
(0089) //  -Pin 3 should be left floating since it is NC (no connection)
(0090) //  -3.3V SPI to 5V PSoC voltage translation is accomplished through 2.2k
(0091) //   pull-up resistors. This also limits the maximum reliable data transfer
(0092) //   rate due to the 2.2k*Cpin+wire time constant. Long wires are detrimental!
(0093) //
(0094) // bnoble@siue.edu 20140320
(0095) //----------------------------------------------------------------------------
(0096) 
(0097) #include <m8c.h>        // part specific constants and macros
(0098) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0099) #include "stdlib.h"
(0100) #include "spi_sram.h"
(0101) 
(0102) // Define our I/O array size. Powers of 2 are nice but not necessary
(0103) #define ARRAY_SIZE 64
(0104) 
(0105) // Globals
(0106) BYTE DataIn[ARRAY_SIZE];
(0107) BYTE DataOut[ARRAY_SIZE];
(0108) 
(0109) // Test reading and writing the 23K256 status register:
(0110) BYTE SPIRAM_StatusRegisterTest(void)
(0111) {
__UserModules_end|__text_start|_SPIRAM_StatusRegisterTest|_SPIRAM_StatusRegisterTest:
  status               --> X+7
  mode                 --> X+1
  b                    --> X+0
    0824: 10       PUSH  X
    0825: 4F       MOV   X,SP
    0826: 38 08    ADD   SP,0x8
(0112) 	// NOTE: SPIRAM_SEQUENTIAL_MODE|SPIRAM_PAGE_MODE is "Reserved", don't use it
(0113) 	BYTE mode[6] = { SPIRAM_BYTE_MODE,
    0828: 62 D0 00 MOV   REG[0xD0],0x0
    082B: 55 87 A0 MOV   [__r1],0xA0
    082E: 55 88 01 MOV   [__r0],0x1
    0831: 5A 85    MOV   [__r3],X
    0833: 06 85 01 ADD   [__r3],0x1
    0836: 62 D5 07 MOV   REG[0xD5],0x7
    0839: 10       PUSH  X
    083A: 55 84 00 MOV   [__rX],0x0
    083D: 51 88    MOV   A,[__r0]
    083F: 58 87    MOV   X,[__r1]
    0841: 08       PUSH  A
    0842: 28       ROMX  
    0843: 62 D0 00 MOV   REG[0xD0],0x0
    0846: 3F 85    MVI   [__r3],A
    0848: 18       POP   A
    0849: 75       INC   X
    084A: 09 00    ADC   A,0x0
    084C: 76 84    INC   [__rX]
    084E: 3C 84 06 CMP   [__rX],0x6
    0851: BF EF    JNZ   0x0841
(0114) 					 SPIRAM_BYTE_MODE|SPIRAM_DISABLE_HOLD,
(0115) 					 SPIRAM_SEQUENTIAL_MODE,
(0116) 					 SPIRAM_SEQUENTIAL_MODE|SPIRAM_DISABLE_HOLD,
(0117) 					 SPIRAM_PAGE_MODE,
(0118) 					 SPIRAM_PAGE_MODE|SPIRAM_DISABLE_HOLD };
(0119) 	BYTE status;
(0120) 	BYTE b;
(0121) 
(0122) 	UART_CPutString("Status Register W/R Test: 0x  ");
    0853: 50 03    MOV   A,0x3
    0855: 08       PUSH  A
    0856: 50 5A    MOV   A,0x5A
    0858: 5C       MOV   X,A
    0859: 18       POP   A
    085A: 7C 06 C1 LCALL _UART_CPutString
    085D: 20       POP   X
(0123) 	for (b=0; b<6 ; b++) {
    085E: 56 00 00 MOV   [X+0],0x0
    0861: 80 9B    JMP   0x08FD
(0124) 		UART_PutChar(0x08);
    0863: 10       PUSH  X
    0864: 50 08    MOV   A,0x8
    0866: 7C 06 1E LCALL _UART_PutChar
(0125) 		UART_PutChar(0x08);
    0869: 50 08    MOV   A,0x8
    086B: 7C 06 1E LCALL _UART_PutChar
    086E: 20       POP   X
(0126) 		UART_PutSHexByte(mode[b]);
    086F: 62 D0 00 MOV   REG[0xD0],0x0
    0872: 55 88 07 MOV   [__r0],0x7
    0875: 5A 87    MOV   [__r1],X
    0877: 06 87 01 ADD   [__r1],0x1
    087A: 52 00    MOV   A,[X+0]
    087C: 02 87    ADD   A,[__r1]
    087E: 53 87    MOV   [__r1],A
    0880: 50 00    MOV   A,0x0
    0882: 0A 88    ADC   A,[__r0]
    0884: 60 D4    MOV   REG[0xD4],A
    0886: 3E 87    MVI   A,[__r1]
    0888: 10       PUSH  X
    0889: 7C 06 04 LCALL _UART_PutSHexByte
    088C: 20       POP   X
(0127) 		if (SPIRAM_WriteStatusRegister(mode[b])) {
    088D: 62 D0 00 MOV   REG[0xD0],0x0
    0890: 55 88 07 MOV   [__r0],0x7
    0893: 5A 87    MOV   [__r1],X
    0895: 06 87 01 ADD   [__r1],0x1
    0898: 52 00    MOV   A,[X+0]
    089A: 02 87    ADD   A,[__r1]
    089C: 53 87    MOV   [__r1],A
    089E: 50 00    MOV   A,0x0
    08A0: 0A 88    ADC   A,[__r0]
    08A2: 60 D4    MOV   REG[0xD4],A
    08A4: 3E 87    MVI   A,[__r1]
    08A6: 08       PUSH  A
    08A7: 7C 0C D7 LCALL _SPIRAM_WriteStatusRegister
    08AA: 38 FF    ADD   SP,0xFF
    08AC: 62 D0 00 MOV   REG[0xD0],0x0
    08AF: 39 00    CMP   A,0x0
    08B1: A0 10    JZ    0x08C2
(0128) 			UART_CPutString("\r\nWrite of invalid Status Register value. System halted.\r\n");
    08B3: 10       PUSH  X
    08B4: 50 03    MOV   A,0x3
    08B6: 08       PUSH  A
    08B7: 50 1F    MOV   A,0x1F
    08B9: 5C       MOV   X,A
    08BA: 18       POP   A
    08BB: 7C 06 C1 LCALL _UART_CPutString
    08BE: 20       POP   X
(0129) 			M8C_Stop;
    08BF: 43 FF 01 OR    REG[0xFF],0x1
(0130) 		}
(0131) 		status = SPIRAM_ReadStatusRegister();
    08C2: 7C 0D 5C LCALL _SPIRAM_ReadStatusRegister
    08C5: 62 D0 00 MOV   REG[0xD0],0x0
    08C8: 54 07    MOV   [X+7],A
(0132) 		if (status != mode[b]) {
    08CA: 55 88 07 MOV   [__r0],0x7
    08CD: 5A 87    MOV   [__r1],X
    08CF: 06 87 01 ADD   [__r1],0x1
    08D2: 52 00    MOV   A,[X+0]
    08D4: 02 87    ADD   A,[__r1]
    08D6: 53 87    MOV   [__r1],A
    08D8: 50 00    MOV   A,0x0
    08DA: 0A 88    ADC   A,[__r0]
    08DC: 60 D4    MOV   REG[0xD4],A
    08DE: 3E 87    MVI   A,[__r1]
    08E0: 53 88    MOV   [__r0],A
    08E2: 52 07    MOV   A,[X+7]
    08E4: 3A 88    CMP   A,[__r0]
    08E6: A0 14    JZ    0x08FB
(0133) 			UART_CPutString(" FAIL\r\n");
    08E8: 10       PUSH  X
    08E9: 50 03    MOV   A,0x3
    08EB: 08       PUSH  A
    08EC: 50 17    MOV   A,0x17
    08EE: 5C       MOV   X,A
    08EF: 18       POP   A
    08F0: 7C 06 C1 LCALL _UART_CPutString
    08F3: 20       POP   X
(0134) 			return(1);
    08F4: 62 D0 00 MOV   REG[0xD0],0x0
    08F7: 50 01    MOV   A,0x1
    08F9: 80 21    JMP   0x091B
(0135) 		}
(0136) 	}
    08FB: 77 00    INC   [X+0]
    08FD: 3D 00 06 CMP   [X+0],0x6
    0900: CF 62    JC    0x0863
(0137) 	UART_CPutString("\b\b\b\b\b PASS\r\n");
    0902: 10       PUSH  X
    0903: 50 03    MOV   A,0x3
    0905: 08       PUSH  A
    0906: 50 0A    MOV   A,0xA
    0908: 5C       MOV   X,A
    0909: 18       POP   A
    090A: 7C 06 C1 LCALL _UART_CPutString
    090D: 20       POP   X
(0138) 	// Place the SRAM back in Byte Mode
(0139) 	SPIRAM_WriteStatusRegister(SPIRAM_BYTE_MODE|SPIRAM_DISABLE_HOLD);
    090E: 50 01    MOV   A,0x1
    0910: 08       PUSH  A
    0911: 7C 0C D7 LCALL _SPIRAM_WriteStatusRegister
    0914: 38 FF    ADD   SP,0xFF
    0916: 62 D0 00 MOV   REG[0xD0],0x0
(0140) 	return(0);
    0919: 50 00    MOV   A,0x0
    091B: 38 F8    ADD   SP,0xF8
    091D: 20       POP   X
    091E: 7F       RET   
(0141) }
(0142) 
(0143) // Test reading and writing the 23K256 in Byte Mode:
(0144) WORD SPIRAM_ByteModeTest(void)
(0145) {
_SPIRAM_ByteModeTest:
  status               --> X+4
  in                   --> X+3
  addr                 --> X+1
  b                    --> X+0
    091F: 10       PUSH  X
    0920: 4F       MOV   X,SP
    0921: 38 05    ADD   SP,0x5
(0146) 	BYTE status;
(0147) 	BYTE b;
(0148) 	BYTE in;
(0149) 	WORD addr;
(0150) 
(0151) 	SPIRAM_WriteStatusRegister(SPIRAM_BYTE_MODE|SPIRAM_DISABLE_HOLD);
    0923: 50 01    MOV   A,0x1
    0925: 08       PUSH  A
    0926: 7C 0C D7 LCALL _SPIRAM_WriteStatusRegister
    0929: 38 FF    ADD   SP,0xFF
    092B: 62 D0 00 MOV   REG[0xD0],0x0
(0152) 	UART_CPutString("      Byte Mode W/R Test: Addr 0x    ");
    092E: 10       PUSH  X
    092F: 50 02    MOV   A,0x2
    0931: 08       PUSH  A
    0932: 50 E4    MOV   A,0xE4
    0934: 5C       MOV   X,A
    0935: 18       POP   A
    0936: 7C 06 C1 LCALL _UART_CPutString
    0939: 20       POP   X
(0153) 
(0154) 	for (addr=0; addr<0x8000 ; addr++) {
    093A: 56 02 00 MOV   [X+2],0x0
    093D: 56 01 00 MOV   [X+1],0x0
    0940: 80 BE    JMP   0x09FF
(0155) 		if (((addr-1) & 0x000f) == 0x000f) {
    0942: 62 D0 00 MOV   REG[0xD0],0x0
    0945: 52 02    MOV   A,[X+2]
    0947: 11 01    SUB   A,0x1
    0949: 53 87    MOV   [__r1],A
    094B: 52 01    MOV   A,[X+1]
    094D: 19 00    SBB   A,0x0
    094F: 53 88    MOV   [__r0],A
    0951: 26 87 0F AND   [__r1],0xF
    0954: 26 88 00 AND   [__r0],0x0
    0957: B0 1D    JNZ   0x0975
    0959: 3C 87 0F CMP   [__r1],0xF
    095C: B0 18    JNZ   0x0975
(0156) 			UART_CPutString("\b\b\b\b");
    095E: 10       PUSH  X
    095F: 50 02    MOV   A,0x2
    0961: 08       PUSH  A
    0962: 50 DF    MOV   A,0xDF
    0964: 5C       MOV   X,A
    0965: 18       POP   A
    0966: 7C 06 C1 LCALL _UART_CPutString
    0969: 20       POP   X
(0157) 			UART_PutSHexInt(addr);
    096A: 10       PUSH  X
    096B: 52 01    MOV   A,[X+1]
    096D: 08       PUSH  A
    096E: 52 02    MOV   A,[X+2]
    0970: 20       POP   X
    0971: 7C 06 17 LCALL _UART_PutSHexInt
    0974: 20       POP   X
(0158) 		}
(0159) 		b = 0;
    0975: 56 00 00 MOV   [X+0],0x0
(0160) 		do {
(0161) 			SPIRAM_WriteByte(addr, b);
    0978: 52 00    MOV   A,[X+0]
    097A: 08       PUSH  A
    097B: 52 01    MOV   A,[X+1]
    097D: 08       PUSH  A
    097E: 52 02    MOV   A,[X+2]
    0980: 08       PUSH  A
    0981: 7C 0D C8 LCALL _SPIRAM_WriteByte
(0162) 			in = SPIRAM_ReadByte(addr);
    0984: 52 01    MOV   A,[X+1]
    0986: 08       PUSH  A
    0987: 52 02    MOV   A,[X+2]
    0989: 08       PUSH  A
    098A: 7C 0E 95 LCALL _SPIRAM_ReadByte
    098D: 38 FB    ADD   SP,0xFB
    098F: 62 D0 00 MOV   REG[0xD0],0x0
    0992: 54 03    MOV   [X+3],A
(0163) 			if (in != b) {
    0994: 52 03    MOV   A,[X+3]
    0996: 3B 00    CMP   A,[X+0]
    0998: A0 2D    JZ    0x09C6
(0164) 				UART_CPutString("\b\b\b\b");
    099A: 10       PUSH  X
    099B: 50 02    MOV   A,0x2
    099D: 08       PUSH  A
    099E: 50 DF    MOV   A,0xDF
    09A0: 5C       MOV   X,A
    09A1: 18       POP   A
    09A2: 7C 06 C1 LCALL _UART_CPutString
    09A5: 20       POP   X
(0165) 				UART_PutSHexInt(addr);
    09A6: 10       PUSH  X
    09A7: 52 01    MOV   A,[X+1]
    09A9: 08       PUSH  A
    09AA: 52 02    MOV   A,[X+2]
    09AC: 20       POP   X
    09AD: 7C 06 17 LCALL _UART_PutSHexInt
(0166) 				UART_CPutString(" FAIL\r\n");
    09B0: 50 03    MOV   A,0x3
    09B2: 08       PUSH  A
    09B3: 50 17    MOV   A,0x17
    09B5: 5C       MOV   X,A
    09B6: 18       POP   A
    09B7: 7C 06 C1 LCALL _UART_CPutString
    09BA: 20       POP   X
(0167) 				return(1);
    09BB: 62 D0 00 MOV   REG[0xD0],0x0
    09BE: 55 87 01 MOV   [__r1],0x1
    09C1: 55 88 00 MOV   [__r0],0x0
    09C4: 80 59    JMP   0x0A1E
(0168) 			}
(0169) 			if (!b)
    09C6: 3D 00 00 CMP   [X+0],0x0
    09C9: B0 06    JNZ   0x09D0
(0170) 				b = 0x01;
    09CB: 56 00 01 MOV   [X+0],0x1
    09CE: 80 03    JMP   0x09D2
(0171) 			else
(0172) 				b = b << 1;
    09D0: 66 00    ASL   [X+0]
(0173) 		} while(b);
    09D2: 3D 00 00 CMP   [X+0],0x0
    09D5: BF A2    JNZ   0x0978
(0174) 		if (UART_cReadChar()) {
    09D7: 10       PUSH  X
    09D8: 7C 06 2E LCALL _UART_cReadChar
    09DB: 20       POP   X
    09DC: 62 D0 00 MOV   REG[0xD0],0x0
    09DF: 39 00    CMP   A,0x0
    09E1: A0 18    JZ    0x09FA
(0175) 			UART_CPutString("\b\b\b\b\b\b\b\b\b\b\b\b ABORTED    \r\n");
    09E3: 10       PUSH  X
    09E4: 50 02    MOV   A,0x2
    09E6: 08       PUSH  A
    09E7: 50 C4    MOV   A,0xC4
    09E9: 5C       MOV   X,A
    09EA: 18       POP   A
    09EB: 7C 06 C1 LCALL _UART_CPutString
    09EE: 20       POP   X
(0176) 			return(0);
    09EF: 62 D0 00 MOV   REG[0xD0],0x0
    09F2: 55 87 00 MOV   [__r1],0x0
    09F5: 55 88 00 MOV   [__r0],0x0
    09F8: 80 25    JMP   0x0A1E
(0177) 		}
(0178) 	}
    09FA: 77 02    INC   [X+2]
    09FC: 0F 01 00 ADC   [X+1],0x0
    09FF: 52 02    MOV   A,[X+2]
    0A01: 11 00    SUB   A,0x0
    0A03: 52 01    MOV   A,[X+1]
    0A05: 19 80    SBB   A,0x80
    0A07: CF 3A    JC    0x0942
(0179) 	UART_CPutString("\b\b\b\b\b\b\b\b\b\b\b\b PASS       \r\n");
    0A09: 10       PUSH  X
    0A0A: 50 02    MOV   A,0x2
    0A0C: 08       PUSH  A
    0A0D: 50 A9    MOV   A,0xA9
    0A0F: 5C       MOV   X,A
    0A10: 18       POP   A
    0A11: 7C 06 C1 LCALL _UART_CPutString
    0A14: 20       POP   X
(0180) 	return(0);
    0A15: 62 D0 00 MOV   REG[0xD0],0x0
    0A18: 55 87 00 MOV   [__r1],0x0
    0A1B: 55 88 00 MOV   [__r0],0x0
    0A1E: 38 FB    ADD   SP,0xFB
    0A20: 20       POP   X
    0A21: 7F       RET   
(0181) }
(0182) 
(0183) // Test reading and writing the 23K256 in Sequential Mode:
(0184) WORD SPIRAM_SequentialModeTest(void)
(0185) {
_SPIRAM_SequentialModeTest:
  in                   --> X+5
  status               --> X+4
  addr                 --> X+2
  b                    --> X+1
  a                    --> X+0
    0A22: 10       PUSH  X
    0A23: 4F       MOV   X,SP
    0A24: 38 06    ADD   SP,0x6
(0186) 	BYTE status;
(0187) 	BYTE a;
(0188) 	BYTE b;
(0189) 	BYTE in;
(0190) 	WORD addr;
(0191) 
(0192) 	SPIRAM_WriteStatusRegister(SPIRAM_SEQUENTIAL_MODE|SPIRAM_DISABLE_HOLD);
    0A26: 50 41    MOV   A,0x41
    0A28: 08       PUSH  A
    0A29: 7C 0C D7 LCALL _SPIRAM_WriteStatusRegister
    0A2C: 38 FF    ADD   SP,0xFF
    0A2E: 62 D0 00 MOV   REG[0xD0],0x0
(0193) 	UART_CPutString("Sequential Mode W/R Test: Addr 0x    ");
    0A31: 10       PUSH  X
    0A32: 50 02    MOV   A,0x2
    0A34: 08       PUSH  A
    0A35: 50 83    MOV   A,0x83
    0A37: 5C       MOV   X,A
    0A38: 18       POP   A
    0A39: 7C 06 C1 LCALL _UART_CPutString
    0A3C: 20       POP   X
(0194) 
(0195) 	for (addr=0; addr<0x8000 ; addr+=ARRAY_SIZE) {
    0A3D: 56 03 00 MOV   [X+3],0x0
    0A40: 56 02 00 MOV   [X+2],0x0
    0A43: 81 03    JMP   0x0B47
(0196) 		UART_CPutString("\b\b\b\b");
    0A45: 10       PUSH  X
    0A46: 50 02    MOV   A,0x2
    0A48: 08       PUSH  A
    0A49: 50 DF    MOV   A,0xDF
    0A4B: 5C       MOV   X,A
    0A4C: 18       POP   A
    0A4D: 7C 06 C1 LCALL _UART_CPutString
    0A50: 20       POP   X
(0197) 		UART_PutSHexInt(addr);
    0A51: 10       PUSH  X
    0A52: 52 02    MOV   A,[X+2]
    0A54: 08       PUSH  A
    0A55: 52 03    MOV   A,[X+3]
    0A57: 20       POP   X
    0A58: 7C 06 17 LCALL _UART_PutSHexInt
    0A5B: 20       POP   X
(0198) 		b = 0;
    0A5C: 56 01 00 MOV   [X+1],0x0
(0199) 		do {
(0200) 			for (a=0 ; a<ARRAY_SIZE ; a++) {
    0A5F: 56 00 00 MOV   [X+0],0x0
    0A62: 80 1B    JMP   0x0A7E
(0201) 				DataOut[a] = b;
    0A64: 62 D0 00 MOV   REG[0xD0],0x0
    0A67: 52 00    MOV   A,[X+0]
    0A69: 53 87    MOV   [__r1],A
    0A6B: 55 88 00 MOV   [__r0],0x0
    0A6E: 06 87 04 ADD   [__r1],0x4
    0A71: 0E 88 00 ADC   [__r0],0x0
    0A74: 51 88    MOV   A,[__r0]
    0A76: 60 D5    MOV   REG[0xD5],A
    0A78: 52 01    MOV   A,[X+1]
    0A7A: 3F 87    MVI   [__r1],A
(0202) 			}
    0A7C: 77 00    INC   [X+0]
    0A7E: 3D 00 40 CMP   [X+0],0x40
    0A81: CF E2    JC    0x0A64
(0203) 			SPIRAM_WriteArray(addr, DataOut, ARRAY_SIZE);
    0A83: 50 40    MOV   A,0x40
    0A85: 08       PUSH  A
    0A86: 50 00    MOV   A,0x0
    0A88: 08       PUSH  A
    0A89: 50 04    MOV   A,0x4
    0A8B: 08       PUSH  A
    0A8C: 52 02    MOV   A,[X+2]
    0A8E: 08       PUSH  A
    0A8F: 52 03    MOV   A,[X+3]
    0A91: 08       PUSH  A
    0A92: 7C 0F 66 LCALL _SPIRAM_WriteArray
(0204) 			SPIRAM_ReadArray(addr, DataIn, ARRAY_SIZE);
    0A95: 50 40    MOV   A,0x40
    0A97: 08       PUSH  A
    0A98: 50 00    MOV   A,0x0
    0A9A: 08       PUSH  A
    0A9B: 50 44    MOV   A,0x44
    0A9D: 08       PUSH  A
    0A9E: 52 02    MOV   A,[X+2]
    0AA0: 08       PUSH  A
    0AA1: 52 03    MOV   A,[X+3]
    0AA3: 08       PUSH  A
    0AA4: 7C 10 5A LCALL _SPIRAM_ReadArray
    0AA7: 38 F6    ADD   SP,0xF6
(0205) 			for (a=0 ; a<ARRAY_SIZE ; a++) {
    0AA9: 56 00 00 MOV   [X+0],0x0
    0AAC: 80 5B    JMP   0x0B08
(0206) 				if (DataIn[a] != b) {
    0AAE: 62 D0 00 MOV   REG[0xD0],0x0
    0AB1: 52 00    MOV   A,[X+0]
    0AB3: 53 87    MOV   [__r1],A
    0AB5: 55 88 00 MOV   [__r0],0x0
    0AB8: 06 87 44 ADD   [__r1],0x44
    0ABB: 0E 88 00 ADC   [__r0],0x0
    0ABE: 51 88    MOV   A,[__r0]
    0AC0: 60 D4    MOV   REG[0xD4],A
    0AC2: 3E 87    MVI   A,[__r1]
    0AC4: 3B 01    CMP   A,[X+1]
    0AC6: A0 3F    JZ    0x0B06
(0207) 					UART_CPutString("\b\b\b\b");
    0AC8: 10       PUSH  X
    0AC9: 50 02    MOV   A,0x2
    0ACB: 08       PUSH  A
    0ACC: 50 DF    MOV   A,0xDF
    0ACE: 5C       MOV   X,A
    0ACF: 18       POP   A
    0AD0: 7C 06 C1 LCALL _UART_CPutString
    0AD3: 20       POP   X
(0208) 					UART_PutSHexInt(addr+a);
    0AD4: 62 D0 00 MOV   REG[0xD0],0x0
    0AD7: 52 00    MOV   A,[X+0]
    0AD9: 53 87    MOV   [__r1],A
    0ADB: 55 88 00 MOV   [__r0],0x0
    0ADE: 52 03    MOV   A,[X+3]
    0AE0: 02 87    ADD   A,[__r1]
    0AE2: 53 87    MOV   [__r1],A
    0AE4: 52 02    MOV   A,[X+2]
    0AE6: 0A 88    ADC   A,[__r0]
    0AE8: 10       PUSH  X
    0AE9: 08       PUSH  A
    0AEA: 51 87    MOV   A,[__r1]
    0AEC: 20       POP   X
    0AED: 7C 06 17 LCALL _UART_PutSHexInt
(0209) 					UART_CPutString(" FAIL\r\n");
    0AF0: 50 03    MOV   A,0x3
    0AF2: 08       PUSH  A
    0AF3: 50 17    MOV   A,0x17
    0AF5: 5C       MOV   X,A
    0AF6: 18       POP   A
    0AF7: 7C 06 C1 LCALL _UART_CPutString
    0AFA: 20       POP   X
(0210) 					return(1);
    0AFB: 62 D0 00 MOV   REG[0xD0],0x0
    0AFE: 55 87 01 MOV   [__r1],0x1
    0B01: 55 88 00 MOV   [__r0],0x0
    0B04: 80 61    JMP   0x0B66
(0211) 				}
(0212) 			}
    0B06: 77 00    INC   [X+0]
    0B08: 3D 00 40 CMP   [X+0],0x40
    0B0B: CF A2    JC    0x0AAE
(0213) 			if (!b)
    0B0D: 3D 01 00 CMP   [X+1],0x0
    0B10: B0 06    JNZ   0x0B17
(0214) 				b = 0x01;
    0B12: 56 01 01 MOV   [X+1],0x1
    0B15: 80 03    JMP   0x0B19
(0215) 			else
(0216) 				b = b << 1;
    0B17: 66 01    ASL   [X+1]
(0217) 		} while(b);
    0B19: 3D 01 00 CMP   [X+1],0x0
    0B1C: BF 42    JNZ   0x0A5F
(0218) 		if (UART_cReadChar()) {
    0B1E: 10       PUSH  X
    0B1F: 7C 06 2E LCALL _UART_cReadChar
    0B22: 20       POP   X
    0B23: 62 D0 00 MOV   REG[0xD0],0x0
    0B26: 39 00    CMP   A,0x0
    0B28: A0 18    JZ    0x0B41
(0219) 			UART_CPutString("\b\b\b\b\b\b\b\b\b\b\b\b ABORTED    \r\n");
    0B2A: 10       PUSH  X
    0B2B: 50 02    MOV   A,0x2
    0B2D: 08       PUSH  A
    0B2E: 50 C4    MOV   A,0xC4
    0B30: 5C       MOV   X,A
    0B31: 18       POP   A
    0B32: 7C 06 C1 LCALL _UART_CPutString
    0B35: 20       POP   X
(0220) 			return(0);
    0B36: 62 D0 00 MOV   REG[0xD0],0x0
    0B39: 55 87 00 MOV   [__r1],0x0
    0B3C: 55 88 00 MOV   [__r0],0x0
    0B3F: 80 26    JMP   0x0B66
(0221) 		}
(0222) 	}
    0B41: 07 03 40 ADD   [X+3],0x40
    0B44: 0F 02 00 ADC   [X+2],0x0
    0B47: 52 03    MOV   A,[X+3]
    0B49: 11 00    SUB   A,0x0
    0B4B: 52 02    MOV   A,[X+2]
    0B4D: 19 80    SBB   A,0x80
    0B4F: CE F5    JC    0x0A45
(0223) 	UART_CPutString("\b\b\b\b\b\b\b\b\b\b\b\b PASS       \r\n");
    0B51: 10       PUSH  X
    0B52: 50 02    MOV   A,0x2
    0B54: 08       PUSH  A
    0B55: 50 A9    MOV   A,0xA9
    0B57: 5C       MOV   X,A
    0B58: 18       POP   A
    0B59: 7C 06 C1 LCALL _UART_CPutString
    0B5C: 20       POP   X
(0224) 	return(0);
    0B5D: 62 D0 00 MOV   REG[0xD0],0x0
    0B60: 55 87 00 MOV   [__r1],0x0
    0B63: 55 88 00 MOV   [__r0],0x0
    0B66: 38 FA    ADD   SP,0xFA
    0B68: 20       POP   X
    0B69: 7F       RET   
(0225) }
(0226) 
(0227) // This function reads characters from the serial until a character is entered that is within the min & max ASCII characters.
(0228) // That character is returned
(0229) char GetNumber(char min, char max)
(0230) {
_GetNumber:
  c                    --> X+0
  max                  --> X-5
  min                  --> X-4
    0B6A: 10       PUSH  X
    0B6B: 4F       MOV   X,SP
    0B6C: 38 01    ADD   SP,0x1
    0B6E: 80 34    JMP   0x0BA3
(0231) 	char c;
(0232) 	
(0233) 	while (1)
(0234) 	{
(0235) 		c = UART_cReadChar(); // Read the character
    0B70: 10       PUSH  X
    0B71: 7C 06 2E LCALL _UART_cReadChar
    0B74: 20       POP   X
    0B75: 62 D0 00 MOV   REG[0xD0],0x0
    0B78: 54 00    MOV   [X+0],A
(0236) 		if (c < ('0' + min) || c > ('0' + max)) // If the character is not within min to max range, continue the loop
    0B7A: 52 FC    MOV   A,[X-4]
    0B7C: 01 30    ADD   A,0x30
    0B7E: 53 88    MOV   [__r0],A
    0B80: 52 00    MOV   A,[X+0]
    0B82: 3A 88    CMP   A,[__r0]
    0B84: C0 0C    JC    0x0B91
    0B86: 62 D0 00 MOV   REG[0xD0],0x0
    0B89: 52 FB    MOV   A,[X-5]
    0B8B: 01 30    ADD   A,0x30
    0B8D: 3B 00    CMP   A,[X+0]
    0B8F: D0 03    JNC   0x0B93
(0237) 			continue;
    0B91: 80 11    JMP   0x0BA3
(0238) 		
(0239) 		UART_PutChar(c); // Put the character on the serial
    0B93: 10       PUSH  X
    0B94: 52 00    MOV   A,[X+0]
    0B96: 7C 06 1E LCALL _UART_PutChar
    0B99: 20       POP   X
(0240) 		return (c - '0'); // This returns the integer number entered instead of the ASCII value
    0B9A: 62 D0 00 MOV   REG[0xD0],0x0
    0B9D: 52 00    MOV   A,[X+0]
    0B9F: 11 30    SUB   A,0x30
    0BA1: 80 03    JMP   0x0BA5
    0BA3: 8F CC    JMP   0x0B70
    0BA5: 38 FF    ADD   SP,0xFF
    0BA7: 20       POP   X
    0BA8: 7F       RET   
(0241) 	}
(0242) 	
(0243) 	return 0;
(0244) }
(0245) 
(0246) // This function plays a block of data where opt is the data block 0-3.
(0247) void PlayBlock(char id)
(0248) {	
_PlayBlock:
  startAddr            --> X+4
  endAddr              --> X+2
  addr                 --> X+0
  id                   --> X-4
    0BA9: 10       PUSH  X
    0BAA: 4F       MOV   X,SP
    0BAB: 38 06    ADD   SP,0x6
(0249) 	WORD startAddr = id * 0x2000; // Where the address starts for block
    0BAD: 62 D0 00 MOV   REG[0xD0],0x0
    0BB0: 52 FC    MOV   A,[X-4]
    0BB2: 53 88    MOV   [__r0],A
    0BB4: 55 87 00 MOV   [__r1],0x0
    0BB7: 65 88    ASL   [__r0]
    0BB9: 65 87    ASL   [__r1]
    0BBB: 6B 88    RLC   [__r0]
    0BBD: 65 87    ASL   [__r1]
    0BBF: 6B 88    RLC   [__r0]
    0BC1: 65 87    ASL   [__r1]
    0BC3: 6B 88    RLC   [__r0]
    0BC5: 65 87    ASL   [__r1]
    0BC7: 6B 88    RLC   [__r0]
    0BC9: 51 87    MOV   A,[__r1]
    0BCB: 54 05    MOV   [X+5],A
    0BCD: 51 88    MOV   A,[__r0]
    0BCF: 54 04    MOV   [X+4],A
(0250) 	WORD endAddr = startAddr + 0x2000; // Where the address ends for block
    0BD1: 52 05    MOV   A,[X+5]
    0BD3: 01 00    ADD   A,0x0
    0BD5: 54 03    MOV   [X+3],A
    0BD7: 52 04    MOV   A,[X+4]
    0BD9: 09 20    ADC   A,0x20
    0BDB: 54 02    MOV   [X+2],A
(0251) 	WORD addr;
(0252) 	
(0253) 	SPIRAM_WriteStatusRegister(SPIRAM_BYTE_MODE | SPIRAM_DISABLE_HOLD);
    0BDD: 50 01    MOV   A,0x1
    0BDF: 08       PUSH  A
    0BE0: 7C 0C D7 LCALL _SPIRAM_WriteStatusRegister
    0BE3: 38 FF    ADD   SP,0xFF
    0BE5: 62 D0 00 MOV   REG[0xD0],0x0
(0254) 	for (addr = startAddr; addr < endAddr; addr++)
    0BE8: 52 05    MOV   A,[X+5]
    0BEA: 54 01    MOV   [X+1],A
    0BEC: 52 04    MOV   A,[X+4]
    0BEE: 54 00    MOV   [X+0],A
    0BF0: 80 19    JMP   0x0C0A
(0255) 		DAC8_WriteStall(SPIRAM_ReadByte(addr));
    0BF2: 52 00    MOV   A,[X+0]
    0BF4: 08       PUSH  A
    0BF5: 52 01    MOV   A,[X+1]
    0BF7: 08       PUSH  A
    0BF8: 7C 0E 95 LCALL _SPIRAM_ReadByte
    0BFB: 38 FE    ADD   SP,0xFE
    0BFD: 62 D0 00 MOV   REG[0xD0],0x0
    0C00: 10       PUSH  X
    0C01: 7C 07 CC LCALL _DAC8_WriteStall
    0C04: 20       POP   X
    0C05: 77 01    INC   [X+1]
    0C07: 0F 00 00 ADC   [X+0],0x0
    0C0A: 52 01    MOV   A,[X+1]
    0C0C: 13 03    SUB   A,[X+3]
    0C0E: 52 00    MOV   A,[X+0]
    0C10: 1B 02    SBB   A,[X+2]
    0C12: CF DF    JC    0x0BF2
    0C14: 38 FA    ADD   SP,0xFA
    0C16: 20       POP   X
    0C17: 7F       RET   
(0256) }
(0257) 
(0258) void main(void)
(0259) {
_main:
  opt                  --> X+0
    0C18: 10       PUSH  X
    0C19: 4F       MOV   X,SP
    0C1A: 38 03    ADD   SP,0x3
(0260) 	char opt;
(0261) 	
(0262) 	// Make sure nCS is high before doing anything
(0263) 	nCS_HIGH;
    0C1C: 43 04 04 OR    REG[0x4],0x4
(0264) 	
(0265) 	// Enable user module interrupts
(0266) 	SleepTimer_EnableInt();
    0C1F: 10       PUSH  X
    0C20: 7C 07 0B LCALL _SleepTimer_EnableInt
    0C23: 20       POP   X
(0267) 
(0268) 	// Enable global interrutps
(0269) 	M8C_EnableGInt;
    0C24: 71 01    OR    F,0x1
(0270) 
(0271) 	// Start the user modules
(0272) 	UART_Start(UART_PARITY_NONE);
    0C26: 10       PUSH  X
    0C27: 50 00    MOV   A,0x0
    0C29: 7C 05 AC LCALL _UART_Start
(0273) 	UART_PutCRLF();
    0C2C: 7C 06 D3 LCALL _UART_PutCRLF
(0274) 	SPIM_Start(SPIM_SPIM_MODE_0 | SPIM_SPIM_MSB_FIRST);
    0C2F: 50 00    MOV   A,0x0
    0C31: 7C 06 E5 LCALL _SPIM_Start
(0275) 	SleepTimer_Start();
    0C34: 7C 07 13 LCALL _SleepTimer_Start
(0276) 	DAC8_Start(DAC8_FULLPOWER);
    0C37: 50 03    MOV   A,0x3
    0C39: 7C 07 6D LCALL DAC8_SetPower|DAC8_Start|_DAC8_SetPower|_DAC8_Start
    0C3C: 20       POP   X
    0C3D: 80 92    JMP   0x0CD0
(0277) 
(0278) 	while(1) 
(0279) 	{
(0280) 		UART_CPutString("Synthetic wave output is on Port0[4]\r\nCowabunga Dude! Time to catch some waves.\r\n\r\n0. Play block 0\r\n1. Play block 1\r\n2. Play block 2\r\n3. Play block 3\r\n4. Test status register\r\n5. Test byte mode\r\n6. Test sequential mode\r\n");
    0C3F: 10       PUSH  X
    0C40: 50 01    MOV   A,0x1
    0C42: 08       PUSH  A
    0C43: 50 A6    MOV   A,0xA6
    0C45: 5C       MOV   X,A
    0C46: 18       POP   A
    0C47: 7C 06 C1 LCALL _UART_CPutString
    0C4A: 20       POP   X
(0281) 		
(0282) 		opt = GetNumber(0, 6);
    0C4B: 50 06    MOV   A,0x6
    0C4D: 08       PUSH  A
    0C4E: 50 00    MOV   A,0x0
    0C50: 08       PUSH  A
    0C51: 9F 17    CALL  _GetNumber
    0C53: 38 FE    ADD   SP,0xFE
    0C55: 62 D0 00 MOV   REG[0xD0],0x0
    0C58: 54 00    MOV   [X+0],A
(0283) 		switch (opt)
    0C5A: 52 00    MOV   A,[X+0]
    0C5C: 54 02    MOV   [X+2],A
    0C5E: 56 01 00 MOV   [X+1],0x0
    0C61: 3D 01 00 CMP   [X+1],0x0
    0C64: B0 06    JNZ   0x0C6B
    0C66: 3D 02 04 CMP   [X+2],0x4
    0C69: A0 20    JZ    0x0C8A
    0C6B: 3D 01 00 CMP   [X+1],0x0
    0C6E: B0 06    JNZ   0x0C75
    0C70: 3D 02 05 CMP   [X+2],0x5
    0C73: A0 2A    JZ    0x0C9E
    0C75: 3D 01 00 CMP   [X+1],0x0
    0C78: B0 06    JNZ   0x0C7F
    0C7A: 3D 02 06 CMP   [X+2],0x6
    0C7D: A0 3A    JZ    0x0CB8
    0C7F: 80 49    JMP   0x0CC9
(0284) 		{
(0285) 			case 4:
(0286) 				while(SPIRAM_StatusRegisterTest()) 
(0287) 					SleepTimer_SyncWait(4, SleepTimer_WAIT_RELOAD);
    0C81: 10       PUSH  X
    0C82: 57 00    MOV   X,0x0
    0C84: 50 04    MOV   A,0x4
    0C86: 7C 07 4A LCALL _SleepTimer_SyncWait
    0C89: 20       POP   X
    0C8A: 9B 98    CALL  __UserModules_end|__text_start|_SPIRAM_StatusRegisterTest|_SPIRAM_StatusRegisterTest
    0C8C: 62 D0 00 MOV   REG[0xD0],0x0
    0C8F: 39 00    CMP   A,0x0
    0C91: BF EF    JNZ   0x0C81
(0288) 				break;
    0C93: 80 3C    JMP   0x0CD0
(0289) 			
(0290) 			case 5:
(0291) 				while(SPIRAM_ByteModeTest()) 
(0292) 					SleepTimer_SyncWait(4, SleepTimer_WAIT_RELOAD);	
    0C95: 10       PUSH  X
    0C96: 57 00    MOV   X,0x0
    0C98: 50 04    MOV   A,0x4
    0C9A: 7C 07 4A LCALL _SleepTimer_SyncWait
    0C9D: 20       POP   X
    0C9E: 9C 7F    CALL  _SPIRAM_ByteModeTest
    0CA0: 62 D0 00 MOV   REG[0xD0],0x0
    0CA3: 3C 88 00 CMP   [__r0],0x0
    0CA6: BF EE    JNZ   0x0C95
    0CA8: 3C 87 00 CMP   [__r1],0x0
    0CAB: BF E9    JNZ   0x0C95
(0293) 				break;
    0CAD: 80 22    JMP   0x0CD0
(0294) 			
(0295) 			case 6:
(0296) 				while(SPIRAM_SequentialModeTest()) 
(0297) 					SleepTimer_SyncWait(4, SleepTimer_WAIT_RELOAD);
    0CAF: 10       PUSH  X
    0CB0: 57 00    MOV   X,0x0
    0CB2: 50 04    MOV   A,0x4
    0CB4: 7C 07 4A LCALL _SleepTimer_SyncWait
    0CB7: 20       POP   X
    0CB8: 9D 68    CALL  _SPIRAM_SequentialModeTest
    0CBA: 62 D0 00 MOV   REG[0xD0],0x0
    0CBD: 3C 88 00 CMP   [__r0],0x0
    0CC0: BF EE    JNZ   0x0CAF
    0CC2: 3C 87 00 CMP   [__r1],0x0
    0CC5: BF E9    JNZ   0x0CAF
(0298) 				break;
    0CC7: 80 08    JMP   0x0CD0
(0299) 			
(0300) 			default:
(0301) 				PlayBlock(opt);
    0CC9: 52 00    MOV   A,[X+0]
    0CCB: 08       PUSH  A
    0CCC: 9E DB    CALL  _PlayBlock
    0CCE: 38 FF    ADD   SP,0xFF
(0302) 				break;	
(0303) 		}
(0304) 	}
    0CD0: 8F 6E    JMP   0x0C3F
(0305) }FILE: C:\Users\addis\Desktop\ECE381\SPI_SRAM\SPI_SRAM\spi_sram.c
(0001) //*****************************************************************************
(0002) //* Read/Write/Control Functions for the Microchip 23K256 32kB SPI RAM
(0003) //*
(0004) //* bnoble@siue.edu 20140320
(0005) //*****************************************************************************
(0006) 
(0007) #include <m8c.h>        // part specific constants and macros
(0008) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0009) #include "spi_sram.h"
(0010) 
(0011) // Write byte "value" to SRAM Status Register
(0012) BYTE SPIRAM_WriteStatusRegister(BYTE value)
(0013) {
_SPIRAM_WriteStatusRegister:
  b                    --> X+0
  value                --> X-4
    0CD7: 10       PUSH  X
    0CD8: 4F       MOV   X,SP
    0CD9: 38 01    ADD   SP,0x1
(0014) 	BYTE b;
(0015) 
(0016) 	// If bits 5 through 1 aren't zero, return an error as per
(0017) 	// Section 2.5 in the 23K256 datasheet
(0018) 	if (value & 0b00111110)
    0CDB: 48 FC 3E TST   [X-4],0x3E
    0CDE: A0 08    JZ    0x0CE7
(0019) 		return(1);
    0CE0: 62 D0 00 MOV   REG[0xD0],0x0
    0CE3: 50 01    MOV   A,0x1
    0CE5: 80 72    JMP   0x0D58
(0020) 	// Mode SPIRAM_SEQUENTIAL_MODE|SPIRAM_PAGE_MODE are invalid.
(0021) 	if ((value & 0b11000000) == 0b11000000)
    0CE7: 62 D0 00 MOV   REG[0xD0],0x0
    0CEA: 52 FC    MOV   A,[X-4]
    0CEC: 21 C0    AND   A,0xC0
    0CEE: 39 C0    CMP   A,0xC0
    0CF0: B0 05    JNZ   0x0CF6
(0022) 		return(1);
    0CF2: 50 01    MOV   A,0x1
    0CF4: 80 63    JMP   0x0D58
(0023) 	// Make sure the TX buffer is empty (it should be but let's be proper)
(0024) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0CF6: 10       PUSH  X
    0CF7: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0CFA: 20       POP   X
    0CFB: 62 D0 00 MOV   REG[0xD0],0x0
    0CFE: 53 88    MOV   [__r0],A
    0D00: 47 88 10 TST   [__r0],0x10
    0D03: AF F2    JZ    0x0CF6
(0025) 	// SPI transfers begin by bringing CS LOW
(0026) 	nCS_LOW;
    0D05: 41 04 FB AND   REG[0x4],0xFB
(0027) 	// Send the Status Register Write command
(0028) 	SPIM_SendTxData(SPIRAM_WRITE_STATUS_REG);
    0D08: 10       PUSH  X
    0D09: 50 01    MOV   A,0x1
    0D0B: 7C 06 EE LCALL _SPIM_SendTxData
    0D0E: 20       POP   X
(0029) 	// It will be almost immediately loaded into the TX shift register, freeing
(0030) 	// up the TX buffer, and the SPIM module will start transmission.
(0031) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0D0F: 10       PUSH  X
    0D10: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0D13: 20       POP   X
    0D14: 62 D0 00 MOV   REG[0xD0],0x0
    0D17: 53 88    MOV   [__r0],A
    0D19: 47 88 10 TST   [__r0],0x10
    0D1C: AF F2    JZ    0x0D0F
(0032) 	// Prime the TX buffer for the next byte by loading it with the new status
(0033) 	// register byte while the first byte is still transmitting.
(0034) 	SPIM_SendTxData(value);
    0D1E: 10       PUSH  X
    0D1F: 52 FC    MOV   A,[X-4]
    0D21: 7C 06 EE LCALL _SPIM_SendTxData
    0D24: 20       POP   X
(0035) 	// Wait for the first TX/RX cycle to finish. We don't care what we read.
(0036) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0D25: 10       PUSH  X
    0D26: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0D29: 20       POP   X
    0D2A: 62 D0 00 MOV   REG[0xD0],0x0
    0D2D: 53 88    MOV   [__r0],A
    0D2F: 47 88 20 TST   [__r0],0x20
    0D32: AF F2    JZ    0x0D25
(0037) 	// Reading the data clears the RX_BUFFER_FULL flag, even if we don't want it.
(0038) 	SPIM_bReadRxData(); // ignore byte from SPIRAM_WRITE_STATUS_REG TX
    0D34: 10       PUSH  X
    0D35: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    0D38: 20       POP   X
    0D39: 62 D0 00 MOV   REG[0xD0],0x0
(0039) 	// Wait for the second TX/RX cycle to finish so that we know that the entire
(0040) 	// two byte transaction is finished.
(0041) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0D3C: 10       PUSH  X
    0D3D: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0D40: 20       POP   X
    0D41: 62 D0 00 MOV   REG[0xD0],0x0
    0D44: 53 88    MOV   [__r0],A
    0D46: 47 88 20 TST   [__r0],0x20
    0D49: AF F2    JZ    0x0D3C
(0042) 	SPIM_bReadRxData(); // We don't care about this read either
    0D4B: 10       PUSH  X
    0D4C: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    0D4F: 20       POP   X
    0D50: 62 D0 00 MOV   REG[0xD0],0x0
(0043) 	// SPI transfers end by bringing CS LOW
(0044) 	nCS_HIGH;
    0D53: 43 04 04 OR    REG[0x4],0x4
(0045) 	return(0);
    0D56: 50 00    MOV   A,0x0
    0D58: 38 FF    ADD   SP,0xFF
    0D5A: 20       POP   X
    0D5B: 7F       RET   
(0046) }
(0047) 
(0048) // Read SRAM Status Register and return the result.
(0049) BYTE SPIRAM_ReadStatusRegister(void)
(0050) {
_SPIRAM_ReadStatusRegister:
  b                    --> X+1
  statReg              --> X+0
    0D5C: 10       PUSH  X
    0D5D: 4F       MOV   X,SP
    0D5E: 38 02    ADD   SP,0x2
(0051) 	BYTE statReg;
(0052) 	BYTE b;
(0053) 
(0054) 	// Make sure the TX buffer is empty before starting
(0055) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0D60: 10       PUSH  X
    0D61: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0D64: 20       POP   X
    0D65: 62 D0 00 MOV   REG[0xD0],0x0
    0D68: 53 88    MOV   [__r0],A
    0D6A: 47 88 10 TST   [__r0],0x10
    0D6D: AF F2    JZ    0x0D60
(0056) 	nCS_LOW;
    0D6F: 41 04 FB AND   REG[0x4],0xFB
(0057) 	// Send the Read Status Register command
(0058) 	SPIM_SendTxData(SPIRAM_READ_STATUS_REG);
    0D72: 10       PUSH  X
    0D73: 50 05    MOV   A,0x5
    0D75: 7C 06 EE LCALL _SPIM_SendTxData
    0D78: 20       POP   X
(0059) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0D79: 10       PUSH  X
    0D7A: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0D7D: 20       POP   X
    0D7E: 62 D0 00 MOV   REG[0xD0],0x0
    0D81: 53 88    MOV   [__r0],A
    0D83: 47 88 10 TST   [__r0],0x10
    0D86: AF F2    JZ    0x0D79
(0060) 	// Send a dummy byte in order to initiate a TX/RX transfer
(0061) 	SPIM_SendTxData(SPIRAM_DUMMY_BYTE);
    0D88: 10       PUSH  X
    0D89: 50 00    MOV   A,0x0
    0D8B: 7C 06 EE LCALL _SPIM_SendTxData
    0D8E: 20       POP   X
(0062) 	// Wait for the first RX byte to arrive and ignore it; it is meaningless.
(0063) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0D8F: 10       PUSH  X
    0D90: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0D93: 20       POP   X
    0D94: 62 D0 00 MOV   REG[0xD0],0x0
    0D97: 53 88    MOV   [__r0],A
    0D99: 47 88 20 TST   [__r0],0x20
    0D9C: AF F2    JZ    0x0D8F
(0064) 	SPIM_bReadRxData();
    0D9E: 10       PUSH  X
    0D9F: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    0DA2: 20       POP   X
    0DA3: 62 D0 00 MOV   REG[0xD0],0x0
(0065) 	// Wait for the second RX byte to arrive; it contains the status reg value.
(0066) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0DA6: 10       PUSH  X
    0DA7: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0DAA: 20       POP   X
    0DAB: 62 D0 00 MOV   REG[0xD0],0x0
    0DAE: 53 88    MOV   [__r0],A
    0DB0: 47 88 20 TST   [__r0],0x20
    0DB3: AF F2    JZ    0x0DA6
(0067) 	statReg = SPIM_bReadRxData();
    0DB5: 10       PUSH  X
    0DB6: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    0DB9: 20       POP   X
    0DBA: 62 D0 00 MOV   REG[0xD0],0x0
    0DBD: 54 00    MOV   [X+0],A
(0068) 	nCS_HIGH;
    0DBF: 43 04 04 OR    REG[0x4],0x4
(0069) 	return(statReg);
    0DC2: 52 00    MOV   A,[X+0]
    0DC4: 38 FE    ADD   SP,0xFE
    0DC6: 20       POP   X
    0DC7: 7F       RET   
(0070) }
(0071) 
(0072) // Write byte "out" to SRAM address "addr"
(0073) // NOTE: This function assumes the SRAM has already been put in Byte Mode.
(0074) void SPIRAM_WriteByte(WORD addr, BYTE out)
(0075) {
_SPIRAM_WriteByte:
  loAddr               --> X+1
  hiAddr               --> X+0
  out                  --> X-6
  addr                 --> X-5
    0DC8: 10       PUSH  X
    0DC9: 4F       MOV   X,SP
    0DCA: 38 02    ADD   SP,0x2
(0076) 	BYTE hiAddr;
(0077) 	BYTE loAddr;
(0078) 	
(0079) 	// Break the SRAM word address into two bytes
(0080) 	hiAddr = (BYTE)((addr >> 8) & 0x00ff);
    0DCC: 62 D0 00 MOV   REG[0xD0],0x0
    0DCF: 52 FB    MOV   A,[X-5]
    0DD1: 54 00    MOV   [X+0],A
(0081) 	loAddr = (BYTE)(addr & 0x00ff);
    0DD3: 52 FC    MOV   A,[X-4]
    0DD5: 54 01    MOV   [X+1],A
(0082) 	
(0083) 	// Make sure the TX buffer is empty (it should be but let's be proper)
(0084) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0DD7: 10       PUSH  X
    0DD8: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0DDB: 20       POP   X
    0DDC: 62 D0 00 MOV   REG[0xD0],0x0
    0DDF: 53 88    MOV   [__r0],A
    0DE1: 47 88 10 TST   [__r0],0x10
    0DE4: AF F2    JZ    0x0DD7
(0085) 	// SPI transfers begin by bringing CS LOW
(0086) 	nCS_LOW;
    0DE6: 41 04 FB AND   REG[0x4],0xFB
(0087) 	// Send the Write command
(0088) 	SPIM_SendTxData(SPIRAM_WRITE);
    0DE9: 10       PUSH  X
    0DEA: 50 02    MOV   A,0x2
    0DEC: 7C 06 EE LCALL _SPIM_SendTxData
    0DEF: 20       POP   X
(0089) 	// It will be almost immediately loaded into the TX shift register, freeing
(0090) 	// up the TX buffer, and the SPIM module will start transmission.
(0091) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0DF0: 10       PUSH  X
    0DF1: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0DF4: 20       POP   X
    0DF5: 62 D0 00 MOV   REG[0xD0],0x0
    0DF8: 53 88    MOV   [__r0],A
    0DFA: 47 88 10 TST   [__r0],0x10
    0DFD: AF F2    JZ    0x0DF0
(0092) 	// Prime the TX buffer with the MSB of the address while first byte is still transmitting.
(0093) 	SPIM_SendTxData(hiAddr);
    0DFF: 10       PUSH  X
    0E00: 52 00    MOV   A,[X+0]
    0E02: 7C 06 EE LCALL _SPIM_SendTxData
    0E05: 20       POP   X
(0094) 	// Wait for the first TX/RX cycle to finish. We don't care what we read.
(0095) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0E06: 10       PUSH  X
    0E07: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0E0A: 20       POP   X
    0E0B: 62 D0 00 MOV   REG[0xD0],0x0
    0E0E: 53 88    MOV   [__r0],A
    0E10: 47 88 20 TST   [__r0],0x20
    0E13: AF F2    JZ    0x0E06
(0096) 	// Reading the data clears the RX_BUFFER_FULL flag, even if we don't want it.
(0097) 	SPIM_bReadRxData();
    0E15: 10       PUSH  X
    0E16: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    0E19: 20       POP   X
    0E1A: 62 D0 00 MOV   REG[0xD0],0x0
(0098) 	// Wait for the second TX/RX cycle to finish so that we know that the entire
(0099) 	// two byte transaction is finished.
(0100) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0E1D: 10       PUSH  X
    0E1E: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0E21: 20       POP   X
    0E22: 62 D0 00 MOV   REG[0xD0],0x0
    0E25: 53 88    MOV   [__r0],A
    0E27: 47 88 20 TST   [__r0],0x20
    0E2A: AF F2    JZ    0x0E1D
(0101) 	SPIM_bReadRxData(); // We don't care about this read either
    0E2C: 10       PUSH  X
    0E2D: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    0E30: 20       POP   X
    0E31: 62 D0 00 MOV   REG[0xD0],0x0
(0102) 	
(0103) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0E34: 10       PUSH  X
    0E35: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0E38: 20       POP   X
    0E39: 62 D0 00 MOV   REG[0xD0],0x0
    0E3C: 53 88    MOV   [__r0],A
    0E3E: 47 88 10 TST   [__r0],0x10
    0E41: AF F2    JZ    0x0E34
(0104) 	// Send the LSB of address
(0105) 	SPIM_SendTxData(loAddr);
    0E43: 10       PUSH  X
    0E44: 52 01    MOV   A,[X+1]
    0E46: 7C 06 EE LCALL _SPIM_SendTxData
    0E49: 20       POP   X
(0106) 	// It will be almost immediately loaded into the TX shift register, freeing
(0107) 	// up the TX buffer, and the SPIM module will start transmission.
(0108) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0E4A: 10       PUSH  X
    0E4B: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0E4E: 20       POP   X
    0E4F: 62 D0 00 MOV   REG[0xD0],0x0
    0E52: 53 88    MOV   [__r0],A
    0E54: 47 88 10 TST   [__r0],0x10
    0E57: AF F2    JZ    0x0E4A
(0109) 	// Prime the TX buffer for the next byte by loading it with the byte to be written while the first byte is still transmitting.
(0110) 	SPIM_SendTxData(out);
    0E59: 10       PUSH  X
    0E5A: 52 FA    MOV   A,[X-6]
    0E5C: 7C 06 EE LCALL _SPIM_SendTxData
    0E5F: 20       POP   X
(0111) 	// Wait for the first TX/RX cycle to finish. We don't care what we read.
(0112) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0E60: 10       PUSH  X
    0E61: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0E64: 20       POP   X
    0E65: 62 D0 00 MOV   REG[0xD0],0x0
    0E68: 53 88    MOV   [__r0],A
    0E6A: 47 88 20 TST   [__r0],0x20
    0E6D: AF F2    JZ    0x0E60
(0113) 	// Reading the data clears the RX_BUFFER_FULL flag, even if we don't want it.
(0114) 	SPIM_bReadRxData(); // ignore byte from SPIRAM_WRITE_STATUS_REG TX
    0E6F: 10       PUSH  X
    0E70: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    0E73: 20       POP   X
    0E74: 62 D0 00 MOV   REG[0xD0],0x0
(0115) 	// Wait for the second TX/RX cycle to finish so that we know that the entire
(0116) 	// two byte transaction is finished.
(0117) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0E77: 10       PUSH  X
    0E78: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0E7B: 20       POP   X
    0E7C: 62 D0 00 MOV   REG[0xD0],0x0
    0E7F: 53 88    MOV   [__r0],A
    0E81: 47 88 20 TST   [__r0],0x20
    0E84: AF F2    JZ    0x0E77
(0118) 	SPIM_bReadRxData(); // We don't care about this read either
    0E86: 10       PUSH  X
    0E87: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    0E8A: 20       POP   X
    0E8B: 62 D0 00 MOV   REG[0xD0],0x0
(0119) 	
(0120) 	nCS_HIGH;
    0E8E: 43 04 04 OR    REG[0x4],0x4
    0E91: 38 FE    ADD   SP,0xFE
    0E93: 20       POP   X
    0E94: 7F       RET   
(0121) }
(0122) 
(0123) // Read and return byte at SRAM address "addr"
(0124) // NOTE: This function assumes the SRAM has already been put in Byte Mode.
(0125) BYTE SPIRAM_ReadByte(WORD addr)
(0126) {
_SPIRAM_ReadByte:
  in                   --> X+2
  loAddr               --> X+1
  hiAddr               --> X+0
  addr                 --> X-5
    0E95: 10       PUSH  X
    0E96: 4F       MOV   X,SP
    0E97: 38 03    ADD   SP,0x3
(0127) 	BYTE hiAddr;
(0128) 	BYTE loAddr;
(0129) 	BYTE in;
(0130) 
(0131) 	// Break the SRAM word address into two bytes
(0132) 	hiAddr = (BYTE)((addr >> 8) & 0x00ff);
    0E99: 62 D0 00 MOV   REG[0xD0],0x0
    0E9C: 52 FB    MOV   A,[X-5]
    0E9E: 54 00    MOV   [X+0],A
(0133) 	loAddr = (BYTE)(addr & 0x00ff);
    0EA0: 52 FC    MOV   A,[X-4]
    0EA2: 54 01    MOV   [X+1],A
(0134) 	
(0135) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0EA4: 10       PUSH  X
    0EA5: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0EA8: 20       POP   X
    0EA9: 62 D0 00 MOV   REG[0xD0],0x0
    0EAC: 53 88    MOV   [__r0],A
    0EAE: 47 88 10 TST   [__r0],0x10
    0EB1: AF F2    JZ    0x0EA4
(0136) 	nCS_LOW;
    0EB3: 41 04 FB AND   REG[0x4],0xFB
(0137) 	// Send the Read command
(0138) 	SPIM_SendTxData(SPIRAM_READ);
    0EB6: 10       PUSH  X
    0EB7: 50 03    MOV   A,0x3
    0EB9: 7C 06 EE LCALL _SPIM_SendTxData
    0EBC: 20       POP   X
(0139) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0EBD: 10       PUSH  X
    0EBE: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0EC1: 20       POP   X
    0EC2: 62 D0 00 MOV   REG[0xD0],0x0
    0EC5: 53 88    MOV   [__r0],A
    0EC7: 47 88 10 TST   [__r0],0x10
    0ECA: AF F2    JZ    0x0EBD
(0140) 	// Send MSB of address
(0141) 	SPIM_SendTxData(hiAddr);
    0ECC: 10       PUSH  X
    0ECD: 52 00    MOV   A,[X+0]
    0ECF: 7C 06 EE LCALL _SPIM_SendTxData
    0ED2: 20       POP   X
(0142) 	// Wait for the first RX byte to arrive and ignore it; it is meaningless.
(0143) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0ED3: 10       PUSH  X
    0ED4: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0ED7: 20       POP   X
    0ED8: 62 D0 00 MOV   REG[0xD0],0x0
    0EDB: 53 88    MOV   [__r0],A
    0EDD: 47 88 20 TST   [__r0],0x20
    0EE0: AF F2    JZ    0x0ED3
(0144) 	SPIM_bReadRxData();
    0EE2: 10       PUSH  X
    0EE3: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    0EE6: 20       POP   X
    0EE7: 62 D0 00 MOV   REG[0xD0],0x0
(0145) 	// Wait for the second RX byte to arrive; it contains the status reg value.
(0146) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0EEA: 10       PUSH  X
    0EEB: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0EEE: 20       POP   X
    0EEF: 62 D0 00 MOV   REG[0xD0],0x0
    0EF2: 53 88    MOV   [__r0],A
    0EF4: 47 88 20 TST   [__r0],0x20
    0EF7: AF F2    JZ    0x0EEA
(0147) 	SPIM_bReadRxData();
    0EF9: 10       PUSH  X
    0EFA: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    0EFD: 20       POP   X
    0EFE: 62 D0 00 MOV   REG[0xD0],0x0
(0148) 	
(0149) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0F01: 10       PUSH  X
    0F02: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0F05: 20       POP   X
    0F06: 62 D0 00 MOV   REG[0xD0],0x0
    0F09: 53 88    MOV   [__r0],A
    0F0B: 47 88 10 TST   [__r0],0x10
    0F0E: AF F2    JZ    0x0F01
(0150) 	// Send LSB of address
(0151) 	SPIM_SendTxData(loAddr);
    0F10: 10       PUSH  X
    0F11: 52 01    MOV   A,[X+1]
    0F13: 7C 06 EE LCALL _SPIM_SendTxData
    0F16: 20       POP   X
(0152) 	// It will be almost immediately loaded into the TX shift register, freeing
(0153) 	// up the TX buffer, and the SPIM module will start transmission.
(0154) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0F17: 10       PUSH  X
    0F18: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0F1B: 20       POP   X
    0F1C: 62 D0 00 MOV   REG[0xD0],0x0
    0F1F: 53 88    MOV   [__r0],A
    0F21: 47 88 10 TST   [__r0],0x10
    0F24: AF F2    JZ    0x0F17
(0155) 	// Prime the TX buffer for the next byte by loading it with a dummy byte while the first byte is still transmitting.
(0156) 	SPIM_SendTxData(SPIRAM_DUMMY_BYTE);
    0F26: 10       PUSH  X
    0F27: 50 00    MOV   A,0x0
    0F29: 7C 06 EE LCALL _SPIM_SendTxData
    0F2C: 20       POP   X
(0157) 	// Wait for the first TX/RX cycle to finish. We don't care what we read.
(0158) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0F2D: 10       PUSH  X
    0F2E: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0F31: 20       POP   X
    0F32: 62 D0 00 MOV   REG[0xD0],0x0
    0F35: 53 88    MOV   [__r0],A
    0F37: 47 88 20 TST   [__r0],0x20
    0F3A: AF F2    JZ    0x0F2D
(0159) 	// Reading the data clears the RX_BUFFER_FULL flag, even if we don't want it.
(0160) 	SPIM_bReadRxData(); // ignore byte from SPIRAM_WRITE_STATUS_REG TX
    0F3C: 10       PUSH  X
    0F3D: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    0F40: 20       POP   X
    0F41: 62 D0 00 MOV   REG[0xD0],0x0
(0161) 	// Wait for the second TX/RX cycle to finish so that we know that the entire
(0162) 	// two byte transaction is finished.
(0163) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0F44: 10       PUSH  X
    0F45: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0F48: 20       POP   X
    0F49: 62 D0 00 MOV   REG[0xD0],0x0
    0F4C: 53 88    MOV   [__r0],A
    0F4E: 47 88 20 TST   [__r0],0x20
    0F51: AF F2    JZ    0x0F44
(0164) 	in = SPIM_bReadRxData(); // This is the output byte
    0F53: 10       PUSH  X
    0F54: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    0F57: 20       POP   X
    0F58: 62 D0 00 MOV   REG[0xD0],0x0
    0F5B: 54 02    MOV   [X+2],A
(0165) 	
(0166) 	nCS_HIGH;
    0F5D: 43 04 04 OR    REG[0x4],0x4
(0167) 	return in;
    0F60: 52 02    MOV   A,[X+2]
    0F62: 38 FD    ADD   SP,0xFD
    0F64: 20       POP   X
    0F65: 7F       RET   
(0168) }
(0169) 
(0170) // Write "count" bytes starting at address "addr" from array "out".
(0171) // The M8C is limited to 256 byte pages. This limits the maximum
(0172) // array size to 256 bytes, which means that "count" is only useful
(0173) // as a BYTE.
(0174) // NOTE: This function assumes the SRAM has already been put in Sequential Mode
(0175) void SPIRAM_WriteArray(WORD addr, BYTE *out, BYTE count)
(0176) {
_SPIRAM_WriteArray:
  loAddr               --> X+2
  hiAddr               --> X+1
  i                    --> X+0
  count                --> X-8
  out                  --> X-7
  addr                 --> X-5
    0F66: 10       PUSH  X
    0F67: 4F       MOV   X,SP
    0F68: 38 03    ADD   SP,0x3
(0177) 	BYTE hiAddr;
(0178) 	BYTE loAddr;
(0179) 	BYTE i;
(0180) 	
(0181) 	// If some clown tries to write 0 bytes, just return.
(0182) 	// XXX - Always beware of clowns!
(0183) 	if (!count)
    0F6A: 3D F8 00 CMP   [X-8],0x0
    0F6D: B0 03    JNZ   0x0F71
(0184) 		return;
    0F6F: 80 E6    JMP   0x1056
(0185) 	// Break the SRAM word address into two bytes
(0186) 	hiAddr = (BYTE)((addr >> 8) & 0x00ff);
    0F71: 62 D0 00 MOV   REG[0xD0],0x0
    0F74: 52 FB    MOV   A,[X-5]
    0F76: 54 01    MOV   [X+1],A
(0187) 	loAddr = (BYTE)(addr & 0x00ff);
    0F78: 52 FC    MOV   A,[X-4]
    0F7A: 54 02    MOV   [X+2],A
(0188) 	
(0189) 	// Make sure the TX buffer is empty (it should be but let's be proper)
(0190) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0F7C: 10       PUSH  X
    0F7D: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0F80: 20       POP   X
    0F81: 62 D0 00 MOV   REG[0xD0],0x0
    0F84: 53 88    MOV   [__r0],A
    0F86: 47 88 10 TST   [__r0],0x10
    0F89: AF F2    JZ    0x0F7C
(0191) 	// SPI transfers begin by bringing CS LOW
(0192) 	nCS_LOW;
    0F8B: 41 04 FB AND   REG[0x4],0xFB
(0193) 	// Send the Write command
(0194) 	SPIM_SendTxData(SPIRAM_WRITE);
    0F8E: 10       PUSH  X
    0F8F: 50 02    MOV   A,0x2
    0F91: 7C 06 EE LCALL _SPIM_SendTxData
    0F94: 20       POP   X
(0195) 	// It will be almost immediately loaded into the TX shift register, freeing
(0196) 	// up the TX buffer, and the SPIM module will start transmission.
(0197) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0F95: 10       PUSH  X
    0F96: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0F99: 20       POP   X
    0F9A: 62 D0 00 MOV   REG[0xD0],0x0
    0F9D: 53 88    MOV   [__r0],A
    0F9F: 47 88 10 TST   [__r0],0x10
    0FA2: AF F2    JZ    0x0F95
(0198) 	// Prime the TX buffer for the next byte by loading it with the MSB of address while the first byte is still transmitting.
(0199) 	SPIM_SendTxData(hiAddr);
    0FA4: 10       PUSH  X
    0FA5: 52 01    MOV   A,[X+1]
    0FA7: 7C 06 EE LCALL _SPIM_SendTxData
    0FAA: 20       POP   X
(0200) 	// Wait for the first TX/RX cycle to finish. We don't care what we read.
(0201) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0FAB: 10       PUSH  X
    0FAC: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0FAF: 20       POP   X
    0FB0: 62 D0 00 MOV   REG[0xD0],0x0
    0FB3: 53 88    MOV   [__r0],A
    0FB5: 47 88 20 TST   [__r0],0x20
    0FB8: AF F2    JZ    0x0FAB
(0202) 	// Reading the data clears the RX_BUFFER_FULL flag, even if we don't want it.
(0203) 	SPIM_bReadRxData();
    0FBA: 10       PUSH  X
    0FBB: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    0FBE: 20       POP   X
    0FBF: 62 D0 00 MOV   REG[0xD0],0x0
(0204) 	// Wait for the second TX/RX cycle to finish so that we know that the entire
(0205) 	// two byte transaction is finished.
(0206) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0FC2: 10       PUSH  X
    0FC3: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0FC6: 20       POP   X
    0FC7: 62 D0 00 MOV   REG[0xD0],0x0
    0FCA: 53 88    MOV   [__r0],A
    0FCC: 47 88 20 TST   [__r0],0x20
    0FCF: AF F2    JZ    0x0FC2
(0207) 	SPIM_bReadRxData(); // We don't care about this read either
    0FD1: 10       PUSH  X
    0FD2: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    0FD5: 20       POP   X
    0FD6: 62 D0 00 MOV   REG[0xD0],0x0
(0208) 	
(0209) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0FD9: 10       PUSH  X
    0FDA: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0FDD: 20       POP   X
    0FDE: 62 D0 00 MOV   REG[0xD0],0x0
    0FE1: 53 88    MOV   [__r0],A
    0FE3: 47 88 10 TST   [__r0],0x10
    0FE6: AF F2    JZ    0x0FD9
(0210) 	// Send LSB of address
(0211) 	SPIM_SendTxData(loAddr);
    0FE8: 10       PUSH  X
    0FE9: 52 02    MOV   A,[X+2]
    0FEB: 7C 06 EE LCALL _SPIM_SendTxData
    0FEE: 20       POP   X
(0212) 	// It will be almost immediately loaded into the TX shift register, freeing
(0213) 	// up the TX buffer, and the SPIM module will start transmission.
(0214) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    0FEF: 10       PUSH  X
    0FF0: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    0FF3: 20       POP   X
    0FF4: 62 D0 00 MOV   REG[0xD0],0x0
    0FF7: 53 88    MOV   [__r0],A
    0FF9: 47 88 20 TST   [__r0],0x20
    0FFC: AF F2    JZ    0x0FEF
(0215) 	SPIM_bReadRxData(); // We don't care about this read either
    0FFE: 10       PUSH  X
    0FFF: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    1002: 20       POP   X
    1003: 62 D0 00 MOV   REG[0xD0],0x0
(0216) 	
(0217) 	for (i = 0; i < count; ++i) // Loop through the array
    1006: 56 00 00 MOV   [X+0],0x0
    1009: 80 43    JMP   0x104D
(0218) 	{
(0219) 		while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    100B: 10       PUSH  X
    100C: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    100F: 20       POP   X
    1010: 62 D0 00 MOV   REG[0xD0],0x0
    1013: 53 88    MOV   [__r0],A
    1015: 47 88 10 TST   [__r0],0x10
    1018: AF F2    JZ    0x100B
(0220) 		// Send the byte at index i in string out
(0221) 		SPIM_SendTxData(out[i]);
    101A: 52 00    MOV   A,[X+0]
    101C: 53 87    MOV   [__r1],A
    101E: 55 88 00 MOV   [__r0],0x0
    1021: 52 FA    MOV   A,[X-6]
    1023: 04 87    ADD   [__r1],A
    1025: 52 F9    MOV   A,[X-7]
    1027: 0C 88    ADC   [__r0],A
    1029: 51 88    MOV   A,[__r0]
    102B: 60 D4    MOV   REG[0xD4],A
    102D: 3E 87    MVI   A,[__r1]
    102F: 10       PUSH  X
    1030: 7C 06 EE LCALL _SPIM_SendTxData
    1033: 20       POP   X
(0222) 		while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1034: 10       PUSH  X
    1035: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    1038: 20       POP   X
    1039: 62 D0 00 MOV   REG[0xD0],0x0
    103C: 53 88    MOV   [__r0],A
    103E: 47 88 20 TST   [__r0],0x20
    1041: AF F2    JZ    0x1034
(0223) 		SPIM_bReadRxData(); // We don't care about this read either
    1043: 10       PUSH  X
    1044: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    1047: 20       POP   X
    1048: 62 D0 00 MOV   REG[0xD0],0x0
(0224) 			
(0225) 	}
    104B: 77 00    INC   [X+0]
    104D: 52 00    MOV   A,[X+0]
    104F: 3B F8    CMP   A,[X-8]
    1051: CF B9    JC    0x100B
(0226) 	
(0227) 	nCS_HIGH;
    1053: 43 04 04 OR    REG[0x4],0x4
    1056: 38 FD    ADD   SP,0xFD
    1058: 20       POP   X
    1059: 7F       RET   
(0228) }
(0229) 
(0230) // Read "count" bytes starting at address "addr" into array "in"
(0231) // The M8C is limited to 256 byte pages. This limits the maximum
(0232) // array size to 256 bytes, which means that "count" is only useful
(0233) // as a BYTE.
(0234) // NOTE: This function assumes the SRAM has already been put in Sequential Mode
(0235) void SPIRAM_ReadArray(WORD addr, BYTE *in, BYTE count)
(0236) {
_SPIRAM_ReadArray:
  loAddr               --> X+2
  hiAddr               --> X+1
  i                    --> X+0
  count                --> X-8
  in                   --> X-7
  addr                 --> X-5
    105A: 10       PUSH  X
    105B: 4F       MOV   X,SP
    105C: 38 03    ADD   SP,0x3
(0237) 	BYTE hiAddr;
(0238) 	BYTE loAddr;
(0239) 	BYTE i;
(0240) 	
(0241) 	// If some clown tries to write 0 bytes, just return.
(0242) 	// XXX - Always beware of clowns!
(0243) 	if (!count)
    105E: 3D F8 00 CMP   [X-8],0x0
    1061: B0 03    JNZ   0x1065
(0244) 		return;
    1063: 80 EC    JMP   0x1150
(0245) 	// Break the SRAM word address into two bytes
(0246) 	hiAddr = (BYTE)((addr >> 8) & 0x00ff);
    1065: 62 D0 00 MOV   REG[0xD0],0x0
    1068: 52 FB    MOV   A,[X-5]
    106A: 54 01    MOV   [X+1],A
(0247) 	loAddr = (BYTE)(addr & 0x00ff);
    106C: 52 FC    MOV   A,[X-4]
    106E: 54 02    MOV   [X+2],A
(0248) 	
(0249) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1070: 10       PUSH  X
    1071: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    1074: 20       POP   X
    1075: 62 D0 00 MOV   REG[0xD0],0x0
    1078: 53 88    MOV   [__r0],A
    107A: 47 88 10 TST   [__r0],0x10
    107D: AF F2    JZ    0x1070
(0250) 	// SPI transfers begin by bringing CS LOW
(0251) 	nCS_LOW;
    107F: 41 04 FB AND   REG[0x4],0xFB
(0252) 	// Send the Read command
(0253) 	SPIM_SendTxData(SPIRAM_READ);
    1082: 10       PUSH  X
    1083: 50 03    MOV   A,0x3
    1085: 7C 06 EE LCALL _SPIM_SendTxData
    1088: 20       POP   X
(0254) 	// It will be almost immediately loaded into the TX shift register, freeing
(0255) 	// up the TX buffer, and the SPIM module will start transmission.
(0256) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1089: 10       PUSH  X
    108A: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    108D: 20       POP   X
    108E: 62 D0 00 MOV   REG[0xD0],0x0
    1091: 53 88    MOV   [__r0],A
    1093: 47 88 10 TST   [__r0],0x10
    1096: AF F2    JZ    0x1089
(0257) 	// Prime the TX buffer for the next byte by loading it with the MSB of address while the first byte is still transmitting.
(0258) 	SPIM_SendTxData(hiAddr);
    1098: 10       PUSH  X
    1099: 52 01    MOV   A,[X+1]
    109B: 7C 06 EE LCALL _SPIM_SendTxData
    109E: 20       POP   X
(0259) 	// Wait for the first TX/RX cycle to finish. We don't care what we read.
(0260) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    109F: 10       PUSH  X
    10A0: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    10A3: 20       POP   X
    10A4: 62 D0 00 MOV   REG[0xD0],0x0
    10A7: 53 88    MOV   [__r0],A
    10A9: 47 88 20 TST   [__r0],0x20
    10AC: AF F2    JZ    0x109F
(0261) 	// Reading the data clears the RX_BUFFER_FULL flag, even if we don't want it.
(0262) 	SPIM_bReadRxData();
    10AE: 10       PUSH  X
    10AF: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    10B2: 20       POP   X
    10B3: 62 D0 00 MOV   REG[0xD0],0x0
(0263) 	// Wait for the second TX/RX cycle to finish so that we know that the entire
(0264) 	// two byte transaction is finished.
(0265) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    10B6: 10       PUSH  X
    10B7: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    10BA: 20       POP   X
    10BB: 62 D0 00 MOV   REG[0xD0],0x0
    10BE: 53 88    MOV   [__r0],A
    10C0: 47 88 20 TST   [__r0],0x20
    10C3: AF F2    JZ    0x10B6
(0266) 	SPIM_bReadRxData(); // We don't care about this read either
    10C5: 10       PUSH  X
    10C6: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    10C9: 20       POP   X
    10CA: 62 D0 00 MOV   REG[0xD0],0x0
(0267) 	
(0268) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    10CD: 10       PUSH  X
    10CE: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    10D1: 20       POP   X
    10D2: 62 D0 00 MOV   REG[0xD0],0x0
    10D5: 53 88    MOV   [__r0],A
    10D7: 47 88 10 TST   [__r0],0x10
    10DA: AF F2    JZ    0x10CD
(0269) 	// Send LSB of address
(0270) 	SPIM_SendTxData(loAddr);
    10DC: 10       PUSH  X
    10DD: 52 02    MOV   A,[X+2]
    10DF: 7C 06 EE LCALL _SPIM_SendTxData
    10E2: 20       POP   X
(0271) 	// It will be almost immediately loaded into the TX shift register, freeing
(0272) 	// up the TX buffer, and the SPIM module will start transmission.
(0273) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    10E3: 10       PUSH  X
    10E4: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    10E7: 20       POP   X
    10E8: 62 D0 00 MOV   REG[0xD0],0x0
    10EB: 53 88    MOV   [__r0],A
    10ED: 47 88 20 TST   [__r0],0x20
    10F0: AF F2    JZ    0x10E3
(0274) 	SPIM_bReadRxData(); // We don't care about this read either
    10F2: 10       PUSH  X
    10F3: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    10F6: 20       POP   X
    10F7: 62 D0 00 MOV   REG[0xD0],0x0
(0275) 	
(0276) 	for (i = 0; i < count; ++i) // Loop through count
    10FA: 56 00 00 MOV   [X+0],0x0
    10FD: 80 49    JMP   0x1147
(0277) 	{
(0278) 		while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    10FF: 10       PUSH  X
    1100: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    1103: 20       POP   X
    1104: 62 D0 00 MOV   REG[0xD0],0x0
    1107: 53 88    MOV   [__r0],A
    1109: 47 88 10 TST   [__r0],0x10
    110C: AF F2    JZ    0x10FF
(0279) 		// Send dummy byte; we just want to read data
(0280) 		SPIM_SendTxData(SPIRAM_DUMMY_BYTE);
    110E: 10       PUSH  X
    110F: 50 00    MOV   A,0x0
    1111: 7C 06 EE LCALL _SPIM_SendTxData
    1114: 20       POP   X
(0281) 		while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1115: 10       PUSH  X
    1116: 7C 06 F4 LCALL _bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    1119: 20       POP   X
    111A: 62 D0 00 MOV   REG[0xD0],0x0
    111D: 53 88    MOV   [__r0],A
    111F: 47 88 20 TST   [__r0],0x20
    1122: AF F2    JZ    0x1115
(0282) 		in[i] = SPIM_bReadRxData(); // Set character in string to be the data read
    1124: 10       PUSH  X
    1125: 7C 06 F1 LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_bSPIM_ReadRxData|_SPIM_bReadRxData
    1128: 20       POP   X
    1129: 62 D0 00 MOV   REG[0xD0],0x0
    112C: 53 88    MOV   [__r0],A
    112E: 52 00    MOV   A,[X+0]
    1130: 53 85    MOV   [__r3],A
    1132: 55 86 00 MOV   [__r2],0x0
    1135: 52 FA    MOV   A,[X-6]
    1137: 04 85    ADD   [__r3],A
    1139: 52 F9    MOV   A,[X-7]
    113B: 0C 86    ADC   [__r2],A
    113D: 51 86    MOV   A,[__r2]
    113F: 60 D5    MOV   REG[0xD5],A
    1141: 51 88    MOV   A,[__r0]
    1143: 3F 85    MVI   [__r3],A
(0283) 	}
    1145: 77 00    INC   [X+0]
    1147: 52 00    MOV   A,[X+0]
    1149: 3B F8    CMP   A,[X-8]
    114B: CF B3    JC    0x10FF
(0284) 	
(0285) 	nCS_HIGH;
    114D: 43 04 04 OR    REG[0x4],0x4
    1150: 38 FD    ADD   SP,0xFD
    1152: 20       POP   X
    1153: 7F       RET   
