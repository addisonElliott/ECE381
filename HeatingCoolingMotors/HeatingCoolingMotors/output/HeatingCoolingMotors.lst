FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 1C 9E LJMP  _PSoC_GPIO_ISR_C   (0145) 	ljmp _PSoC_GPIO_ISR_C
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 1D 60 LJMP  _PSoC_MotorDriver_ISR_C(0153) 	ljmp _PSoC_MotorDriver_ISR_C
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 09 F4 LJMP  _UART_TX_ISR       (0157)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 09 F5 LJMP  _UART_RX_ISR       (0161)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 1D 49 LJMP  _PSoC_TempCounter_ISR_C(0169) 	ljmp _PSoC_TempCounter_ISR_C
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 0F DC LJMP  _I2CHW_ISR         (0213)     ljmp	_I2CHW_ISR
0063: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [fanMode+88],0x0   (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [fanMode+89],0x0   (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 09 89 LCALL 0x0989             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 08    MOV   A,0x8              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 7C    MOV   X,0x7C             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 83    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 83    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 83    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 82    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 83    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 83 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 82    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 82    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 83    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 83 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 82    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 14 4D LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0884: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_i2cram_Bank1
                                        (0019) export LoadConfigTBL_i2cram_Bank0
                                        (0020) export LoadConfigTBL_i2cram_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_i2cram_Bank0:
                                        (0023) ;  Instance name I2CHW, User Module I2CHW
                                        (0024) ;  Instance name LCD, User Module LCD
                                        (0025) ;  Instance name MotorDriver, User Module Counter16
                                        (0026) ;       Instance name MotorDriver, Block Name CNTR16_LSB(DBB00)
                                        (0027) 	db		23h, 00h		;MotorDriver_CONTROL_LSB_REG(DBB00CR0)
                                        (0028) 	db		21h, 9eh		;MotorDriver_PERIOD_LSB_REG(DBB00DR1)
                                        (0029) 	db		22h, 4fh		;MotorDriver_COMPARE_LSB_REG(DBB00DR2)
                                        (0030) ;       Instance name MotorDriver, Block Name CNTR16_MSB(DBB01)
                                        (0031) 	db		27h, 00h		;MotorDriver_CONTROL_MSB_REG(DBB01CR0)
                                        (0032) 	db		25h, 00h		;MotorDriver_PERIOD_MSB_REG(DBB01DR1)
                                        (0033) 	db		26h, 00h		;MotorDriver_COMPARE_MSB_REG(DBB01DR2)
                                        (0034) ;  Instance name TempCounter, User Module Counter16
                                        (0035) ;       Instance name TempCounter, Block Name CNTR16_LSB(DBB10)
                                        (0036) 	db		33h, 00h		;TempCounter_CONTROL_LSB_REG(DBB10CR0)
                                        (0037) 	db		31h, ffh		;TempCounter_PERIOD_LSB_REG(DBB10DR1)
                                        (0038) 	db		32h, 80h		;TempCounter_COMPARE_LSB_REG(DBB10DR2)
                                        (0039) ;       Instance name TempCounter, Block Name CNTR16_MSB(DBB11)
                                        (0040) 	db		37h, 00h		;TempCounter_CONTROL_MSB_REG(DBB11CR0)
                                        (0041) 	db		35h, 7ch		;TempCounter_PERIOD_MSB_REG(DBB11DR1)
                                        (0042) 	db		36h, 3eh		;TempCounter_COMPARE_MSB_REG(DBB11DR2)
                                        (0043) ;  Instance name UART, User Module UART
                                        (0044) ;       Instance name UART, Block Name RX(DCB03)
                                        (0045) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0046) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0047) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0048) ;       Instance name UART, Block Name TX(DCB02)
                                        (0049) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0050) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0051) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0052) ;  Global Register values Bank 0
                                        (0053) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0054) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0055) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0056) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0057) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0058) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0059) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0060) 	db		b0h, 30h		; Row_0_InputMux register (RDI0RI)
                                        (0061) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0062) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0063) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0064) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0065) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0066) 	db		b6h, 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0067) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0068) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0069) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0070) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0071) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0072) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0073) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0074) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0075) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0076) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0077) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0078) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0079) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0080) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0081) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0082) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0083) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0084) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0085) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0086) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0087) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0088) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0089) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0090) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0091) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0092) 	db		ffh
                                        (0093) LoadConfigTBL_i2cram_Bank1:
                                        (0094) ;  Instance name I2CHW, User Module I2CHW
                                        (0095) ;  Instance name LCD, User Module LCD
                                        (0096) ;  Instance name MotorDriver, User Module Counter16
                                        (0097) ;       Instance name MotorDriver, Block Name CNTR16_LSB(DBB00)
                                        (0098) 	db		20h, 11h		;MotorDriver_FUNC_LSB_REG(DBB00FN)
                                        (0099) 	db		21h, 15h		;MotorDriver_INPUT_LSB_REG(DBB00IN)
                                        (0100) 	db		22h, 40h		;MotorDriver_OUTPUT_LSB_REG(DBB00OU)
                                        (0101) ;       Instance name MotorDriver, Block Name CNTR16_MSB(DBB01)
                                        (0102) 	db		24h, 39h		;MotorDriver_FUNC_MSB_REG(DBB01FN)
                                        (0103) 	db		25h, 35h		;MotorDriver_INPUT_MSB_REG(DBB01IN)
                                        (0104) 	db		26h, 40h		;MotorDriver_OUTPUT_MSB_REG(DBB01OU)
                                        (0105) ;  Instance name TempCounter, User Module Counter16
                                        (0106) ;       Instance name TempCounter, Block Name CNTR16_LSB(DBB10)
                                        (0107) 	db		30h, 11h		;TempCounter_FUNC_LSB_REG(DBB10FN)
                                        (0108) 	db		31h, 17h		;TempCounter_INPUT_LSB_REG(DBB10IN)
                                        (0109) 	db		32h, 40h		;TempCounter_OUTPUT_LSB_REG(DBB10OU)
                                        (0110) ;       Instance name TempCounter, Block Name CNTR16_MSB(DBB11)
                                        (0111) 	db		34h, 39h		;TempCounter_FUNC_MSB_REG(DBB11FN)
                                        (0112) 	db		35h, 37h		;TempCounter_INPUT_MSB_REG(DBB11IN)
                                        (0113) 	db		36h, 40h		;TempCounter_OUTPUT_MSB_REG(DBB11OU)
                                        (0114) ;  Instance name UART, User Module UART
                                        (0115) ;       Instance name UART, Block Name RX(DCB03)
                                        (0116) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0117) 	db		2dh, e1h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0118) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0119) ;       Instance name UART, Block Name TX(DCB02)
                                        (0120) 	db		28h, 0dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0121) 	db		29h, 01h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0122) 	db		2ah, 47h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0123) ;  Global Register values Bank 1
                                        (0124) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0125) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0126) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0127) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0128) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0129) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0130) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0131) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0132) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0133) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0134) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0135) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0136) 	db		e1h, 72h		; OscillatorControl_1 register (OSC_CR1)
                                        (0137) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0138) 	db		dfh, 26h		; OscillatorControl_3 register (OSC_CR3)
                                        (0139) 	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
                                        (0140) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0141) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0142) 	db		ffh
                                        (0143) AREA psoc_config(rom, rel)
                                        (0144) LoadConfigTBL_i2cram_Ordered:
                                        (0145) ;  Ordered Global Register values
                                        (0146) 	M8C_SetBank0
0886: 62 00 00 MOV   REG[0x0],0x0       (0147) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0889: 71 10    OR    F,0x10             
                                        (0148) 	M8C_SetBank1
088B: 62 00 0F MOV   REG[0x0],0xF       (0149) 	mov	reg[00h], 0fh		; Port_0_DriveMode_0 register (PRT0DM0)
088E: 62 01 F0 MOV   REG[0x1],0xF0      (0150) 	mov	reg[01h], f0h		; Port_0_DriveMode_1 register (PRT0DM1)
0891: 70 EF    AND   F,0xEF             
                                        (0151) 	M8C_SetBank0
0893: 62 03 F0 MOV   REG[0x3],0xF0      (0152) 	mov	reg[03h], f0h		; Port_0_DriveMode_2 register (PRT0DM2)
0896: 62 02 00 MOV   REG[0x2],0x0       (0153) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0899: 71 10    OR    F,0x10             
                                        (0154) 	M8C_SetBank1
089B: 62 02 00 MOV   REG[0x2],0x0       (0155) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
089E: 62 03 00 MOV   REG[0x3],0x0       (0156) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
08A1: 70 EF    AND   F,0xEF             
                                        (0157) 	M8C_SetBank0
08A3: 62 01 00 MOV   REG[0x1],0x0       (0158) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
08A6: 62 04 A0 MOV   REG[0x4],0xA0      (0159) 	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
08A9: 71 10    OR    F,0x10             
                                        (0160) 	M8C_SetBank1
08AB: 62 04 A0 MOV   REG[0x4],0xA0      (0161) 	mov	reg[04h], a0h		; Port_1_DriveMode_0 register (PRT1DM0)
08AE: 62 05 FF MOV   REG[0x5],0xFF      (0162) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
08B1: 70 EF    AND   F,0xEF             
                                        (0163) 	M8C_SetBank0
08B3: 62 07 AF MOV   REG[0x7],0xAF      (0164) 	mov	reg[07h], afh		; Port_1_DriveMode_2 register (PRT1DM2)
08B6: 62 06 40 MOV   REG[0x6],0x40      (0165) 	mov	reg[06h], 40h		; Port_1_GlobalSelect register (PRT1GS)
08B9: 71 10    OR    F,0x10             
                                        (0166) 	M8C_SetBank1
08BB: 62 06 10 MOV   REG[0x6],0x10      (0167) 	mov	reg[06h], 10h		; Port_1_IntCtrl_0 register (PRT1IC0)
08BE: 62 07 10 MOV   REG[0x7],0x10      (0168) 	mov	reg[07h], 10h		; Port_1_IntCtrl_1 register (PRT1IC1)
08C1: 70 EF    AND   F,0xEF             
                                        (0169) 	M8C_SetBank0
08C3: 62 05 10 MOV   REG[0x5],0x10      (0170) 	mov	reg[05h], 10h		; Port_1_IntEn register (PRT1IE)
08C6: 62 08 00 MOV   REG[0x8],0x0       (0171) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
08C9: 71 10    OR    F,0x10             
                                        (0172) 	M8C_SetBank1
08CB: 62 08 FF MOV   REG[0x8],0xFF      (0173) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
08CE: 62 09 00 MOV   REG[0x9],0x0       (0174) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
08D1: 70 EF    AND   F,0xEF             
                                        (0175) 	M8C_SetBank0
08D3: 62 0B 00 MOV   REG[0xB],0x0       (0176) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
08D6: 62 0A 80 MOV   REG[0xA],0x80      (0177) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
08D9: 71 10    OR    F,0x10             
                                        (0178) 	M8C_SetBank1
08DB: 62 0A 00 MOV   REG[0xA],0x0       (0179) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
08DE: 62 0B 00 MOV   REG[0xB],0x0       (0180) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
08E1: 70 EF    AND   F,0xEF             
                                        (0181) 	M8C_SetBank0
08E3: 62 09 00 MOV   REG[0x9],0x0       (0182) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
08E6: 62 0C 00 MOV   REG[0xC],0x0       (0183) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
08E9: 71 10    OR    F,0x10             
                                        (0184) 	M8C_SetBank1
08EB: 62 0C 00 MOV   REG[0xC],0x0       (0185) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
08EE: 62 0D 00 MOV   REG[0xD],0x0       (0186) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
08F1: 70 EF    AND   F,0xEF             
                                        (0187) 	M8C_SetBank0
08F3: 62 0F 00 MOV   REG[0xF],0x0       (0188) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
08F6: 62 0E 00 MOV   REG[0xE],0x0       (0189) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
08F9: 71 10    OR    F,0x10             
                                        (0190) 	M8C_SetBank1
08FB: 62 0E 00 MOV   REG[0xE],0x0       (0191) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
08FE: 62 0F 00 MOV   REG[0xF],0x0       (0192) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0901: 70 EF    AND   F,0xEF             
                                        (0193) 	M8C_SetBank0
0903: 62 0D 00 MOV   REG[0xD],0x0       (0194) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0906: 62 10 00 MOV   REG[0x10],0x0      (0195) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0909: 71 10    OR    F,0x10             
                                        (0196) 	M8C_SetBank1
090B: 62 10 00 MOV   REG[0x10],0x0      (0197) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
090E: 62 11 00 MOV   REG[0x11],0x0      (0198) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0911: 70 EF    AND   F,0xEF             
                                        (0199) 	M8C_SetBank0
0913: 62 13 00 MOV   REG[0x13],0x0      (0200) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0916: 62 12 00 MOV   REG[0x12],0x0      (0201) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0919: 71 10    OR    F,0x10             
                                        (0202) 	M8C_SetBank1
091B: 62 12 00 MOV   REG[0x12],0x0      (0203) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
091E: 62 13 00 MOV   REG[0x13],0x0      (0204) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0921: 70 EF    AND   F,0xEF             
                                        (0205) 	M8C_SetBank0
0923: 62 11 00 MOV   REG[0x11],0x0      (0206) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0926: 62 14 00 MOV   REG[0x14],0x0      (0207) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0929: 71 10    OR    F,0x10             
                                        (0208) 	M8C_SetBank1
092B: 62 14 00 MOV   REG[0x14],0x0      (0209) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
092E: 62 15 00 MOV   REG[0x15],0x0      (0210) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0931: 70 EF    AND   F,0xEF             
                                        (0211) 	M8C_SetBank0
0933: 62 17 00 MOV   REG[0x17],0x0      (0212) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0936: 62 16 00 MOV   REG[0x16],0x0      (0213) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0939: 71 10    OR    F,0x10             
                                        (0214) 	M8C_SetBank1
093B: 62 16 00 MOV   REG[0x16],0x0      (0215) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
093E: 62 17 00 MOV   REG[0x17],0x0      (0216) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0941: 70 EF    AND   F,0xEF             
                                        (0217) 	M8C_SetBank0
0943: 62 15 00 MOV   REG[0x15],0x0      (0218) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0946: 62 18 00 MOV   REG[0x18],0x0      (0219) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0949: 71 10    OR    F,0x10             
                                        (0220) 	M8C_SetBank1
094B: 62 18 00 MOV   REG[0x18],0x0      (0221) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
094E: 62 19 00 MOV   REG[0x19],0x0      (0222) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0951: 70 EF    AND   F,0xEF             
                                        (0223) 	M8C_SetBank0
0953: 62 1B 00 MOV   REG[0x1B],0x0      (0224) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0956: 62 1A 00 MOV   REG[0x1A],0x0      (0225) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0959: 71 10    OR    F,0x10             
                                        (0226) 	M8C_SetBank1
095B: 62 1A 00 MOV   REG[0x1A],0x0      (0227) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
095E: 62 1B 00 MOV   REG[0x1B],0x0      (0228) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0961: 70 EF    AND   F,0xEF             
                                        (0229) 	M8C_SetBank0
0963: 62 19 00 MOV   REG[0x19],0x0      (0230) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0966: 62 1C 00 MOV   REG[0x1C],0x0      (0231) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0969: 71 10    OR    F,0x10             
                                        (0232) 	M8C_SetBank1
096B: 62 1C 00 MOV   REG[0x1C],0x0      (0233) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
096E: 62 1D 00 MOV   REG[0x1D],0x0      (0234) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0971: 70 EF    AND   F,0xEF             
                                        (0235) 	M8C_SetBank0
0973: 62 1F 00 MOV   REG[0x1F],0x0      (0236) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0976: 62 1E 00 MOV   REG[0x1E],0x0      (0237) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0979: 71 10    OR    F,0x10             
                                        (0238) 	M8C_SetBank1
097B: 62 1E 00 MOV   REG[0x1E],0x0      (0239) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
097E: 62 1F 00 MOV   REG[0x1F],0x0      (0240) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0981: 70 EF    AND   F,0xEF             
                                        (0241) 	M8C_SetBank0
0983: 62 1D 00 MOV   REG[0x1D],0x0      (0242) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0986: 70 EF    AND   F,0xEF             
                                        (0243) 	M8C_SetBank0
0988: 7F       RET                      (0244) 	ret
                                        (0245) 
                                        (0246) 
                                        (0247) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_i2cram
                                        (0026) export _LoadConfig_i2cram
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
0989: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
098C: 55 01 FF MOV   [0x1],0xFF         (0066) 	mov		[Port_2_DriveMode_0_SHADE], ffh
098F: 55 02 00 MOV   [0x2],0x0          (0067) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0068) 
0992: 7C 09 99 LCALL 0x0999             (0069) 	lcall	LoadConfig_i2cram
0995: 7C 08 84 LCALL 0x0884             (0070) 	lcall	LoadConfigTBL_i2cram_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
0998: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration i2cram
                                        (0078) ;
                                        (0079) ;    Load configuration registers for i2cram.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_i2cram:
                                        (0096)  LoadConfig_i2cram:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
0999: 10       PUSH  X                  (0099) 	push	x
099A: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
099C: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
099E: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
099F: 50 06    MOV   A,0x6              (0104)     mov     A, >LoadConfigTBL_i2cram_Bank0
09A1: 57 4B    MOV   X,0x4B             (0105)     mov     X, <LoadConfigTBL_i2cram_Bank0
09A3: 7C 09 B4 LCALL 0x09B4             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
09A6: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
09A8: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
09A9: 50 06    MOV   A,0x6              (0111)     mov     A, >LoadConfigTBL_i2cram_Bank1
09AB: 57 BE    MOV   X,0xBE             (0112)     mov     X, <LoadConfigTBL_i2cram_Bank1
09AD: 7C 09 B4 LCALL 0x09B4             (0113)     lcall   LoadConfig              ; Load the bank 1 values
09B0: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
09B2: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
09B3: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
09B4: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
09B6: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
09B7: 08       PUSH  A                  (0143)     push    A
09B8: 4F       MOV   X,SP               (0144)     mov     X, SP
09B9: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
09BC: D0 04    JNC   0x09C1             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
09BE: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
09C1: 18       POP   A                  (0149)     pop     A
09C2: 20       POP   X                  (0150)     pop     X
09C3: 70 EF    AND   F,0xEF             
09C5: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
09C8: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
09C9: 08       PUSH  A                  (0156)     push    A
09CA: 28       ROMX                     (0157)     romx                            ; Load register address from table
09CB: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
09CD: A0 1F    JZ    0x09ED             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
09CF: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
09D0: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
09D3: A0 03    JZ    0x09D7             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
09D5: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
09D7: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
09D9: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
09DA: 20       POP   X                  (0167)     pop     X
09DB: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
09DC: 09 00    ADC   A,0x0              (0169)     adc     A, 0
09DE: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
09DF: 08       PUSH  A                  (0171)     push    A
09E0: 28       ROMX                     (0172)     romx                            ; load config data from the table
09E1: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
09E2: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
09E4: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
09E6: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
09E7: 20       POP   X                  (0177)     pop     X
09E8: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
09E9: 09 00    ADC   A,0x0              (0179)     adc     A, 0
09EB: 8F D7    JMP   0x09C3             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
09ED: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
09EF: 70 3F    AND   F,0x3F             
09F1: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
09F3: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
09F4: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
09F5: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
09F6: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
09F9: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
09FC: 7F       RET                      (0182)    ret
09FD: 41 E1 FB AND   REG[0xE1],0xFB     
0A00: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0A03: 7F       RET                      (0214)    ret
0A04: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
0A06: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
0A08: A0 07    JZ    0x0A10             (0249)    jz    .SetModeRegEmpty
0A0A: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0A0D: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
0A0F: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
0A10: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0A13: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
0A15: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
0A16: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0A18: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
0A1A: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0A1C: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0A1D: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0A20: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
0A23: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0A24: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0A26: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0A27: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0A29: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0A2A: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0A2C: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0A2D: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0A2F: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
0A30: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
0A32: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
0A34: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
0A36: A0 06    JZ    0x0A3D             (0492)    jz   .SetTxCmpMode
                                        (0493) 
0A38: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
0A3B: 80 04    JMP   0x0A40             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0A3D: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
0A40: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
0A42: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
0A43: 08       PUSH  A                  (0536)    push A
0A44: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
0A46: A0 06    JZ    0x0A4D             (0538)    jz   .DisRxInt
0A48: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
0A4B: 80 04    JMP   0x0A50             (0541)    jmp  .CheckTxInt
0A4D: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
0A50: 18       POP   A                  (0547)    pop  A
0A51: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
0A53: A0 06    JZ    0x0A5A             (0549)    jz   .DisTxInt
0A55: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0A58: 80 04    JMP   0x0A5D             (0552)    jmp  .End_IntCntl
0A5A: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0A5D: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0A6E: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0A6F: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0A70: 67       ASR   A                  (0603)    asr   A
0A71: 67       ASR   A                  (0604)    asr   A
0A72: 67       ASR   A                  (0605)    asr   A
0A73: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0A75: FF E7    INDEX 0x0A5E             (0607)    index UART_HEX_STR                  ; Get Hex value
0A77: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
0A79: 18       POP   A                  (0609)    pop   A                             ; Restore value
0A7A: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0A7C: FF E0    INDEX 0x0A5E             (0611)    index UART_HEX_STR                  ; Get Hex value
0A7E: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0A80: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0A81: 4B       SWAP  A,X                (0645)    swap  A,X
0A82: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
0A84: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
0A85: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0A87: 7F       RET                      (0650)    ret
0A88: 49 2B 10 TST   REG[0x2B],0x10     
0A8B: AF FC    JZ    _UART_PutChar      
0A8D: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0A8F: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0A90: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
0A93: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
0A95: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0A97: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0A98: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0A9A: 08       PUSH  A                  (0756)    push A
0A9B: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0A9D: B0 04    JNZ   0x0AA2             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0A9F: 18       POP   A                  (0759)    pop  A
0AA0: 80 0B    JMP   0x0AAC             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0AA2: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0AA4: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0AA5: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0AA6: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
0AA8: B0 03    JNZ   0x0AAC             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0AAA: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0AAB: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0AAC: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0AAE: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0AAF: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0AB1: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0AB3: 08       PUSH  A                  (0819)    push A
0AB4: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0AB6: B0 07    JNZ   0x0ABE             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0AB8: 18       POP   A                  (0822)    pop  A
0AB9: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0ABB: 4B       SWAP  A,X                (0824)    swap A,X
0ABC: 80 07    JMP   0x0AC4             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0ABE: 18       POP   A                  (0828)    pop  A
0ABF: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0AC1: 4B       SWAP  A,X                (0830)    swap A,X
0AC2: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0AC4: 7F       RET                      (0836)    ret
0AC5: 70 BF    AND   F,0xBF             
0AC7: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0AC9: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0ACB: A0 06    JZ    0x0AD2             (0872)    jz    End_PutString                           ; Check for end of string
0ACD: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0ACF: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0AD0: 8F F8    JMP   0x0AC9             (0875)    jmp   .PutStringLoop                          ; Get next character
0AD2: 70 3F    AND   F,0x3F             
0AD4: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0AD6: 7F       RET                      (0879)    ret
0AD7: 70 BF    AND   F,0xBF             
0AD9: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0ADC: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0ADD: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0ADF: A0 1A    JZ    0x0AFA             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0AE1: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
0AE3: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0AE5: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
0AE7: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0AE9: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0AEB: 49 2B 10 TST   REG[0x2B],0x10     
0AEE: AF FC    JZ    0x0AEB             
0AF0: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0AF2: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
0AF3: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0AF6: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0AF8: 8F E4    JMP   0x0ADD             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
0AFA: 70 3F    AND   F,0x3F             
0AFC: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0AFE: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0AFF: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0B00: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
0B03: B0 06    JNZ   0x0B0A             (0980)    jnz   .CW_WRITEIT
0B05: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
0B08: A0 1D    JZ    0x0B26             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0B0A: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0B0B: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0B0D: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
0B0F: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
0B10: 49 2B 10 TST   REG[0x2B],0x10     
0B13: AF FC    JZ    0x0B10             
0B15: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
0B17: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0B18: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0B1B: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0B1E: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0B21: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0B24: 8F DB    JMP   0x0B00             (0995)    jmp   .CW_Loop
0B26: 70 3F    AND   F,0x3F             
0B28: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0B2A: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0B2B: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0B2C: 10       PUSH  X                  (1030)    push  X
0B2D: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0B2E: A0 0B    JZ    0x0B3A             (1032)    jz    .End_CPutString
0B30: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
0B32: 20       POP   X                  (1034)    pop   X
0B33: 18       POP   A                  (1035)    pop   A
0B34: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0B35: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
0B37: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
0B38: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
0B3A: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0B3C: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0B3D: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0B3F: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
0B41: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0B43: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0B45: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\tempcounter.asm               (0001) ;;*****************************************************************************
0B46: 43 E1 20 OR    REG[0xE1],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TempCounter.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "TempCounter.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  TempCounter_EnableInt
                                        (0030) export _TempCounter_EnableInt
                                        (0031) export  TempCounter_DisableInt
                                        (0032) export _TempCounter_DisableInt
                                        (0033) export  TempCounter_Start
                                        (0034) export _TempCounter_Start
                                        (0035) export  TempCounter_Stop
                                        (0036) export _TempCounter_Stop
                                        (0037) export  TempCounter_WritePeriod
                                        (0038) export _TempCounter_WritePeriod
                                        (0039) export  TempCounter_WriteCompareValue
                                        (0040) export _TempCounter_WriteCompareValue
                                        (0041) export  TempCounter_wReadCompareValue
                                        (0042) export _TempCounter_wReadCompareValue
                                        (0043) export  TempCounter_wReadCounter
                                        (0044) export _TempCounter_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wTempCounter_ReadCompareValue  ; deprecated
                                        (0049) export _wTempCounter_ReadCompareValue  ; deprecated
                                        (0050) export  wTempCounter_ReadCounter       ; deprecated
                                        (0051) export _wTempCounter_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: TempCounter_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  TempCounter_EnableInt:
                                        (0082) _TempCounter_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    TempCounter_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0B49: 7F       RET                      (0086)    ret
0B4A: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: TempCounter_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  TempCounter_DisableInt:
                                        (0109) _TempCounter_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    TempCounter_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0B4D: 7F       RET                      (0113)    ret
0B4E: 43 33 01 OR    REG[0x33],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: TempCounter_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  TempCounter_Start:
                                        (0138) _TempCounter_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    TempCounter_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0B51: 7F       RET                      (0142)    ret
0B52: 41 33 FE AND   REG[0x33],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: TempCounter_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register of the LSB block.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  TempCounter_Stop:
                                        (0166) _TempCounter_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    TempCounter_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0B55: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: TempCounter_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count registers (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  TempCounter_WritePeriod:
                                        (0196) _TempCounter_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0B56: 60 31    MOV   REG[0x31],A        (0198)    mov   reg[TempCounter_PERIOD_LSB_REG], A
0B58: 5B       MOV   A,X                (0199)    mov   A, X
0B59: 60 35    MOV   REG[0x35],A        (0200)    mov   reg[TempCounter_PERIOD_MSB_REG], A
                                        (0201)    RAM_EPILOGUE RAM_USE_CLASS_1
0B5B: 7F       RET                      (0202)    ret
                                        (0203) 
                                        (0204) 
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: TempCounter_WriteCompareValue
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Writes compare value into the Compare register (DR2).
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;
                                        (0215) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0216) ;  RETURNS:      Nothing
                                        (0217) ;  SIDE EFFECTS: 
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;
                                        (0224)  TempCounter_WriteCompareValue:
                                        (0225) _TempCounter_WriteCompareValue:
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_1
0B5C: 60 32    MOV   REG[0x32],A        (0227)    mov   reg[TempCounter_COMPARE_LSB_REG], A
0B5E: 5B       MOV   A,X                (0228)    mov   A, X
0B5F: 60 36    MOV   REG[0x36],A        (0229)    mov   reg[TempCounter_COMPARE_MSB_REG], A
                                        (0230)    RAM_EPILOGUE RAM_USE_CLASS_1
0B61: 7F       RET                      (0231)    ret
                                        (0232) 
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) .SECTION
                                        (0237) ;-----------------------------------------------------------------------------
                                        (0238) ;  FUNCTION NAME: TempCounter_wReadCompareValue
                                        (0239) ;
                                        (0240) ;  DESCRIPTION:
                                        (0241) ;     Reads the Compare registers.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS:    None
                                        (0245) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  TempCounter_wReadCompareValue:
                                        (0254) _TempCounter_wReadCompareValue:
                                        (0255)  wTempCounter_ReadCompareValue:                  ; this name deprecated
                                        (0256) _wTempCounter_ReadCompareValue:                  ; this name deprecated
                                        (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
0B62: 5D 36    MOV   A,REG[0x36]        (0258)    mov   A, reg[TempCounter_COMPARE_MSB_REG]
0B64: 5C       MOV   X,A                (0259)    mov   X, A
0B65: 5D 32    MOV   A,REG[0x32]        (0260)    mov   A, reg[TempCounter_COMPARE_LSB_REG]
                                        (0261)    RAM_EPILOGUE RAM_USE_CLASS_1
0B67: 7F       RET                      (0262)    ret
                                        (0263) 
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: TempCounter_wReadCounter
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0273) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0274) ;     from the Count to the Compare registers by holding the clock low in
                                        (0275) ;     the MSB PSoC block.
                                        (0276) ;-----------------------------------------------------------------------------
                                        (0277) ;
                                        (0278) ;  ARGUMENTS: None
                                        (0279) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0280) ;  SIDE EFFECTS:
                                        (0281) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0282) ;     2) The A and X registers may be modified by this or future implementations
                                        (0283) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0284) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0285) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0286) ;        functions.
                                        (0287) ;
                                        (0288)  TempCounter_wReadCounter:
                                        (0289) _TempCounter_wReadCounter:
                                        (0290)  wTempCounter_ReadCounter:                       ; this name deprecated
                                        (0291) _wTempCounter_ReadCounter:                       ; this name deprecated
                                        (0292) 
                                        (0293)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0294)    bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
                                        (0295)    bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
                                        (0296)    wCounter:               EQU   4                  ; Frame offset to temp Count   store
                                        (0297)    STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
                                        (0298) 
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
0B68: 4F       MOV   X,SP               (0300)    mov   X, SP                                      ; X <-  stack frame pointer
0B69: 5D 36    MOV   A,REG[0x36]        (0301)    mov   A, reg[TempCounter_COMPARE_MSB_REG]     ; Save the Compare register on the stack
0B6B: 08       PUSH  A                  (0302)    push  A                                          ;
0B6C: 5D 32    MOV   A,REG[0x32]        (0303)    mov   A, reg[TempCounter_COMPARE_LSB_REG]     ;
0B6E: 08       PUSH  A                  (0304)    push  A                                          ;   -stack frame now 2 bytes-
0B6F: 5D 33    MOV   A,REG[0x33]        (0305)    mov   A, reg[TempCounter_CONTROL_LSB_REG]     ; Save CR0 (running or stopped state)
0B71: 08       PUSH  A                  (0306)    push  A                                          ;   -stack frame now 3 bytes-
0B72: 41 33 FE AND   REG[0x33],0xFE     
0B75: 71 10    OR    F,0x10             
                                        (0307)    TempCounter_Stop_M                            ; Disable (stop) the Counter if running
                                        (0308)    M8C_SetBank1                                     ;
0B77: 5D 31    MOV   A,REG[0x31]        (0309)    mov   A, reg[TempCounter_INPUT_LSB_REG]       ; save the LSB clock input setting
0B79: 08       PUSH  A                  (0310)    push  A                                          ;   on the stack (now 4 bytes) and ...
                                        (0311)                                                     ;   hold the clock low:
0B7A: 62 31 00 MOV   REG[0x31],0x0      (0312)    mov   reg[TempCounter_INPUT_LSB_REG], INPUT_REG_NULL
0B7D: 70 EF    AND   F,0xEF             
                                        (0313)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0B7F: 5D 34    MOV   A,REG[0x34]        (0314)    mov   A, reg[TempCounter_COUNTER_MSB_REG]     ; DR2 <- DR0 (in the MSB block)
0B81: 5D 36    MOV   A,REG[0x36]        (0315)    mov   A, reg[TempCounter_COMPARE_MSB_REG]     ; Stash the Count MSB on the stack
0B83: 08       PUSH  A                  (0316)    push  A                                          ;   -stack frame is now 5 bytes
0B84: 5D 30    MOV   A,REG[0x30]        (0317)    mov   A, reg[TempCounter_COUNTER_LSB_REG]     ; DR2 <- DR0 (in the LSB block)
0B86: 5D 32    MOV   A,REG[0x32]        (0318)    mov   A, reg[TempCounter_COMPARE_LSB_REG]     ; Stash the Count LSB on the stack
0B88: 08       PUSH  A                  (0319)    push  A                                          ;   -stack frame is now 6 bytes-
0B89: 52 00    MOV   A,[X+0]            (0320)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0B8B: 60 36    MOV   REG[0x36],A        (0321)    mov   reg[TempCounter_COMPARE_MSB_REG], A     ;
0B8D: 52 01    MOV   A,[X+1]            (0322)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0B8F: 60 32    MOV   REG[0x32],A        (0323)    mov   reg[TempCounter_COMPARE_LSB_REG], A     ;
0B91: 71 10    OR    F,0x10             
                                        (0324)    M8C_SetBank1                                     ; ---Restore the counter operation
0B93: 52 03    MOV   A,[X+3]            (0325)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0B95: 60 31    MOV   REG[0x31],A        (0326)    mov   reg[TempCounter_INPUT_LSB_REG], A       ;   and restore it
0B97: 70 EF    AND   F,0xEF             
                                        (0327)    M8C_SetBank0                                     ; Now re-enable (start) the counter
0B99: 52 02    MOV   A,[X+2]            (0328)    mov   A, [X+bOrigControlReg]                     ;   if it was running when
0B9B: 60 33    MOV   REG[0x33],A        (0329)    mov   reg[TempCounter_CONTROL_LSB_REG], A     ;   this function was first called
0B9D: 18       POP   A                  (0330)    pop   A                                          ; Setup the return value
0B9E: 20       POP   X                  (0331)    pop   X                                          ;
0B9F: 38 FC    ADD   SP,0xFC            (0332)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0BA1: 70 3F    AND   F,0x3F             
0BA3: 71 C0    OR    F,0xC0             
                                        (0333)    RAM_EPILOGUE RAM_USE_CLASS_2
0BA5: 7F       RET                      (0334)    ret
                                        (0335) 
                                        (0336) .ENDSECTION
                                        (0337) 
                                        (0338) ; End of File TempCounter.asm
FILE: lib\motordriver.asm               (0001) ;;*****************************************************************************
0BA6: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: MotorDriver.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "MotorDriver.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  MotorDriver_EnableInt
                                        (0030) export _MotorDriver_EnableInt
                                        (0031) export  MotorDriver_DisableInt
                                        (0032) export _MotorDriver_DisableInt
                                        (0033) export  MotorDriver_Start
                                        (0034) export _MotorDriver_Start
                                        (0035) export  MotorDriver_Stop
                                        (0036) export _MotorDriver_Stop
                                        (0037) export  MotorDriver_WritePeriod
                                        (0038) export _MotorDriver_WritePeriod
                                        (0039) export  MotorDriver_WriteCompareValue
                                        (0040) export _MotorDriver_WriteCompareValue
                                        (0041) export  MotorDriver_wReadCompareValue
                                        (0042) export _MotorDriver_wReadCompareValue
                                        (0043) export  MotorDriver_wReadCounter
                                        (0044) export _MotorDriver_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wMotorDriver_ReadCompareValue  ; deprecated
                                        (0049) export _wMotorDriver_ReadCompareValue  ; deprecated
                                        (0050) export  wMotorDriver_ReadCounter       ; deprecated
                                        (0051) export _wMotorDriver_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: MotorDriver_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  MotorDriver_EnableInt:
                                        (0082) _MotorDriver_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    MotorDriver_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0BA9: 7F       RET                      (0086)    ret
0BAA: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: MotorDriver_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  MotorDriver_DisableInt:
                                        (0109) _MotorDriver_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    MotorDriver_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0BAD: 7F       RET                      (0113)    ret
0BAE: 43 23 01 OR    REG[0x23],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: MotorDriver_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  MotorDriver_Start:
                                        (0138) _MotorDriver_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    MotorDriver_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0BB1: 7F       RET                      (0142)    ret
0BB2: 41 23 FE AND   REG[0x23],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: MotorDriver_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register of the LSB block.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  MotorDriver_Stop:
                                        (0166) _MotorDriver_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    MotorDriver_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0BB5: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: MotorDriver_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count registers (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  MotorDriver_WritePeriod:
                                        (0196) _MotorDriver_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0BB6: 60 21    MOV   REG[0x21],A        (0198)    mov   reg[MotorDriver_PERIOD_LSB_REG], A
0BB8: 5B       MOV   A,X                (0199)    mov   A, X
0BB9: 60 25    MOV   REG[0x25],A        (0200)    mov   reg[MotorDriver_PERIOD_MSB_REG], A
                                        (0201)    RAM_EPILOGUE RAM_USE_CLASS_1
0BBB: 7F       RET                      (0202)    ret
                                        (0203) 
                                        (0204) 
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: MotorDriver_WriteCompareValue
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Writes compare value into the Compare register (DR2).
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;
                                        (0215) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0216) ;  RETURNS:      Nothing
                                        (0217) ;  SIDE EFFECTS: 
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;
                                        (0224)  MotorDriver_WriteCompareValue:
                                        (0225) _MotorDriver_WriteCompareValue:
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_1
0BBC: 60 22    MOV   REG[0x22],A        (0227)    mov   reg[MotorDriver_COMPARE_LSB_REG], A
0BBE: 5B       MOV   A,X                (0228)    mov   A, X
0BBF: 60 26    MOV   REG[0x26],A        (0229)    mov   reg[MotorDriver_COMPARE_MSB_REG], A
                                        (0230)    RAM_EPILOGUE RAM_USE_CLASS_1
0BC1: 7F       RET                      (0231)    ret
                                        (0232) 
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) .SECTION
                                        (0237) ;-----------------------------------------------------------------------------
                                        (0238) ;  FUNCTION NAME: MotorDriver_wReadCompareValue
                                        (0239) ;
                                        (0240) ;  DESCRIPTION:
                                        (0241) ;     Reads the Compare registers.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS:    None
                                        (0245) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  MotorDriver_wReadCompareValue:
                                        (0254) _MotorDriver_wReadCompareValue:
                                        (0255)  wMotorDriver_ReadCompareValue:                  ; this name deprecated
                                        (0256) _wMotorDriver_ReadCompareValue:                  ; this name deprecated
                                        (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
0BC2: 5D 26    MOV   A,REG[0x26]        (0258)    mov   A, reg[MotorDriver_COMPARE_MSB_REG]
0BC4: 5C       MOV   X,A                (0259)    mov   X, A
0BC5: 5D 22    MOV   A,REG[0x22]        (0260)    mov   A, reg[MotorDriver_COMPARE_LSB_REG]
                                        (0261)    RAM_EPILOGUE RAM_USE_CLASS_1
0BC7: 7F       RET                      (0262)    ret
                                        (0263) 
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: MotorDriver_wReadCounter
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0273) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0274) ;     from the Count to the Compare registers by holding the clock low in
                                        (0275) ;     the MSB PSoC block.
                                        (0276) ;-----------------------------------------------------------------------------
                                        (0277) ;
                                        (0278) ;  ARGUMENTS: None
                                        (0279) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0280) ;  SIDE EFFECTS:
                                        (0281) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0282) ;     2) The A and X registers may be modified by this or future implementations
                                        (0283) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0284) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0285) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0286) ;        functions.
                                        (0287) ;
                                        (0288)  MotorDriver_wReadCounter:
                                        (0289) _MotorDriver_wReadCounter:
                                        (0290)  wMotorDriver_ReadCounter:                       ; this name deprecated
                                        (0291) _wMotorDriver_ReadCounter:                       ; this name deprecated
                                        (0292) 
                                        (0293)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0294)    bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
                                        (0295)    bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
                                        (0296)    wCounter:               EQU   4                  ; Frame offset to temp Count   store
                                        (0297)    STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
                                        (0298) 
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
0BC8: 4F       MOV   X,SP               (0300)    mov   X, SP                                      ; X <-  stack frame pointer
0BC9: 5D 26    MOV   A,REG[0x26]        (0301)    mov   A, reg[MotorDriver_COMPARE_MSB_REG]     ; Save the Compare register on the stack
0BCB: 08       PUSH  A                  (0302)    push  A                                          ;
0BCC: 5D 22    MOV   A,REG[0x22]        (0303)    mov   A, reg[MotorDriver_COMPARE_LSB_REG]     ;
0BCE: 08       PUSH  A                  (0304)    push  A                                          ;   -stack frame now 2 bytes-
0BCF: 5D 23    MOV   A,REG[0x23]        (0305)    mov   A, reg[MotorDriver_CONTROL_LSB_REG]     ; Save CR0 (running or stopped state)
0BD1: 08       PUSH  A                  (0306)    push  A                                          ;   -stack frame now 3 bytes-
0BD2: 41 23 FE AND   REG[0x23],0xFE     
0BD5: 71 10    OR    F,0x10             
                                        (0307)    MotorDriver_Stop_M                            ; Disable (stop) the Counter if running
                                        (0308)    M8C_SetBank1                                     ;
0BD7: 5D 21    MOV   A,REG[0x21]        (0309)    mov   A, reg[MotorDriver_INPUT_LSB_REG]       ; save the LSB clock input setting
0BD9: 08       PUSH  A                  (0310)    push  A                                          ;   on the stack (now 4 bytes) and ...
                                        (0311)                                                     ;   hold the clock low:
0BDA: 62 21 00 MOV   REG[0x21],0x0      (0312)    mov   reg[MotorDriver_INPUT_LSB_REG], INPUT_REG_NULL
0BDD: 70 EF    AND   F,0xEF             
                                        (0313)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0BDF: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[MotorDriver_COUNTER_MSB_REG]     ; DR2 <- DR0 (in the MSB block)
0BE1: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[MotorDriver_COMPARE_MSB_REG]     ; Stash the Count MSB on the stack
0BE3: 08       PUSH  A                  (0316)    push  A                                          ;   -stack frame is now 5 bytes
0BE4: 5D 20    MOV   A,REG[0x20]        (0317)    mov   A, reg[MotorDriver_COUNTER_LSB_REG]     ; DR2 <- DR0 (in the LSB block)
0BE6: 5D 22    MOV   A,REG[0x22]        (0318)    mov   A, reg[MotorDriver_COMPARE_LSB_REG]     ; Stash the Count LSB on the stack
0BE8: 08       PUSH  A                  (0319)    push  A                                          ;   -stack frame is now 6 bytes-
0BE9: 52 00    MOV   A,[X+0]            (0320)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0BEB: 60 26    MOV   REG[0x26],A        (0321)    mov   reg[MotorDriver_COMPARE_MSB_REG], A     ;
0BED: 52 01    MOV   A,[X+1]            (0322)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0BEF: 60 22    MOV   REG[0x22],A        (0323)    mov   reg[MotorDriver_COMPARE_LSB_REG], A     ;
0BF1: 71 10    OR    F,0x10             
                                        (0324)    M8C_SetBank1                                     ; ---Restore the counter operation
0BF3: 52 03    MOV   A,[X+3]            (0325)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0BF5: 60 21    MOV   REG[0x21],A        (0326)    mov   reg[MotorDriver_INPUT_LSB_REG], A       ;   and restore it
0BF7: 70 EF    AND   F,0xEF             
                                        (0327)    M8C_SetBank0                                     ; Now re-enable (start) the counter
0BF9: 52 02    MOV   A,[X+2]            (0328)    mov   A, [X+bOrigControlReg]                     ;   if it was running when
0BFB: 60 23    MOV   REG[0x23],A        (0329)    mov   reg[MotorDriver_CONTROL_LSB_REG], A     ;   this function was first called
0BFD: 18       POP   A                  (0330)    pop   A                                          ; Setup the return value
0BFE: 20       POP   X                  (0331)    pop   X                                          ;
0BFF: 38 FC    ADD   SP,0xFC            (0332)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0C01: 70 3F    AND   F,0x3F             
0C03: 71 C0    OR    F,0xC0             
                                        (0333)    RAM_EPILOGUE RAM_USE_CLASS_2
0C05: 7F       RET                      (0334)    ret
                                        (0335) 
                                        (0336) .ENDSECTION
                                        (0337) 
                                        (0338) ; End of File MotorDriver.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0C06: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0C07: 10       PUSH  X                  (0209)     push  X
0C08: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0C09: B0 04    JNZ   0x0C0E             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0C0B: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0C0C: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0C0D: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0C0E: 90 44    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
0C10: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0C11: 18       POP   A                  (0220)     pop   A
0C12: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0C13: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0C15: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0C16: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0C28: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0C29: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0C2A: 67       ASR   A                  (0262)     asr   A
0C2B: 67       ASR   A                  (0263)     asr   A
0C2C: 67       ASR   A                  (0264)     asr   A
0C2D: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0C2F: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0C31: 90 21    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
0C33: 18       POP   A                  (0268)     pop   A                            ; Restore value
0C34: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0C36: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0C38: 90 1A    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0C3A: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0C3B: 4B       SWAP  A,X                (0305)     swap  A,X
0C3C: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0C3E: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0C3F: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0C41: 7F       RET                      (0310)     ret
0C42: 70 BF    AND   F,0xBF             
0C44: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0C46: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0C48: A0 06    JZ    0x0C4F             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0C4A: 90 08    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
0C4C: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0C4D: 8F F8    JMP   0x0C46             (0351)     jmp   .Loop_PrString               ; Go get next character
0C4F: 70 3F    AND   F,0x3F             
0C51: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0C53: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0C54: 90 65    CALL  0x0CBB             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0C56: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0C57: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0C58: 67       ASR   A                  (0390)     asr   A
0C59: 67       ASR   A                  (0391)     asr   A
0C5A: 67       ASR   A                  (0392)     asr   A
0C5B: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0C5D: 90 3B    CALL  0x0C9A             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0C5F: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0C60: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0C62: 40       NOP                      (0397)     nop
0C63: 40       NOP                      (0398)     nop
0C64: 40       NOP                      (0399)     nop
0C65: 90 33    CALL  0x0C9A             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0C67: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0C68: 90 51    CALL  0x0CBB             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0C6A: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0C6B: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0C6C: 67       ASR   A                  (0436)     asr   A
0C6D: 67       ASR   A                  (0437)     asr   A
0C6E: 67       ASR   A                  (0438)     asr   A
0C6F: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0C71: 90 09    CALL  0x0C7C             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0C73: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0C74: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0C76: 40       NOP                      (0443)     nop
0C77: 40       NOP                      (0444)     nop
0C78: 40       NOP                      (0445)     nop
0C79: 90 01    CALL  0x0C7C             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0C7B: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0C7C: 08       PUSH  A                  (0477)     push  A
0C7D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0C80: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0C83: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
0C85: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0C87: 18       POP   A                  (0483)     pop   A
0C88: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0C8A: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0C8C: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0C8E: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0C90: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0C92: 40       NOP                      (0489)     nop
0C93: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0C95: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0C97: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0C99: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0C9A: 08       PUSH  A                  (0523)     push  A
0C9B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0C9E: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0CA1: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0CA4: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
0CA6: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0CA8: 18       POP   A                  (0530)     pop   A
0CA9: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0CAB: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0CAD: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0CAF: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0CB1: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0CB3: 40       NOP                      (0536)     NOP
0CB4: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0CB6: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0CB8: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0CBA: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0CBB: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0CBC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0CBF: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0CC2: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
0CC4: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0CC6: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0CC9: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0CCB: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0CCD: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0CCF: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0CD1: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0CD4: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
0CD6: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0CD8: 40       NOP                      (0586)     NOP
                                        (0587) 
0CD9: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0CDA: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0CDC: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0CDF: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
0CE1: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0CE3: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0CE4: 40       NOP                      (0597)     nop
0CE5: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0CE7: 08       PUSH  A                  (0610)     push  A
0CE8: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0CEB: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
0CED: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0CEF: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0CF0: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0CF1: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0CF2: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0CF5: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
0CF7: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0CF9: 40       NOP                      (0623)     nop
0CFA: 40       NOP                      (0624)     nop
                                        (0625) 
0CFB: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0CFE: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
0D00: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0D02: 18       POP   A                  (0630)     pop   A
0D03: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0D05: A0 04    JZ    0x0D0A             (0633)     jz    .UNLOCK
0D07: 79       DEC   X                  (0634)     dec   X
0D08: BF D3    JNZ   0x0CDC             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0D0A: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0D0B: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0D0E: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0D10: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0D12: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0D14: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0D16: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0D17: 7F       RET                      (0646)     ret
0D18: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0D1B: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0D1E: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0D21: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
0D24: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0D26: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0D28: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0D2A: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0D2C: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0D2E: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0D30: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0D32: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
0D34: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0D36: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0D38: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0D3A: 9F 40    CALL  0x0C7C             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0D3C: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0D3E: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0D40: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0D42: 9F 38    CALL  0x0C7C             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0D44: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0D46: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0D48: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0D4A: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0D4C: 9F 2E    CALL  0x0C7C             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0D4E: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0D50: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0D52: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0D54: 9F 26    CALL  0x0C7C             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0D56: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0D58: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0D5A: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0D5C: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0D5E: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0D60: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0D62: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0D64: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
0D66: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0D68: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0D6A: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0D6C: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0D6E: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0D70: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0D72: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0D74: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0D76: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0D78: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0D7A: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0D7C: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0D7E: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0D80: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0D82: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0D84: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0D86: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0D8B: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0D8D: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0D8E: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0D90: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0D91: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0D93: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0D94: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0D96: 70 3F    AND   F,0x3F             
0D98: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0D9A: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0D9B: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0D9D: 78       DEC   A                  (0828)     dec   A
0D9E: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0DA0: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0DA9: 08       PUSH  A                  (0871)     push  A
0DAA: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0DAC: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0DAE: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0DB0: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0DB2: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0DB4: D0 06    JNC   0x0DBB             (0877)     jnc   .Delay50u_End
0DB6: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0DB8: 78       DEC   A                  (0880)     dec   A                              ; [4]
0DB9: BF FE    JNZ   0x0DB8             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0DBB: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0DBC: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\i2chwrsrcinits.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHW.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) include "PSoCGPIOINT.inc"
                                        (0026) include "PSoCAPI.inc"
                                        (0027) 
                                        (0028) ;-----------------------------------------------
                                        (0029) ; include instance specific register definitions
                                        (0030) ;-----------------------------------------------
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ;  Global Symbols
                                        (0034) ;-----------------------------------------------
                                        (0035) ;-------------------------------------------------------------------
                                        (0036) ;  Declare the functions global for both assembler and C compiler.
                                        (0037) ;
                                        (0038) ;  Note that there are two names for each API. First name is
                                        (0039) ;  assembler reference. Name with underscore is name refence for
                                        (0040) ;  C compiler.  Calling function in C source code does not require
                                        (0041) ;  the underscore.
                                        (0042) ;-------------------------------------------------------------------
                                        (0043) 
                                        (0044) export    I2CHW_ResumeInt
                                        (0045) export   _I2CHW_ResumeInt
                                        (0046) export    I2CHW_EnableInt
                                        (0047) export   _I2CHW_EnableInt
                                        (0048) export    I2CHW_ClearInt
                                        (0049) export   _I2CHW_ClearInt
                                        (0050) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0051) export    I2CHW_EnableSlave
                                        (0052) export   _I2CHW_EnableSlave
                                        (0053) ENDIF
                                        (0054) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0055) export    I2CHW_EnableMstr
                                        (0056) export   _I2CHW_EnableMstr
                                        (0057) ENDIF
                                        (0058) export    I2CHW_Start
                                        (0059) export   _I2CHW_Start
                                        (0060) export    I2CHW_DisableInt
                                        (0061) export   _I2CHW_DisableInt
                                        (0062) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0063) export    I2CHW_DisableSlave
                                        (0064) export   _I2CHW_DisableSlave
                                        (0065) ENDIF
                                        (0066) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0067) export    I2CHW_DisableMstr
                                        (0068) export   _I2CHW_DisableMstr
                                        (0069) ENDIF
                                        (0070) export    I2CHW_Stop
                                        (0071) export   _I2CHW_Stop
                                        (0072) 
                                        (0073) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0074)  IF (I2CHW_CY8C22x45)
                                        (0075) export    I2CHW_EnableHWAddrCheck
                                        (0076) export   _I2CHW_EnableHWAddrCheck
                                        (0077) export    I2CHW_DisableHWAddrCheck
                                        (0078) export   _I2CHW_DisableHWAddrCheck
                                        (0079)  ENDIF
                                        (0080) ENDIF
                                        (0081) 
                                        (0082) AREA UserModules (ROM, REL)
                                        (0083) 
                                        (0084) .SECTION
                                        (0085) 
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;  FUNCTION NAME: I2CHW_Start
                                        (0088) ;
                                        (0089) ;  DESCRIPTION:
                                        (0090) ;   Initialize the I2CHW I2C bus interface.
                                        (0091) ;
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;
                                        (0094) ;  ARGUMENTS:
                                        (0095) ;
                                        (0096) ;  RETURNS: none
                                        (0097) ;
                                        (0098) ;  SIDE EFFECTS:
                                        (0099) ;    The A and X registers may be modified by this or future implementations
                                        (0100) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0101) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0102) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0103) ;    functions.
                                        (0104) ;          
                                        (0105)  I2CHW_Start:
                                        (0106) _I2CHW_Start:
                                        (0107)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0108) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0109)  IF (I2CHW_CY8C22x45)
                                        (0110)    M8C_SetBank1
                                        (0111)    mov   reg[I2CHW_ADDR], I2CHW_SLAVE_ADDR;I2CHW_HW_ADDR_EN
                                        (0112)    M8C_SetBank0
                                        (0113)  ENDIF
                                        (0114) ENDIF
                                        (0115)     RAM_EPILOGUE RAM_USE_CLASS_1
0DBD: 7F       RET                      (0116)     ret
                                        (0117) .ENDSECTION
                                        (0118) 
                                        (0119) .SECTION
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;  FUNCTION NAME: I2CHW_ResumeInt
                                        (0122) ;
                                        (0123) ;  DESCRIPTION:
                                        (0124) ;     reEnables SDA interrupt allowing start condition detection. 
                                        (0125) ;     Skips clearing INT_CLR3 by entering the EnableInt at ResumeIntEntry:.
                                        (0126) ;     Remember to call the global interrupt enable function by using
                                        (0127) ;     the macro: M8C_EnableGInt.
                                        (0128) ;-----------------------------------------------------------------------------
                                        (0129) ;  ARGUMENTS: none
                                        (0130) ;
                                        (0131) ;  RETURNS: none
                                        (0132) ;
                                        (0133) ;  SIDE EFFECTS:
                                        (0134) ;    The A and X registers may be modified by this or future implementations
                                        (0135) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0136) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0137) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0138) ;    functions.
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140)  I2CHW_ResumeInt:
                                        (0141) _I2CHW_ResumeInt:
                                        (0142)     RAM_PROLOGUE RAM_USE_CLASS_1
0DBE: 80 04    JMP   0x0DC3             (0143)     jmp ResumeIntEntry
0DC0: 62 DD FE MOV   REG[0xDD],0xFE     
0DC3: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0144)     
                                        (0145) ;-----------------------------------------------------------------------------
                                        (0146) ;  FUNCTION NAME: I2CHW_EnableInt
                                        (0147) ;
                                        (0148) ;  DESCRIPTION:
                                        (0149) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0150) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0151) ;
                                        (0152) ;-----------------------------------------------------------------------------
                                        (0153) ;
                                        (0154) ;  ARGUMENTS: none
                                        (0155) ;
                                        (0156) ;  RETURNS: none
                                        (0157) ;
                                        (0158) ;  SIDE EFFECTS:
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165)  I2CHW_EnableInt:
                                        (0166) _I2CHW_EnableInt:
                                        (0167)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)     ;first clear any pending interrupts
                                        (0169)     M8C_ClearIntFlag INT_CLR3, I2CHW_INT_MASK
                                        (0170) ResumeIntEntry:
                                        (0171)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_1
0DC6: 7F       RET                      (0173)     ret
0DC7: 62 DD FE MOV   REG[0xDD],0xFE     
                                        (0174) 
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: I2CHW_ClearInt
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;     Clears only the I2C interrupt in the INT_CLR3 register.
                                        (0183) ;
                                        (0184) ;-----------------------------------------------------------------------------
                                        (0185) ;
                                        (0186) ;  ARGUMENTS: none
                                        (0187) ;
                                        (0188) ;  RETURNS: none
                                        (0189) ;
                                        (0190) ;  SIDE EFFECTS:
                                        (0191) ;    The A and X registers may be modified by this or future implementations
                                        (0192) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0193) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0194) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0195) ;    functions.
                                        (0196) ;          
                                        (0197)  I2CHW_ClearInt:
                                        (0198) _I2CHW_ClearInt:
                                        (0199)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0200)     M8C_ClearIntFlag INT_CLR3, I2CHW_INT_MASK
                                        (0201)     RAM_EPILOGUE RAM_USE_CLASS_1
0DCA: 7F       RET                      (0202)     ret
0DCB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0203)     
                                        (0204) .ENDSECTION
                                        (0205) 
                                        (0206) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))	
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: I2CHW_EnableMstr
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0213) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0214) ;
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS: none
                                        (0218) ;
                                        (0219) ;  RETURNS: none
                                        (0220) ;
                                        (0221) ;  SIDE EFFECTS:
                                        (0222) ;    The A and X registers may be modified by this or future implementations
                                        (0223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0225) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0226) ;    functions.
                                        (0227) ;          
                                        (0228)  I2CHW_EnableMstr:
                                        (0229) _I2CHW_EnableMstr:
                                        (0230)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231) 	;;CDT 28399
                                        (0232) 	RAM_SETPAGE_CUR >I2CHW_bStatus
0DCE: 26 03 7F AND   [0x3],0x7F         (0233) 	and [I2CHW_bStatus], ~0x80 ;; ~I2CHW_ISR_ACTIVE
0DD1: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0234) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0DD4: 26 05 7F AND   [0x5],0x7F         (0235)     and    [I2CHW_RsrcStatus], ~0x80;;~I2CHW_ISR_ACTIVE        ; Make sure internal control variables weren't corrupted previous to start.
0DD7: 43 D6 02 OR    REG[0xD6],0x2      
                                        (0236)     BitSetI2CHW_CFG I2C_M_EN                                         ;Enable SDA interupt
                                        (0237)     RAM_EPILOGUE RAM_USE_CLASS_1
0DDA: 7F       RET                      (0238)     ret
0DDB: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) ENDIF
                                        (0242) 
                                        (0243) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0244) .SECTION
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  FUNCTION NAME: I2CHW_EnableSlave
                                        (0247) ;
                                        (0248) ;  DESCRIPTION:
                                        (0249) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0250) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0251) ;
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS: none
                                        (0255) ;
                                        (0256) ;  RETURNS: none
                                        (0257) ;
                                        (0258) ;  SIDE EFFECTS:
                                        (0259) ;    The A and X registers may be modified by this or future implementations
                                        (0260) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0261) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0262) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0263) ;    functions.
                                        (0264) ;          
                                        (0265)  I2CHW_EnableSlave:
                                        (0266) _I2CHW_EnableSlave:
                                        (0267)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0268)     
                                        (0269)     M8C_SetBank1 ;The SDA and SCL pins are setting to Hi-z drive mode
                                        (0270)     and reg[I2CHWSDA_DriveMode_0_ADDR],~(I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0271)     or  reg[I2CHWSDA_DriveMode_1_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0272)     M8C_SetBank0
                                        (0273)     or  reg[I2CHWSDA_DriveMode_2_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0274)    
                                        (0275)     BitSetI2CHW_CFG I2C_S_EN                                         ;Enable SDA interrupt
                                        (0276)     nop
                                        (0277)     nop
                                        (0278)     nop
                                        (0279)     nop
                                        (0280)     nop
                                        (0281)    
                                        (0282)     M8C_SetBank1 ;The SDA and SCL pins are restored to Open Drain Low drive mode
                                        (0283)     or reg[I2CHWSDA_DriveMode_0_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0284)     or reg[I2CHWSDA_DriveMode_1_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0285)     M8C_SetBank0
                                        (0286)     or reg[I2CHWSDA_DriveMode_2_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0287)     
                                        (0288)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0289)     ret
                                        (0290) 
                                        (0291) .ENDSECTION
                                        (0292) ENDIF
                                        (0293) 
                                        (0294) .SECTION
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;  FUNCTION NAME: I2CHW_DisableInt
                                        (0297) ;  FUNCTION NAME: I2CHW_Stop
                                        (0298) ;
                                        (0299) ;  DESCRIPTION:
                                        (0300) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: none
                                        (0305) ;
                                        (0306) ;  RETURNS: none
                                        (0307) ;
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315)  I2CHW_DisableInt:
                                        (0316) _I2CHW_DisableInt:
                                        (0317)  I2CHW_Stop:
                                        (0318) _I2CHW_Stop:
                                        (0319)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0320)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0321)     RAM_EPILOGUE RAM_USE_CLASS_1
0DDE: 7F       RET                      (0322)     ret
0DDF: 41 D6 FD AND   REG[0xD6],0xFD     
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME: I2CHW_DisableSlave
                                        (0330) ;
                                        (0331) ;  DESCRIPTION:
                                        (0332) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0333) ;
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;
                                        (0336) ;  ARGUMENTS: none
                                        (0337) ;
                                        (0338) ;  RETURNS: none
                                        (0339) ;
                                        (0340) ;  SIDE EFFECTS:
                                        (0341) ;    The A and X registers may be modified by this or future implementations
                                        (0342) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0343) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0344) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0345) ;    functions.
                                        (0346) ;          
                                        (0347)  I2CHW_DisableSlave:
                                        (0348) _I2CHW_DisableSlave:
                                        (0349)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0350)     BitClrI2CHW_CFG I2C_S_EN                                         ;Disable the Slave
                                        (0351)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0352)     ret
                                        (0353) 
                                        (0354) .ENDSECTION
                                        (0355) ENDIF
                                        (0356) 
                                        (0357) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0358) .SECTION
                                        (0359) ;-----------------------------------------------------------------------------
                                        (0360) ;  FUNCTION NAME: I2CHW_DisableMstr
                                        (0361) ;
                                        (0362) ;  DESCRIPTION:
                                        (0363) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0364) ;
                                        (0365) ;-----------------------------------------------------------------------------
                                        (0366) ;
                                        (0367) ;  ARGUMENTS: none
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378)  I2CHW_DisableMstr:
                                        (0379) _I2CHW_DisableMstr:
                                        (0380)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0381)     BitClrI2CHW_CFG I2C_M_EN                                         ;Disable the Master
                                        (0382)     RAM_EPILOGUE RAM_USE_CLASS_1
0DE2: 7F       RET                      (0383)    ret
                                        (0384) 
                                        (0385) .ENDSECTION
                                        (0386) ENDIF
                                        (0387) 
                                        (0388) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0389)  IF (I2CHW_CY8C22x45)
                                        (0390)  .SECTION
                                        (0391) ;-----------------------------------------------------------------------------
                                        (0392) ;  FUNCTION NAME: void  I2CHW_EnableHWAddrCheck(void)
                                        (0393) ;
                                        (0394) ;  DESCRIPTION:
                                        (0395) ;   Set respective bit to engage the HardWare Address Recognition 
                                        (0396) ;   feature in I2C slave block.
                                        (0397) ;
                                        (0398) ;-----------------------------------------------------------------------------
                                        (0399) ;
                                        (0400) ;  ARGUMENTS: none
                                        (0401) ;
                                        (0402) ;  RETURNS: none
                                        (0403) ;
                                        (0404) ;  SIDE EFFECTS:
                                        (0405) ;    If the HardWare Address Recognition feature is enabled, the ROM registers reading does not work.
                                        (0406) ;    The HardWare Address Recognition feature should be disabled for using ROM registers.
                                        (0407) ;
                                        (0408) ;    The A and X registers may be modified by this or future implementations
                                        (0409) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0410) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0411) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0412) ;    functions.
                                        (0413) ;
                                        (0414)  I2CHW_EnableHWAddrCheck:
                                        (0415) _I2CHW_EnableHWAddrCheck:
                                        (0416)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0417)    M8C_SetBank1
                                        (0418)    or    reg[I2CHW_ADDR], I2CHW_HW_ADDR_EN
                                        (0419)    M8C_SetBank0
                                        (0420)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0421)    ret
                                        (0422) .ENDSECTION
                                        (0423) 
                                        (0424) .SECTION
                                        (0425) ;-----------------------------------------------------------------------------
                                        (0426) ;  FUNCTION NAME: void  I2CHW_DisableHWAddrCheck(void)
                                        (0427) ;
                                        (0428) ;  DESCRIPTION:
                                        (0429) ;   Clear respective bit to disengage the HardWare Address Recognition 
                                        (0430) ;   feature in I2C slave block.
                                        (0431) ;
                                        (0432) ;-----------------------------------------------------------------------------
                                        (0433) ;
                                        (0434) ;  ARGUMENTS: none
                                        (0435) ;
                                        (0436) ;  RETURNS: none
                                        (0437) ;
                                        (0438) ;  SIDE EFFECTS:
                                        (0439) ;    The A and X registers may be modified by this or future implementations
                                        (0440) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0441) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0442) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0443) ;    functions.
                                        (0444) ;
                                        (0445)  I2CHW_DisableHWAddrCheck:
                                        (0446) _I2CHW_DisableHWAddrCheck:
                                        (0447)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0448)    M8C_SetBank1
                                        (0449)    and   reg[I2CHW_ADDR], ~I2CHW_HW_ADDR_EN
                                        (0450)    M8C_SetBank0
                                        (0451)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0452)    ret
                                        (0453) .ENDSECTION
                                        (0454)  ENDIF
                                        (0455) ENDIF
                                        (0456) 
                                        (0457) ; End of File I2CHW.asm
FILE: lib\i2chwmstr.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0DE3: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: I2CHWMSTR.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: <UMName> User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) include "I2CHWMstr.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) 
                                        (0031) export   I2CHW_fSendRepeatStart
                                        (0032) export  _I2CHW_fSendRepeatStart
                                        (0033) export   I2CHW_fSendStart
                                        (0034) export  _I2CHW_fSendStart
                                        (0035) export   I2CHW_SendStop
                                        (0036) export  _I2CHW_SendStop
                                        (0037) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0038) export  _I2CHW_fReadBytes
                                        (0039) export  _I2CHW_bWriteBytes
                                        (0040) export  _I2CHW_bWriteCBytes
                                        (0041) 
                                        (0042) export   I2CHW_fWrite
                                        (0043) export  _I2CHW_fWrite
                                        (0044) 
                                        (0045) export   I2CHW_bRead
                                        (0046) export  _I2CHW_bRead
                                        (0047) 
                                        (0048) export    I2CHW_bReadBusStatus
                                        (0049) export   _I2CHW_bReadBusStatus
                                        (0050) 
                                        (0051) 
                                        (0052) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0053) 
                                        (0054) export   I2CHW_fReadBytes
                                        (0055) export   I2CHW_bWriteBytes
                                        (0056) export   I2CHW_bWriteCBytes
                                        (0057) 
                                        (0058) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0059) 
                                        (0060) ;-------------------------------------------------------------------
                                        (0061) ;  Declare the varables for both the assembler and C compiler.
                                        (0062) ;
                                        (0063) ;-------------------------------------------------------------------
                                        (0064) export  I2CHW_bStatus
                                        (0065) export _I2CHW_bStatus
                                        (0066) 
                                        (0067) ;-----------------------------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;-----------------------------------------------
                                        (0070) area InterruptRAM(RAM, REL, CON)
                                        (0071) 
                                        (0072) _I2CHW_bStatus:
                                        (0073)  I2CHW_bStatus:                        blk   1  ; Status during transfers
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) ;-----------------------------------------------
                                        (0077) ;  EQUATES
                                        (0078) ;-----------------------------------------------
                                        (0079) I2CHW_SLAVE_ACKed:                     equ 0x01 ; This bit set if Slave ACKed Master
                                        (0080) I2CHW_SEND_ACK:                        equ 0x10 ; If this flag set, Master should send ACK
                                        (0081) 
                                        (0082) 
                                        (0083) .SECTION
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;  FUNCTION NAME: I2CHW_fReadBytes
                                        (0086) ;
                                        (0087) ;  DESCRIPTION:
                                        (0088) ;       Read Multiple bytes from a slave.  Use the ISR to perform operation.
                                        (0089) ;-----------------------------------------------------------------------------
                                        (0090) ;
                                        (0091) ;  ARGUMENTS:
                                        (0092) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0093) ;           to determine if:
                                        (0094) ;             0x01 => Use RepeatStart instead of Start
                                        (0095) ;             0x02 => Don't send Stop
                                        (0096) ;  [SP-6]=> Count of bytes to read.
                                        (0097) ;  [SP-5]=> MSB of Array address to put data in (ignorned for small mem model)
                                        (0098) ;  [SP-4]=> LSB of Array address to put data in 
                                        (0099) ;  [SP-3]=> Address of slave
                                        (0100) ;
                                        (0101) ;  RETURNS:       None
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;          
                                        (0110) ;    Currently only the page pointer registers listed below are modified: 
                                        (0111) ;          CUR_PP
                                        (0112) ;
                                        (0113) ;  THEORY of OPERATION or PROCEDURE:
                                        (0114) ;    I2C and block must be operational.
                                        (0115) ;    This routine will enable the I2C interrupt!
                                        (0116) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (0117) ;    pend on the ISR_ACTIVE bit until it can run
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) IF	(TOOLCHAIN & HITECH)
                                        (0121) RxMode:         set  -7
                                        (0122) RxCnt:          set  -6
                                        (0123) RxArrayHI:      set  -5
                                        (0124) RxArrayLO:      set  -4
                                        (0125) RxSlaveAddr:    set  -3
                                        (0126) ELSE
                                        (0127) RxMode:         equ  -7
                                        (0128) RxCnt:          equ  -6
                                        (0129) RxArrayHI:      equ  -5
                                        (0130) RxArrayLO:      equ  -4
                                        (0131) RxSlaveAddr:    equ  -3
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) _I2CHW_fReadBytes:			      
                                        (0135)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0136)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0137) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0DE6: 4F       MOV   X,SP               (0138) 	mov   X, SP
                                        (0139) I2CMSCR_NotReady1:
0DE7: 51 05    MOV   A,[0x5]            (0140)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0DE9: 47 05 80 TST   [0x5],0x80         (0141)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0142)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0143)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0144)           ;For multi master operations, a pening start or restart
                                        (0145)           ;request might be OK, the master might be waiting to
                                        (0146)           ;acquire the bus from another master
0DEC: BF FA    JNZ   0x0DE7             (0147)     jnz   I2CMSCR_NotReady1
0DEE: 2E 05 80 OR    [0x5],0x80         (0148)     or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared by ISR
                                        (0149)     ;get the address from the parameters on the stack
0DF1: 52 FD    MOV   A,[X-3]            (0150)     mov   A, [X + RxSlaveAddr]
0DF3: 64       ASL   A                  (0151)     asl   A                                                ; Shift address to the left to make
                                        (0152)                                                            ; a complete byte with the R/W bit.
0DF4: 29 01    OR    A,0x1              (0153)     or    A,0x01                                           ; OR the address with the Read bit.
0DF6: 53 04    MOV   [0x4],A            (0154)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0DF8: 60 D8    MOV   REG[0xD8],A        (0155)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0DFA: 55 03 00 MOV   [0x3],0x0          (0156)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0DFD: 52 F9    MOV   A,[X-7]            (0157)     mov   A, [X+RxMode]                                    ; place the RxMode in status so ISR can access it
0DFF: 53 03    MOV   [0x3],A            (0158)     mov   [I2CHW_bStatus],A
                                        (0159)     ;
                                        (0160)     ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0161)     ;
0E01: 10       PUSH  X                  (0162)     push   X                                               ;preserve since it's used later
0E02: 52 FA    MOV   A,[X-6]            (0163)     mov    A, [X+RxCnt]                                    ;get the write buf size
0E04: 08       PUSH  A                  (0164)     push   A
0E05: 52 FB    MOV   A,[X-5]            (0165)     mov    A, [X+RxArrayHI]                                ;get the write addrHI
0E07: 08       PUSH  A                  (0166)     push   A										   
0E08: 52 FC    MOV   A,[X-4]            (0167)     mov    A, [X+RxArrayLO]							                         ;get the write addrLO
0E0A: 08       PUSH  A                  (0168)     push   A                                               ;this will be ignored
0E0B: 93 0C    CALL  _I2CHW_InitWrite   (0169)     call  I2CHW_InitWrite                                  ;sets the addr and byte count to write to
0E0D: 38 FD    ADD   SP,0xFD            (0170)     add    SP, -3
0E0F: 20       POP   X                  (0171)     pop    X                                               ;restore X to be used for the rest of this routine
                                        (0172)     
0E10: 51 04    MOV   A,[0x4]            (0173)     mov   A,[I2CHW_SlaveAddr]
0E12: 48 F9 01 TST   [X-7],0x1          (0174)     tst   [x+RxMode],I2CHW_RepStart
0E15: B0 0A    JNZ   0x0E20             (0175)     jnz   DoRestartRx
0E17: 49 D7 01 TST   REG[0xD7],0x1      (0176)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0E1A: B0 05    JNZ   0x0E20             (0177)     jnz   DoRestartRx
0E1C: 91 2E    CALL  0x0F4C             (0178)     call  I2C_DoStart                                      ; Send a start and address.
0E1E: 80 03    JMP   0x0E22             (0179)     jmp   CheckRxAck
                                        (0180) DoRestartRx:
0E20: 90 93    CALL  0x0EB5             (0181)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0E22: 70 3F    AND   F,0x3F             
0E24: 71 C0    OR    F,0xC0             
                                        (0182)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (0183)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (0184)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (0185) 
                                        (0186) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0187)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (0188)         ;is finished.
                                        (0189) End_RD:
                                        (0190)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0191)     RAM_EPILOGUE RAM_USE_CLASS_4
0E26: 7F       RET                      (0192)     ret
0E27: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0193) 
                                        (0194) .ENDSECTION
                                        (0195) 
                                        (0196) .SECTION
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;  FUNCTION NAME: I2CHW_bWriteBytes
                                        (0199) ;
                                        (0200) ;  DESCRIPTION:
                                        (0201) ;    Write multiple data bits to slave device.
                                        (0202) ;
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;
                                        (0205) ;  ARGUMENTS:
                                        (0206) ; [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0207) ;          to determine if:
                                        (0208) ;              0x01 => Use RePeatStart instead of Start
                                        (0209) ;              0x02 => Don't send Stop
                                        (0210) ; [SP-6]=> Count of bytes to write.
                                        (0211) ; [SP-5]=> MSB of Array address to put data in (ignored small mem model).
                                        (0212) ; [SP-4]=> LSB of Array address to put data in.
                                        (0213) ; [SP-3]=> Address of slave
                                        (0214) ;
                                        (0215) ;
                                        (0216) ;  RETURNS:     None
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS:
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;          
                                        (0225) ;    Currently only the page pointer registers listed below are modified: 
                                        (0226) ;          CUR_PP
                                        (0227) ;
                                        (0228) ;  THEORY of OPERATION or PROCEDURE:
                                        (0229) ;
                                        (0230) ;-----------------------------------------------------------------------------
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232) TxMode:       set  -7
                                        (0233) TxByteCount:  set  -6
                                        (0234) TxArrayHI:    set  -5
                                        (0235) TxArrayLO:    set  -4
                                        (0236) TxSlaveAddr:  set  -3
                                        (0237) ELSE
                                        (0238) TxMode:       equ  -7
                                        (0239) TxByteCount:  equ  -6
                                        (0240) TxArrayHI:    equ  -5
                                        (0241) TxArrayLO:    equ  -4
                                        (0242) TxSlaveAddr:  equ  -3
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) _I2CHW_bWriteBytes:
                                        (0246)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0247)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0248) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
                                        (0249) 
0E2A: 4F       MOV   X,SP               (0250) 	mov   X, SP
                                        (0251) I2CMSCR_NotReady2:
0E2B: 51 05    MOV   A,[0x5]            (0252)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0E2D: 47 05 80 TST   [0x5],0x80         (0253)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0254)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0255)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0256)           ;For multi master operations, a pening start or restart
                                        (0257)           ;request might be OK, the master might be waiting to
                                        (0258)           ;acquire the bus from another master
0E30: BF FA    JNZ   0x0E2B             (0259)     jnz   I2CMSCR_NotReady2
0E32: 2E 05 80 OR    [0x5],0x80         (0260)     or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared at end of ISR
0E35: 52 FD    MOV   A,[X-3]            (0261)     mov   A, [X + TxSlaveAddr]
0E37: 64       ASL   A                  (0262)     asl   A                                                ; Shift address to the left to make
                                        (0263)                                                            ; a complete byte with the R/W bit.
                                        (0264)                                                            ; The ASL takes care of clearing bit 0.
0E38: 55 03 00 MOV   [0x3],0x0          (0265)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0E3B: 53 04    MOV   [0x4],A            (0266)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0E3D: 60 D8    MOV   REG[0xD8],A        (0267)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0E3F: 52 F9    MOV   A,[X-7]            (0268)     mov   A, [X+TxMode]                                    ; place the TxMode in status so ISR can access it
0E41: 53 03    MOV   [0x3],A            (0269)     mov   [I2CHW_bStatus],A
                                        (0270)     ;
                                        (0271)     ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0272)     ;
0E43: 10       PUSH  X                  (0273)         push   X                                                ;preserve since it's used later
0E44: 77 FA    INC   [X-6]              (0274)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (0275) 
0E46: 52 FA    MOV   A,[X-6]            (0276)         mov    A, [X+TxByteCount]                               ;get the write buf size
0E48: 08       PUSH  A                  (0277)         push   A
0E49: 52 FB    MOV   A,[X-5]            (0278)         mov    A, [X+TxArrayHI]                                 ;get the write buf addr
0E4B: 08       PUSH  A                  (0279)         push   A                                                                                            ;this will be ignored
0E4C: 52 FC    MOV   A,[X-4]            (0280)         mov    A, [X+TxArrayLO]                                 ;get the write buf addr
0E4E: 08       PUSH  A                  (0281)         push   A
0E4F: 93 06    CALL  _I2CHW_InitRamRead (0282)         call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
0E51: 38 FD    ADD   SP,0xFD            (0283)         add SP, -3
0E53: 20       POP   X                  (0284)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0285)     ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (0286) 
                                        (0287) 
0E54: 51 04    MOV   A,[0x4]            (0288)     mov   A,[I2CHW_SlaveAddr]
0E56: 48 F9 01 TST   [X-7],0x1          (0289)     tst   [x+TxMode],I2CHW_RepStart
0E59: B0 0A    JNZ   0x0E64             (0290)     jnz   DoRestartTx
0E5B: 49 D7 01 TST   REG[0xD7],0x1      (0291)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0E5E: BF C1    JNZ   0x0E20             (0292)     jnz   DoRestartRx
0E60: 90 EA    CALL  0x0F4C             (0293)     call  I2C_DoStart                                      ; Send a start and address.
0E62: 80 03    JMP   0x0E66             (0294)     jmp   DoTxAck
                                        (0295) DoRestartTx:
0E64: 90 4F    CALL  0x0EB5             (0296)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0E66: 70 3F    AND   F,0x3F             
0E68: 71 C0    OR    F,0xC0             
                                        (0297) DoTxAck:
                                        (0298) 
                                        (0299) 
                                        (0300) WriteSlaveAck:
                                        (0301)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0302) 	RAM_EPILOGUE RAM_USE_CLASS_4
0E6A: 7F       RET                      (0303)     ret
0E6B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0304) 
                                        (0305) .ENDSECTION
                                        (0306) 
                                        (0307) .SECTION
                                        (0308) ;-----------------------------------------------------------------------------
                                        (0309) ;  FUNCTION NAME: I2CHW_bWriteCBytes
                                        (0310) ;
                                        (0311) ;  DESCRIPTION:
                                        (0312) ;    Write multiple data bits to slave device from ROM
                                        (0313) ;
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;
                                        (0316) ;  ARGUMENTS:
                                        (0317) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0318) ;            to determine if:
                                        (0319) ;               0x01 => Use RepeatStart instead of Start
                                        (0320) ;               0x02 => Don't send Stop
                                        (0321) ;  [SP-6]=> Count of bytes to write.
                                        (0322) ;  [SP-5]=> MSB of ROM Array address to get data from
                                        (0323) ;  [SP-4]=> LSB of ROM Array address to get data from.
                                        (0324) ;  [SP-3]=> Address of slave
                                        (0325) ;
                                        (0326) ;  RETURNS:
                                        (0327) ;    None
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;
                                        (0339) ;  THEORY of OPERATION or PROCEDURE:
                                        (0340) ;
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) IF	(TOOLCHAIN & HITECH)
                                        (0343) TxCMode:       set  -7
                                        (0344) TxCByteCount:  set  -6
                                        (0345) TxCArrayMSB:   set  -5
                                        (0346) TxCArrayLSB:   set  -4
                                        (0347) ;TxSlaveAddr:  set  -3	  ;defined above this line if for reference only
                                        (0348) ELSE
                                        (0349) TxCMode:       equ  -7
                                        (0350) TxCByteCount:  equ  -6
                                        (0351) TxCArrayMSB:   equ  -5
                                        (0352) TxCArrayLSB:   equ  -4
                                        (0353) ;TxSlaveAddr:  equ  -3	  ;defined above this line if for reference only
                                        (0354) ENDIF
                                        (0355) 
                                        (0356) _I2CHW_bWriteCBytes:
                                        (0357)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0358) 	RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0359) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0E6E: 4F       MOV   X,SP               (0360) 	mov   X, SP
                                        (0361) I2CMSCR_NotReady3:
0E6F: 51 05    MOV   A,[0x5]            (0362)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
0E71: 47 05 80 TST   [0x5],0x80         (0363)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0364)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0365)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0366)           ;For multi master operations, a pening start or restart
                                        (0367)           ;request might be OK, the master might be waiting to
                                        (0368)           ;acquire the bus from another master
0E74: BF FA    JNZ   0x0E6F             (0369)         jnz   I2CMSCR_NotReady3
0E76: 2E 05 80 OR    [0x5],0x80         (0370)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
0E79: 52 FD    MOV   A,[X-3]            (0371)     mov   A, [X + TxSlaveAddr]
0E7B: 64       ASL   A                  (0372)     asl   A                                                ; Shift address to the left to make
                                        (0373)                                                            ; a complete byte with the R/W bit.
                                        (0374)                                                            ; The ASL takes care of clearing bit 0.
0E7C: 55 03 00 MOV   [0x3],0x0          (0375)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0E7F: 53 04    MOV   [0x4],A            (0376)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0E81: 60 D8    MOV   REG[0xD8],A        (0377)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0E83: 52 F9    MOV   A,[X-7]            (0378)     mov   A, [X+TxCMode]                                                             ; place the RxMode in status so ISR can access it
0E85: 53 03    MOV   [0x3],A            (0379)     mov   [I2CHW_bStatus],A
                                        (0380)     ;
                                        (0381)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0382)         ;
0E87: 10       PUSH  X                  (0383)         push   X                                                ;preserve X since it's used later
                                        (0384) 
0E88: 50 00    MOV   A,0x0              (0385)          mov    A, 0                                             ;get the write buf size (this is the hi order part)
0E8A: 77 FA    INC   [X-6]              (0386)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
0E8C: D0 02    JNC   0x0E8F             (0387)         jnc    . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
0E8E: 74       INC   A                  (0388)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
0E8F: 08       PUSH  A                  (0389)         push   A
0E90: 52 FA    MOV   A,[X-6]            (0390)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
0E92: 08       PUSH  A                  (0391)         push   A
0E93: 52 FB    MOV   A,[X-5]            (0392)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
0E95: 08       PUSH  A                  (0393)         push   A                                                                                        ;this will be ignored
0E96: 52 FC    MOV   A,[X-4]            (0394)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
0E98: 08       PUSH  A                  (0395)         push   A
                                        (0396) 
0E99: 92 E9    CALL  _I2CHW_InitFlashRead(0397)         call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
0E9B: 38 FC    ADD   SP,0xFC            (0398)         add SP, -4
0E9D: 20       POP   X                  (0399)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0400) 
                                        (0401)     ;or  [I2CHW_RsrcStatus],I2C_READFLASH
0E9E: 51 04    MOV   A,[0x4]            (0402)     mov   A,[I2CHW_SlaveAddr]
0EA0: 48 F9 01 TST   [X-7],0x1          (0403)     tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
0EA3: B0 0A    JNZ   0x0EAE             (0404)     jnz   DoCRestartTx                                     ; should executed.
0EA5: 49 D7 01 TST   REG[0xD7],0x1      (0405)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0EA8: BF 77    JNZ   0x0E20             (0406)     jnz   DoRestartRx
0EAA: 90 A0    CALL  0x0F4C             (0407)     call  I2C_DoStart                                      ; Send a start and address.
0EAC: 80 03    JMP   0x0EB0             (0408)     jmp   DoCTxAck
                                        (0409) DoCRestartTx:
0EAE: 90 05    CALL  0x0EB5             (0410)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0EB0: 70 3F    AND   F,0x3F             
0EB2: 71 C0    OR    F,0xC0             
                                        (0411) 
                                        (0412) DoCTxAck:                                                  ; Test to see if Slave is ACKed
                                        (0413) 
                                        (0414) CWriteSlaveAck:
                                        (0415)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0416)     RAM_EPILOGUE RAM_USE_CLASS_4
0EB4: 7F       RET                      (0417)     ret
0EB5: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0418) 
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: I2CHW_DoBufferRepeatStart
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;    Send repeated start condition and send slave address for buffered transfers.
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     This routine is called internally only.  It is not exported or intended as an API
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;    None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS:
                                        (0437) ;    The A and X registers may be modified by this or future implementations
                                        (0438) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0439) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0440) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0441) ;    functions.
                                        (0442) ;          
                                        (0443) ;  THEORY of OPERATION or PROCEDURE:
                                        (0444) ;    This is similar to the I2C_DoRepeatStart entry point but this function does not
                                        (0445) ;    wait for the byte_complete flag.  That is this is not polled and is therefore compatible
                                        (0446) ;    with the buffered read and write functions (above).
                                        (0447) ;
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) 
                                        (0450) I2CHW_DoBufferRepeatStart:
                                        (0451)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0452) 	RAM_SETPAGE_CUR >I2CHW_SlaveAddr
                                        (0453)     ;here the path through the routine is dependent on the previous transmission.
                                        (0454)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0455)         ; I2C interrupt
                                        (0456)         ; 2a. the master must NAK the byte if he is reading from the slave.
                                        (0457)         ; We do have to look at the status of the I2C block to see what is going on because if there was a
                                        (0458)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0459)         ; by setting the master restart bit and clearing to I2C_SCR (I2C_TX)
                                        (0460)         ; 2b. if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0461)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0462)         ; 3. once the ISR starts it will figure out which direction we are going with data (sending/receiving)
                                        (0463)         ;
0EB8: 60 D8    MOV   REG[0xD8],A        (0464)     mov   reg[I2CHW_DR], A
0EBA: 53 04    MOV   [0x4],A            (0465)         mov   [I2CHW_SlaveAddr], A
                                        (0466)         ;tst      reg[I2CHW_MSCR], I2CM_MASTEROP           ;do we even have control of the bus?
                                        (0467)         ;jz    notBusMasterErr
0EBC: 5D D9    MOV   A,REG[0xD9]        (0468)     mov   A, reg[I2CHW_MSCR]                               ;read the mscr register to look for pending master operations
0EBE: 21 0F    AND   A,0xF              (0469)     and   A, 0x0f                                          ;only look at the lower bits
0EC0: A0 11    JZ    0x0ED2             (0470)         jz    BusIdleSendStart
0EC2: 62 D9 02 MOV   REG[0xD9],0x2      
                                        (0471)         ; for a single master system this should not be an issue,
                                        (0472)         ; so we'll go ahead and request the restart.  If a stop condition was already generated
                                        (0473)         ; the state machine will automatically generate a start instead.
                                        (0474) 
                                        (0475)         ;SetI2CHW_SCR I2CM_RESTRT
                                        (0476)     ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0477)         ;SetI2CHW_SCR          I2C_TX                                ;even though the restart has been requested the state
                                        (0478)         ;mov      reg[I2CHW_SCR], I2C_TX                   ;even though the restart has been requested the state
                                        (0479) 
                                        (0480) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0481)         SetI2CHW_MSCR I2CM_RESTRT
                                        (0482) ;ELSE
                                        (0483) ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0484) ;ENDIF
0EC5: 49 D7 04 TST   REG[0xD7],0x4      (0485)     tst   reg[I2CHW_SCR], I2C_TX
0EC8: B0 05    JNZ   0x0ECE             (0486)     jnz   I2C_RestartRecieve
0ECA: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0487) 
                                        (0488) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0489)     SetI2CHW_SCR I2C_TX                                    ;even though the restart has been requested the state
                                        (0490) ;ELSE
                                        (0491) ;    mov   reg[I2CHW_SCR], I2C_TX                          ;send Ack
                                        (0492) ;ENDIF
                                        (0493) 
                                        (0494)     RAM_EPILOGUE RAM_USE_CLASS_4
0ECD: 7F       RET                      (0495)     ret
0ECE: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0496) I2C_RestartRecieve:
                                        (0497) 
                                        (0498) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0499)     SetI2CHW_SCR 0                                         ;even though the restart has been requested the state
                                        (0500) ;ELSE
                                        (0501) ;    mov   reg[I2CHW_SCR], 0                               ;send Ack
                                        (0502) ;ENDIF
                                        (0503) 
                                        (0504)    RAM_EPILOGUE RAM_USE_CLASS_4
0ED1: 7F       RET                      (0505)    ret
                                        (0506) 
                                        (0507) BusIdleSendStart:
0ED2: 51 04    MOV   A,[0x4]            (0508)    mov    A, [I2CHW_SlaveAddr]
0ED4: 90 76    CALL  0x0F4C             (0509)    call   I2C_DoStart
                                        (0510)    ;Since something appears to be messed up do the next best thing to a repeat start, send a start.
                                        (0511)    RAM_EPILOGUE RAM_USE_CLASS_4
0ED6: 7F       RET                      (0512)    ret
0ED7: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0513) 
                                        (0514) .ENDSECTION
                                        (0515) 
                                        (0516) .SECTION
                                        (0517) 
                                        (0518) ;-----------------------------------------------------------------------------
                                        (0519) ;  FUNCTION NAME: I2CHW_fSendRepeatStart
                                        (0520) ;
                                        (0521) ;  DESCRIPTION:
                                        (0522) ;    Send repeated start condition and send slave address.
                                        (0523) ;
                                        (0524) ;-----------------------------------------------------------------------------
                                        (0525) ;
                                        (0526) ;  ARGUMENTS:
                                        (0527) ;    I2CHW_bAddr - Contains the slave address and transfer direction.
                                        (0528) ;
                                        (0529) ;  RETURNS:
                                        (0530) ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0531) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0532) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0533) ;
                                        (0534) ;  SIDE EFFECTS:
                                        (0535) ;    The A and X registers may be modified by this or future implementations
                                        (0536) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0537) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0538) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0539) ;    functions.
                                        (0540) ;          
                                        (0541) ;    Currently only the page pointer registers listed below are modified: 
                                        (0542) ;          CUR_PP
                                        (0543) ;
                                        (0544) ;  THEORY of OPERATION or PROCEDURE:
                                        (0545) ;    Prepare to send start by setting SCl and SDA high.
                                        (0546) ;    must be followed directly by I2CHW_start.
                                        (0547) ;
                                        (0548) ;-----------------------------------------------------------------------------
                                        (0549)  I2CHW_fSendRepeatStart:
                                        (0550) _I2CHW_fSendRepeatStart:
                                        (0551)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0552) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0553)     ;wait if the bus is already busy...
0EDA: 08       PUSH  A                  (0554)     push  A
0EDB: 55 03 00 MOV   [0x3],0x0          (0555)     mov   [I2CHW_bStatus], 0x00
                                        (0556) I2CMSCR_NotReady4:
0EDE: 51 05    MOV   A,[0x5]            (0557)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0EE0: 47 05 80 TST   [0x5],0x80         (0558)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0559)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0560)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0561)           ;For multi master operations, a pening start or restart
                                        (0562)           ;request might be OK, the master might be waiting to
                                        (0563)           ;acquire the bus from another master
0EE3: BF FA    JNZ   0x0EDE             (0564)     jnz   I2CMSCR_NotReady4
0EE5: 18       POP   A                  (0565)     pop   A
                                        (0566) 
                                        (0567) 
0EE6: 64       ASL   A                  (0568)     asl   a                                                ; Shift address to the left
0EE7: 79       DEC   X                  (0569)     dec   x                                                ; If zero, C flag will be set
0EE8: C0 03    JC    0x0EEC             (0570)     jc    I2C_DoRepeatStart                                ; Do a write if zero
0EEA: 29 01    OR    A,0x1              (0571)     or    a,0x01                                           ; Set Read flag
                                        (0572) 
                                        (0573) I2C_DoRepeatStart:
                                        (0574)     ;here the path through the routine is dependent on the previous transmission.
                                        (0575)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0576)         ; I2C interrupt
                                        (0577)         ; 2. the master must NAK the byte if he is reading from the slave.
                                        (0578)         ; We don't have to look at the status of the I2C block to see what is going on because if there was a
                                        (0579)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0580)         ; by setting the master restart bit and writing to I2C_SCR (I2C_TX)
                                        (0581)         ; if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0582)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0583)         ;
0EEC: 60 D8    MOV   REG[0xD8],A        (0584)     mov   reg[I2CHW_DR], A
0EEE: 53 04    MOV   [0x4],A            (0585)     mov   [I2CHW_SlaveAddr], A
0EF0: 49 D9 04 TST   REG[0xD9],0x4      (0586)     tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
0EF3: A0 1C    JZ    0x0F10             (0587)     jz    notBusMaster1
0EF5: 62 D9 02 MOV   REG[0xD9],0x2      
0EF8: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0588)     ;SetI2CHW_MSCR  I2CM_RESTRT
                                        (0589)     ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0590)     ;SetI2CHW_SCR         I2C_TX                           ;even though the restart has been requested the state
                                        (0591)     ;mov      reg[I2CHW_SCR], I2C_TX                       ;even though the restart has been requested the state
                                        (0592)                                                                 ; machine is stalling the SCL and has to be 'released'
                                        (0593) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0594)     SetI2CHW_MSCR I2CM_RESTRT
                                        (0595)     SetI2CHW_SCR  0                                        ;getting a restart out requires a 0 into the SCR reg
                                        (0596) ;ELSE
                                        (0597) ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0598) ;    mov   reg[I2CHW_SCR], 0                               ;getting a restart out requires a 0 into the SCR reg
                                        (0599) ;ENDIF
                                        (0600) 
                                        (0601) WaitRepStrtCompl:
0EFB: 5D D7    MOV   A,REG[0xD7]        (0602)     mov   A,  reg[I2CHW_SCR]
0EFD: 49 D7 01 TST   REG[0xD7],0x1      (0603)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0F00: AF FA    JZ    0x0EFB             (0604)     jz    WaitRepStrtCompl
0F02: 49 D7 02 TST   REG[0xD7],0x2      (0605)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0F05: B0 07    JNZ   0x0F0D             (0606)     jnz   Err_Exit_RepStart
0F07: 55 03 01 MOV   [0x3],0x1          (0607)     mov   [I2CHW_bStatus], 0x01
0F0A: 50 01    MOV   A,0x1              (0608)     mov   A, 01
                                        (0609)     RAM_EPILOGUE RAM_USE_CLASS_4
0F0C: 7F       RET                      (0610)     ret
                                        (0611) 
                                        (0612) Err_Exit_RepStart:
0F0D: 50 00    MOV   A,0x0              (0613)     mov   A, 0
                                        (0614)     RAM_EPILOGUE RAM_USE_CLASS_4
0F0F: 7F       RET                      (0615)     ret
                                        (0616) 
                                        (0617)  notBusMaster1:
                                        (0618)     ;SetI2CHW_MSCR 0
                                        (0619)     ;mov reg[I2CHW_MSCR], 0                                ;we certainly cant restart if we've not Master
                                        (0620)     ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
0F10: 50 00    MOV   A,0x0              (0621)     mov   A, 0
                                        (0622)     RAM_EPILOGUE RAM_USE_CLASS_4
0F12: 7F       RET                      (0623)     ret
0F13: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0624) 
                                        (0625) .ENDSECTION
                                        (0626) 
                                        (0627) .SECTION
                                        (0628) ;-----------------------------------------------------------------------------
                                        (0629) ;  FUNCTION NAME: I2CHW_fSendStart
                                        (0630) ;
                                        (0631) ;  DESCRIPTION:
                                        (0632) ;    Generates start condition and sends slave address.
                                        (0633) ;
                                        (0634) ;-----------------------------------------------------------------------------
                                        (0635) ;
                                        (0636) ;  ARGUMENTS:
                                        (0637) ;    A => Contains the slave address.
                                        (0638) ;
                                        (0639) ;  RETURNS:
                                        (0640) ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0641) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0642) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0643) ;
                                        (0644) ;  SIDE EFFECTS:
                                        (0645) ;    The A and X registers may be modified by this or future implementations
                                        (0646) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0647) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0648) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0649) ;    functions.
                                        (0650) ;          
                                        (0651) ;    Currently only the page pointer registers listed below are modified: 
                                        (0652) ;          CUR_PP
                                        (0653) ;
                                        (0654) ;  THEORY of OPERATION or PROCEDURE:
                                        (0655) ;   Send start by setting SDA low while SCL is high. Set
                                        (0656) ;   SCL low in preparation to send address. 
                                        (0657) ;   Sends address, waits for byte complete
                                        (0658) ;   An address must be followed by a read or write of data if it was acked by a slave
                                        (0659) ;
                                        (0660) ;  WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0661) ;   flag is set to return.
                                        (0662) ;
                                        (0663) ;
                                        (0664) ;-----------------------------------------------------------------------------
                                        (0665)  I2CHW_fSendStart:
                                        (0666) _I2CHW_fSendStart:
                                        (0667)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0668) 	RAM_SETPAGE_CUR >I2CHW_bStatus 
                                        (0669)     ;wait if the bus is already busy...
0F16: 08       PUSH  A                  (0670)     push  A
0F17: 55 03 00 MOV   [0x3],0x0          (0671)     mov   [I2CHW_bStatus], 0x00
                                        (0672) I2CMSCR_NotReady5:
0F1A: 51 05    MOV   A,[0x5]            (0673)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0F1C: 47 05 80 TST   [0x5],0x80         (0674)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0675)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0676)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0677)           ;For multi master operations, a pening start or restart
                                        (0678)           ;request might be OK, the master might be waiting to
                                        (0679)           ;acquire the bus from another master
0F1F: BF FA    JNZ   0x0F1A             (0680)     jnz   I2CMSCR_NotReady5
0F21: 18       POP   A                  (0681)     pop   A
0F22: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0682) 
                                        (0683) 
                                        (0684)     ; disable the interrupt
                                        (0685)         ; *** NOT REENABLED ***
                                        (0686)         ;
                                        (0687)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0F25: 49 D7 01 TST   REG[0xD7],0x1      (0688)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ;If there is a pending BYTE_COMPL here
                                        (0689)                                                                 ;it is highly probable that a start is not the
                                        (0690)                                                                                                                     ;correct thing to do.
                                        (0691)                                                                                                                     ;leaving
0F28: B0 20    JNZ   0x0F49             (0692)     jnz   Err_Exit_Start
                                        (0693) 
0F2A: 64       ASL   A                  (0694)     asl   a                                                ; Shift address to the left
0F2B: 79       DEC   X                  (0695)     dec   x                                                ; If zero, C flag will be set
0F2C: C0 03    JC    0x0F30             (0696)     jc    I2C_SndWRStart                                   ; Do a write if zero
0F2E: 29 01    OR    A,0x1              (0697)     or    a,0x01                                           ; Set Read flag
                                        (0698) I2C_SndWRStart:
0F30: 60 D8    MOV   REG[0xD8],A        (0699)     mov   reg[I2CHW_DR], A
0F32: 53 04    MOV   [0x4],A            (0700)     mov   [I2CHW_SlaveAddr], A
0F34: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0701)     ;SetI2CHW_MSCR, I2CM_SNDSTRT
                                        (0702)     ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0703) 
                                        (0704) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0705)     SetI2CHW_MSCR I2CM_SNDSTRT
                                        (0706) ;ELSE
                                        (0707) ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0708) ;ENDIF
                                        (0709) 
                                        (0710) 
                                        (0711) WaitStrtByteCompl:
0F37: 5D D7    MOV   A,REG[0xD7]        (0712)     mov   A,  reg[I2CHW_SCR]
0F39: 49 D7 01 TST   REG[0xD7],0x1      (0713)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0F3C: AF FA    JZ    0x0F37             (0714)     jz    WaitStrtByteCompl
0F3E: 49 D7 02 TST   REG[0xD7],0x2      (0715)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0F41: B0 07    JNZ   0x0F49             (0716)     jnz   Err_Exit_Start
0F43: 55 03 01 MOV   [0x3],0x1          (0717)     mov   [I2CHW_bStatus], 0x01
0F46: 50 01    MOV   A,0x1              (0718)     mov   A, 01
                                        (0719)     RAM_EPILOGUE RAM_USE_CLASS_4
0F48: 7F       RET                      (0720)     ret
                                        (0721) Err_Exit_Start:
0F49: 50 00    MOV   A,0x0              (0722)     mov   A, 0
                                        (0723)     RAM_EPILOGUE RAM_USE_CLASS_4
0F4B: 7F       RET                      (0724)     ret
0F4C: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0725) 
                                        (0726) I2C_DoStart:
                                        (0727)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0728)     RAM_SETPAGE_CUR >I2CHW_SlaveAddr
                                        (0729)     ;here we are not required to test for master operation since we are only attempting to gain control of the bus
                                        (0730)     ; by attempting to assert a Start
                                        (0731)     
0F4F: 60 D8    MOV   REG[0xD8],A        (0732)     mov   reg[I2CHW_DR], A
0F51: 53 04    MOV   [0x4],A            (0733)     mov   [I2CHW_SlaveAddr], A
0F53: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0734)     ;SetI2CHW_MSCR  I2CM_SNDSTRT
                                        (0735)     ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0736) 
                                        (0737) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0738)     SetI2CHW_MSCR I2CM_SNDSTRT
                                        (0739) ;ELSE
                                        (0740) ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0741) ;ENDIF
                                        (0742)     RAM_EPILOGUE RAM_USE_CLASS_4
0F56: 7F       RET                      (0743)     ret
0F57: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0744) ;
                                        (0745) ;   DO NOT PLACE
                                        (0746) ;   .SECTION
                                        (0747) ;   .ENDSECTION
                                        (0748) ;   _fSendStart USES CODE BELOW
                                        (0749) ;
                                        (0750) ;-----------------------------------------------------------------------------
                                        (0751) ;  FUNCTION NAME: I2CHW_fWrite
                                        (0752) ;
                                        (0753) ;  DESCRIPTION:
                                        (0754) ;    Writes a byte to the I2C master bus.
                                        (0755) ;
                                        (0756) ;-----------------------------------------------------------------------------
                                        (0757) ;
                                        (0758) ;  ARGUMENTS:
                                        (0759) ;    A contains Data to be written to I2C slave.
                                        (0760) ;
                                        (0761) ;  RETURNS:
                                        (0762) ;    1 If ACKed, else 0
                                        (0763) ;
                                        (0764) ;  SIDE EFFECTS:
                                        (0765) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0766) ;
                                        (0767) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0768) ;
                                        (0769) ;  FUNCTION NAME: I2CHW_fWrite
                                        (0770) ;
                                        (0771) ;  DESCRIPTION:
                                        (0772) ;    Writes a data byte to the I2C master bus. 
                                        (0773) ;
                                        (0774) ;  ARGUMENTS:
                                        (0775) ;    Reg A contains slave address.
                                        (0776) ;    I2CHW_bData - Contains data to be transmitted.
                                        (0777) ;
                                        (0778) ;  RETURNS:
                                        (0779) ;    I2CHW_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0780) ;
                                        (0781) ;  SIDE EFFECTS:
                                        (0782) ;    The A and X registers may be modified by this or future implementations
                                        (0783) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0784) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0785) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0786) ;    functions.
                                        (0787) ;          
                                        (0788) ;    Currently only the page pointer registers listed below are modified: 
                                        (0789) ;          CUR_PP
                                        (0790) ;
                                        (0791) ;    Send data byte to slave. .
                                        (0792) ;
                                        (0793) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0794) ;    flag is set to return.
                                        (0795) ;
                                        (0796)  I2CHW_fWrite:
                                        (0797) _I2CHW_fWrite:
                                        (0798)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0799) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0800)     ; disable the interrupt
                                        (0801)         ; *** NOT REENABLED ***
                                        (0802)         ;
0F5A: 60 D8    MOV   REG[0xD8],A        (0803)     mov   reg[I2CHW_DR],A                                  ; Put data in Data Reg
0F5C: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0804)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0F5F: 5D D9    MOV   A,REG[0xD9]        (0805)     mov   A,  reg[I2CHW_MSCR]                              ;MSCR into A incase there is an error here
0F61: 49 D9 04 TST   REG[0xD9],0x4      (0806)     tst   reg[I2CHW_MSCR],I2CM_MASTEROP                    ;Do we have control of the bus?
0F64: A0 19    JZ    0x0F7E             (0807)     jz    Err_Exit_fWrite
                                        (0808) 
0F66: 55 03 00 MOV   [0x3],0x0          (0809)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
0F69: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0810)     ;SetI2CHW_SCR I2C_TX
                                        (0811)     ;mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                                        (0812) 
                                        (0813) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0814)         SetI2CHW_SCR I2C_TX                                ; Put data in Data Reg
                                        (0815) ;ELSE
                                        (0816) ;    mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                                        (0817) ;ENDIF
                                        (0818) 
                                        (0819) 
                                        (0820) I2CHW_write:
                                        (0821) _I2CHW_write:
                                        (0822) ;    mov   reg[I2CHW_SCR],A                                ; Put data in bData
                                        (0823) ;   jmp   I2CHW_get_ack                                    ; This jump is not required since it falls
                                        (0824) 
                                        (0825) WaitTXByteCompl:
0F6C: 5D D7    MOV   A,REG[0xD7]        (0826)     mov   A, reg[I2CHW_SCR]
0F6E: 49 D7 01 TST   REG[0xD7],0x1      (0827)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0F71: AF FA    JZ    0x0F6C             (0828)     jz    WaitTXByteCompl
0F73: 49 D7 02 TST   REG[0xD7],0x2      (0829)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0F76: B0 07    JNZ   0x0F7E             (0830)     jnz   Err_Exit_fWrite
0F78: 55 03 FF MOV   [0x3],0xFF         (0831)     mov   [I2CHW_bStatus], 0xff
0F7B: 50 01    MOV   A,0x1              (0832)     mov   A, 01
                                        (0833)     RAM_EPILOGUE RAM_USE_CLASS_4
0F7D: 7F       RET                      (0834)     ret
                                        (0835) 
                                        (0836) Err_Exit_fWrite:
0F7E: 50 00    MOV   A,0x0              (0837)     mov   A, 0
0F80: 53 03    MOV   [0x3],A            (0838)     mov   [I2CHW_bStatus], A
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
0F82: 7F       RET                      (0840)     ret
0F83: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0841) 
                                        (0842) .ENDSECTION
                                        (0843) 
                                        (0844) .SECTION
                                        (0845) ;-----------------------------------------------------------------------------
                                        (0846) ;  FUNCTION NAME: I2CHW_get_ack
                                        (0847) ;
                                        (0848) ;  DESCRIPTION:
                                        (0849) ;    Get slave acknowledge response. Used to poll for I2C_BYTE_COMPL and then test Ack (I2C_LST_BIT)
                                        (0850) ;
                                        (0851) ;-----------------------------------------------------------------------------
                                        (0852) ;
                                        (0853) ;  ARGUMENTS:
                                        (0854) ;
                                        (0855) ;  RETURNS:
                                        (0856) ;    Sets flag in I2CHW_bStatus if ACKed by Slave.  !!!
                                        (0857) ;
                                        (0858) ;  SIDE EFFECTS:
                                        (0859) ;    The A and X registers may be modified by this or future implementations
                                        (0860) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0861) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0862) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0863) ;    functions.
                                        (0864) ;          
                                        (0865) ;    Currently only the page pointer registers listed below are modified: 
                                        (0866) ;          CUR_PP
                                        (0867) ;
                                        (0868) ;    Do the ack clock and check for Slave ACK
                                        (0869) ;
                                        (0870) I2CHW_get_ack:
                                        (0871) _I2CHW_get_ack:
                                        (0872)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0873) 	RAM_SETPAGE_CUR >I2CHW_bStatus
0F86: 26 03 FE AND   [0x3],0xFE         (0874)     and [I2CHW_bStatus], ~I2CHW_SLAVE_ACKed
0F89: 49 D7 01 TST   REG[0xD7],0x1      (0875)     tst reg[I2CHW_SCR], I2C_BYTE_COMPL
0F8C: BF F6    JNZ   0x0F83             (0876)     jnz I2CHW_get_ack
0F8E: 49 D7 02 TST   REG[0xD7],0x2      (0877)     tst reg[I2CHW_SCR], I2C_LST_BIT
0F91: B0 04    JNZ   0x0F96             (0878)     jnz notAcked
0F93: 2E 03 01 OR    [0x3],0x1          (0879)     or [I2CHW_bStatus], I2CHW_SLAVE_ACKed
                                        (0880) notAcked:
                                        (0881)     RAM_EPILOGUE RAM_USE_CLASS_4
0F96: 7F       RET                      (0882)     ret
0F97: 62 D0 00 MOV   REG[0xD0],0x0      
0F9A: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0883) 
                                        (0884) .ENDSECTION
                                        (0885) 
                                        (0886) .SECTION
                                        (0887) 
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;  FUNCTION NAME: I2CHW_bRead
                                        (0890) ;
                                        (0891) ;  DESCRIPTION:
                                        (0892) ;    Reads 1 data byte from the I2C master bus.
                                        (0893) ;
                                        (0894) ;-----------------------------------------------------------------------------
                                        (0895) ;
                                        (0896) ;  ARGUMENTS:
                                        (0897) ;    Reg A Contains the Slave Address.
                                        (0898) ;    I2CHW_bStatus - Set for no ack to be followed by stop.
                                        (0899) ;    Clear for ack to indicate more data to follow.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2CHW_bData - Contains received data.
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Must be followed by I2CHW_put_ack.
                                        (0915) ;    The I2CHW interrupt should be disabled since this routine will poll the
                                        (0916) ;    reg[I2CHW_SCR] to determine when a byte is available
                                        (0917) ;
                                        (0918) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0919) ;    flag is set to return.
                                        (0920) ;
                                        (0921) I2CHW_bRead:
                                        (0922) _I2CHW_bRead:
                                        (0923)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0924) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0925)     ; disable the interrupt
                                        (0926)     ; *** NOT REENABLED ***
                                        (0927)     ;
                                        (0928)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0F9D: 49 D9 04 TST   REG[0xD9],0x4      (0929)     tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
0FA0: A0 28    JZ    0x0FC9             (0930)     jz    notBusMaster2
                                        (0931) 
0FA2: 55 03 00 MOV   [0x3],0x0          (0932)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                                        (0933)     ;or    I2CHW_SEND_ACK                                  ; Set ACK flag
                                        (0934) ;
                                        (0935) ; Check for the special case of the first read after and address is sent
                                        (0936) ;
                                        (0937) 
0FA5: 08       PUSH  A                  (0938)     push  A                                                ;preserve the information about wether to ACK or NAK this byte
0FA6: 5D D7    MOV   A,REG[0xD7]        (0939)     mov   A, reg[I2CHW_SCR]
0FA8: 49 D7 08 TST   REG[0xD7],0x8      (0940)     tst   reg[I2CHW_SCR], I2C_ADDRIN
0FAB: A0 04    JZ    0x0FB0             (0941)     jz    WaitRXByteCompl                                  ;addr bit not set then this is a normal read
0FAD: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0942)     ;SetI2CHW_SCR 0
                                        (0943)     ;mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0944) 
                                        (0945) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0946)     SetI2CHW_SCR 0                                         ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0947) ;ELSE
                                        (0948) ;    mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0949) ;ENDIF
                                        (0950)                                                            ; through to I2CHW_put_ack.
                                        (0951) 
                                        (0952)     ;must DROP through to send an Ack and another byte,
                                        (0953)     ;to stop reading we NAK the slave
                                        (0954) WaitRXByteCompl:
0FB0: 49 D7 01 TST   REG[0xD7],0x1      (0955)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0FB3: AF FC    JZ    0x0FB0             (0956)     jz    WaitRXByteCompl
                                        (0957) 
0FB5: 18       POP   A                  (0958)     pop   A                                                ;recover the saved ACK/NAK flag
0FB6: 21 FF    AND   A,0xFF             (0959)     and   A,0xFF                                           ; Is Ack flag set"
0FB8: A0 0A    JZ    0x0FC3             (0960)     jz    exit_bRead_NOACK                                 ; Don't ACK
                                        (0961) 
                                        (0962)         ;now if the ACK flag was set, Ack the data which will release the bus and start the next byte in
                                        (0963)         ;otherwise do NOTHING to the SCR reg.  This will allow the calling routine to generate a repeat start
                                        (0964)         ;or a stop depending on it's preference.
                                        (0965) 
                                        (0966) 
0FBA: 5D D8    MOV   A,REG[0xD8]        (0967)     mov   A, reg[I2CHW_DR]                                 ; Record data received
0FBC: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0968)     ;SetI2CHW_SCR I2C_ACKOUT
                                        (0969)     ;mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                                        (0970) 
                                        (0971) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0972)     SetI2CHW_SCR I2C_ACKOUT                                ; Record data received
                                        (0973) ;ELSE
                                        (0974) ;    mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                                        (0975) ;ENDIF
                                        (0976) 
0FBF: 55 03 01 MOV   [0x3],0x1          (0977)     mov   [I2CHW_bStatus],0x01                             ; Clear ACK flag
                                        (0978)     RAM_EPILOGUE RAM_USE_CLASS_4
0FC2: 7F       RET                      (0979)     ret
                                        (0980) 
                                        (0981) exit_bRead_NOACK:
0FC3: 5D D8    MOV   A,REG[0xD8]        (0982)     mov   A, reg[I2CHW_DR]                                 ; Record data received
                                        (0983)     ; send no Ack or Nak, the calling routine will have to decide to NAK or execute a repeat start.
                                        (0984)     ; sending nothing leaves the bus held in wait until a decision is made.
0FC5: 55 03 00 MOV   [0x3],0x0          (0985)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                                        (0986)     RAM_EPILOGUE RAM_USE_CLASS_4
0FC8: 7F       RET                      (0987)     ret
                                        (0988) 
                                        (0989) notBusMaster2:
0FC9: 55 03 FF MOV   [0x3],0xFF         (0990)    mov   [I2CHW_bStatus], 0xff
                                        (0991)    ;SetI2CHW_SCR 0
                                        (0992)    ;mov          reg[I2CHW_MSCR], 0                        ;we certainly cant restart if we've not Master
                                        (0993)    ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
                                        (0994)    RAM_EPILOGUE RAM_USE_CLASS_4
0FCC: 7F       RET                      (0995)    ret
                                        (0996) 
                                        (0997) .ENDSECTION
                                        (0998) 
                                        (0999) 
                                        (1000) .SECTION
                                        (1001) ;-----------------------------------------------------------------------------
                                        (1002) ;  FUNCTION NAME: I2CHW_SendStop
                                        (1003) ;
                                        (1004) ;  DESCRIPTION:
                                        (1005) ;    Assert stop condition.
                                        (1006) ;
                                        (1007) ;-----------------------------------------------------------------------------
                                        (1008) ;
                                        (1009) ;  ARGUMENTS: none
                                        (1010) ;
                                        (1011) ;  RETURNS: none
                                        (1012) ;
                                        (1013) ;  SIDE EFFECTS:
                                        (1014) ;    The A and X registers may be modified by this or future implementations
                                        (1015) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1016) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1017) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1018) ;    functions.
                                        (1019) ;
                                        (1020) ;  THEORY of OPERATION or PROCEDURE:
                                        (1021) ;     Send stop by releasing SDA high while SCL high. When in Master Read Mode, this
                                        (1022) ;     is done by nak'ing a read from the slave, in Master Write Mode this is done by clearing
                                        (1023) ;     the I2C_TX bit in  reg[I2CHW_SCR].  In either case this is a zero written to
                                        (1024) ;     reg[I2CHW_SCR].
                                        (1025) ;
                                        (1026)  I2CHW_SendStop:
                                        (1027) _I2CHW_SendStop:
                                        (1028)     RAM_PROLOGUE RAM_USE_CLASS_1
0FCD: 49 D9 04 TST   REG[0xD9],0x4      (1029)     tst   reg[I2CHW_MSCR], I2CM_MASTEROP                   ;do we even have control of the bus?
0FD0: A0 04    JZ    0x0FD5             (1030)     jz    notBusMaster3
0FD2: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (1031)     ;SetI2CHW_SCR 0
                                        (1032)     ;mov  reg[I2CHW_SCR], 0
                                        (1033) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (1034)     SetI2CHW_SCR 0                                         ; Put data in Data Reg
                                        (1035) ;ELSE
                                        (1036) ;    mov   reg[I2CHW_SCR], 0                               ; Put data in Data Reg
                                        (1037) ;ENDIF
                                        (1038) 
                                        (1039) notBusMaster3:
                                        (1040)     RAM_EPILOGUE RAM_USE_CLASS_1
0FD5: 7F       RET                      (1041)     ret
0FD6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1042) .ENDSECTION
                                        (1043) 
                                        (1044) .SECTION
                                        (1045) ;-----------------------------------------------------------------------------
                                        (1046) ;  FUNCTION NAME: I2CHW_bReadBusStatus
                                        (1047) ;
                                        (1048) ;  DESCRIPTION:
                                        (1049) ;     Returns the Status bits in the bStatus Register
                                        (1050) ;
                                        (1051) ;-----------------------------------------------------------------------------
                                        (1052) ;
                                        (1053) ;  ARGUMENTS:
                                        (1054) ;
                                        (1055) ;  RETURNS:
                                        (1056) ;     BYTE  bStatus -  Bus status data.  Use the following defined bits
                                        (1057) ;     returned in A.
                                        (1058) ;       I2CHW_RepStart:                     equ  0x01
                                        (1059) ;       I2CHW_NoStop:                       equ  0x02
                                        (1060) ;       I2CHW_NAKnextWr:                    equ  0x04
                                        (1061) ;
                                        (1062) ;  SIDE EFFECTS:
                                        (1063) ;    The A and X registers may be modified by this or future implementations
                                        (1064) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1065) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1066) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1067) ;    functions.
                                        (1068) ;          
                                        (1069) ;  THEORY of OPERATION or PROCEDURE:
                                        (1070) ;     Read the Bus Status register.
                                        (1071) ;
                                        (1072) 
                                        (1073)  I2CHW_bReadBusStatus:
                                        (1074) _I2CHW_bReadBusStatus:
                                        (1075)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1076)    RAM_SETPAGE_CUR >I2CHW_bStatus				                      ;Set the Page Pointer for LMM
0FD9: 51 03    MOV   A,[0x3]            (1077)    mov   A, [I2CHW_bStatus]                      ;return the status in A
                                        (1078)    RAM_EPILOGUE RAM_USE_CLASS_4
0FDB: 7F       RET                      (1079)    ret
                                        (1080) 
                                        (1081) .ENDSECTION
                                        (1082) 
                                        (1083) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1084) .SECTION
                                        (1085) ;-----------------------------------------------------------------------------
                                        (1086) ;  FUNCTION NAME: I2CHW_fReadBytes
                                        (1087) ;
                                        (1088) ;  DESCRIPTION:
                                        (1089) ;
                                        (1090) ;-----------------------------------------------------------------------------
                                        (1091) ;
                                        (1092) ;  ARGUMENTS:
                                        (1093) ;      A => Address of slave
                                        (1094) ;      X => Pointer to other arguments.
                                        (1095) ;    [x] => LSB of Array address to put data in.
                                        (1096) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (1097) ;  [X-2] => Count of bytes to read.
                                        (1098) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (1099) ;           to determine if:
                                        (1100) ;             0x01 => Use RepeatStart instead of Start
                                        (1101) ;             0x02 => Don't send Stop
                                        (1102) ;
                                        (1103) ;  RETURNS:       None
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;    I2C and block must be operational.
                                        (1117) ;    This routine will enable the I2C interrupt!
                                        (1118) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (1119) ;    pend on the ISR_ACTIVE bit until it can run
                                        (1120) ;
                                        (1121) IF	(TOOLCHAIN & HITECH)
                                        (1122) RxArray:      set   0
                                        (1123) RxByteCount:  set  -2
                                        (1124) RxMode:       set  -3
                                        (1125) ELSE
                                        (1126) RxArray:      equ   0
                                        (1127) RxByteCount:  equ  -2
                                        (1128) RxMode:       equ  -3
                                        (1129) ENDIF
                                        (1130) 
                                        (1131) 
                                        (1132)  I2CHW_fReadBytes:
                                        (1133)     push  A
                                        (1134) I2CMSCR_NotReady1Smm:
                                        (1135)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1136)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1137)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1138)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1139)           ;For multi master operations, a pening start or restart
                                        (1140)           ;request might be OK, the master might be waiting to
                                        (1141)           ;acquire the bus from another master
                                        (1142)         jnz   I2CMSCR_NotReady1Smm
                                        (1143)     pop   A
                                        (1144)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared by ISR
                                        (1145)     asl   A                                                ; Shift address to the left to make
                                        (1146)                                                            ; a complete byte with the R/W bit.
                                        (1147)     or    A,0x01                                           ; OR the address with the Read bit.
                                        (1148)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1149)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1150)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1151)     mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1152)     mov   [I2CHW_bStatus],A
                                        (1153)     ;
                                        (1154)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1155)         ;
                                        (1156)         push   X                                                ;preserve since it's used later
                                        (1157)         mov    A, [X+RxByteCount]                               ;get the write buf size
                                        (1158)         push   A
                                        (1159)         push   A                                                                                            ;this will be ignored
                                        (1160)         mov    A, [X+RxArray]                                   ;get the write buf addr
                                        (1161)         push   A
                                        (1162)         mov    X, sp
                                        (1163)         dec    X
                                        (1164)         call  I2CHW_InitWrite                              ;sets the addr and byte count to write to
                                        (1165)         add SP, -3
                                        (1166)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1167) 
                                        (1168)     mov   A,[I2CHW_SlaveAddr]
                                        (1169)     tst   [x+RxMode],I2CHW_RepStart
                                        (1170)     jnz   DoRestartRxSmm
                                        (1171)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1172)     jnz   DoRestartRxSmm
                                        (1173)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1174)     jmp   CheckRxAckSmm
                                        (1175) DoRestartRxSmm:
                                        (1176)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1177)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (1178)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (1179)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (1180) 
                                        (1181) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
                                        (1182)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (1183)         ;is finished.
                                        (1184) ;End_RD:
                                        (1185)     ret
                                        (1186) 
                                        (1187) .ENDSECTION
                                        (1188) 
                                        (1189) .SECTION
                                        (1190) ;-----------------------------------------------------------------------------
                                        (1191) ;  FUNCTION NAME: I2CHW_bWriteBytes
                                        (1192) ;
                                        (1193) ;  DESCRIPTION:
                                        (1194) ;    Write multiple data bits to slave device.
                                        (1195) ;
                                        (1196) ;-----------------------------------------------------------------------------
                                        (1197) ;
                                        (1198) ;  ARGUMENTS:
                                        (1199) ;     A => Address of slave
                                        (1200) ;     X => Pointer to other arguments.
                                        (1201) ;   [x] => LSB of Array address to put data in.
                                        (1202) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (1203) ; [X-2] => Count of bytes to write.
                                        (1204) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (1205) ;          to determine if:
                                        (1206) ;              0x01 => Use RePeatStart instead of Start
                                        (1207) ;              0x02 => Don't send Stop
                                        (1208) ;
                                        (1209) ;
                                        (1210) ;  RETURNS:     None
                                        (1211) ;
                                        (1212) ;  SIDE EFFECTS:
                                        (1213) ;    The A and X registers may be modified by this or future implementations
                                        (1214) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1215) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1216) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1217) ;    functions.
                                        (1218) ;          
                                        (1219) IF	(TOOLCHAIN & HITECH)
                                        (1220) TxArray:      set   0
                                        (1221) TxByteCount:  set  -2
                                        (1222) TxMode:       set  -3
                                        (1223) ELSE
                                        (1224) TxArray:      equ   0
                                        (1225) TxByteCount:  equ  -2
                                        (1226) TxMode:       equ  -3
                                        (1227) ENDIF
                                        (1228) 
                                        (1229)  I2CHW_bWriteBytes:
                                        (1230)     push  A
                                        (1231) I2CMSCR_NotReady2Smm:
                                        (1232)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1233)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1234)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1235)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1236)           ;For multi master operations, a pening start or restart
                                        (1237)           ;request might be OK, the master might be waiting to
                                        (1238)           ;acquire the bus from another master
                                        (1239)         jnz   I2CMSCR_NotReady2Smm
                                        (1240)     pop   A
                                        (1241)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared at end of ISR
                                        (1242)     asl   A                                                ; Shift address to the left to make
                                        (1243)                                                            ; a complete byte with the R/W bit.
                                        (1244)                                                            ; The ASL takes care of clearing bit 0.
                                        (1245)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1246)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1247)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1248)     mov   A, [X+TxMode]                                                             ; place the TxMode in status so ISR can access it
                                        (1249)     mov   [I2CHW_bStatus],A
                                        (1250)     ;
                                        (1251)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1252)         ;
                                        (1253)         push   X                                                ;preserve since it's used later
                                        (1254)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1255)                                                                 ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1256)         mov    A, [X+TxByteCount]                               ;get the write buf size
                                        (1257)         push   A
                                        (1258)         push   A                                                                                            ;this will be ignored
                                        (1259)         mov    A, [X+TxArray]                                   ;get the write buf addr
                                        (1260)         push   A
                                        (1261)         mov    X, sp
                                        (1262)         dec    X
                                        (1263)         call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
                                        (1264)         add    SP, -3
                                        (1265)         pop    X                                                ;restore X to be used for the rest of this routine
                                        (1266)     ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (1267) 
                                        (1268) 
                                        (1269)     mov   A,[I2CHW_SlaveAddr]
                                        (1270)     tst   [x+TxMode],I2CHW_RepStart
                                        (1271)     jnz   DoRestartTxSmm
                                        (1272)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1273)     jnz   DoRestartRxSmm
                                        (1274)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1275)     jmp   DoTxAckSmm
                                        (1276) DoRestartTxSmm:
                                        (1277)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1278) DoTxAckSmm:
                                        (1279) 
                                        (1280) 
                                        (1281) ;WriteSlaveAck:
                                        (1282)     ret
                                        (1283) 
                                        (1284) .ENDSECTION
                                        (1285) 
                                        (1286) .SECTION
                                        (1287) ;-----------------------------------------------------------------------------
                                        (1288) ;  FUNCTION NAME: I2CHW_bWriteCBytes
                                        (1289) ;
                                        (1290) ;  DESCRIPTION:
                                        (1291) ;    Write multiple data bits to slave device from ROM
                                        (1292) ;
                                        (1293) ;-----------------------------------------------------------------------------
                                        (1294) ;
                                        (1295) ;  ARGUMENTS:
                                        (1296) ;      A => Address of slave
                                        (1297) ;      X => Pointer to other arguments.
                                        (1298) ;     [x] => LSB of ROM Array address to put data in.
                                        (1299) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (1300) ;   [X-2] => Count of bytes to write.
                                        (1301) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (1302) ;            to determine if:
                                        (1303) ;               0x01 => Use RepeatStart instead of Start
                                        (1304) ;               0x02 => Don't send Stop
                                        (1305) ;
                                        (1306) ;  RETURNS:
                                        (1307) ;    None
                                        (1308) ;
                                        (1309) ;  SIDE EFFECTS:
                                        (1310) ;    The A and X registers may be modified by this or future implementations
                                        (1311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1314) ;    functions.
                                        (1315) ;          
                                        (1316) IF	(TOOLCHAIN & HITECH)
                                        (1317) TxCArrayLSB:   set   0
                                        (1318) TxCArrayMSB:   set  -1
                                        (1319) TxCByteCount:  set  -2
                                        (1320) TxCMode:       set  -3
                                        (1321) ELSE
                                        (1322) TxCArrayLSB:   equ   0
                                        (1323) TxCArrayMSB:   equ  -1
                                        (1324) TxCByteCount:  equ  -2
                                        (1325) TxCMode:       equ  -3
                                        (1326) ENDIF
                                        (1327) 
                                        (1328)  I2CHW_bWriteCBytes:
                                        (1329)     push  A
                                        (1330) I2CMSCR_NotReady3Smm:
                                        (1331)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1332)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1333)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1334)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1335)           ;For multi master operations, a pening start or restart
                                        (1336)           ;request might be OK, the master might be waiting to
                                        (1337)           ;acquire the bus from another master
                                        (1338)         jnz   I2CMSCR_NotReady3Smm
                                        (1339)     pop   A
                                        (1340)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
                                        (1341)         asl   A                                                 ; Shift address to the left to make
                                        (1342)                                                            ; a complete byte with the R/W bit.
                                        (1343)                                                            ; The ASL takes care of clearing bit 0.
                                        (1344)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1345)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1346)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1347)         mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1348)     mov   [I2CHW_bStatus],A
                                        (1349)     ;
                                        (1350)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1351)         ;
                                        (1352)         push   X                                                ;preserve X since it's used later
                                        (1353)         mov    A, 0                                             ;get the write buf size (this is the hi order part)
                                        (1354)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1355)         jnc     . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1356)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
                                        (1357)         push   A
                                        (1358)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
                                        (1359)         push   A
                                        (1360)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
                                        (1361)         push   A                                                                                        ;this will be ignored
                                        (1362)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
                                        (1363)         push   A
                                        (1364)         mov    X, sp
                                        (1365)         dec    X
                                        (1366)         call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
                                        (1367)         add SP, -4
                                        (1368)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1369)     ;or  [I2CHW_RsrcStatus],I2C_READFLASH
                                        (1370)     mov   A,[I2CHW_SlaveAddr]
                                        (1371)     tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
                                        (1372)     jnz   DoCRestartTxSmm                                      ; should executed.
                                        (1373)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1374)     jnz   DoRestartRxSmm
                                        (1375)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1376)     jmp   DoCTxAckSmm
                                        (1377) DoCRestartTxSmm:
                                        (1378)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1379) 
                                        (1380) DoCTxAckSmm:                                                   ; Test to see if Slave is ACKed
                                        (1381) 
                                        (1382) ;CWriteSlaveAck:
                                        (1383)         ret
                                        (1384) 
                                        (1385) .ENDSECTION
                                        (1386) 
                                        (1387) 
                                        (1388) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (1389) 
                                        (1390) ; End of File I2CHW.asm
                                        (1391) 
                                        (1392) 
FILE: lib\i2chwint.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWINT.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CHW Master Interrupt Service Routine
                                        (0008) ;;  This is the interrupt service routine for the Single Master I2C function.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "I2CHWCommon.inc"
                                        (0017) include "I2CHWMstr.inc"
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export     I2CHW_Read_Count
                                        (0024) export    _I2CHW_Read_Count
                                        (0025) export     I2CHW_Write_Count
                                        (0026) export    _I2CHW_Write_Count
                                        (0027) 
                                        (0028) export    pI2CHW_Read_BufLO
                                        (0029) export   _pI2CHW_Read_BufLO
                                        (0030) export    pI2CHW_Write_BufLO
                                        (0031) export   _pI2CHW_Write_BufLO
                                        (0032) export    I2CHW_RsrcStatus
                                        (0033) export   _I2CHW_RsrcStatus
                                        (0034) export    I2CHW_SlaveAddr
                                        (0035) export   _I2CHW_SlaveAddr
                                        (0036) 
                                        (0037) ;-----------------------------------------------
                                        (0038) ; WARNING: The variables below are deprecated
                                        (0039) ; and have been replaced with Read_BufLO
                                        (0040) ; and Write_BufLO
                                        (0041) ;-----------------------------------------------
                                        (0042) export    pI2CHW_Read_Buf
                                        (0043) export   _pI2CHW_Read_Buf
                                        (0044) export    pI2CHW_Write_Buf
                                        (0045) export   _pI2CHW_Write_Buf
                                        (0046) ;-----------------------------------------------
                                        (0047) ; END WARNING
                                        (0048) ;-----------------------------------------------
                                        (0049)  
                                        (0050) area InterruptRAM(RAM, REL, CON)
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ; Variable Allocation
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056)   I2CHW_SlaveAddr:
                                        (0057)  _I2CHW_SlaveAddr:                           blk      1
                                        (0058)   I2CHW_RsrcStatus:
                                        (0059)  _I2CHW_RsrcStatus:                          blk     1
                                        (0060)   I2CHW_Write_Count:
                                        (0061)  _I2CHW_Write_Count:                         blk    1
                                        (0062) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0063) export    pI2CHW_Write_BufHI
                                        (0064) export   _pI2CHW_Write_BufHI
                                        (0065) 
                                        (0066)  pI2CHW_Write_BufHI:
                                        (0067) _pI2CHW_Write_BufHI:                         blk     1
                                        (0068) ENDIF
                                        (0069) ;-----------------------------------------------
                                        (0070) ; WARNING: The variable below is deprecated
                                        (0071) ; and has been replaced Write_BufLO
                                        (0072) ;-----------------------------------------------
                                        (0073)  pI2CHW_Write_Buf:
                                        (0074) _pI2CHW_Write_Buf:
                                        (0075) ;-----------------------------------------------
                                        (0076) ; END WARNING
                                        (0077) ;-----------------------------------------------
                                        (0078)  pI2CHW_Write_BufLO:
                                        (0079) _pI2CHW_Write_BufLO:                         blk      1
                                        (0080) 
                                        (0081) IF I2CHW_READ_FLASH
                                        (0082) export    pI2CHW_Read_BufHI
                                        (0083) export   _pI2CHW_Read_BufHI
                                        (0084) 
                                        (0085)  pI2CHW_Read_BufHI:
                                        (0086) _pI2CHW_Read_BufHI:                          blk     1
                                        (0087) ELSE
                                        (0088) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0089) export    pI2CHW_Read_BufHI
                                        (0090) export   _pI2CHW_Read_BufHI
                                        (0091) 
                                        (0092)  pI2CHW_Read_BufHI:
                                        (0093) _pI2CHW_Read_BufHI:                          blk     1
                                        (0094) ENDIF
                                        (0095) ENDIF
                                        (0096) 
                                        (0097) ;-----------------------------------------------
                                        (0098) ; WARNING: The variable below is deprecated
                                        (0099) ; and has been replaced Read_BufLO
                                        (0100) ;-----------------------------------------------
                                        (0101)  pI2CHW_Read_Buf:
                                        (0102) _pI2CHW_Read_Buf:
                                        (0103) ;-----------------------------------------------
                                        (0104) ; END WARNING
                                        (0105) ;-----------------------------------------------
                                        (0106)  pI2CHW_Read_BufLO:
                                        (0107) _pI2CHW_Read_BufLO:                          blk       1
                                        (0108) 
                                        (0109) IF I2CHW_READ_FLASH
                                        (0110) export    I2CHW_Read_CountHI
                                        (0111) export   _I2CHW_Read_CountHI
                                        (0112) 
                                        (0113)  I2CHW_Read_CountHI:
                                        (0114) _I2CHW_Read_CountHI:                         blk    1
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)  I2CHW_Read_Count:
                                        (0118) _I2CHW_Read_Count:                           blk      1
                                        (0119) 
                                        (0120) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0121) ;---------------------------------------------------
                                        (0122) ; Insert your custom declarations below this banner
                                        (0123) ;---------------------------------------------------
                                        (0124) 
                                        (0125) ;------------------------
                                        (0126) ; Includes
                                        (0127) ;------------------------
                                        (0128) 
                                        (0129) 	
                                        (0130) ;------------------------
                                        (0131) ;  Constant Definitions
                                        (0132) ;------------------------
                                        (0133) 
                                        (0134) 
                                        (0135) ;------------------------
                                        (0136) ; Variable Allocation
                                        (0137) ;------------------------
                                        (0138) 
                                        (0139) 
                                        (0140) ;---------------------------------------------------
                                        (0141) ; Insert your custom declarations above this banner
                                        (0142) ;---------------------------------------------------
                                        (0143) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0144) 
                                        (0145) 
                                        (0146) 
                                        (0147) AREA UserModules (ROM, REL)
                                        (0148) 
                                        (0149) 
                                        (0150) export _I2CHW_ISR
                                        (0151) ;;****************************************************
                                        (0152) ;; I2C_MASTER  main entry point from vector 60h
                                        (0153) ;;
                                        (0154) ;;****************************************************
                                        (0155) 
                                        (0156) 
                                        (0157) _I2CHW_ISR:
0FDC: 08       PUSH  A                  (0158)     push A
0FDD: 10       PUSH  X                  (0159)     push X
0FDE: 5D D3    MOV   A,REG[0xD3]        
0FE0: 08       PUSH  A                  
                                        (0160) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0161)     REG_PRESERVE IDX_PP
                                        (0162) ENDIF
                                        (0163)     
                                        (0164)     ; Stop trap is not recommended because the stop bit cannot be cleared
                                        (0165)     ; User may choose to enable it
                                        (0166)     ; Add code to handle stop condition here
                                        (0167) 
0FE1: 49 D7 08 TST   REG[0xD7],0x8      (0168)     tst reg[I2CHW_SCR], I2C_ADDRIN
0FE4: A0 18    JZ    0x0FFD             (0169)     jz DataState
                                        (0170)     ;test for a start condition sent out, or bus error, ack from slave, or (lost arb & addr)
                                        (0171) AddrState:
0FE6: 49 D9 01 TST   REG[0xD9],0x1      (0172)     tst reg[I2CHW_MSCR], I2CM_SNDSTRT
0FE9: B0 2F    JNZ   0x1019             (0173)     jnz NoStart
0FEB: 49 D7 02 TST   REG[0xD7],0x2      (0174)     tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
0FEE: B0 1E    JNZ   0x100D             (0175)     jnz SlaveAddrNAK
                                        (0176)                                                            ;slave must have acked here
                                        (0177)                                                            
0FF0: 47 04 01 TST   [0x4],0x1          (0178)     tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read (from slave and put it in RAM,
                                        (0179)                                                            ;bit 0 = 0 then write to slave and get it from RAM or Flash
0FF3: B0 2E    JNZ   0x1022             (0180)     jnz I2C_ReadSlave1stByte                               ;bit 0 was 1
0FF5: 80 A7    JMP   0x109D             (0181)     jmp I2C_WriteSlave1stByte                              ;bit 0 was 0
0FF7: 18       POP   A                  
0FF8: 60 D3    MOV   REG[0xD3],A        
                                        (0182) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0183)     REG_RESTORE IDX_PP
                                        (0184) ENDIF
0FFA: 20       POP   X                  (0185)     pop X
0FFB: 18       POP   A                  (0186)     pop A
0FFC: 7E       RETI                     (0187)     reti
                                        (0188) 
                                        (0189) DataState:
0FFD: 2E 05 80 OR    [0x5],0x80         (0190)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
1000: 47 04 01 TST   [0x4],0x1          (0191)     tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read, bit 0 = 0 then write
1003: B0 2D    JNZ   0x1031             (0192)     jnz I2C_ReadSlave                                      ;bit 0 was 1
                                        (0193) 
                                        (0194) StillDataToWrite:
1005: 80 9D    JMP   0x10A3             (0195)     jmp I2C_WriteSlave                                     ;bit 0 was 0
1007: 18       POP   A                  
1008: 60 D3    MOV   REG[0xD3],A        
                                        (0196) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0197)     REG_RESTORE IDX_PP
                                        (0198) ENDIF
100A: 20       POP   X                  (0199)     pop X
100B: 18       POP   A                  (0200)     pop A
100C: 7E       RETI                     (0201)     reti
100D: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0202) 
                                        (0203) 
                                        (0204) SlaveAddrNAK:
                                        (0205)     ;;
                                        (0206)     ;; all there is to do here is to return, the slave didn't respond so it's not there or needs
                                        (0207)     ;; to be tried later.
                                        (0208)     ;;
                                        (0209) ;@PSoC_UserCode_BODY4@ (Do not change this line.)
                                        (0210) ;---------------------------------------------------
                                        (0211) ; Insert your custom code below this banner
                                        (0212) ; to modify the way a NAK from a slave is handled
                                        (0213) ; possibly set a user defined status
                                        (0214) ;---------------------------------------------------
                                        (0215) 
                                        (0216) ;********************************************************
                                        (0217) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0218) ;********************************************************
                                        (0219) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0220) ;
                                        (0221) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0222) ;
                                        (0223)     SetI2CHW_SCR 0     ;sets the tx/rx bit to receive, generates a stop without sending any data
                                        (0224) 
1010: 26 05 7F AND   [0x5],0x7F         (0225)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
1013: 18       POP   A                  
1014: 60 D3    MOV   REG[0xD3],A        
                                        (0226) 
                                        (0227) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0228)     REG_RESTORE IDX_PP
                                        (0229) ENDIF
1016: 20       POP   X                  (0230)     pop X
1017: 18       POP   A                  (0231)     pop A
1018: 7E       RETI                     (0232)     reti
                                        (0233) 
                                        (0234) NoStart:
                                        (0235)     ;here might test loss of arbitration and the presence of an address bit indicating that the
                                        (0236)     ;Master is being addressed as a slave.
                                        (0237)     ;;
                                        (0238)     ;; there may be a need to indicate that there was a Master transmission
                                        (0239)     ;; failure or an unsuccessful attempt.
                                        (0240)     ;;
1019: 26 05 7F AND   [0x5],0x7F         (0241)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
101C: 18       POP   A                  
101D: 60 D3    MOV   REG[0xD3],A        
                                        (0242) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0243)     REG_RESTORE IDX_PP
                                        (0244) ENDIF
101F: 20       POP   X                  (0245)     pop X
1020: 18       POP   A                  (0246)     pop A
1021: 7E       RETI                     (0247)     reti
                                        (0248) 
                                        (0249) I2C_ReadSlave1stByte:
1022: 2E 05 80 OR    [0x5],0x80         (0250)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
1025: 26 05 FB AND   [0x5],0xFB         (0251)     and [I2CHW_RsrcStatus], ~I2CHW_RD_COMPLETE
1028: 62 D7 00 MOV   REG[0xD7],0x0      
102B: 18       POP   A                  
102C: 60 D3    MOV   REG[0xD3],A        
                                        (0252) 
                                        (0253) ;read normal data in from slave immediately after the address is sent, there is no data to read
                                        (0254) ;but the bus is stalled at byte complete
                                        (0255) 
                                        (0256) ;
                                        (0257) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0258) ;
                                        (0259)     SetI2CHW_SCR 0     ;sets the tx/rx bit to receive, and clocks a byte in
                                        (0260) 
                                        (0261) 
                                        (0262) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0263)     REG_RESTORE IDX_PP
                                        (0264) ENDIF
102E: 20       POP   X                  (0265)     pop X
102F: 18       POP   A                  (0266)     pop A
1030: 7E       RETI                     (0267)     reti
                                        (0268) 
                                        (0269) I2C_ReadSlave:                                             ;this is just a normal read
                                        (0270) 
                                        (0271) 
                                        (0272) ;;code snipped from old SW I2C below
                                        (0273) ;
                                        (0274) ; MASTER READ from SLAVE
                                        (0275) ; (and writing to it's own RAM--Write_Buf and Write_Cnt)
                                        (0276) ;
                                        (0277) ;@PSoC_UserCode_BODY1_V1.2@ (Do not change this line.)
                                        (0278) ;---------------------------------------------------
                                        (0279) ; Insert your custom code below this banner
                                        (0280) ;---------------------------------------------------
                                        (0281) 
                                        (0282) ;********************************************************
                                        (0283) ; By modifying the section from here down to the next comment block
                                        (0284) ; a user could process data for a custom I2C Master Read (write to RAM) application
                                        (0285) ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
                                        (0286) ;********************************************************
1031: 47 03 04 TST   [0x3],0x4          (0287)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
1034: B0 14    JNZ   0x1049             (0288)    jnz   InStoreData
                                        (0289)    ;
                                        (0290)    ;process write data here
                                        (0291)    ;
1036: 7A 06    DEC   [0x6]              (0292)    dec   [I2CHW_Write_Count]
1038: C0 4F    JC    0x1088             (0293)    jc    CompleteRDXfer                                              ; carry set if value became -1
                                        (0294)    ;jz    InStoreData                                                                                             ;In theory overflow cant happen but stop the transaction anyway.
103A: 3C 06 00 CMP   [0x6],0x0          (0295)    cmp   [I2CHW_Write_Count], 00                                     ;set nak flag, dec count, and store data
103D: A0 03    JZ    0x1041             (0296)    jz    InNakNextByte
103F: 80 06    JMP   0x1046             (0297)    jmp   InNotBufEnd
                                        (0298) InNakNextByte:                                                       ;set the nakflag in I2CHW_bStatus
1041: 2E 03 04 OR    [0x3],0x4          (0299)    or    [I2CHW_bStatus], fI2C_NAKnextWr
1044: 80 04    JMP   0x1049             (0300)    jmp   InStoreData
                                        (0301) InNotBufEnd:
1046: 26 03 FB AND   [0x3],0xFB         (0302)    and   [I2CHW_bStatus], ~fI2C_NAKnextWr                            ;clear the nak flag in case it was set from a previous operation
                                        (0303) InStoreData:
                                        (0304)    ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
1049: 2E 05 10 OR    [0x5],0x10         (0305)    or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR                          ;set current status
                                        (0306) IF SYSTEM_LARGE_MEMORY_MODEL
104C: 51 07    MOV   A,[0x7]            (0307)    mov   A, [pI2CHW_Write_BufHI]
104E: 60 D3    MOV   REG[0xD3],A        
                                        (0308) ENDIF
                                        (0309)    RAM_SETPAGE_IDX A
1050: 58 08    MOV   X,[0x8]            (0310)    mov   X, [pI2CHW_Write_BufLO]
1052: 5D D8    MOV   A,REG[0xD8]        (0311)    mov   A, reg[I2CHW_DR]
1054: 70 3F    AND   F,0x3F             
1056: 71 80    OR    F,0x80             
                                        (0312)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
1058: 54 00    MOV   [X+0],A            (0313)    mov   [X], A
105A: 70 3F    AND   F,0x3F             
105C: 71 00    OR    F,0x0              
                                        (0314)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
105E: 76 08    INC   [0x8]              (0315)    inc   [pI2CHW_Write_BufLO]
                                        (0316) 
1060: 47 03 04 TST   [0x3],0x4          (0317)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
1063: B0 0A    JNZ   0x106E             (0318)    jnz   NAK_this_one
1065: 62 D7 10 MOV   REG[0xD7],0x10     
1068: 18       POP   A                  
1069: 60 D3    MOV   REG[0xD3],A        
                                        (0319) 
                                        (0320) ;********************************************************
                                        (0321) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0322) ;********************************************************
                                        (0323) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0324) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0325) 
                                        (0326) ;
                                        (0327) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0328) ;
                                        (0329)     SetI2CHW_SCR I2C_ACKOUT                                          ;send Ack
                                        (0330) 
                                        (0331) 
                                        (0332) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0333)     REG_RESTORE IDX_PP
                                        (0334) ENDIF
106B: 20       POP   X                  (0335)     pop X
106C: 18       POP   A                  (0336)     pop A
106D: 7E       RETI                     (0337)     reti
                                        (0338) 
                                        (0339) NAK_this_one:
                                        (0340) 
106E: 26 03 FB AND   [0x3],0xFB         (0341)     and  [I2CHW_bStatus], ~fI2C_NAKnextWr
                                        (0342) 
                                        (0343)     ; *****
                                        (0344)     ; here we may need to look at the mode that this was called under
                                        (0345)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0346)     ; ******
1071: 26 05 F8 AND   [0x5],0xF8         (0347)     and   [I2CHW_RsrcStatus], ~0x07                                  ;clear the read status bits
1074: 2E 05 01 OR    [0x5],0x1          (0348)     or    [I2CHW_RsrcStatus], I2CHW_RD_NOERR
1077: 2E 05 04 OR    [0x5],0x4          (0349)     or    [I2CHW_RsrcStatus], I2CHW_RD_COMPLETE
                                        (0350) 
107A: 26 03 03 AND   [0x3],0x3          (0351)     and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
107D: A0 0A    JZ    0x1088             (0352)     jz      CompleteRDXfer
107F: 26 05 7F AND   [0x5],0x7F         (0353)     and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
1082: 18       POP   A                  
1083: 60 D3    MOV   REG[0xD3],A        
                                        (0354) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0355)     REG_RESTORE IDX_PP
                                        (0356) ENDIF
1085: 20       POP   X                  (0357)     pop X
1086: 18       POP   A                  (0358)     pop A
1087: 7E       RETI                     (0359)     reti
1088: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0360)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0361)     ;The NAK (not I2C_SNDACK) bit in I2C_SCR below will automatically generate a stop
                                        (0362) 
                                        (0363) CompleteRDXfer:
                                        (0364) 
                                        (0365) ;
                                        (0366) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0367) ;
                                        (0368)     SetI2CHW_SCR 0                                                   ;send Ack
                                        (0369) 
                                        (0370) 
108B: 26 05 7F AND   [0x5],0x7F         (0371)     and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
108E: 18       POP   A                  
108F: 60 D3    MOV   REG[0xD3],A        
                                        (0372) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0373)     REG_RESTORE IDX_PP
                                        (0374) ENDIF
1091: 20       POP   X                  (0375)     pop X
1092: 18       POP   A                  (0376)     pop A
1093: 7E       RETI                     (0377)     reti                                                             ;return and wait for the next interrupt (on data)
1094: 62 D7 10 MOV   REG[0xD7],0x10     
1097: 18       POP   A                  
1098: 60 D3    MOV   REG[0xD3],A        
                                        (0378) 
                                        (0379) AckTheRead:
                                        (0380) 
                                        (0381) ;
                                        (0382) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0383) ;
                                        (0384)     SetI2CHW_SCR I2C_ACKOUT                                          ;send Ack
                                        (0385) 
                                        (0386) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0387)     REG_RESTORE IDX_PP
                                        (0388) ENDIF
109A: 20       POP   X                  (0389)     pop X
109B: 18       POP   A                  (0390)     pop A
109C: 7E       RETI                     (0391)     reti
                                        (0392) 
                                        (0393) 
                                        (0394) I2C_WriteSlave1stByte:
                                        (0395) ;write normal data to slave
109D: 26 05 BF AND   [0x5],0xBF         (0396)     and [I2CHW_RsrcStatus], ~I2CHW_WR_COMPLETE
10A0: 2E 05 80 OR    [0x5],0x80         (0397)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0398) 
                                        (0399) 
                                        (0400) I2C_WriteSlave:
                                        (0401) 
10A3: 49 D7 02 TST   REG[0xD7],0x2      (0402)     tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
10A6: B0 4C    JNZ   0x10F3             (0403)     jnz SlaveDataNAK
10A8: 50 04    MOV   A,0x4              (0404)     mov A, (I2C_TX)
10AA: 08       PUSH  A                  (0405)     push A
                                        (0406) 
                                        (0407) ;
                                        (0408) ;MASTER is WRITING TO SLAVE (& reading data from ram or flash buffer)
                                        (0409) ;
                                        (0410) ;;code snipped from SW I2C below
                                        (0411) 
                                        (0412) I2C_ObtainOutData:
                                        (0413) 
                                        (0414) 
                                        (0415) ;********************************************************
                                        (0416) ; here we need to get the next data to output (master-read)
                                        (0417) ; also set the status byte for use on exit
                                        (0418) ;********************************************************
                                        (0419) IF I2CHW_READ_FLASH
                                        (0420) ;@PSoC_UserCode_BODY2_V1.2@ (Do not change this line.)
                                        (0421) ;---------------------------------------------------
                                        (0422) ; Insert your custom code below this banner
                                        (0423) ; to modify the way a master might read non-volitile data
                                        (0424) ; to send.
                                        (0425) ;---------------------------------------------------
                                        (0426) 
                                        (0427)     tst  [I2CHW_RsrcStatus],I2CHW_READFLASH
                                        (0428)     jz   ReadOutData
                                        (0429) 
                                        (0430)     ;
                                        (0431)     ;get the data
                                        (0432)     ;
                                        (0433)     mov  X, [pI2CHW_Read_BufLO]
                                        (0434)     mov  A, [pI2CHW_Read_BufHI]
                                        (0435)     romx
                                        (0436)     mov  reg[I2CHW_DR],A
                                        (0437)     dec  [I2CHW_Read_Count]                                          ;calc addr lsb
                                        (0438)     jnc  NoDecHighCount
                                        (0439)     dec  [I2CHW_Read_CountHI]
                                        (0440) 
                                        (0441)     jc   MstrWRComplete
                                        (0442) 
                                        (0443) NoDecHighCount:
                                        (0444) 
                                        (0445)     inc  [pI2CHW_Read_BufLO]                                         ;set the next flash address to read
                                        (0446)     jnc  NoIncHiAddr
                                        (0447)     inc  [pI2CHW_Read_BufHI]
                                        (0448) NoIncHiAddr:
                                        (0449)    jmp   I2CNormalOutput
                                        (0450) ;
                                        (0451) ;****** THERE SHOULD BE NO WAY TO REACH THIS STATE WE'LL JUST TERMINATE THE ACTIVITY SINCE WERE THE MASTER
                                        (0452) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0453) ;
                                        (0454) ;FlashRdOverflow:
                                        (0455)     ;deal with the over flow cond by resending last data byte (dec the low addr)
                                        (0456) 
                                        (0457) ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0458) ;                                                                      ;set count back to 0
                                        (0459) ;   mov   [I2CHW_Read_CountHI], 0                                    ;functionally the same as incrementing ffff and less instructions
                                        (0460) ;   mov   [I2CHW_Read_Count], 0
                                        (0461) ;   jmp   I2CNormalRead
                                        (0462) 
                                        (0463) ;---------------------------------------------------
                                        (0464) ; Insert your custom code above this banner
                                        (0465) ;---------------------------------------------------
                                        (0466) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0467) 
                                        (0468) ENDIF
                                        (0469) ;@PSoC_UserCode_BODY3@ (Do not change this line.)
                                        (0470) ;---------------------------------------------------
                                        (0471) ; Insert your custom code below this banner
                                        (0472) ; to modify the way a master might read RAM data to send
                                        (0473) ; to an I2C device
                                        (0474) ; By replacing the section from here down to the next block
                                        (0475) ; a user could process data for a custom I2C READ application
                                        (0476) ;---------------------------------------------------
                                        (0477) ReadOutData:
                                        (0478)    ;read the current data byte
                                        (0479) IF SYSTEM_LARGE_MEMORY_MODEL
10AB: 51 09    MOV   A,[0x9]            (0480)    mov   A, [pI2CHW_Read_BufHI]
10AD: 60 D3    MOV   REG[0xD3],A        
                                        (0481) ENDIF
                                        (0482)    RAM_SETPAGE_IDX A
10AF: 58 0A    MOV   X,[0xA]            (0483)    mov   X, [pI2CHW_Read_BufLO]
10B1: 70 3F    AND   F,0x3F             
10B3: 71 80    OR    F,0x80             
                                        (0484)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
10B5: 52 00    MOV   A,[X+0]            (0485)    mov   A, [X]
10B7: 70 3F    AND   F,0x3F             
10B9: 71 00    OR    F,0x0              
                                        (0486)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
10BB: 60 D8    MOV   REG[0xD8],A        (0487)    mov   reg[I2CHW_DR], A
10BD: 7A 0B    DEC   [0xB]              (0488)    dec   [I2CHW_Read_Count]
                                        (0489) 
10BF: C0 0E    JC    0x10CE             (0490)    jc    MstrWRComplete
10C1: 76 0A    INC   [0xA]              (0491)    inc   [pI2CHW_Read_BufLO]
10C3: 80 01    JMP   0x10C5             (0492)    jmp   I2CNormalOutput
                                        (0493) ;
                                        (0494) ;ram read overflow detected here, just resend the last location in the buffer
                                        (0495) ;
                                        (0496) ;********        THERE SHOULD BE NO WAY TO OVERFLOW FOR THIS CASE
                                        (0497) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0498) ;
                                        (0499) ;RamRDOverflow:
                                        (0500) ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0501) ;   inc   [I2CHW_Read_Count]                                         ; set back to zero
                                        (0502) 
                                        (0503) ;---------------------------------------------------
                                        (0504) ; End user I2C MASTER WRITE TO SLAVE /READ buffer customization section
                                        (0505) ; Insert your custom code above this banner
                                        (0506) ;---------------------------------------------------
                                        (0507) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0508) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0509) I2CNormalOutput:
                                        (0510) 
                                        (0511)     ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                                        (0512)     ;and place there based on whether or not the previous transmission was our I2C address.
10C5: 18       POP   A                  (0513)     pop   A
10C6: 60 D7    MOV   REG[0xD7],A        
10C8: 18       POP   A                  
10C9: 60 D3    MOV   REG[0xD3],A        
                                        (0514) 
                                        (0515) ;
                                        (0516) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0517) ;
                                        (0518)     SetI2CHW_SCR A                                                   ;Sets the I2C_TX bit in the I2C_SCR reg.
                                        (0519) 
                                        (0520) 
                                        (0521) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0522)     REG_RESTORE IDX_PP
                                        (0523) ENDIF
10CB: 20       POP   X                  (0524)     pop X
10CC: 18       POP   A                  (0525)     pop A
10CD: 7E       RETI                     (0526)     reti ;return and wait for the next interrupt (on data)
                                        (0527) 
                                        (0528) MstrWRComplete:
10CE: 26 05 8F AND   [0x5],0x8F         (0529)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
10D1: 2E 05 40 OR    [0x5],0x40         (0530)     or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
10D4: 2E 05 10 OR    [0x5],0x10         (0531)     or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR
                                        (0532) 
                                        (0533)     ; *****
                                        (0534)     ; here we may need to look at the mode that this was called under
                                        (0535)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0536)     ; ******
10D7: 26 03 03 AND   [0x3],0x3          (0537)     and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
10DA: A0 0B    JZ    0x10E6             (0538)     jz      CompleteWRXfer
10DC: 18       POP   A                  (0539)     pop  A                                                           ;clear the stack for return
10DD: 26 05 7F AND   [0x5],0x7F         (0540)     and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
10E0: 18       POP   A                  
10E1: 60 D3    MOV   REG[0xD3],A        
                                        (0541) 
                                        (0542) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0543)     REG_RESTORE IDX_PP
                                        (0544) ENDIF
10E3: 20       POP   X                  (0545)     pop X
10E4: 18       POP   A                  (0546)     pop A
10E5: 7E       RETI                     (0547)     reti
                                        (0548)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0549)     ; The release of the I2C_TX bit in I2C_SCR below will automatically generate a stop
                                        (0550) 
                                        (0551) CompleteWRXfer:
                                        (0552) 
10E6: 18       POP   A                  (0553)     pop   A
10E7: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0554) 
                                        (0555) ;
                                        (0556) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0557) ;
                                        (0558)     SetI2CHW_SCR 0                                                   ;this will release the bus and generate a stop condition
                                        (0559) 
10EA: 26 05 7F AND   [0x5],0x7F         (0560)    and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
10ED: 18       POP   A                  
10EE: 60 D3    MOV   REG[0xD3],A        
                                        (0561) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0562)    REG_RESTORE IDX_PP
                                        (0563) ENDIF
10F0: 20       POP   X                  (0564)    pop X
10F1: 18       POP   A                  (0565)    pop A
10F2: 7E       RETI                     (0566)    reti
                                        (0567) 
                                        (0568) SlaveDataNAK:
                                        (0569) ;must also fix up the data buffer.  While it is marginally safe to nak a byte as a slave and 
                                        (0570) ;store it.  It is NEVER safe as a master to notice that a written byte has been nak'ed by a 
                                        (0571) ;slave and fail to resend it.
                                        (0572) ;this piece of code fixes up the count and buffer that the master is using to get data from
                                        (0573) ;to re-transmit the byte when the next master write is done.
10F3: 76 0B    INC   [0xB]              (0574)     inc  [I2CHW_Read_Count]                          ;calc addr lsb
                                        (0575) IF I2CHW_READ_FLASH
                                        (0576)     jnc  NoIncHighCount
                                        (0577)     inc  [I2CHW_Read_CountHI]
                                        (0578) 
                                        (0579) NoIncHighCount:
                                        (0580) ENDIF
10F5: 7A 0A    DEC   [0xA]              (0581)     dec  [pI2CHW_Read_BufLO]                         ;set the next flash address to read
                                        (0582) IF SYSTEM_LARGE_MEMORY_MODEL
10F7: D0 03    JNC   0x10FB             (0583)     jnc  NoDecHiAddr
10F9: 7A 09    DEC   [0x9]              (0584)     dec  [pI2CHW_Read_BufHI]
10FB: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0585) NoDecHiAddr:
                                        (0586) ELSE
                                        (0587) IF I2CHW_READ_FLASH
                                        (0588)     jnc  NoDecHiCAddr
                                        (0589)     dec  [pI2CHW_Read_BufHI]
                                        (0590) NoDecHiCAddr:
                                        (0591) ENDIF
                                        (0592) ENDIF
                                        (0593) 
                                        (0594) ;;
                                        (0595) ;; all there is to do here is to return & set status, the slave didn't want any more data
                                        (0596) ;;
                                        (0597) ; no pop needed because the nak is detected before the push happens above
                                        (0598) 
                                        (0599) ;
                                        (0600) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0601) ;
                                        (0602)     SetI2CHW_SCR 0                                                   ;this will release the bus and generate a stop condition
                                        (0603) 
10FE: 26 05 7F AND   [0x5],0x7F         (0604)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
1101: 26 05 8F AND   [0x5],0x8F         (0605)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
1104: 2E 05 40 OR    [0x5],0x40         (0606)     or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
1107: 2E 05 20 OR    [0x5],0x20         (0607)     or    [I2CHW_RsrcStatus], I2CHW_WR_OVERFLOW
110A: 18       POP   A                  
110B: 60 D3    MOV   REG[0xD3],A        
                                        (0608) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0609)     REG_RESTORE IDX_PP
                                        (0610) ENDIF
110D: 20       POP   X                  (0611)     pop X
110E: 18       POP   A                  (0612)     pop A
110F: 7E       RETI                     (0613)    reti
                                        (0614) 
                                        (0615) STOPTRAP:
                                        (0616)     ;
                                        (0617)     ;   If interrupt on STOP condition is enabled:
                                        (0618)     ;   Add user code to process stop (not recommended becuase I2C bus is NOT stalled and ISR
                                        (0619)     ;   may block reception of ongoing transactions/addresses
                                        (0620)     ;   STOP condition is never detected when a repeat start is used by the master.
                                        (0621)     ;
1110: 26 05 7F AND   [0x5],0x7F         (0622)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
1113: 18       POP   A                  
1114: 60 D3    MOV   REG[0xD3],A        
                                        (0623) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0624)     REG_RESTORE IDX_PP
                                        (0625) ENDIF
1116: 20       POP   X                  (0626)     pop X
1117: 18       POP   A                  (0627)     pop A
1118: 7E       RETI                     (0628)     reti
                                        (0629) 
                                        (0630) ; end of file I2CHWINT.asm
FILE: lib\i2chwcommon.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWCommon.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ; include instance specific register definitions
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) ;-------------------------------------------------------------------
                                        (0034) ;  Declare the functions global for both assembler and C compiler.
                                        (0035) ;
                                        (0036) ;  Note that there are two names for each API. First name is
                                        (0037) ;  assembler reference. Name with underscore is name refence for
                                        (0038) ;  C compiler.  Calling function in C source code does not require
                                        (0039) ;  the underscore.
                                        (0040) ;-------------------------------------------------------------------
                                        (0041) 
                                        (0042) export    I2CHW_InitWrite
                                        (0043) export   _I2CHW_InitWrite
                                        (0044) export    I2CHW_InitRamRead
                                        (0045) export   _I2CHW_InitRamRead
                                        (0046) export    I2CHW_InitFlashRead
                                        (0047) export   _I2CHW_InitFlashRead
                                        (0048) export    I2CHW_bReadI2CStatus
                                        (0049) export   _I2CHW_bReadI2CStatus
                                        (0050) export    I2CHW_ClrRdStatus
                                        (0051) export   _I2CHW_ClrRdStatus
                                        (0052) export    I2CHW_ClrWrStatus
                                        (0053) export   _I2CHW_ClrWrStatus
                                        (0054) 
                                        (0055) 
                                        (0056) AREA UserModules (ROM, REL)
                                        (0057) 
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: I2CHW_InitWrite
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Initializes a data buffer pointer for the slave to use to deposit data, and
                                        (0065) ;     zeroes the value of a count byte for the same buffer.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  [SP-5]   -- count of bytes to write
                                        (0070) ;              [SP-4]   -- Hi order part of address Wrbuf
                                        (0071) ;              [SP-3]   -- Low order part of the address Wrbuf 
                                        (0072) ;
                                        (0073) ;  RETURNS:  none
                                        (0074) ;
                                        (0075) ;    Write Status bits are cleared
                                        (0076) ;
                                        (0077) ;  SIDE EFFECTS:
                                        (0078) ;    The A and X registers may be modified by this or future implementations
                                        (0079) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0080) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0081) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0082) ;    functions.
                                        (0083) ;          
                                        (0084) ;    Currently only the page pointer registers listed below are modified: 
                                        (0085) ;          CUR_PP
                                        (0086) ;
                                        (0087) ;    Write Status bits are cleared
                                        (0088) ;
                                        (0089) ;  THEORY of OPERATION or PROCEDURE:
                                        (0090) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0091) ;     the accumulator.  X register is the low order pointer.
                                        (0092) ;     IF a one byte buffer is established, set a flag to NAK the first written data byte.
                                        (0093) ;
                                        (0094) 
                                        (0095)  I2CHW_InitWrite:
                                        (0096) _I2CHW_InitWrite:
                                        (0097) 
                                        (0098) WrCnt:   equ -5
                                        (0099) WrBufHi: equ -4
                                        (0100) WrBufLo: equ -3
                                        (0101) 
                                        (0102) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0103)     RAM_PROLOGUE RAM_USE_CLASS_2
1119: 10       PUSH  X                  (0104) 	push  X
111A: 4F       MOV   X,SP               (0105) 	mov   X, SP
111B: 79       DEC   X                  (0106)     dec   X                                                          ;set up the pointer for correct param access
111C: 08       PUSH  A                  (0107)     push  A
111D: 5D DE    MOV   A,REG[0xDE]        (0108)     mov   A, reg[I2CHW_INT_REG]
111F: 08       PUSH  A                  (0109)     push  A                                                           ;preserve flags prior to disabling int
1120: 41 DE FE AND   REG[0xDE],0xFE     
1123: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0110)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0111) 
                                        (0112)     RAM_SETPAGE_CUR >I2CHW_bStatus						                             ;Set the Page Pointer for LMM
1126: 26 03 FB AND   [0x3],0xFB         (0113)     and    [I2CHW_bStatus], ~fI2C_NAKnextWr                          ;reset the nak-next-written-byte flag.
                                        (0114) IF SYSTEM_LARGE_MEMORY_MODEL
1129: 52 FC    MOV   A,[X-4]            (0115)     mov   A, [X + WrBufHi]                                           ;move wrbuf addr to A
112B: 53 07    MOV   [0x7],A            (0116)     mov   [pI2CHW_Write_BufHI], A
                                        (0117) ENDIF
112D: 52 FD    MOV   A,[X-3]            (0118)     mov   A, [X + WrBufLo]                                           ;move wrbuf addr to A
112F: 53 08    MOV   [0x8],A            (0119)     mov   [pI2CHW_Write_BufLO], A
1131: 52 FB    MOV   A,[X-5]            (0120)     mov   A, [X + WrCnt]                                               ;move Write_count to A
1133: 53 06    MOV   [0x6],A            (0121)     mov   [I2CHW_Write_Count], A
1135: 39 01    CMP   A,0x1              (0122)     cmp   A, 01                                                        ;if data buffer is one byte long or less
1137: A0 08    JZ    0x1140             (0123)     jz    I2CHW_SetNak
1139: C0 06    JC    0x1140             (0124)     jc    I2CHW_SetNak
113B: 26 05 8F AND   [0x5],0x8F         (0125)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the 0x10, 0x20 (Write status bits)
113E: 80 09    JMP   0x1148             (0126)     jmp   I2Cs_1_ResetFlgs
                                        (0127) 
                                        (0128) I2CHW_SetNak:
1140: 2E 03 04 OR    [0x3],0x4          (0129)     or    [I2CHW_bStatus], fI2C_NAKnextWr                            ;set the nak-next-written-byte flag.
1143: 26 05 8F AND   [0x5],0x8F         (0130)     and   [I2CHW_RsrcStatus], ~0x70                                  ; clear the 0x10, 0x20 (Write status bits)
1146: 80 01    JMP   0x1148             (0131)     jmp   I2Cs_1_ResetFlgs
                                        (0132) 
                                        (0133) I2Cs_1_ResetFlgs:
1148: 18       POP   A                  (0134)     pop A
1149: 21 01    AND   A,0x1              (0135)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
114B: A0 04    JZ    0x1150             (0136)     jz  . + 5
114D: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0137)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
1150: 18       POP   A                  (0138)     pop A
1151: 20       POP   X                  (0139)     pop X
1152: 70 3F    AND   F,0x3F             
1154: 71 C0    OR    F,0xC0             
                                        (0140) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0141)     RAM_EPILOGUE RAM_USE_CLASS_2
1156: 7F       RET                      (0142)     ret
1157: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0143) 
                                        (0144) .ENDSECTION
                                        (0145) 
                                        (0146) .SECTION
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;  FUNCTION NAME: I2CHW_InitRamRead
                                        (0149) ;
                                        (0150) ;  DESCRIPTION:
                                        (0151) ;     Initializes a data buffer pointer for the slave to use to retrieve data from,
                                        (0152) ;     and zeroes the value of a count byte for the same buffer.
                                        (0153) ;
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:  [SP-5]  -- count of bytes to read
                                        (0157) ;              [SP-4]  -- Hi order part of addr to ReadBuf
                                        (0158) ;              [SP-3]  -- Low order part of the address to ReadBuf
                                        (0159) ;
                                        (0160) ;  RETURNS: none
                                        (0161) ;
                                        (0162) ;  SIDE EFFECTS:
                                        (0163) ;    The A and X registers may be modified by this or future implementations
                                        (0164) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0165) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0166) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0167) ;    functions.
                                        (0168) ;          
                                        (0169) ;    Currently only the page pointer registers listed below are modified: 
                                        (0170) ;          CUR_PP
                                        (0171) ;
                                        (0172) ;     Read Status bits are cleared
                                        (0173) ;
                                        (0174) ;  THEORY of OPERATION or PROCEDURE:
                                        (0175) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0176) ;     the accumulator.  X register is the low order pointer.
                                        (0177) ;
                                        (0178) 
                                        (0179)  I2CHW_InitRamRead:
                                        (0180) _I2CHW_InitRamRead:
                                        (0181) 
                                        (0182) RdCnt:     equ   -5
                                        (0183) RdBufHi:   equ   -4
                                        (0184) RdBufLo:   equ   -3
                                        (0185) 
                                        (0186)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0187) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0188) 	RAM_SETPAGE_CUR >I2CHW_Read_Count
115A: 10       PUSH  X                  (0189)     push  X
115B: 4F       MOV   X,SP               (0190) 	mov   X, SP
115C: 79       DEC   X                  (0191)     dec   X                                                          ;set up the pointer for correct param access
115D: 08       PUSH  A                  (0192)     push  A
115E: 5D DE    MOV   A,REG[0xDE]        (0193)     mov   A, reg[I2CHW_INT_REG]
1160: 08       PUSH  A                  (0194)     push  A                                                            ;preserve flags prior to disabling int
1161: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0195)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0196) 
                                        (0197) IF SYSTEM_LARGE_MEMORY_MODEL
1164: 52 FC    MOV   A,[X-4]            (0198)     mov   A, [X + RdBufHi]                                           ;move wrbuf addr to A
1166: 53 09    MOV   [0x9],A            (0199)     mov   [pI2CHW_Read_BufHI], A
                                        (0200) ENDIF
1168: 52 FD    MOV   A,[X-3]            (0201)     mov   A, [X + RdBufLo]                                             ; move rdbuf addr to A
116A: 53 0A    MOV   [0xA],A            (0202)     mov   [pI2CHW_Read_BufLO], A
116C: 52 FB    MOV   A,[X-5]            (0203)     mov   A, [X + RdCnt]                                               ; move RamRead_count to A
116E: 53 0B    MOV   [0xB],A            (0204)     mov   [I2CHW_Read_Count], A
1170: 7A 0B    DEC   [0xB]              (0205)     dec   [I2CHW_Read_Count]                                         ; since we decrement through zero...
1172: 26 05 F0 AND   [0x5],0xF0         (0206)     and   [I2CHW_RsrcStatus], ~0x0f                                  ; clear the lower 4 (read status bits)
                                        (0207) 
1175: 18       POP   A                  (0208)     pop A
1176: 21 01    AND   A,0x1              (0209)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
1178: A0 04    JZ    0x117D             (0210)     jz  . + 5
117A: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0211)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
117D: 18       POP   A                  (0212)     pop A
117E: 20       POP   X                  (0213)     pop X
117F: 70 3F    AND   F,0x3F             
1181: 71 C0    OR    F,0xC0             
                                        (0214) 
                                        (0215)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0216)     RAM_EPILOGUE RAM_USE_CLASS_2
1183: 7F       RET                      (0217)     ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) .SECTION
                                        (0222) ;-----------------------------------------------------------------------------
                                        (0223) ;  FUNCTION NAME: I2CHW_InitFlashRead
                                        (0224) ;
                                        (0225) ;  DESCRIPTION:
                                        (0226) ;     Initializes a flash data buffer pointer for the slave to use to retrieve
                                        (0227) ;     data from, and zeroes the value of a count byte for the same buffer.
                                        (0228) ;
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:  [SP-6]   -- Hi order part of flash Read count
                                        (0232) ;              [SP-5]   -- Low order part of flashRead counts
                                        (0233) ;              [SP-4]   -- Hi order part of the flash buf address
                                        (0234) ;              [SP-3]   -- Lo order part of flash buf address
                                        (0235) ;
                                        (0236) ;  RETURNS:
                                        (0237) ;
                                        (0238) ;  SIDE EFFECTS:
                                        (0239) ;    The A and X registers may be modified by this or future implementations
                                        (0240) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0241) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0242) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0243) ;    functions.
                                        (0244) ;          
                                        (0245) ;    Currently only the page pointer registers listed below are modified: 
                                        (0246) ;          CUR_PP
                                        (0247) ;
                                        (0248) ;    Read Status bits are cleared
                                        (0249) ;
                                        (0250) ;  THEORY of OPERATION or PROCEDURE:
                                        (0251) ;     The C compiler will place the upper order address of the buffer in Acc.
                                        (0252) ;     X register is the low order pointer.  A user module parameter is used to conserve code
                                        (0253) ;     if flash buffers are un-needed.  The API call is left defined and capable of returning in
                                        (0254) ;     either case
                                        (0255) ;
                                        (0256)  I2CHW_InitFlashRead:
                                        (0257) _I2CHW_InitFlashRead:
                                        (0258) 
                                        (0259) FlRdCntHI:     equ   -6
                                        (0260) FlRdCntLO:     equ   -5
                                        (0261) FlBufAdrHI:    equ   -4
                                        (0262) FlBufAdrLO:    equ   -3
                                        (0263) 
                                        (0264) IF I2CHW_READ_FLASH
                                        (0265)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0266)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0267)     RAM_SETPAGE_CUR >pI2CHW_Read_BufLO   
                                        (0268) 	push  X
                                        (0269) 	mov   X, SP
                                        (0270)     dec   X                                                            ;set up the pointer for correct param access
                                        (0271)     push  A
                                        (0272)     mov   A, reg[I2CHW_INT_REG]
                                        (0273)     push  A                                                            ;preserve flags prior to disabling int
                                        (0274)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0275) 
                                        (0276)     mov   A, [X + FlBufAdrLO]                                          ; move flrdbuf LOaddr to A
                                        (0277)     mov   [pI2CHW_Read_BufLO], A
                                        (0278)     mov   A, [X + FlBufAdrHI]                                          ; move flrdbuf HIaddr to A
                                        (0279)     mov   [pI2CHW_Read_BufHI], A
                                        (0280)     mov   A, [X + FlRdCntLO]                                           ; move flrdbuf LOcount to A
                                        (0281)     mov   [I2CHW_Read_Count], A
                                        (0282)     mov   A, [X + FlRdCntHI]                                           ; move flrdbuf HIcount to A
                                        (0283)     mov   [I2CHW_Read_CountHI], A
                                        (0284) 
                                        (0285)     dec   [I2CHW_Read_Count]                                         ; since this will count throu zero
                                        (0286)     jnc    . + 4                                                       ; only Read_CountHI if Read_Count rolled to 0xff
                                        (0287)     dec   [I2CHW_Read_CountHI]
                                        (0288) 
                                        (0289)     and   [I2CHW_RsrcStatus], ~0x07                                  ; clear the lower 3 (read status bits)
                                        (0290)     or    [I2CHW_RsrcStatus],I2CHW_READFLASH                         ; set the flash status bit
                                        (0291) 
                                        (0292)     pop A
                                        (0293)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
                                        (0294)     jz  . + 5
                                        (0295)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0296)     pop A
                                        (0297) 	pop X
                                        (0298)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0299) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0300) ENDIF
1184: 7F       RET                      (0301)     ret
1185: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0302) 
                                        (0303) .ENDSECTION
                                        (0304) 
                                        (0305) .SECTION
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: I2CHW_bReadI2CStatus
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;     Returns the value in the the RsrcStatus variable.
                                        (0311) ;
                                        (0312) ;-----------------------------------------------------------------------------
                                        (0313) ;
                                        (0314) ;  ARGUMENTS:
                                        (0315) ;
                                        (0316) ;  RETURNS:
                                        (0317) ;     BYTE  bI2CStatus -  status data.  Use the following defined bits
                                        (0318) ;     returned in A.
                                        (0319) ;         I2CHW_RD_NOERR:                   equ 1
                                        (0320) ;         I2CHW_RD_OVERFLOW:                equ 2
                                        (0321) ;         I2CHW_RD_INCOMPLETE:              equ 4
                                        (0322) ;         I2CHW_READFLASH:                  equ 8
                                        (0323) ;         I2CHW_WR_NOERR:                   equ 10h
                                        (0324) ;         I2CHW_WR_OVERFLOW:                equ 20h
                                        (0325) ;         I2CHW_WR_COMPLETE:                equ 40h
                                        (0326) ;         I2CHW_ISR_ACTIVE:                 equ 80h
                                        (0327) ;
                                        (0328) ;  SIDE EFFECTS:
                                        (0329) ;    The A and X registers may be modified by this or future implementations
                                        (0330) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0331) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0332) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0333) ;    functions.
                                        (0334) ;          
                                        (0335) ;    Currently only the page pointer registers listed below are modified: 
                                        (0336) ;          CUR_PP
                                        (0337) ;          
                                        (0338)  I2CHW_bReadI2CStatus:
                                        (0339) _I2CHW_bReadI2CStatus:
                                        (0340)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0341) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
1188: 51 05    MOV   A,[0x5]            (0342)     mov   A, [I2CHW_RsrcStatus]                                      ;return the status in A
                                        (0343)     RAM_EPILOGUE RAM_USE_CLASS_4
118A: 7F       RET                      (0344)     ret
118B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0345) 
                                        (0346) .ENDSECTION
                                        (0347) 
                                        (0348) .SECTION
                                        (0349) ;-----------------------------------------------------------------------------
                                        (0350) ;  FUNCTION NAME: I2CHW_ClrRdStatus
                                        (0351) ;
                                        (0352) ;  DESCRIPTION:
                                        (0353) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0354) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0355) ;
                                        (0356) ;-----------------------------------------------------------------------------
                                        (0357) ;
                                        (0358) ;  ARGUMENTS: none
                                        (0359) ;
                                        (0360) ;  RETURNS: none
                                        (0361) ;
                                        (0362) ;  SIDE EFFECTS:
                                        (0363) ;    The A and X registers may be modified by this or future implementations
                                        (0364) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0365) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0366) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0367) ;    functions.
                                        (0368) ;          
                                        (0369) ;    Currently only the page pointer registers listed below are modified: 
                                        (0370) ;          CUR_PP
                                        (0371) ;          
                                        (0372)  I2CHW_ClrRdStatus:
                                        (0373) _I2CHW_ClrRdStatus:
                                        (0374)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0375) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
118E: 26 05 F8 AND   [0x5],0xF8         (0376)     and   [I2CHW_RsrcStatus], ~0x07                                  ; clear the lower 3 (read status bits)
                                        (0377)     RAM_EPILOGUE RAM_USE_CLASS_4
1191: 7F       RET                      (0378)     ret
1192: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0379) 
                                        (0380) .ENDSECTION
                                        (0381) 
                                        (0382) .SECTION
                                        (0383) ;-----------------------------------------------------------------------------
                                        (0384) ;  FUNCTION NAME: I2CHW_ClrWrStatus
                                        (0385) ;
                                        (0386) ;  DESCRIPTION:
                                        (0387) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0388) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0389) ;
                                        (0390) ;-----------------------------------------------------------------------------
                                        (0391) ;
                                        (0392) ;  ARGUMENTS: none
                                        (0393) ;
                                        (0394) ;  RETURNS: none
                                        (0395) ;
                                        (0396) ;  SIDE EFFECTS:
                                        (0397) ;    The A and X registers may be modified by this or future implementations
                                        (0398) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0399) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0400) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0401) ;    functions.
                                        (0402) ;          
                                        (0403) ;    Currently only the page pointer registers listed below are modified: 
                                        (0404) ;          CUR_PP
                                        (0405) ;          
                                        (0406)  I2CHW_ClrWrStatus:
                                        (0407) _I2CHW_ClrWrStatus:
                                        (0408)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0409) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
1195: 26 05 8F AND   [0x5],0x8F         (0410)     and   [I2CHW_RsrcStatus], ~0x70                                  ; clear bits 10,20 (write status bits)
                                        (0411)     RAM_EPILOGUE RAM_USE_CLASS_4
1198: 7F       RET                      (0412)     ret
                                        (0413) 
                                        (0414) .ENDSECTION
                                        (0415) ; End of File I2CHW.asm
FILE: C:\Users\addis\Desktop\ECE381\HEATIN~1\HEATIN~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "string.h"		// used for any of the string fcns supported by API
(0008) #include "stdio.h"		// this is used for fcns....
(0009) #include "ctype.h"		// this is used for fcns.. csspanf() and cstork()
(0010) 
(0011) // A compiler directive that tells the C compiler to make PSoC_GPIO_ISR_C a
(0012) // function that handles interrupts. This means it replaces ret at the end of // the function with reti. Refer to PSoC Technical Reference Manual for more
(0013) // information.
(0014) #pragma interrupt_handler PSoC_GPIO_ISR_C
(0015) #pragma interrupt_handler PSoC_TempCounter_ISR_C
(0016) #pragma interrupt_handler PSoC_MotorDriver_ISR_C
(0017) 
(0018) static char rubout[4] = { 0x08, 0x20, 0x08, 0x00 }; // Rubout Sequence consists of Backspace Space Backspace. This is the null-terminated string
(0019) static char stepperSequence[4] = { 0x0A, 0x06, 0x05, 0x09 }; // CW Sequence that stepper needs to run to if running. CCW is backwards
(0020) static char slaveAddress = 0x90;		// 100100000 R/W shifted to front
(0021) 
(0022) char buf[80];	// String that stores the string the user enters in serial console
(0023) char lcdUpdate = TRUE; // This is a boolean that gets set when the LCD needs to be updated
(0024) char checkTemp = TRUE; // This is a boolean that gets set when its time to get a new temperature reading
(0025) 
(0026) char curTemp = 0; // Current temperature
(0027) char setTemp = 25; // Desired temperature
(0028) char tolerance = 10; // Tolerance where the fan will turn on/off within the temperature range 
(0029) char thermostatMode = 0; // 0 = Off, 1 = Heating, 2 = Cooling
(0030) char fanMode = 1; // 0 = Manual, 1 = Automatic
(0031) char fanSpeed = 0; // 0 = Low, 1 = Medium, 2 = High
(0032) char motorStep = 0; // 0 - 3, step at which the motor is at
(0033) 
(0034) // This function gets a line of text. It writes data into buffer with a maximum size of bufferLen. The function returns number of bytes written
(0035) // when enter is pressed
(0036) void GetLine(char *buffer, char bufferLen)
(0037) {
__UserModules_end|_GetLine|__text_start|_GetLine:
  strPos               --> X+1
  c                    --> X+0
  bufferLen            --> X-6
  buffer               --> X-5
    1199: 10       PUSH  X
    119A: 4F       MOV   X,SP
    119B: 38 02    ADD   SP,0x2
(0038) 	char c;
(0039) 	char strPos = 0; // Current position in the string
    119D: 56 01 00 MOV   [X+1],0x0
(0040) 	
(0041) 	UART_PutChar('>'); // Print line pointer
    11A0: 10       PUSH  X
    11A1: 50 3E    MOV   A,0x3E
    11A3: 7C 0A 88 LCALL _UART_PutChar
    11A6: 20       POP   X
    11A7: 80 8F    JMP   0x1237
(0042) 	
(0043) 	while (1)
(0044) 	{
(0045) 		c = UART_cReadChar(); // Use UART module to read the character user enters
    11A9: 10       PUSH  X
    11AA: 7C 0A 98 LCALL _UART_cReadChar
    11AD: 20       POP   X
    11AE: 62 D0 00 MOV   REG[0xD0],0x0
    11B1: 54 00    MOV   [X+0],A
(0046) 		
(0047) 		if (c == 0x08 || c == 0x7F) // Delete or backspace pressed
    11B3: 3D 00 08 CMP   [X+0],0x8
    11B6: A0 06    JZ    0x11BD
    11B8: 3D 00 7F CMP   [X+0],0x7F
    11BB: B0 17    JNZ   0x11D3
(0048) 		{
(0049) 			if (strPos > 0) // Only delete if there are characters to delete
    11BD: 50 00    MOV   A,0x0
    11BF: 3B 01    CMP   A,[X+1]
    11C1: D0 75    JNC   0x1237
(0050) 			{
(0051) 				strPos--; // Set the position back one
    11C3: 7B 01    DEC   [X+1]
(0052) 				UART_PutString(rubout); // Sends the rubout sequence to the serial.
    11C5: 10       PUSH  X
    11C6: 50 00    MOV   A,0x0
    11C8: 08       PUSH  A
    11C9: 50 88    MOV   A,0x88
    11CB: 5C       MOV   X,A
    11CC: 18       POP   A
    11CD: 7C 0A C5 LCALL _UART_PutString
    11D0: 20       POP   X
(0053) 			}
(0054) 		}
    11D1: 80 65    JMP   0x1237
(0055) 		else if (c == 0x0D) // Newline enter is pressed
    11D3: 3D 00 0D CMP   [X+0],0xD
    11D6: B0 22    JNZ   0x11F9
(0056) 		{
(0057) 			buffer[strPos] = 0x00; // put the null character at the current strPos
    11D8: 62 D0 00 MOV   REG[0xD0],0x0
    11DB: 52 01    MOV   A,[X+1]
    11DD: 53 82    MOV   [__r1],A
    11DF: 55 83 00 MOV   [__r0],0x0
    11E2: 52 FC    MOV   A,[X-4]
    11E4: 04 82    ADD   [__r1],A
    11E6: 52 FB    MOV   A,[X-5]
    11E8: 0C 83    ADC   [__r0],A
    11EA: 51 83    MOV   A,[__r0]
    11EC: 60 D5    MOV   REG[0xD5],A
    11EE: 50 00    MOV   A,0x0
    11F0: 3F 82    MVI   [__r1],A
(0058) 			UART_PutCRLF(); // Go to another line
    11F2: 10       PUSH  X
    11F3: 7C 0B 3D LCALL _UART_PutCRLF
    11F6: 20       POP   X
(0059) 			break;
    11F7: 80 41    JMP   0x1239
(0060) 		}
(0061) 		else if (c >= 0x20 && c < 0x7F) // only valid characters to the string. These are any alphabet, numeric, or symbols
    11F9: 3D 00 20 CMP   [X+0],0x20
    11FC: C0 3A    JC    0x1237
    11FE: 3D 00 7F CMP   [X+0],0x7F
    1201: D0 35    JNC   0x1237
(0062) 		{
(0063) 			if (strPos < bufferLen) // If there is space in the buffer
    1203: 52 01    MOV   A,[X+1]
    1205: 3B FA    CMP   A,[X-6]
    1207: D0 28    JNC   0x1230
(0064) 			{
(0065) 				buffer[strPos++] = c; // Set the current character in buffer to c and then increment strPos
    1209: 62 D0 00 MOV   REG[0xD0],0x0
    120C: 52 01    MOV   A,[X+1]
    120E: 53 82    MOV   [__r1],A
    1210: 55 83 00 MOV   [__r0],0x0
    1213: 01 01    ADD   A,0x1
    1215: 54 01    MOV   [X+1],A
    1217: 52 FC    MOV   A,[X-4]
    1219: 04 82    ADD   [__r1],A
    121B: 52 FB    MOV   A,[X-5]
    121D: 0C 83    ADC   [__r0],A
    121F: 51 83    MOV   A,[__r0]
    1221: 60 D5    MOV   REG[0xD5],A
    1223: 52 00    MOV   A,[X+0]
    1225: 3F 82    MVI   [__r1],A
(0066) 				UART_PutChar(c); // Send the character to the computer
    1227: 10       PUSH  X
    1228: 52 00    MOV   A,[X+0]
    122A: 7C 0A 88 LCALL _UART_PutChar
    122D: 20       POP   X
(0067) 			}
    122E: 80 08    JMP   0x1237
(0068) 			else
(0069) 				UART_PutChar(0x07); // Send BEL key because there is no more space left to add to the string
    1230: 10       PUSH  X
    1231: 50 07    MOV   A,0x7
    1233: 7C 0A 88 LCALL _UART_PutChar
    1236: 20       POP   X
(0070) 		}
(0071) 	}
    1237: 8F 71    JMP   0x11A9
    1239: 38 FE    ADD   SP,0xFE
    123B: 20       POP   X
    123C: 7F       RET   
(0072) 	
(0073) 	return;
(0074) }
(0075) 
(0076) 
(0077) // Writes a command to a device using I2C. The command character is sent first followed by the len bytes. Limited to 31 bytes. Use the other
(0078) // I2C function to send more bytes
(0079) void WriteI2C(char slaveAddress, char command, int len, ...)
(0080) {
_WriteI2C:
  data                 --> X+4
  vl                   --> X+2
  i                    --> X+0
  len                  --> X-7
  command              --> X-5
  slaveAddress         --> X-4
    123D: 10       PUSH  X
    123E: 4F       MOV   X,SP
    123F: 38 24    ADD   SP,0x24
(0081) 	va_list vl;
(0082) 	int i;
(0083) 	char data[32];
(0084) 	
(0085) 	buf[0] = command;
    1241: 52 FB    MOV   A,[X-5]
    1243: 62 D0 00 MOV   REG[0xD0],0x0
    1246: 53 0C    MOV   [buf],A
(0086) 	va_start(vl, len);
    1248: 62 D0 00 MOV   REG[0xD0],0x0
    124B: 5A 82    MOV   [__r1],X
    124D: 16 82 07 SUB   [__r1],0x7
    1250: 51 82    MOV   A,[__r1]
    1252: 54 03    MOV   [X+3],A
    1254: 56 02 07 MOV   [X+2],0x7
(0087) 	for (i = 0; i < len; i++)
    1257: 56 01 00 MOV   [X+1],0x0
    125A: 56 00 00 MOV   [X+0],0x0
    125D: 80 33    JMP   0x1291
(0088) 		data[i+1] = va_arg(vl, char);
    125F: 07 03 FF ADD   [X+3],0xFF
    1262: 0F 02 FF ADC   [X+2],0xFF
    1265: 62 D0 00 MOV   REG[0xD0],0x0
    1268: 52 03    MOV   A,[X+3]
    126A: 53 82    MOV   [__r1],A
    126C: 52 02    MOV   A,[X+2]
    126E: 60 D4    MOV   REG[0xD4],A
    1270: 3E 82    MVI   A,[__r1]
    1272: 53 83    MOV   [__r0],A
    1274: 55 81 07 MOV   [__r2],0x7
    1277: 5A 80    MOV   [__r3],X
    1279: 06 80 05 ADD   [__r3],0x5
    127C: 52 01    MOV   A,[X+1]
    127E: 02 80    ADD   A,[__r3]
    1280: 53 80    MOV   [__r3],A
    1282: 52 00    MOV   A,[X+0]
    1284: 0A 81    ADC   A,[__r2]
    1286: 60 D5    MOV   REG[0xD5],A
    1288: 51 83    MOV   A,[__r0]
    128A: 3F 80    MVI   [__r3],A
    128C: 77 01    INC   [X+1]
    128E: 0F 00 00 ADC   [X+0],0x0
    1291: 52 01    MOV   A,[X+1]
    1293: 13 FA    SUB   A,[X-6]
    1295: 52 F9    MOV   A,[X-7]
    1297: 31 80    XOR   A,0x80
    1299: 62 D0 00 MOV   REG[0xD0],0x0
    129C: 53 77    MOV   [__rX],A
    129E: 52 00    MOV   A,[X+0]
    12A0: 31 80    XOR   A,0x80
    12A2: 1A 77    SBB   A,[__rX]
    12A4: CF BA    JC    0x125F
(0089) 	va_end(vl);
(0090) 	
(0091) 	I2CHW_bWriteBytes(slaveAddress, data, len+1, I2CHW_CompleteXfer); // Write len bytes from data 
    12A6: 10       PUSH  X
    12A7: 50 00    MOV   A,0x0
    12A9: 08       PUSH  A
    12AA: 62 D0 00 MOV   REG[0xD0],0x0
    12AD: 52 FA    MOV   A,[X-6]
    12AF: 01 01    ADD   A,0x1
    12B1: 08       PUSH  A
    12B2: 5A 82    MOV   [__r1],X
    12B4: 06 82 04 ADD   [__r1],0x4
    12B7: 50 07    MOV   A,0x7
    12B9: 08       PUSH  A
    12BA: 51 82    MOV   A,[__r1]
    12BC: 08       PUSH  A
    12BD: 52 FC    MOV   A,[X-4]
    12BF: 08       PUSH  A
    12C0: 7C 0E 27 LCALL _I2CHW_bWriteBytes
    12C3: 38 FB    ADD   SP,0xFB
    12C5: 20       POP   X
(0092) 	while (!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE)); // Wait while it is writing
    12C6: 10       PUSH  X
    12C7: 7C 11 85 LCALL _I2CHW_bReadI2CStatus
    12CA: 20       POP   X
    12CB: 62 D0 00 MOV   REG[0xD0],0x0
    12CE: 53 83    MOV   [__r0],A
    12D0: 47 83 40 TST   [__r0],0x40
    12D3: AF F2    JZ    0x12C6
(0093) 	I2CHW_ClrWrStatus(); // Clear the write bit
    12D5: 10       PUSH  X
    12D6: 7C 11 92 LCALL _I2CHW_ClrWrStatus
    12D9: 20       POP   X
    12DA: 38 DC    ADD   SP,0xDC
    12DC: 20       POP   X
    12DD: 7F       RET   
(0094) }
(0095) 
(0096) void ReadI2C(char slaveAddress, char command, int len, char *data)
(0097) {
_ReadI2C:
  data                 --> X-9
  len                  --> X-7
  command              --> X-5
  slaveAddress         --> X-4
    12DE: 10       PUSH  X
    12DF: 4F       MOV   X,SP
(0098) 	I2CHW_bWriteBytes(slaveAddress, &command, 1, I2CHW_NoStop); // Write one byte to the RAM, the slaveAddress so it knows who were talking to
    12E0: 10       PUSH  X
    12E1: 50 02    MOV   A,0x2
    12E3: 08       PUSH  A
    12E4: 50 01    MOV   A,0x1
    12E6: 08       PUSH  A
    12E7: 62 D0 00 MOV   REG[0xD0],0x0
    12EA: 5A 82    MOV   [__r1],X
    12EC: 16 82 05 SUB   [__r1],0x5
    12EF: 50 07    MOV   A,0x7
    12F1: 08       PUSH  A
    12F2: 51 82    MOV   A,[__r1]
    12F4: 08       PUSH  A
    12F5: 52 FC    MOV   A,[X-4]
    12F7: 08       PUSH  A
    12F8: 7C 0E 27 LCALL _I2CHW_bWriteBytes
    12FB: 38 FB    ADD   SP,0xFB
    12FD: 20       POP   X
(0099) 	while (!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE)); // Wait while it is writing
    12FE: 10       PUSH  X
    12FF: 7C 11 85 LCALL _I2CHW_bReadI2CStatus
    1302: 20       POP   X
    1303: 62 D0 00 MOV   REG[0xD0],0x0
    1306: 53 83    MOV   [__r0],A
    1308: 47 83 40 TST   [__r0],0x40
    130B: AF F2    JZ    0x12FE
(0100) 	I2CHW_ClrWrStatus(); // Clear the write bit
    130D: 10       PUSH  X
    130E: 7C 11 92 LCALL _I2CHW_ClrWrStatus
    1311: 20       POP   X
(0101) 		
(0102) 	I2CHW_fReadBytes(slaveAddress, data, len, I2CHW_CompleteXfer); // Read numBytes from the RAM, put it in data
    1312: 10       PUSH  X
    1313: 50 00    MOV   A,0x0
    1315: 08       PUSH  A
    1316: 62 D0 00 MOV   REG[0xD0],0x0
    1319: 52 FA    MOV   A,[X-6]
    131B: 08       PUSH  A
    131C: 52 F7    MOV   A,[X-9]
    131E: 08       PUSH  A
    131F: 52 F8    MOV   A,[X-8]
    1321: 08       PUSH  A
    1322: 52 FC    MOV   A,[X-4]
    1324: 08       PUSH  A
    1325: 7C 0D E3 LCALL _I2CHW_fReadBytes
    1328: 38 FB    ADD   SP,0xFB
    132A: 20       POP   X
(0103) 	while(!(I2CHW_bReadI2CStatus() & I2CHW_RD_COMPLETE)); // Wait while it is reading
    132B: 10       PUSH  X
    132C: 7C 11 85 LCALL _I2CHW_bReadI2CStatus
    132F: 20       POP   X
    1330: 62 D0 00 MOV   REG[0xD0],0x0
    1333: 53 83    MOV   [__r0],A
    1335: 47 83 04 TST   [__r0],0x4
    1338: AF F2    JZ    0x132B
(0104) 	I2CHW_ClrRdStatus(); // Clear the read bit
    133A: 10       PUSH  X
    133B: 7C 11 8B LCALL _I2CHW_ClrRdStatus
    133E: 20       POP   X
    133F: 20       POP   X
    1340: 7F       RET   
(0105) }
(0106) 
(0107) // Takes input argument str and converts each character into a lowercase character. Returns that str. Note: This function alters str
(0108) char *Lowercase(char *str)
(0109) {
_Lowercase:
  i                    --> X+0
  str                  --> X-5
    1341: 10       PUSH  X
    1342: 4F       MOV   X,SP
    1343: 38 04    ADD   SP,0x4
(0110) 	int i;
(0111) 	for (i = 0; str[i] != '\0'; ++i) // Loop through each character in str and call tolower on it
    1345: 56 01 00 MOV   [X+1],0x0
    1348: 56 00 00 MOV   [X+0],0x0
    134B: 80 43    JMP   0x138F
(0112) 		str[i] = tolower(str[i]); // Set the character to be the lowercase of the character
    134D: 62 D0 00 MOV   REG[0xD0],0x0
    1350: 52 01    MOV   A,[X+1]
    1352: 03 FC    ADD   A,[X-4]
    1354: 53 82    MOV   [__r1],A
    1356: 52 00    MOV   A,[X+0]
    1358: 0B FB    ADC   A,[X-5]
    135A: 53 83    MOV   [__r0],A
    135C: 51 82    MOV   A,[__r1]
    135E: 54 03    MOV   [X+3],A
    1360: 51 83    MOV   A,[__r0]
    1362: 54 02    MOV   [X+2],A
    1364: 60 D4    MOV   REG[0xD4],A
    1366: 3E 82    MVI   A,[__r1]
    1368: 7A 82    DEC   [__r1]
    136A: 53 80    MOV   [__r3],A
    136C: 50 00    MOV   A,0x0
    136E: 08       PUSH  A
    136F: 51 80    MOV   A,[__r3]
    1371: 08       PUSH  A
    1372: 7C 2A E7 LCALL _tolower
    1375: 38 FE    ADD   SP,0xFE
    1377: 62 D0 00 MOV   REG[0xD0],0x0
    137A: 51 82    MOV   A,[__r1]
    137C: 53 83    MOV   [__r0],A
    137E: 52 03    MOV   A,[X+3]
    1380: 53 80    MOV   [__r3],A
    1382: 52 02    MOV   A,[X+2]
    1384: 60 D5    MOV   REG[0xD5],A
    1386: 51 83    MOV   A,[__r0]
    1388: 3F 80    MVI   [__r3],A
    138A: 77 01    INC   [X+1]
    138C: 0F 00 00 ADC   [X+0],0x0
    138F: 62 D0 00 MOV   REG[0xD0],0x0
    1392: 52 01    MOV   A,[X+1]
    1394: 03 FC    ADD   A,[X-4]
    1396: 53 82    MOV   [__r1],A
    1398: 52 00    MOV   A,[X+0]
    139A: 0B FB    ADC   A,[X-5]
    139C: 60 D4    MOV   REG[0xD4],A
    139E: 3E 82    MVI   A,[__r1]
    13A0: 39 00    CMP   A,0x0
    13A2: BF AA    JNZ   0x134D
(0113) 	
(0114) 	return str; // Return the string
    13A4: 52 FC    MOV   A,[X-4]
    13A6: 53 82    MOV   [__r1],A
    13A8: 52 FB    MOV   A,[X-5]
    13AA: 53 83    MOV   [__r0],A
    13AC: 38 FC    ADD   SP,0xFC
    13AE: 20       POP   X
    13AF: 7F       RET   
(0115) }
(0116) 
(0117) char IsNumber(char *str)
(0118) {
_IsNumber:
  i                    --> X+0
  str                  --> X-5
    13B0: 10       PUSH  X
    13B1: 4F       MOV   X,SP
    13B2: 38 02    ADD   SP,0x2
(0119) 	int i;
(0120) 	for (i = 0; str[i] != '\0'; ++i)
    13B4: 56 01 00 MOV   [X+1],0x0
    13B7: 56 00 00 MOV   [X+0],0x0
    13BA: 80 38    JMP   0x13F3
(0121) 		if (!isdigit(str[i]))
    13BC: 62 D0 00 MOV   REG[0xD0],0x0
    13BF: 52 01    MOV   A,[X+1]
    13C1: 03 FC    ADD   A,[X-4]
    13C3: 53 82    MOV   [__r1],A
    13C5: 52 00    MOV   A,[X+0]
    13C7: 0B FB    ADC   A,[X-5]
    13C9: 60 D4    MOV   REG[0xD4],A
    13CB: 3E 82    MVI   A,[__r1]
    13CD: 53 82    MOV   [__r1],A
    13CF: 50 00    MOV   A,0x0
    13D1: 08       PUSH  A
    13D2: 51 82    MOV   A,[__r1]
    13D4: 08       PUSH  A
    13D5: 7C 2A 04 LCALL _isdigit
    13D8: 38 FE    ADD   SP,0xFE
    13DA: 62 D0 00 MOV   REG[0xD0],0x0
    13DD: 3C 83 00 CMP   [__r0],0x0
    13E0: B0 0D    JNZ   0x13EE
    13E2: 3C 82 00 CMP   [__r1],0x0
    13E5: B0 08    JNZ   0x13EE
(0122) 			return FALSE;
    13E7: 62 D0 00 MOV   REG[0xD0],0x0
    13EA: 50 00    MOV   A,0x0
    13EC: 80 1D    JMP   0x140A
    13EE: 77 01    INC   [X+1]
    13F0: 0F 00 00 ADC   [X+0],0x0
    13F3: 62 D0 00 MOV   REG[0xD0],0x0
    13F6: 52 01    MOV   A,[X+1]
    13F8: 03 FC    ADD   A,[X-4]
    13FA: 53 82    MOV   [__r1],A
    13FC: 52 00    MOV   A,[X+0]
    13FE: 0B FB    ADC   A,[X-5]
    1400: 60 D4    MOV   REG[0xD4],A
    1402: 3E 82    MVI   A,[__r1]
    1404: 39 00    CMP   A,0x0
    1406: BF B5    JNZ   0x13BC
(0123) 		
(0124) 	return TRUE;
    1408: 50 01    MOV   A,0x1
    140A: 38 FE    ADD   SP,0xFE
    140C: 20       POP   X
    140D: 7F       RET   
(0125) }
(0126) 
(0127) void CheckFan(void)
(0128) {
(0129) 	if (thermostatMode == 0 && fanMode == 1)
_CheckFan:
    140E: 62 D0 00 MOV   REG[0xD0],0x0
    1411: 3C 96 00 CMP   [thermostatMode],0x0
    1414: B0 10    JNZ   0x1425
    1416: 62 D0 00 MOV   REG[0xD0],0x0
    1419: 3C A0 01 CMP   [fanMode],0x1
    141C: B0 08    JNZ   0x1425
(0130) 		MotorDriver_Stop();
    141E: 10       PUSH  X
    141F: 7C 0B B2 LCALL _MotorDriver_Stop
    1422: 20       POP   X
    1423: 80 28    JMP   0x144C
(0131) 	else if (fanMode == 0)
    1425: 62 D0 00 MOV   REG[0xD0],0x0
    1428: 3C A0 00 CMP   [fanMode],0x0
    142B: B0 08    JNZ   0x1434
(0132) 		MotorDriver_Start();
    142D: 10       PUSH  X
    142E: 7C 0B AE LCALL _MotorDriver_Start
    1431: 20       POP   X
    1432: 80 19    JMP   0x144C
(0133) 	else if (Tout_Data_ADDR & Tout_MASK)
    1434: 5D 04    MOV   A,REG[0x4]
    1436: 62 D0 00 MOV   REG[0xD0],0x0
    1439: 53 83    MOV   [__r0],A
    143B: 47 83 10 TST   [__r0],0x10
    143E: A0 08    JZ    0x1447
(0134) 		MotorDriver_Start();
    1440: 10       PUSH  X
    1441: 7C 0B AE LCALL _MotorDriver_Start
    1444: 20       POP   X
    1445: 80 06    JMP   0x144C
(0135) 	else
(0136) 		MotorDriver_Stop();
    1447: 10       PUSH  X
    1448: 7C 0B B2 LCALL _MotorDriver_Stop
    144B: 20       POP   X
    144C: 7F       RET   
(0137) }
(0138) 
(0139) void main(void)
(0140) {	
_main:
  sThermMode           --> X+23
  sFanMode             --> X+21
  buf                  --> X+4
  tempByte             --> X+4
  speed                --> X+5
  mode                 --> X+4
  mode                 --> X+4
  tol                  --> X+4
  temp                 --> X+4
  params               --> X+2
  cmd                  --> X+0
    144D: 10       PUSH  X
    144E: 4F       MOV   X,SP
    144F: 38 1D    ADD   SP,0x1D
(0141) 	M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
    1451: 71 01    OR    F,0x1
(0142) 	M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO); // Enable GPIO interrupt for Tout
    1453: 43 E0 20 OR    REG[0xE0],0x20
(0143) 	M8C_EnableIntMask(INT_MSK1, INT_MSK1_DBB01); // Enable DBB01 Interrupt for MotorDriver
    1456: 43 E1 02 OR    REG[0xE1],0x2
(0144) 	M8C_EnableIntMask(INT_MSK1, INT_MSK1_DBB11); // Enable DBB11 Interrupt for TempCounter
    1459: 43 E1 20 OR    REG[0xE1],0x20
(0145) 	
(0146) 	// Start the UART(with no parity), LCD, TempCounter and MotorDriver
(0147) 	UART_Start(UART_PARITY_NONE);
    145C: 10       PUSH  X
    145D: 50 00    MOV   A,0x0
    145F: 7C 0A 16 LCALL _UART_Start
(0148) 	LCD_Start();
    1462: 7C 0D 18 LCALL _LCD_Init|LCD_Start|_LCD_Start
(0149) 	TempCounter_EnableInt();
    1465: 7C 0B 46 LCALL _TempCounter_EnableInt
(0150) 	TempCounter_Start();
    1468: 7C 0B 4E LCALL _TempCounter_Start
(0151) 	MotorDriver_EnableInt();
    146B: 7C 0B A6 LCALL _MotorDriver_EnableInt
(0152) 	
(0153) 	// Start I2CHW
(0154) 	I2CHW_Start();
    146E: 7C 0D BD LCALL _I2CHW_Start
(0155) 	I2CHW_EnableMstr();
    1471: 7C 0D CB LCALL _I2CHW_EnableMstr
(0156) 	I2CHW_EnableInt();
    1474: 7C 0D C0 LCALL _I2CHW_EnableInt
    1477: 20       POP   X
(0157) 	
(0158) 	WriteI2C(slaveAddress, 0xAC, 1, 0x02); // Write to Access Config
    1478: 50 00    MOV   A,0x0
    147A: 08       PUSH  A
    147B: 50 02    MOV   A,0x2
    147D: 08       PUSH  A
    147E: 50 00    MOV   A,0x0
    1480: 08       PUSH  A
    1481: 50 01    MOV   A,0x1
    1483: 08       PUSH  A
    1484: 50 AC    MOV   A,0xAC
    1486: 08       PUSH  A
    1487: 62 D0 00 MOV   REG[0xD0],0x0
    148A: 51 9F    MOV   A,[main.c:slaveAddress]
    148C: 08       PUSH  A
    148D: 9D AE    CALL  _WriteI2C
(0159) 	
(0160) 	WriteI2C(slaveAddress, 0xA1, 2, 0x02, 0x01); // Writes TH
    148F: 50 00    MOV   A,0x0
    1491: 08       PUSH  A
    1492: 50 01    MOV   A,0x1
    1494: 08       PUSH  A
    1495: 50 00    MOV   A,0x0
    1497: 08       PUSH  A
    1498: 50 02    MOV   A,0x2
    149A: 08       PUSH  A
    149B: 50 00    MOV   A,0x0
    149D: 08       PUSH  A
    149E: 50 02    MOV   A,0x2
    14A0: 08       PUSH  A
    14A1: 50 A1    MOV   A,0xA1
    14A3: 08       PUSH  A
    14A4: 62 D0 00 MOV   REG[0xD0],0x0
    14A7: 51 9F    MOV   A,[main.c:slaveAddress]
    14A9: 08       PUSH  A
    14AA: 9D 91    CALL  _WriteI2C
    14AC: 38 F2    ADD   SP,0xF2
(0161) 	WriteI2C(slaveAddress, 0xA2, 2, 0x02, 0x01); // Writes TL
    14AE: 50 00    MOV   A,0x0
    14B0: 08       PUSH  A
    14B1: 50 01    MOV   A,0x1
    14B3: 08       PUSH  A
    14B4: 50 00    MOV   A,0x0
    14B6: 08       PUSH  A
    14B7: 50 02    MOV   A,0x2
    14B9: 08       PUSH  A
    14BA: 50 00    MOV   A,0x0
    14BC: 08       PUSH  A
    14BD: 50 02    MOV   A,0x2
    14BF: 08       PUSH  A
    14C0: 50 A2    MOV   A,0xA2
    14C2: 08       PUSH  A
    14C3: 62 D0 00 MOV   REG[0xD0],0x0
    14C6: 51 9F    MOV   A,[main.c:slaveAddress]
    14C8: 08       PUSH  A
    14C9: 9D 72    CALL  _WriteI2C
(0162) 	WriteI2C(slaveAddress, 0xEE, 0); // Writes StartConvert
    14CB: 50 00    MOV   A,0x0
    14CD: 08       PUSH  A
    14CE: 08       PUSH  A
    14CF: 50 EE    MOV   A,0xEE
    14D1: 08       PUSH  A
    14D2: 62 D0 00 MOV   REG[0xD0],0x0
    14D5: 51 9F    MOV   A,[main.c:slaveAddress]
    14D7: 08       PUSH  A
    14D8: 9D 63    CALL  _WriteI2C
    14DA: 38 F4    ADD   SP,0xF4
(0163) 	
(0164) 	// This is the command usage string
(0165) 	UART_CPutString("#################### Heating/Cooling Stepper Motors ##################\r\n\
    14DC: 10       PUSH  X
    14DD: 50 04    MOV   A,0x4
    14DF: 08       PUSH  A
    14E0: 50 0B    MOV   A,0xB
    14E2: 5C       MOV   X,A
    14E3: 18       POP   A
    14E4: 7C 0B 2B LCALL _UART_CPutString
    14E7: 20       POP   X
    14E8: 87 AE    JMP   0x1C97
(0166) #	S ##\r\n\
(0167) #		S - Set the desired Temperature\r\n\
(0168) #		## - Desired temperature in celsius\r\n\
(0169) #\r\n\
(0170) #	T ##\r\n\
(0171) #		T - Set the desired tolerance\r\n\
(0172) #		## - Desired tolerance in celsius\r\n\
(0173) #\r\n\
(0174) #	M X\r\n\
(0175) #		M - Change the mode of the thermostat\r\n\
(0176) #		X - C is for cool, H is for heat, F is for off\r\n\
(0177) #\r\n\
(0178) #	F X S\r\n\
(0179) #		F - Change the mode of the fan\r\n\
(0180) #		X - A is for automatic fan control, M is for always on\r\n\
(0181) #		S - Speed of the fan, H = high, M = medium, L = low\r\n\
(0182) #####################################################################\r\n");
(0183) 	while (1)
(0184) 	{
(0185) 		char *cmd;
(0186) 		char *params;
(0187) 		
(0188) 		GetLine(buf, 79); // Retrieves a line with a maximum length of 70 characters and put it in buf.
    14EA: 50 4F    MOV   A,0x4F
    14EC: 08       PUSH  A
    14ED: 50 00    MOV   A,0x0
    14EF: 08       PUSH  A
    14F0: 50 0C    MOV   A,0xC
    14F2: 08       PUSH  A
    14F3: 9C A4    CALL  __UserModules_end|_GetLine|__text_start|_GetLine
(0189) 		
(0190) 		cmd = Lowercase(cstrtok(buf, " ")); // Get the first word from the entered string and lowercase it.
    14F5: 50 04    MOV   A,0x4
    14F7: 08       PUSH  A
    14F8: 50 09    MOV   A,0x9
    14FA: 08       PUSH  A
    14FB: 50 00    MOV   A,0x0
    14FD: 08       PUSH  A
    14FE: 50 0C    MOV   A,0xC
    1500: 08       PUSH  A
    1501: 7C 38 69 LCALL _cstrtok
    1504: 38 F9    ADD   SP,0xF9
    1506: 62 D0 00 MOV   REG[0xD0],0x0
    1509: 51 83    MOV   A,[__r0]
    150B: 08       PUSH  A
    150C: 51 82    MOV   A,[__r1]
    150E: 08       PUSH  A
    150F: 9E 30    CALL  _Lowercase
    1511: 62 D0 00 MOV   REG[0xD0],0x0
    1514: 51 82    MOV   A,[__r1]
    1516: 54 01    MOV   [X+1],A
    1518: 51 83    MOV   A,[__r0]
    151A: 54 00    MOV   [X+0],A
(0191) 		if (strlen(cmd) == 1 && cmd[0] == 's') // If the command is one letter and it is w, then write command
    151C: 52 00    MOV   A,[X+0]
    151E: 08       PUSH  A
    151F: 52 01    MOV   A,[X+1]
    1521: 08       PUSH  A
    1522: 7C 1E FE LCALL _strlenLMM
    1525: 38 FC    ADD   SP,0xFC
    1527: 62 D0 00 MOV   REG[0xD0],0x0
    152A: 3C 83 00 CMP   [__r0],0x0
    152D: B1 66    JNZ   0x1694
    152F: 3C 82 01 CMP   [__r1],0x1
    1532: B1 61    JNZ   0x1694
    1534: 62 D0 00 MOV   REG[0xD0],0x0
    1537: 52 01    MOV   A,[X+1]
    1539: 53 82    MOV   [__r1],A
    153B: 52 00    MOV   A,[X+0]
    153D: 60 D4    MOV   REG[0xD4],A
    153F: 3E 82    MVI   A,[__r1]
    1541: 39 73    CMP   A,0x73
    1543: B1 50    JNZ   0x1694
(0192) 		{
(0193) 			int temp;
(0194) 			
(0195) 			params = cstrtok(0x00, " ");  // 0x00 indicates it will continue from last cstrtok command and get next word. This gets the next parameter
    1545: 50 04    MOV   A,0x4
    1547: 08       PUSH  A
    1548: 50 09    MOV   A,0x9
    154A: 08       PUSH  A
    154B: 50 00    MOV   A,0x0
    154D: 08       PUSH  A
    154E: 08       PUSH  A
    154F: 7C 38 69 LCALL _cstrtok
    1552: 62 D0 00 MOV   REG[0xD0],0x0
    1555: 51 82    MOV   A,[__r1]
    1557: 54 03    MOV   [X+3],A
    1559: 51 83    MOV   A,[__r0]
    155B: 54 02    MOV   [X+2],A
(0196) 			
(0197) 			// csscanf if used to parse the string into values such as hexadecimal or integers
(0198) 			// It returns the number of parameters it parsed which should be one
(0199) 			// If the length of the params is not right or it does not parse the right amount, it returns an error
(0200) 			// %d gets an integer, this is the temperature
(0201) 			if (!IsNumber(params) || strlen(params) > 3 || strlen(params) < 1 || csscanf(params, "%d", &temp) != 1) goto error;
    155D: 52 02    MOV   A,[X+2]
    155F: 08       PUSH  A
    1560: 52 03    MOV   A,[X+3]
    1562: 08       PUSH  A
    1563: 9E 4B    CALL  _IsNumber
    1565: 38 FA    ADD   SP,0xFA
    1567: 62 D0 00 MOV   REG[0xD0],0x0
    156A: 39 00    CMP   A,0x0
    156C: A0 5D    JZ    0x15CA
    156E: 52 02    MOV   A,[X+2]
    1570: 08       PUSH  A
    1571: 52 03    MOV   A,[X+3]
    1573: 08       PUSH  A
    1574: 7C 1E FE LCALL _strlenLMM
    1577: 38 FE    ADD   SP,0xFE
    1579: 62 D0 00 MOV   REG[0xD0],0x0
    157C: 50 03    MOV   A,0x3
    157E: 12 82    SUB   A,[__r1]
    1580: 50 00    MOV   A,0x0
    1582: 1A 83    SBB   A,[__r0]
    1584: C0 45    JC    0x15CA
    1586: 52 02    MOV   A,[X+2]
    1588: 08       PUSH  A
    1589: 52 03    MOV   A,[X+3]
    158B: 08       PUSH  A
    158C: 7C 1E FE LCALL _strlenLMM
    158F: 38 FE    ADD   SP,0xFE
    1591: 62 D0 00 MOV   REG[0xD0],0x0
    1594: 51 82    MOV   A,[__r1]
    1596: 11 01    SUB   A,0x1
    1598: 51 83    MOV   A,[__r0]
    159A: 19 00    SBB   A,0x0
    159C: C0 2D    JC    0x15CA
    159E: 62 D0 00 MOV   REG[0xD0],0x0
    15A1: 5A 82    MOV   [__r1],X
    15A3: 06 82 04 ADD   [__r1],0x4
    15A6: 50 07    MOV   A,0x7
    15A8: 08       PUSH  A
    15A9: 51 82    MOV   A,[__r1]
    15AB: 08       PUSH  A
    15AC: 50 04    MOV   A,0x4
    15AE: 08       PUSH  A
    15AF: 50 06    MOV   A,0x6
    15B1: 08       PUSH  A
    15B2: 52 02    MOV   A,[X+2]
    15B4: 08       PUSH  A
    15B5: 52 03    MOV   A,[X+3]
    15B7: 08       PUSH  A
    15B8: 7C 2C 0E LCALL _csscanf
    15BB: 38 FA    ADD   SP,0xFA
    15BD: 62 D0 00 MOV   REG[0xD0],0x0
    15C0: 3C 83 00 CMP   [__r0],0x0
    15C3: B0 06    JNZ   0x15CA
    15C5: 3C 82 01 CMP   [__r1],0x1
    15C8: A0 03    JZ    0x15CC
    15CA: 86 C0    JMP   0x1C8B
(0202) 			if (cstrtok(0x00, " ") != 0x00) goto error; // If there is any data after temp, throw an error
    15CC: 50 04    MOV   A,0x4
    15CE: 08       PUSH  A
    15CF: 50 09    MOV   A,0x9
    15D1: 08       PUSH  A
    15D2: 50 00    MOV   A,0x0
    15D4: 08       PUSH  A
    15D5: 08       PUSH  A
    15D6: 7C 38 69 LCALL _cstrtok
    15D9: 38 FC    ADD   SP,0xFC
    15DB: 62 D0 00 MOV   REG[0xD0],0x0
    15DE: 3C 83 00 CMP   [__r0],0x0
    15E1: B0 06    JNZ   0x15E8
    15E3: 3C 82 00 CMP   [__r1],0x0
    15E6: A0 03    JZ    0x15EA
    15E8: 86 A2    JMP   0x1C8B
(0203) 			
(0204) 			if (temp < 0 || temp > 125)
    15EA: 52 05    MOV   A,[X+5]
    15EC: 11 00    SUB   A,0x0
    15EE: 52 04    MOV   A,[X+4]
    15F0: 31 80    XOR   A,0x80
    15F2: 19 80    SBB   A,0x80
    15F4: C0 14    JC    0x1609
    15F6: 50 7D    MOV   A,0x7D
    15F8: 13 05    SUB   A,[X+5]
    15FA: 52 04    MOV   A,[X+4]
    15FC: 31 80    XOR   A,0x80
    15FE: 62 D0 00 MOV   REG[0xD0],0x0
    1601: 53 77    MOV   [__rX],A
    1603: 50 80    MOV   A,0x80
    1605: 1A 77    SBB   A,[__rX]
    1607: D0 03    JNC   0x160B
(0205) 				goto error; // temperature was not in range
    1609: 86 81    JMP   0x1C8B
(0206) 			
(0207) 			setTemp = temp;
    160B: 52 05    MOV   A,[X+5]
    160D: 62 D0 00 MOV   REG[0xD0],0x0
    1610: 53 9A    MOV   [setTemp],A
(0208) 			
(0209) 			WriteI2C(slaveAddress, 0xA1, 2, (char)(setTemp + (tolerance / 2)), 0x00); // Writes TH
    1612: 50 00    MOV   A,0x0
    1614: 08       PUSH  A
    1615: 08       PUSH  A
    1616: 62 D0 00 MOV   REG[0xD0],0x0
    1619: 50 02    MOV   A,0x2
    161B: 08       PUSH  A
    161C: 51 99    MOV   A,[tolerance]
    161E: 08       PUSH  A
    161F: 62 D0 00 MOV   REG[0xD0],0x0
    1622: 7C 1D F1 LCALL 0x1DF1
    1625: 18       POP   A
    1626: 53 83    MOV   [__r0],A
    1628: 38 FF    ADD   SP,0xFF
    162A: 62 D0 00 MOV   REG[0xD0],0x0
    162D: 51 9A    MOV   A,[setTemp]
    162F: 62 D0 00 MOV   REG[0xD0],0x0
    1632: 02 83    ADD   A,[__r0]
    1634: 53 82    MOV   [__r1],A
    1636: 50 00    MOV   A,0x0
    1638: 08       PUSH  A
    1639: 51 82    MOV   A,[__r1]
    163B: 08       PUSH  A
    163C: 50 00    MOV   A,0x0
    163E: 08       PUSH  A
    163F: 50 02    MOV   A,0x2
    1641: 08       PUSH  A
    1642: 50 A1    MOV   A,0xA1
    1644: 08       PUSH  A
    1645: 62 D0 00 MOV   REG[0xD0],0x0
    1648: 51 9F    MOV   A,[main.c:slaveAddress]
    164A: 08       PUSH  A
    164B: 9B F0    CALL  _WriteI2C
    164D: 38 F8    ADD   SP,0xF8
(0210) 			WriteI2C(slaveAddress, 0xA2, 2, (char)(setTemp - (tolerance / 2)), 0x00); // Writes TL
    164F: 50 00    MOV   A,0x0
    1651: 08       PUSH  A
    1652: 08       PUSH  A
    1653: 62 D0 00 MOV   REG[0xD0],0x0
    1656: 50 02    MOV   A,0x2
    1658: 08       PUSH  A
    1659: 51 99    MOV   A,[tolerance]
    165B: 08       PUSH  A
    165C: 62 D0 00 MOV   REG[0xD0],0x0
    165F: 7C 1D F1 LCALL 0x1DF1
    1662: 18       POP   A
    1663: 53 83    MOV   [__r0],A
    1665: 38 FF    ADD   SP,0xFF
    1667: 62 D0 00 MOV   REG[0xD0],0x0
    166A: 51 9A    MOV   A,[setTemp]
    166C: 62 D0 00 MOV   REG[0xD0],0x0
    166F: 12 83    SUB   A,[__r0]
    1671: 53 82    MOV   [__r1],A
    1673: 50 00    MOV   A,0x0
    1675: 08       PUSH  A
    1676: 51 82    MOV   A,[__r1]
    1678: 08       PUSH  A
    1679: 50 00    MOV   A,0x0
    167B: 08       PUSH  A
    167C: 50 02    MOV   A,0x2
    167E: 08       PUSH  A
    167F: 50 A2    MOV   A,0xA2
    1681: 08       PUSH  A
    1682: 62 D0 00 MOV   REG[0xD0],0x0
    1685: 51 9F    MOV   A,[main.c:slaveAddress]
    1687: 08       PUSH  A
    1688: 9B B3    CALL  _WriteI2C
    168A: 38 F8    ADD   SP,0xF8
(0211) 			
(0212) 			lcdUpdate = TRUE;
    168C: 62 D0 00 MOV   REG[0xD0],0x0
    168F: 55 9E 01 MOV   [lcdUpdate],0x1
(0213) 		}
    1692: 84 85    JMP   0x1B18
(0214) 		else if (strlen(cmd) == 1 && cmd[0] == 't') // If the command is one letter and it is r, then read command
    1694: 52 00    MOV   A,[X+0]
    1696: 08       PUSH  A
    1697: 52 01    MOV   A,[X+1]
    1699: 08       PUSH  A
    169A: 7C 1E FE LCALL _strlenLMM
    169D: 38 FE    ADD   SP,0xFE
    169F: 62 D0 00 MOV   REG[0xD0],0x0
    16A2: 3C 83 00 CMP   [__r0],0x0
    16A5: B1 63    JNZ   0x1809
    16A7: 3C 82 01 CMP   [__r1],0x1
    16AA: B1 5E    JNZ   0x1809
    16AC: 62 D0 00 MOV   REG[0xD0],0x0
    16AF: 52 01    MOV   A,[X+1]
    16B1: 53 82    MOV   [__r1],A
    16B3: 52 00    MOV   A,[X+0]
    16B5: 60 D4    MOV   REG[0xD4],A
    16B7: 3E 82    MVI   A,[__r1]
    16B9: 39 74    CMP   A,0x74
    16BB: B1 4D    JNZ   0x1809
(0215) 		{
(0216) 			int tol;
(0217) 			
(0218) 			params = cstrtok(0x00, " ");  // 0x00 indicates it will continue from last cstrtok command and get next word. This gets the next parameter
    16BD: 50 04    MOV   A,0x4
    16BF: 08       PUSH  A
    16C0: 50 09    MOV   A,0x9
    16C2: 08       PUSH  A
    16C3: 50 00    MOV   A,0x0
    16C5: 08       PUSH  A
    16C6: 08       PUSH  A
    16C7: 7C 38 69 LCALL _cstrtok
    16CA: 62 D0 00 MOV   REG[0xD0],0x0
    16CD: 51 82    MOV   A,[__r1]
    16CF: 54 03    MOV   [X+3],A
    16D1: 51 83    MOV   A,[__r0]
    16D3: 54 02    MOV   [X+2],A
(0219) 			
(0220) 			// csscanf if used to parse the string into values such as hexadecimal or integers
(0221) 			// It returns the number of parameters it parsed which should be one
(0222) 			// If the length of the params is not right or it does not parse the right amount, it returns an error
(0223) 			// %d gets an integer, this is the tolerance
(0224) 			if (!IsNumber(params) || strlen(params) > 3 || strlen(params) < 1 || csscanf(params, "%d", &tol) != 1) goto error;
    16D5: 52 02    MOV   A,[X+2]
    16D7: 08       PUSH  A
    16D8: 52 03    MOV   A,[X+3]
    16DA: 08       PUSH  A
    16DB: 9C D3    CALL  _IsNumber
    16DD: 38 FA    ADD   SP,0xFA
    16DF: 62 D0 00 MOV   REG[0xD0],0x0
    16E2: 39 00    CMP   A,0x0
    16E4: A0 5D    JZ    0x1742
    16E6: 52 02    MOV   A,[X+2]
    16E8: 08       PUSH  A
    16E9: 52 03    MOV   A,[X+3]
    16EB: 08       PUSH  A
    16EC: 7C 1E FE LCALL _strlenLMM
    16EF: 38 FE    ADD   SP,0xFE
    16F1: 62 D0 00 MOV   REG[0xD0],0x0
    16F4: 50 03    MOV   A,0x3
    16F6: 12 82    SUB   A,[__r1]
    16F8: 50 00    MOV   A,0x0
    16FA: 1A 83    SBB   A,[__r0]
    16FC: C0 45    JC    0x1742
    16FE: 52 02    MOV   A,[X+2]
    1700: 08       PUSH  A
    1701: 52 03    MOV   A,[X+3]
    1703: 08       PUSH  A
    1704: 7C 1E FE LCALL _strlenLMM
    1707: 38 FE    ADD   SP,0xFE
    1709: 62 D0 00 MOV   REG[0xD0],0x0
    170C: 51 82    MOV   A,[__r1]
    170E: 11 01    SUB   A,0x1
    1710: 51 83    MOV   A,[__r0]
    1712: 19 00    SBB   A,0x0
    1714: C0 2D    JC    0x1742
    1716: 62 D0 00 MOV   REG[0xD0],0x0
    1719: 5A 82    MOV   [__r1],X
    171B: 06 82 04 ADD   [__r1],0x4
    171E: 50 07    MOV   A,0x7
    1720: 08       PUSH  A
    1721: 51 82    MOV   A,[__r1]
    1723: 08       PUSH  A
    1724: 50 04    MOV   A,0x4
    1726: 08       PUSH  A
    1727: 50 06    MOV   A,0x6
    1729: 08       PUSH  A
    172A: 52 02    MOV   A,[X+2]
    172C: 08       PUSH  A
    172D: 52 03    MOV   A,[X+3]
    172F: 08       PUSH  A
    1730: 7C 2C 0E LCALL _csscanf
    1733: 38 FA    ADD   SP,0xFA
    1735: 62 D0 00 MOV   REG[0xD0],0x0
    1738: 3C 83 00 CMP   [__r0],0x0
    173B: B0 06    JNZ   0x1742
    173D: 3C 82 01 CMP   [__r1],0x1
    1740: A0 03    JZ    0x1744
    1742: 85 48    JMP   0x1C8B
(0225) 			if (cstrtok(0x00, " ") != 0x00) goto error; // If there is any data after temp, throw an error
    1744: 50 04    MOV   A,0x4
    1746: 08       PUSH  A
    1747: 50 09    MOV   A,0x9
    1749: 08       PUSH  A
    174A: 50 00    MOV   A,0x0
    174C: 08       PUSH  A
    174D: 08       PUSH  A
    174E: 7C 38 69 LCALL _cstrtok
    1751: 38 FC    ADD   SP,0xFC
    1753: 62 D0 00 MOV   REG[0xD0],0x0
    1756: 3C 83 00 CMP   [__r0],0x0
    1759: B0 06    JNZ   0x1760
    175B: 3C 82 00 CMP   [__r1],0x0
    175E: A0 03    JZ    0x1762
    1760: 85 2A    JMP   0x1C8B
(0226) 			
(0227) 			if (tol < 0 || tol > 99)
    1762: 52 05    MOV   A,[X+5]
    1764: 11 00    SUB   A,0x0
    1766: 52 04    MOV   A,[X+4]
    1768: 31 80    XOR   A,0x80
    176A: 19 80    SBB   A,0x80
    176C: C0 14    JC    0x1781
    176E: 50 63    MOV   A,0x63
    1770: 13 05    SUB   A,[X+5]
    1772: 52 04    MOV   A,[X+4]
    1774: 31 80    XOR   A,0x80
    1776: 62 D0 00 MOV   REG[0xD0],0x0
    1779: 53 77    MOV   [__rX],A
    177B: 50 80    MOV   A,0x80
    177D: 1A 77    SBB   A,[__rX]
    177F: D0 03    JNC   0x1783
(0228) 				goto error; // tolerance was not in range
    1781: 85 09    JMP   0x1C8B
(0229) 			
(0230) 			tolerance = tol;
    1783: 52 05    MOV   A,[X+5]
    1785: 62 D0 00 MOV   REG[0xD0],0x0
    1788: 53 99    MOV   [tolerance],A
(0231) 
(0232) 			WriteI2C(slaveAddress, 0xA1, 2, (char)(setTemp + (tolerance / 2)), 0x00); // Writes TH
    178A: 50 00    MOV   A,0x0
    178C: 08       PUSH  A
    178D: 08       PUSH  A
    178E: 50 02    MOV   A,0x2
    1790: 08       PUSH  A
    1791: 51 99    MOV   A,[tolerance]
    1793: 08       PUSH  A
    1794: 62 D0 00 MOV   REG[0xD0],0x0
    1797: 7C 1D F1 LCALL 0x1DF1
    179A: 18       POP   A
    179B: 53 83    MOV   [__r0],A
    179D: 38 FF    ADD   SP,0xFF
    179F: 62 D0 00 MOV   REG[0xD0],0x0
    17A2: 51 9A    MOV   A,[setTemp]
    17A4: 62 D0 00 MOV   REG[0xD0],0x0
    17A7: 02 83    ADD   A,[__r0]
    17A9: 53 82    MOV   [__r1],A
    17AB: 50 00    MOV   A,0x0
    17AD: 08       PUSH  A
    17AE: 51 82    MOV   A,[__r1]
    17B0: 08       PUSH  A
    17B1: 50 00    MOV   A,0x0
    17B3: 08       PUSH  A
    17B4: 50 02    MOV   A,0x2
    17B6: 08       PUSH  A
    17B7: 50 A1    MOV   A,0xA1
    17B9: 08       PUSH  A
    17BA: 62 D0 00 MOV   REG[0xD0],0x0
    17BD: 51 9F    MOV   A,[main.c:slaveAddress]
    17BF: 08       PUSH  A
    17C0: 9A 7B    CALL  _WriteI2C
    17C2: 38 F8    ADD   SP,0xF8
(0233) 			WriteI2C(slaveAddress, 0xA2, 2, (char)(setTemp - (tolerance / 2)), 0x00); // Writes TL
    17C4: 50 00    MOV   A,0x0
    17C6: 08       PUSH  A
    17C7: 08       PUSH  A
    17C8: 62 D0 00 MOV   REG[0xD0],0x0
    17CB: 50 02    MOV   A,0x2
    17CD: 08       PUSH  A
    17CE: 51 99    MOV   A,[tolerance]
    17D0: 08       PUSH  A
    17D1: 62 D0 00 MOV   REG[0xD0],0x0
    17D4: 7C 1D F1 LCALL 0x1DF1
    17D7: 18       POP   A
    17D8: 53 83    MOV   [__r0],A
    17DA: 38 FF    ADD   SP,0xFF
    17DC: 62 D0 00 MOV   REG[0xD0],0x0
    17DF: 51 9A    MOV   A,[setTemp]
    17E1: 62 D0 00 MOV   REG[0xD0],0x0
    17E4: 12 83    SUB   A,[__r0]
    17E6: 53 82    MOV   [__r1],A
    17E8: 50 00    MOV   A,0x0
    17EA: 08       PUSH  A
    17EB: 51 82    MOV   A,[__r1]
    17ED: 08       PUSH  A
    17EE: 50 00    MOV   A,0x0
    17F0: 08       PUSH  A
    17F1: 50 02    MOV   A,0x2
    17F3: 08       PUSH  A
    17F4: 50 A2    MOV   A,0xA2
    17F6: 08       PUSH  A
    17F7: 62 D0 00 MOV   REG[0xD0],0x0
    17FA: 51 9F    MOV   A,[main.c:slaveAddress]
    17FC: 08       PUSH  A
    17FD: 9A 3E    CALL  _WriteI2C
    17FF: 38 F8    ADD   SP,0xF8
(0234) 			
(0235) 			lcdUpdate = TRUE;
    1801: 62 D0 00 MOV   REG[0xD0],0x0
    1804: 55 9E 01 MOV   [lcdUpdate],0x1
(0236) 		}
    1807: 83 10    JMP   0x1B18
(0237) 		else if (strlen(cmd) == 1 && cmd[0] == 'm') // If the command is one letter and it is r, then read command
    1809: 52 00    MOV   A,[X+0]
    180B: 08       PUSH  A
    180C: 52 01    MOV   A,[X+1]
    180E: 08       PUSH  A
    180F: 7C 1E FE LCALL _strlenLMM
    1812: 38 FE    ADD   SP,0xFE
    1814: 62 D0 00 MOV   REG[0xD0],0x0
    1817: 3C 83 00 CMP   [__r0],0x0
    181A: B1 21    JNZ   0x193C
    181C: 3C 82 01 CMP   [__r1],0x1
    181F: B1 1C    JNZ   0x193C
    1821: 62 D0 00 MOV   REG[0xD0],0x0
    1824: 52 01    MOV   A,[X+1]
    1826: 53 82    MOV   [__r1],A
    1828: 52 00    MOV   A,[X+0]
    182A: 60 D4    MOV   REG[0xD4],A
    182C: 3E 82    MVI   A,[__r1]
    182E: 39 6D    CMP   A,0x6D
    1830: B1 0B    JNZ   0x193C
(0238) 		{
(0239) 			char mode;
(0240) 
(0241) 			// csscanf if used to parse the string into values such as hexadecimal or integers
(0242) 			// It returns the number of parameters it parsed which should be one
(0243) 			// If the length of the params is not right or it does not parse the right amount, it returns an error
(0244) 			// %c gets a character, the data type character
(0245) 			params = cstrtok(0x00, " ");
    1832: 50 04    MOV   A,0x4
    1834: 08       PUSH  A
    1835: 50 09    MOV   A,0x9
    1837: 08       PUSH  A
    1838: 50 00    MOV   A,0x0
    183A: 08       PUSH  A
    183B: 08       PUSH  A
    183C: 7C 38 69 LCALL _cstrtok
    183F: 62 D0 00 MOV   REG[0xD0],0x0
    1842: 51 82    MOV   A,[__r1]
    1844: 54 03    MOV   [X+3],A
    1846: 51 83    MOV   A,[__r0]
    1848: 54 02    MOV   [X+2],A
(0246) 			if (strlen(params) != 1 || csscanf(params, "%c", &mode) != 1) goto error;
    184A: 52 02    MOV   A,[X+2]
    184C: 08       PUSH  A
    184D: 52 03    MOV   A,[X+3]
    184F: 08       PUSH  A
    1850: 7C 1E FE LCALL _strlenLMM
    1853: 38 FA    ADD   SP,0xFA
    1855: 62 D0 00 MOV   REG[0xD0],0x0
    1858: 3C 83 00 CMP   [__r0],0x0
    185B: B0 32    JNZ   0x188E
    185D: 3C 82 01 CMP   [__r1],0x1
    1860: B0 2D    JNZ   0x188E
    1862: 62 D0 00 MOV   REG[0xD0],0x0
    1865: 5A 82    MOV   [__r1],X
    1867: 06 82 04 ADD   [__r1],0x4
    186A: 50 07    MOV   A,0x7
    186C: 08       PUSH  A
    186D: 51 82    MOV   A,[__r1]
    186F: 08       PUSH  A
    1870: 50 04    MOV   A,0x4
    1872: 08       PUSH  A
    1873: 50 03    MOV   A,0x3
    1875: 08       PUSH  A
    1876: 52 02    MOV   A,[X+2]
    1878: 08       PUSH  A
    1879: 52 03    MOV   A,[X+3]
    187B: 08       PUSH  A
    187C: 7C 2C 0E LCALL _csscanf
    187F: 38 FA    ADD   SP,0xFA
    1881: 62 D0 00 MOV   REG[0xD0],0x0
    1884: 3C 83 00 CMP   [__r0],0x0
    1887: B0 06    JNZ   0x188E
    1889: 3C 82 01 CMP   [__r1],0x1
    188C: A0 03    JZ    0x1890
    188E: 83 FC    JMP   0x1C8B
(0247) 			
(0248) 			// If there is any data after the number of bytes, then the format is invalid and it should return an error
(0249) 			if (cstrtok(0x00, " ") != 0x00) goto error;
    1890: 50 04    MOV   A,0x4
    1892: 08       PUSH  A
    1893: 50 09    MOV   A,0x9
    1895: 08       PUSH  A
    1896: 50 00    MOV   A,0x0
    1898: 08       PUSH  A
    1899: 08       PUSH  A
    189A: 7C 38 69 LCALL _cstrtok
    189D: 38 FC    ADD   SP,0xFC
    189F: 62 D0 00 MOV   REG[0xD0],0x0
    18A2: 3C 83 00 CMP   [__r0],0x0
    18A5: B0 06    JNZ   0x18AC
    18A7: 3C 82 00 CMP   [__r1],0x0
    18AA: A0 03    JZ    0x18AE
    18AC: 83 DE    JMP   0x1C8B
(0250) 			
(0251) 			mode = tolower(mode); // Lowercase the data type
    18AE: 62 D0 00 MOV   REG[0xD0],0x0
    18B1: 52 04    MOV   A,[X+4]
    18B3: 53 82    MOV   [__r1],A
    18B5: 50 00    MOV   A,0x0
    18B7: 08       PUSH  A
    18B8: 51 82    MOV   A,[__r1]
    18BA: 08       PUSH  A
    18BB: 7C 2A E7 LCALL _tolower
    18BE: 38 FE    ADD   SP,0xFE
    18C0: 62 D0 00 MOV   REG[0xD0],0x0
    18C3: 51 82    MOV   A,[__r1]
    18C5: 54 04    MOV   [X+4],A
(0252) 			
(0253) 			switch (mode)
    18C7: 52 04    MOV   A,[X+4]
    18C9: 54 06    MOV   [X+6],A
    18CB: 56 05 00 MOV   [X+5],0x0
    18CE: 3D 05 00 CMP   [X+5],0x0
    18D1: B0 06    JNZ   0x18D8
    18D3: 3D 06 63 CMP   [X+6],0x63
    18D6: A0 3C    JZ    0x1913
    18D8: 3D 05 00 CMP   [X+5],0x0
    18DB: B0 06    JNZ   0x18E2
    18DD: 3D 06 66 CMP   [X+6],0x66
    18E0: A0 0D    JZ    0x18EE
    18E2: 3D 05 00 CMP   [X+5],0x0
    18E5: B0 06    JNZ   0x18EC
    18E7: 3D 06 68 CMP   [X+6],0x68
    18EA: A0 0B    JZ    0x18F6
    18EC: 83 9E    JMP   0x1C8B
(0254) 			{
(0255) 				case 'f':
(0256) 					thermostatMode = 0;
    18EE: 62 D0 00 MOV   REG[0xD0],0x0
    18F1: 55 96 00 MOV   [thermostatMode],0x0
(0257) 					break;
    18F4: 80 3D    JMP   0x1932
(0258) 					
(0259) 				case 'h':
(0260) 					thermostatMode = 1;
    18F6: 62 D0 00 MOV   REG[0xD0],0x0
    18F9: 55 96 01 MOV   [thermostatMode],0x1
(0261) 					WriteI2C(slaveAddress, 0xAC, 1, 0x00); // Write to Access Config, sets polarity bit to active low
    18FC: 50 00    MOV   A,0x0
    18FE: 08       PUSH  A
    18FF: 08       PUSH  A
    1900: 08       PUSH  A
    1901: 50 01    MOV   A,0x1
    1903: 08       PUSH  A
    1904: 50 AC    MOV   A,0xAC
    1906: 08       PUSH  A
    1907: 62 D0 00 MOV   REG[0xD0],0x0
    190A: 51 9F    MOV   A,[main.c:slaveAddress]
    190C: 08       PUSH  A
    190D: 99 2E    CALL  _WriteI2C
    190F: 38 FA    ADD   SP,0xFA
(0262) 					break;
    1911: 80 20    JMP   0x1932
(0263) 					
(0264) 				case 'c':
(0265) 					thermostatMode = 2;
    1913: 62 D0 00 MOV   REG[0xD0],0x0
    1916: 55 96 02 MOV   [thermostatMode],0x2
(0266) 					WriteI2C(slaveAddress, 0xAC, 1, 0x02); // Write to Access Config, sets polarity bit to active high
    1919: 50 00    MOV   A,0x0
    191B: 08       PUSH  A
    191C: 50 02    MOV   A,0x2
    191E: 08       PUSH  A
    191F: 50 00    MOV   A,0x0
    1921: 08       PUSH  A
    1922: 50 01    MOV   A,0x1
    1924: 08       PUSH  A
    1925: 50 AC    MOV   A,0xAC
    1927: 08       PUSH  A
    1928: 62 D0 00 MOV   REG[0xD0],0x0
    192B: 51 9F    MOV   A,[main.c:slaveAddress]
    192D: 08       PUSH  A
    192E: 99 0D    CALL  _WriteI2C
    1930: 38 FA    ADD   SP,0xFA
(0267) 					break;
(0268) 					
(0269) 				default: goto error;
(0270) 			}
(0271) 	
(0272) 			CheckFan();
    1932: 9A DA    CALL  _CheckFan
(0273) 			lcdUpdate = TRUE;
    1934: 62 D0 00 MOV   REG[0xD0],0x0
    1937: 55 9E 01 MOV   [lcdUpdate],0x1
(0274) 		}
    193A: 81 DD    JMP   0x1B18
(0275) 		else if (strlen(cmd) == 1 && cmd[0] == 'f') // If the command is one letter and it is r, then read command
    193C: 52 00    MOV   A,[X+0]
    193E: 08       PUSH  A
    193F: 52 01    MOV   A,[X+1]
    1941: 08       PUSH  A
    1942: 7C 1E FE LCALL _strlenLMM
    1945: 38 FE    ADD   SP,0xFE
    1947: 62 D0 00 MOV   REG[0xD0],0x0
    194A: 3C 83 00 CMP   [__r0],0x0
    194D: B3 3D    JNZ   0x1C8B
    194F: 3C 82 01 CMP   [__r1],0x1
    1952: B3 38    JNZ   0x1C8B
    1954: 62 D0 00 MOV   REG[0xD0],0x0
    1957: 52 01    MOV   A,[X+1]
    1959: 53 82    MOV   [__r1],A
    195B: 52 00    MOV   A,[X+0]
    195D: 60 D4    MOV   REG[0xD4],A
    195F: 3E 82    MVI   A,[__r1]
    1961: 39 66    CMP   A,0x66
    1963: B3 27    JNZ   0x1C8B
(0276) 		{
(0277) 			char mode;
(0278) 			char speed;
(0279) 
(0280) 			// csscanf if used to parse the string into values such as hexadecimal or integers
(0281) 			// It returns the number of parameters it parsed which should be one
(0282) 			// If the length of the params is not right or it does not parse the right amount, it returns an error
(0283) 			// %c gets a character, the data type character
(0284) 			params = cstrtok(0x00, " ");
    1965: 50 04    MOV   A,0x4
    1967: 08       PUSH  A
    1968: 50 09    MOV   A,0x9
    196A: 08       PUSH  A
    196B: 50 00    MOV   A,0x0
    196D: 08       PUSH  A
    196E: 08       PUSH  A
    196F: 7C 38 69 LCALL _cstrtok
    1972: 62 D0 00 MOV   REG[0xD0],0x0
    1975: 51 82    MOV   A,[__r1]
    1977: 54 03    MOV   [X+3],A
    1979: 51 83    MOV   A,[__r0]
    197B: 54 02    MOV   [X+2],A
(0285) 			if (strlen(params) != 1 || csscanf(params, "%c", &mode) != 1) goto error;
    197D: 52 02    MOV   A,[X+2]
    197F: 08       PUSH  A
    1980: 52 03    MOV   A,[X+3]
    1982: 08       PUSH  A
    1983: 7C 1E FE LCALL _strlenLMM
    1986: 38 FA    ADD   SP,0xFA
    1988: 62 D0 00 MOV   REG[0xD0],0x0
    198B: 3C 83 00 CMP   [__r0],0x0
    198E: B0 32    JNZ   0x19C1
    1990: 3C 82 01 CMP   [__r1],0x1
    1993: B0 2D    JNZ   0x19C1
    1995: 62 D0 00 MOV   REG[0xD0],0x0
    1998: 5A 82    MOV   [__r1],X
    199A: 06 82 04 ADD   [__r1],0x4
    199D: 50 07    MOV   A,0x7
    199F: 08       PUSH  A
    19A0: 51 82    MOV   A,[__r1]
    19A2: 08       PUSH  A
    19A3: 50 04    MOV   A,0x4
    19A5: 08       PUSH  A
    19A6: 50 03    MOV   A,0x3
    19A8: 08       PUSH  A
    19A9: 52 02    MOV   A,[X+2]
    19AB: 08       PUSH  A
    19AC: 52 03    MOV   A,[X+3]
    19AE: 08       PUSH  A
    19AF: 7C 2C 0E LCALL _csscanf
    19B2: 38 FA    ADD   SP,0xFA
    19B4: 62 D0 00 MOV   REG[0xD0],0x0
    19B7: 3C 83 00 CMP   [__r0],0x0
    19BA: B0 06    JNZ   0x19C1
    19BC: 3C 82 01 CMP   [__r1],0x1
    19BF: A0 03    JZ    0x19C3
    19C1: 82 C9    JMP   0x1C8B
(0286) 			
(0287) 			// %c gets a character, the data type character
(0288) 			params = cstrtok(0x00, " ");
    19C3: 50 04    MOV   A,0x4
    19C5: 08       PUSH  A
    19C6: 50 09    MOV   A,0x9
    19C8: 08       PUSH  A
    19C9: 50 00    MOV   A,0x0
    19CB: 08       PUSH  A
    19CC: 08       PUSH  A
    19CD: 7C 38 69 LCALL _cstrtok
    19D0: 62 D0 00 MOV   REG[0xD0],0x0
    19D3: 51 82    MOV   A,[__r1]
    19D5: 54 03    MOV   [X+3],A
    19D7: 51 83    MOV   A,[__r0]
    19D9: 54 02    MOV   [X+2],A
(0289) 			if (strlen(params) != 1 || csscanf(params, "%c", &speed) != 1) goto error;
    19DB: 52 02    MOV   A,[X+2]
    19DD: 08       PUSH  A
    19DE: 52 03    MOV   A,[X+3]
    19E0: 08       PUSH  A
    19E1: 7C 1E FE LCALL _strlenLMM
    19E4: 38 FA    ADD   SP,0xFA
    19E6: 62 D0 00 MOV   REG[0xD0],0x0
    19E9: 3C 83 00 CMP   [__r0],0x0
    19EC: B0 32    JNZ   0x1A1F
    19EE: 3C 82 01 CMP   [__r1],0x1
    19F1: B0 2D    JNZ   0x1A1F
    19F3: 62 D0 00 MOV   REG[0xD0],0x0
    19F6: 5A 82    MOV   [__r1],X
    19F8: 06 82 05 ADD   [__r1],0x5
    19FB: 50 07    MOV   A,0x7
    19FD: 08       PUSH  A
    19FE: 51 82    MOV   A,[__r1]
    1A00: 08       PUSH  A
    1A01: 50 04    MOV   A,0x4
    1A03: 08       PUSH  A
    1A04: 50 03    MOV   A,0x3
    1A06: 08       PUSH  A
    1A07: 52 02    MOV   A,[X+2]
    1A09: 08       PUSH  A
    1A0A: 52 03    MOV   A,[X+3]
    1A0C: 08       PUSH  A
    1A0D: 7C 2C 0E LCALL _csscanf
    1A10: 38 FA    ADD   SP,0xFA
    1A12: 62 D0 00 MOV   REG[0xD0],0x0
    1A15: 3C 83 00 CMP   [__r0],0x0
    1A18: B0 06    JNZ   0x1A1F
    1A1A: 3C 82 01 CMP   [__r1],0x1
    1A1D: A0 03    JZ    0x1A21
    1A1F: 82 6B    JMP   0x1C8B
(0290) 			
(0291) 			// If there is any data after the number of bytes, then the format is invalid and it should return an error
(0292) 			if (cstrtok(0x00, " ") != 0x00) goto error;
    1A21: 50 04    MOV   A,0x4
    1A23: 08       PUSH  A
    1A24: 50 09    MOV   A,0x9
    1A26: 08       PUSH  A
    1A27: 50 00    MOV   A,0x0
    1A29: 08       PUSH  A
    1A2A: 08       PUSH  A
    1A2B: 7C 38 69 LCALL _cstrtok
    1A2E: 38 FC    ADD   SP,0xFC
    1A30: 62 D0 00 MOV   REG[0xD0],0x0
    1A33: 3C 83 00 CMP   [__r0],0x0
    1A36: B0 06    JNZ   0x1A3D
    1A38: 3C 82 00 CMP   [__r1],0x0
    1A3B: A0 03    JZ    0x1A3F
    1A3D: 82 4D    JMP   0x1C8B
(0293) 			
(0294) 			mode = tolower(mode); // Lowercase the mode character
    1A3F: 62 D0 00 MOV   REG[0xD0],0x0
    1A42: 52 04    MOV   A,[X+4]
    1A44: 53 82    MOV   [__r1],A
    1A46: 50 00    MOV   A,0x0
    1A48: 08       PUSH  A
    1A49: 51 82    MOV   A,[__r1]
    1A4B: 08       PUSH  A
    1A4C: 7C 2A E7 LCALL _tolower
    1A4F: 62 D0 00 MOV   REG[0xD0],0x0
    1A52: 51 82    MOV   A,[__r1]
    1A54: 54 04    MOV   [X+4],A
(0295) 			speed = tolower(speed); // Lowercase the speed character
    1A56: 52 05    MOV   A,[X+5]
    1A58: 53 82    MOV   [__r1],A
    1A5A: 50 00    MOV   A,0x0
    1A5C: 08       PUSH  A
    1A5D: 51 82    MOV   A,[__r1]
    1A5F: 08       PUSH  A
    1A60: 7C 2A E7 LCALL _tolower
    1A63: 38 FC    ADD   SP,0xFC
    1A65: 62 D0 00 MOV   REG[0xD0],0x0
    1A68: 51 82    MOV   A,[__r1]
    1A6A: 54 05    MOV   [X+5],A
(0296) 			
(0297) 			switch (mode)
    1A6C: 52 04    MOV   A,[X+4]
    1A6E: 54 07    MOV   [X+7],A
    1A70: 56 06 00 MOV   [X+6],0x0
    1A73: 52 07    MOV   A,[X+7]
    1A75: 11 61    SUB   A,0x61
    1A77: 53 76    MOV   [__rY],A
    1A79: 52 06    MOV   A,[X+6]
    1A7B: 31 80    XOR   A,0x80
    1A7D: 19 80    SBB   A,0x80
    1A7F: C2 0B    JC    0x1C8B
    1A81: 2A 76    OR    A,[__rY]
    1A83: A0 15    JZ    0x1A99
    1A85: 3D 06 00 CMP   [X+6],0x0
    1A88: B0 06    JNZ   0x1A8F
    1A8A: 3D 07 6D CMP   [X+7],0x6D
    1A8D: A0 03    JZ    0x1A91
    1A8F: 81 FB    JMP   0x1C8B
(0298) 			{
(0299) 				case 'm': fanMode = 0; break;
    1A91: 62 D0 00 MOV   REG[0xD0],0x0
    1A94: 55 A0 00 MOV   [fanMode],0x0
    1A97: 80 07    JMP   0x1A9F
(0300) 				case 'a': fanMode = 1; break;
    1A99: 62 D0 00 MOV   REG[0xD0],0x0
    1A9C: 55 A0 01 MOV   [fanMode],0x1
(0301) 				default: goto error;
(0302) 			}
(0303) 			CheckFan();
    1A9F: 99 6D    CALL  _CheckFan
(0304) 			
(0305) 			MotorDriver_Stop();
    1AA1: 10       PUSH  X
    1AA2: 7C 0B B2 LCALL _MotorDriver_Stop
    1AA5: 20       POP   X
(0306) 			switch (speed)
    1AA6: 52 05    MOV   A,[X+5]
    1AA8: 54 09    MOV   [X+9],A
    1AAA: 56 08 00 MOV   [X+8],0x0
    1AAD: 3D 08 00 CMP   [X+8],0x0
    1AB0: B0 06    JNZ   0x1AB7
    1AB2: 3D 09 68 CMP   [X+9],0x68
    1AB5: A0 47    JZ    0x1AFD
    1AB7: 3D 08 00 CMP   [X+8],0x0
    1ABA: B0 06    JNZ   0x1AC1
    1ABC: 3D 09 6C CMP   [X+9],0x6C
    1ABF: A0 0D    JZ    0x1ACD
    1AC1: 3D 08 00 CMP   [X+8],0x0
    1AC4: B0 06    JNZ   0x1ACB
    1AC6: 3D 09 6D CMP   [X+9],0x6D
    1AC9: A0 1B    JZ    0x1AE5
    1ACB: 81 BF    JMP   0x1C8B
(0307) 			{
(0308) 				case 'l':
(0309) 					fanSpeed = 0;
    1ACD: 62 D0 00 MOV   REG[0xD0],0x0
    1AD0: 55 97 00 MOV   [fanSpeed],0x0
(0310) 					
(0311) 					MotorDriver_WritePeriod(1999);
    1AD3: 10       PUSH  X
    1AD4: 57 07    MOV   X,0x7
    1AD6: 50 CF    MOV   A,0xCF
    1AD8: 7C 0B B6 LCALL _MotorDriver_WritePeriod
(0312) 					MotorDriver_WriteCompareValue(1000);
    1ADB: 57 03    MOV   X,0x3
    1ADD: 50 E8    MOV   A,0xE8
    1ADF: 7C 0B BC LCALL _MotorDriver_WriteCompareValue
    1AE2: 20       POP   X
(0313) 					break;
    1AE3: 80 2F    JMP   0x1B13
(0314) 					
(0315) 				case 'm':
(0316) 					fanSpeed = 1;
    1AE5: 62 D0 00 MOV   REG[0xD0],0x0
    1AE8: 55 97 01 MOV   [fanSpeed],0x1
(0317) 					
(0318) 					MotorDriver_WritePeriod(9999);
    1AEB: 10       PUSH  X
    1AEC: 57 27    MOV   X,0x27
    1AEE: 50 0F    MOV   A,0xF
    1AF0: 7C 0B B6 LCALL _MotorDriver_WritePeriod
(0319) 					MotorDriver_WriteCompareValue(5000);
    1AF3: 57 13    MOV   X,0x13
    1AF5: 50 88    MOV   A,0x88
    1AF7: 7C 0B BC LCALL _MotorDriver_WriteCompareValue
    1AFA: 20       POP   X
(0320) 					break;
    1AFB: 80 17    JMP   0x1B13
(0321) 					
(0322) 				case 'h':
(0323) 					fanSpeed = 2;
    1AFD: 62 D0 00 MOV   REG[0xD0],0x0
    1B00: 55 97 02 MOV   [fanSpeed],0x2
(0324) 					
(0325) 					MotorDriver_WritePeriod(49999);
    1B03: 10       PUSH  X
    1B04: 57 C3    MOV   X,0xC3
    1B06: 50 4F    MOV   A,0x4F
    1B08: 7C 0B B6 LCALL _MotorDriver_WritePeriod
(0326) 					MotorDriver_WriteCompareValue(25000);
    1B0B: 57 61    MOV   X,0x61
    1B0D: 50 A8    MOV   A,0xA8
    1B0F: 7C 0B BC LCALL _MotorDriver_WriteCompareValue
    1B12: 20       POP   X
(0327) 					break;
(0328) 					
(0329) 				default: goto error;
(0330) 			}
(0331) 			MotorDriver_Start();
    1B13: 10       PUSH  X
    1B14: 7C 0B AE LCALL _MotorDriver_Start
    1B17: 20       POP   X
(0332) 		}
(0333) 		else 
(0334) 			goto error;
(0335) 		
(0336) 		if (checkTemp)
    1B18: 62 D0 00 MOV   REG[0xD0],0x0
    1B1B: 3C 9D 00 CMP   [checkTemp],0x0
    1B1E: A0 30    JZ    0x1B4F
(0337) 		{
(0338) 			char tempByte[2];
(0339) 			
(0340) 			ReadI2C(slaveAddress, 0xAA, 2, tempByte);
    1B20: 62 D0 00 MOV   REG[0xD0],0x0
    1B23: 5A 82    MOV   [__r1],X
    1B25: 06 82 04 ADD   [__r1],0x4
    1B28: 50 07    MOV   A,0x7
    1B2A: 08       PUSH  A
    1B2B: 51 82    MOV   A,[__r1]
    1B2D: 08       PUSH  A
    1B2E: 50 00    MOV   A,0x0
    1B30: 08       PUSH  A
    1B31: 50 02    MOV   A,0x2
    1B33: 08       PUSH  A
    1B34: 50 AA    MOV   A,0xAA
    1B36: 08       PUSH  A
    1B37: 62 D0 00 MOV   REG[0xD0],0x0
    1B3A: 51 9F    MOV   A,[main.c:slaveAddress]
    1B3C: 08       PUSH  A
    1B3D: 7C 12 DE LCALL _ReadI2C
    1B40: 38 FA    ADD   SP,0xFA
(0341) 			curTemp = tempByte[0];
    1B42: 52 04    MOV   A,[X+4]
    1B44: 62 D0 00 MOV   REG[0xD0],0x0
    1B47: 53 9C    MOV   [curTemp],A
(0342) 			checkTemp = FALSE;	
    1B49: 62 D0 00 MOV   REG[0xD0],0x0
    1B4C: 55 9D 00 MOV   [checkTemp],0x0
(0343) 		}
(0344) 		
(0345) 		if (lcdUpdate)
    1B4F: 62 D0 00 MOV   REG[0xD0],0x0
    1B52: 3C 9E 00 CMP   [lcdUpdate],0x0
    1B55: A1 35    JZ    0x1C8B
(0346) 		{
(0347) 			char buf[17];
(0348) 			__flash char *sThermMode;
(0349) 			__flash char *sFanMode;
(0350) 			
(0351) 			switch (thermostatMode)
    1B57: 62 D0 00 MOV   REG[0xD0],0x0
    1B5A: 51 96    MOV   A,[thermostatMode]
    1B5C: 54 1A    MOV   [X+26],A
    1B5E: 56 19 00 MOV   [X+25],0x0
    1B61: 3D 19 00 CMP   [X+25],0x0
    1B64: B0 06    JNZ   0x1B6B
    1B66: 3D 1A 00 CMP   [X+26],0x0
    1B69: A0 17    JZ    0x1B81
    1B6B: 3D 19 00 CMP   [X+25],0x0
    1B6E: B0 06    JNZ   0x1B75
    1B70: 3D 1A 01 CMP   [X+26],0x1
    1B73: A0 15    JZ    0x1B89
    1B75: 3D 19 00 CMP   [X+25],0x0
    1B78: B0 06    JNZ   0x1B7F
    1B7A: 3D 1A 02 CMP   [X+26],0x2
    1B7D: A0 13    JZ    0x1B91
    1B7F: 80 17    JMP   0x1B97
(0352) 			{
(0353) 				case 0: sThermMode = "OFF "; break;
    1B81: 56 18 FE MOV   [X+24],0xFE
    1B84: 56 17 03 MOV   [X+23],0x3
    1B87: 80 0F    JMP   0x1B97
(0354) 				case 1: sThermMode = "HEAT"; break;
    1B89: 56 18 F9 MOV   [X+24],0xF9
    1B8C: 56 17 03 MOV   [X+23],0x3
    1B8F: 80 07    JMP   0x1B97
(0355) 				case 2:	sThermMode = "COOL"; break;
    1B91: 56 18 F4 MOV   [X+24],0xF4
    1B94: 56 17 03 MOV   [X+23],0x3
(0356) 			}
(0357) 			
(0358) 			if (fanMode == 0 || Tout_Data_ADDR & Tout_MASK)
    1B97: 62 D0 00 MOV   REG[0xD0],0x0
    1B9A: 3C A0 00 CMP   [fanMode],0x0
    1B9D: A0 0D    JZ    0x1BAB
    1B9F: 5D 04    MOV   A,REG[0x4]
    1BA1: 62 D0 00 MOV   REG[0xD0],0x0
    1BA4: 53 83    MOV   [__r0],A
    1BA6: 47 83 10 TST   [__r0],0x10
    1BA9: A0 43    JZ    0x1BED
(0359) 			{
(0360) 				switch (fanSpeed)
    1BAB: 62 D0 00 MOV   REG[0xD0],0x0
    1BAE: 51 97    MOV   A,[fanSpeed]
    1BB0: 54 1C    MOV   [X+28],A
    1BB2: 56 1B 00 MOV   [X+27],0x0
    1BB5: 3D 1B 00 CMP   [X+27],0x0
    1BB8: B0 06    JNZ   0x1BBF
    1BBA: 3D 1C 00 CMP   [X+28],0x0
    1BBD: A0 17    JZ    0x1BD5
    1BBF: 3D 1B 00 CMP   [X+27],0x0
    1BC2: B0 06    JNZ   0x1BC9
    1BC4: 3D 1C 01 CMP   [X+28],0x1
    1BC7: A0 15    JZ    0x1BDD
    1BC9: 3D 1B 00 CMP   [X+27],0x0
    1BCC: B0 06    JNZ   0x1BD3
    1BCE: 3D 1C 02 CMP   [X+28],0x2
    1BD1: A0 13    JZ    0x1BE5
    1BD3: 80 1F    JMP   0x1BF3
(0361) 				{
(0362) 					case 0: sFanMode = "LO "; break;
    1BD5: 56 16 F0 MOV   [X+22],0xF0
    1BD8: 56 15 03 MOV   [X+21],0x3
    1BDB: 80 17    JMP   0x1BF3
(0363) 					case 1: sFanMode = "MD "; break;
    1BDD: 56 16 EC MOV   [X+22],0xEC
    1BE0: 56 15 03 MOV   [X+21],0x3
    1BE3: 80 0F    JMP   0x1BF3
(0364) 					case 2: sFanMode = "HI "; break;
    1BE5: 56 16 E8 MOV   [X+22],0xE8
    1BE8: 56 15 03 MOV   [X+21],0x3
(0365) 				}
(0366) 			}
    1BEB: 80 07    JMP   0x1BF3
(0367) 			else 
(0368) 				sFanMode = "OFF";
    1BED: 56 16 E4 MOV   [X+22],0xE4
    1BF0: 56 15 03 MOV   [X+21],0x3
(0369) 			
(0370) 			csprintf(buf, "CUR: %03i %s", curTemp, sThermMode);
    1BF3: 52 17    MOV   A,[X+23]
    1BF5: 08       PUSH  A
    1BF6: 52 18    MOV   A,[X+24]
    1BF8: 08       PUSH  A
    1BF9: 62 D0 00 MOV   REG[0xD0],0x0
    1BFC: 51 9C    MOV   A,[curTemp]
    1BFE: 62 D0 00 MOV   REG[0xD0],0x0
    1C01: 53 82    MOV   [__r1],A
    1C03: 50 00    MOV   A,0x0
    1C05: 08       PUSH  A
    1C06: 51 82    MOV   A,[__r1]
    1C08: 08       PUSH  A
    1C09: 50 03    MOV   A,0x3
    1C0B: 08       PUSH  A
    1C0C: 50 D7    MOV   A,0xD7
    1C0E: 08       PUSH  A
    1C0F: 5A 82    MOV   [__r1],X
    1C11: 06 82 04 ADD   [__r1],0x4
    1C14: 50 07    MOV   A,0x7
    1C16: 08       PUSH  A
    1C17: 51 82    MOV   A,[__r1]
    1C19: 08       PUSH  A
    1C1A: 7C 2B 57 LCALL _csprintf
    1C1D: 38 F8    ADD   SP,0xF8
(0371) 			LCD_Position(0, 0); LCD_PrString(buf);
    1C1F: 10       PUSH  X
    1C20: 50 00    MOV   A,0x0
    1C22: 57 00    MOV   X,0x0
    1C24: 7C 0D 8B LCALL _LCD_Position
    1C27: 20       POP   X
    1C28: 62 D0 00 MOV   REG[0xD0],0x0
    1C2B: 5A 82    MOV   [__r1],X
    1C2D: 06 82 04 ADD   [__r1],0x4
    1C30: 10       PUSH  X
    1C31: 50 07    MOV   A,0x7
    1C33: 08       PUSH  A
    1C34: 51 82    MOV   A,[__r1]
    1C36: 5C       MOV   X,A
    1C37: 18       POP   A
    1C38: 7C 0C 42 LCALL _LCD_PrString
    1C3B: 20       POP   X
(0372) 			
(0373) 			csprintf(buf, "SET: %03i FAN %s", setTemp, sFanMode);
    1C3C: 52 15    MOV   A,[X+21]
    1C3E: 08       PUSH  A
    1C3F: 52 16    MOV   A,[X+22]
    1C41: 08       PUSH  A
    1C42: 62 D0 00 MOV   REG[0xD0],0x0
    1C45: 51 9A    MOV   A,[setTemp]
    1C47: 62 D0 00 MOV   REG[0xD0],0x0
    1C4A: 53 82    MOV   [__r1],A
    1C4C: 50 00    MOV   A,0x0
    1C4E: 08       PUSH  A
    1C4F: 51 82    MOV   A,[__r1]
    1C51: 08       PUSH  A
    1C52: 50 03    MOV   A,0x3
    1C54: 08       PUSH  A
    1C55: 50 C6    MOV   A,0xC6
    1C57: 08       PUSH  A
    1C58: 5A 82    MOV   [__r1],X
    1C5A: 06 82 04 ADD   [__r1],0x4
    1C5D: 50 07    MOV   A,0x7
    1C5F: 08       PUSH  A
    1C60: 51 82    MOV   A,[__r1]
    1C62: 08       PUSH  A
    1C63: 7C 2B 57 LCALL _csprintf
    1C66: 38 F8    ADD   SP,0xF8
(0374) 			LCD_Position(1, 0); LCD_PrString(buf);
    1C68: 10       PUSH  X
    1C69: 57 00    MOV   X,0x0
    1C6B: 50 01    MOV   A,0x1
    1C6D: 7C 0D 8B LCALL _LCD_Position
    1C70: 20       POP   X
    1C71: 62 D0 00 MOV   REG[0xD0],0x0
    1C74: 5A 82    MOV   [__r1],X
    1C76: 06 82 04 ADD   [__r1],0x4
    1C79: 10       PUSH  X
    1C7A: 50 07    MOV   A,0x7
    1C7C: 08       PUSH  A
    1C7D: 51 82    MOV   A,[__r1]
    1C7F: 5C       MOV   X,A
    1C80: 18       POP   A
    1C81: 7C 0C 42 LCALL _LCD_PrString
    1C84: 20       POP   X
(0375) 			
(0376) 			lcdUpdate = FALSE;
    1C85: 62 D0 00 MOV   REG[0xD0],0x0
    1C88: 55 9E 00 MOV   [lcdUpdate],0x0
(0377) 		}
(0378) 		
(0379) 		error: // This outputs an invalid format message and continues on to read another line
(0380) 			UART_CPutString("# Invalid format entered. Valid formats are:\r\n\
    1C8B: 10       PUSH  X
    1C8C: 50 01    MOV   A,0x1
    1C8E: 08       PUSH  A
    1C8F: 50 A0    MOV   A,0xA0
    1C91: 5C       MOV   X,A
    1C92: 18       POP   A
    1C93: 7C 0B 2B LCALL _UART_CPutString
    1C96: 20       POP   X
(0381) #	S ##\r\n\
(0382) #		S - Set the desired Temperature\r\n\
(0383) #		## - Desired temperature in celsius\r\n\
(0384) #\r\n\
(0385) #	T ##\r\n\
(0386) #		T - Set the desired tolerance\r\n\
(0387) #		## - Desired tolerance in celsius\r\n\
(0388) #\r\n\
(0389) #	M X\r\n\
(0390) #		M - Change the mode of the thermostat\r\n\
(0391) #		X - C is for cool, H is for heat, F is for off\r\n\
(0392) #\r\n\
(0393) #	F X S\r\n\
(0394) #		F - Change the mode of the fan\r\n\
(0395) #		X - A is for automatic fan control, M is for always on\r\n\
(0396) #		S - Speed of the fan, H = high, M = medium, L = low\r\n\
(0397) #####################################################################\r\n");
(0398) 	}
    1C97: 88 52    JMP   0x14EA
    1C99: 38 E3    ADD   SP,0xE3
    1C9B: 20       POP   X
    1C9C: 8F FF    JMP   0x1C9C
(0399) }
(0400) 
(0401) void PSoC_GPIO_ISR_C(void)
(0402) {
_PSoC_GPIO_ISR_C:
    1C9E: 71 C0    OR    F,0xC0
    1CA0: 08       PUSH  A
    1CA1: 5D D0    MOV   A,REG[0xD0]
    1CA3: 08       PUSH  A
    1CA4: 5D D3    MOV   A,REG[0xD3]
    1CA6: 08       PUSH  A
    1CA7: 5D D4    MOV   A,REG[0xD4]
    1CA9: 08       PUSH  A
    1CAA: 5D D5    MOV   A,REG[0xD5]
    1CAC: 08       PUSH  A
    1CAD: 62 D0 00 MOV   REG[0xD0],0x0
    1CB0: 51 83    MOV   A,[__r0]
    1CB2: 08       PUSH  A
    1CB3: 51 82    MOV   A,[__r1]
    1CB5: 08       PUSH  A
    1CB6: 51 81    MOV   A,[__r2]
    1CB8: 08       PUSH  A
    1CB9: 51 80    MOV   A,[__r3]
    1CBB: 08       PUSH  A
    1CBC: 51 7F    MOV   A,[__r4]
    1CBE: 08       PUSH  A
    1CBF: 51 7E    MOV   A,[__r5]
    1CC1: 08       PUSH  A
    1CC2: 51 7D    MOV   A,[__r6]
    1CC4: 08       PUSH  A
    1CC5: 51 7C    MOV   A,[__r7]
    1CC7: 08       PUSH  A
    1CC8: 51 7B    MOV   A,[__r8]
    1CCA: 08       PUSH  A
    1CCB: 51 7A    MOV   A,[__r9]
    1CCD: 08       PUSH  A
    1CCE: 51 79    MOV   A,[__r10]
    1CD0: 08       PUSH  A
    1CD1: 51 78    MOV   A,[__r11]
    1CD3: 08       PUSH  A
    1CD4: 51 77    MOV   A,[__rX]
    1CD6: 08       PUSH  A
    1CD7: 51 76    MOV   A,[__rY]
    1CD9: 08       PUSH  A
    1CDA: 51 75    MOV   A,[__rZ]
    1CDC: 08       PUSH  A
(0403) 	if (fanMode == 1 && thermostatMode != 0)
    1CDD: 62 D0 00 MOV   REG[0xD0],0x0
    1CE0: 3C A0 01 CMP   [fanMode],0x1
    1CE3: B0 27    JNZ   0x1D0B
    1CE5: 62 D0 00 MOV   REG[0xD0],0x0
    1CE8: 3C 96 00 CMP   [thermostatMode],0x0
    1CEB: A0 1F    JZ    0x1D0B
(0404) 	{
(0405) 		if (Tout_Data_ADDR & Tout_MASK)
    1CED: 5D 04    MOV   A,REG[0x4]
    1CEF: 62 D0 00 MOV   REG[0xD0],0x0
    1CF2: 53 83    MOV   [__r0],A
    1CF4: 47 83 10 TST   [__r0],0x10
    1CF7: A0 08    JZ    0x1D00
(0406) 			MotorDriver_Start();
    1CF9: 10       PUSH  X
    1CFA: 7C 0B AE LCALL _MotorDriver_Start
    1CFD: 20       POP   X
    1CFE: 80 06    JMP   0x1D05
(0407) 		else
(0408) 			MotorDriver_Stop();
    1D00: 10       PUSH  X
    1D01: 7C 0B B2 LCALL _MotorDriver_Stop
    1D04: 20       POP   X
(0409) 		lcdUpdate = TRUE;
    1D05: 62 D0 00 MOV   REG[0xD0],0x0
    1D08: 55 9E 01 MOV   [lcdUpdate],0x1
(0410) 	}
    1D0B: 62 D0 00 MOV   REG[0xD0],0x0
    1D0E: 18       POP   A
    1D0F: 53 75    MOV   [__rZ],A
    1D11: 18       POP   A
    1D12: 53 76    MOV   [__rY],A
    1D14: 18       POP   A
    1D15: 53 77    MOV   [__rX],A
    1D17: 18       POP   A
    1D18: 53 78    MOV   [__r11],A
    1D1A: 18       POP   A
    1D1B: 53 79    MOV   [__r10],A
    1D1D: 18       POP   A
    1D1E: 53 7A    MOV   [__r9],A
    1D20: 18       POP   A
    1D21: 53 7B    MOV   [__r8],A
    1D23: 18       POP   A
    1D24: 53 7C    MOV   [__r7],A
    1D26: 18       POP   A
    1D27: 53 7D    MOV   [__r6],A
    1D29: 18       POP   A
    1D2A: 53 7E    MOV   [__r5],A
    1D2C: 18       POP   A
    1D2D: 53 7F    MOV   [__r4],A
    1D2F: 18       POP   A
    1D30: 53 80    MOV   [__r3],A
    1D32: 18       POP   A
    1D33: 53 81    MOV   [__r2],A
    1D35: 18       POP   A
    1D36: 53 82    MOV   [__r1],A
    1D38: 18       POP   A
    1D39: 53 83    MOV   [__r0],A
    1D3B: 18       POP   A
    1D3C: 60 D5    MOV   REG[0xD5],A
    1D3E: 18       POP   A
    1D3F: 60 D4    MOV   REG[0xD4],A
    1D41: 18       POP   A
    1D42: 60 D3    MOV   REG[0xD3],A
    1D44: 18       POP   A
    1D45: 60 D0    MOV   REG[0xD0],A
    1D47: 18       POP   A
    1D48: 7E       RETI  
(0411) }
(0412) 
(0413) void PSoC_TempCounter_ISR_C(void)
(0414) {
_PSoC_TempCounter_ISR_C:
    1D49: 71 C0    OR    F,0xC0
    1D4B: 08       PUSH  A
    1D4C: 5D D0    MOV   A,REG[0xD0]
    1D4E: 08       PUSH  A
(0415) 	checkTemp = TRUE;
    1D4F: 62 D0 00 MOV   REG[0xD0],0x0
    1D52: 55 9D 01 MOV   [checkTemp],0x1
(0416) 	lcdUpdate = TRUE;
    1D55: 62 D0 00 MOV   REG[0xD0],0x0
    1D58: 55 9E 01 MOV   [lcdUpdate],0x1
    1D5B: 18       POP   A
    1D5C: 60 D0    MOV   REG[0xD0],A
    1D5E: 18       POP   A
    1D5F: 7E       RETI  
(0417) }
(0418) 
(0419) void PSoC_MotorDriver_ISR_C(void)
(0420) {
_PSoC_MotorDriver_ISR_C:
    1D60: 71 C0    OR    F,0xC0
    1D62: 08       PUSH  A
    1D63: 5D D0    MOV   A,REG[0xD0]
    1D65: 08       PUSH  A
    1D66: 5D D4    MOV   A,REG[0xD4]
    1D68: 08       PUSH  A
    1D69: 62 D0 00 MOV   REG[0xD0],0x0
    1D6C: 51 83    MOV   A,[__r0]
    1D6E: 08       PUSH  A
    1D6F: 51 82    MOV   A,[__r1]
    1D71: 08       PUSH  A
(0421) 	if (thermostatMode == 1) // Heating, clockwise
    1D72: 62 D0 00 MOV   REG[0xD0],0x0
    1D75: 3C 96 01 CMP   [thermostatMode],0x1
    1D78: B0 23    JNZ   0x1D9C
(0422) 	{
(0423) 		if (++motorStep > 3)
    1D7A: 62 D0 00 MOV   REG[0xD0],0x0
    1D7D: 51 98    MOV   A,[motorStep]
    1D7F: 01 01    ADD   A,0x1
    1D81: 62 D0 00 MOV   REG[0xD0],0x0
    1D84: 53 83    MOV   [__r0],A
    1D86: 62 D0 00 MOV   REG[0xD0],0x0
    1D89: 53 98    MOV   [motorStep],A
    1D8B: 62 D0 00 MOV   REG[0xD0],0x0
    1D8E: 50 03    MOV   A,0x3
    1D90: 3A 83    CMP   A,[__r0]
    1D92: D0 27    JNC   0x1DBA
(0424) 			motorStep = 0;
    1D94: 62 D0 00 MOV   REG[0xD0],0x0
    1D97: 55 98 00 MOV   [motorStep],0x0
(0425) 	}
    1D9A: 80 1F    JMP   0x1DBA
(0426) 	else if (thermostatMode == 2) // Cooling
    1D9C: 62 D0 00 MOV   REG[0xD0],0x0
    1D9F: 3C 96 02 CMP   [thermostatMode],0x2
    1DA2: B0 17    JNZ   0x1DBA
(0427) 	{
(0428) 		if (--motorStep < 0)
    1DA4: 62 D0 00 MOV   REG[0xD0],0x0
    1DA7: 51 98    MOV   A,[motorStep]
    1DA9: 11 01    SUB   A,0x1
    1DAB: 53 98    MOV   [motorStep],A
    1DAD: 62 D0 00 MOV   REG[0xD0],0x0
    1DB0: 39 00    CMP   A,0x0
    1DB2: D0 07    JNC   0x1DBA
(0429) 			motorStep = 3;
    1DB4: 62 D0 00 MOV   REG[0xD0],0x0
    1DB7: 55 98 03 MOV   [motorStep],0x3
(0430) 	}
(0431) 	
(0432) 	Motor1_Data_ADDR = stepperSequence[motorStep];
    1DBA: 62 D0 00 MOV   REG[0xD0],0x0
    1DBD: 51 98    MOV   A,[motorStep]
    1DBF: 62 D0 00 MOV   REG[0xD0],0x0
    1DC2: 53 82    MOV   [__r1],A
    1DC4: 55 83 00 MOV   [__r0],0x0
    1DC7: 06 82 84 ADD   [__r1],0x84
    1DCA: 0E 83 00 ADC   [__r0],0x0
    1DCD: 51 83    MOV   A,[__r0]
    1DCF: 60 D4    MOV   REG[0xD4],A
    1DD1: 3E 82    MVI   A,[__r1]
    1DD3: 60 00    MOV   REG[0x0],A
    1DD5: 62 D0 00 MOV   REG[0xD0],0x0
    1DD8: 18       POP   A
    1DD9: 53 82    MOV   [__r1],A
    1DDB: 18       POP   A
    1DDC: 53 83    MOV   [__r0],A
    1DDE: 18       POP   A
    1DDF: 60 D4    MOV   REG[0xD4],A
    1DE1: 18       POP   A
    1DE2: 60 D0    MOV   REG[0xD0],A
    1DE4: 18       POP   A
    1DE5: 7E       RETI  
