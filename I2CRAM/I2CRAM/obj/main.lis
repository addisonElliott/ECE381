 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _rubout:
 0000 0820              .byte 8,32
 0002 0800              .byte 8,0
 0004                   .dbfile C:\Users\Jacob\Desktop\ECE381\I2CRAM\I2CRAM\main.c
 0004                   .dbsym s rubout _rubout A[4:4]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Jacob\Desktop\ECE381\I2CRAM\I2CRAM\main.c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Users\Jacob\Desktop\ECE381\I2CRAM\I2CRAM\main.c
 0000                   .dbfunc e GetNumber _GetNumber fc
 0000           ;              c -> X+0
 0000           ;            max -> X-5
 0000           ;            min -> X-4
 0000           _GetNumber::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3801              add SP,1
 0004                   .dbline 19
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "string.h"
 0004           ; #include "stdio.h"
 0004           ; #include "ctype.h"
 0004           ; 
 0004           ; static char rubout[4] = { 0x08, 0x20, 0x08, 0x00 }; // Rubout Sequence consists of Backspace Space Backspace. This is the null-terminated string
 0004           ; 
 0004           ; char buf[80];
 0004           ; char data[256];
 0004           ; 
 0004           ; // This function reads characters from the serial until a character is entered that is within the min & max ASCII characters.
 0004           ; // That character is returned
 0004           ; char GetNumber(char min, char max)
 0004           ; {
 0004 8034              xjmp L3
 0006           L2:
 0006                   .dbline 23
 0006           ;       char c;
 0006           ;       
 0006           ;       while (1)
 0006           ;       {
 0006                   .dbline 24
 0006           ;               c = UART_cReadChar(); // Read the character
 0006 10                push X
 0007 7C0000            xcall _UART_cReadChar
 000A 20                pop X
 000B 62D000            mov REG[0xd0],>__r0
 000E 5400              mov [X+0],A
 0010                   .dbline 25
 0010           ;               if (c < ('0' + min) || c > ('0' + max)) // If the character is not within min to max range, continue the loop
 0010 52FC              mov A,[X-4]
 0012 0130              add A,48
 0014 5300              mov [__r0],A
 0016 5200              mov A,[X+0]
 0018 3A00              cmp A,[__r0]
 001A C00C              jc L7
 001C           X1:
 001C 62D000            mov REG[0xd0],>__r0
 001F 52FB              mov A,[X-5]
 0021 0130              add A,48
 0023 3B00              cmp A,[X+0]
 0025 D003              jnc L5
 0027           X2:
 0027           L7:
 0027                   .dbline 26
 0027           ;                       continue;
 0027 8011              xjmp L3
 0029           L5:
 0029                   .dbline 28
 0029           ;               
 0029           ;               UART_PutChar(c); // Put the character on the serial
 0029 10                push X
 002A 5200              mov A,[X+0]
 002C 7C0000            xcall _UART_PutChar
 002F 20                pop X
 0030                   .dbline 29
 0030           ;               return (c - '0'); // This returns the integer number entered instead of the ASCII value
 0030 62D000            mov REG[0xd0],>__r0
 0033 5200              mov A,[X+0]
 0035 1130              sub A,48
 0037 8003              xjmp L1
 0039           L3:
 0039                   .dbline 22
 0039 8FCC              xjmp L2
 003B           X0:
 003B                   .dbline -2
 003B           L1:
 003B 38FF              add SP,-1
 003D 20                pop X
 003E                   .dbline 0 ; func end
 003E 7F                ret
 003F                   .dbsym l c 0 c
 003F                   .dbsym l max -5 c
 003F                   .dbsym l min -4 c
 003F                   .dbend
 003F                   .dbfunc e GetLine _GetLine fc
 003F           ;         strPos -> X+1
 003F           ;              c -> X+0
 003F           ;      bufferLen -> X-6
 003F           ;         buffer -> X-5
 003F           _GetLine::
 003F                   .dbline -1
 003F 10                push X
 0040 4F                mov X,SP
 0041 3802              add SP,2
 0043                   .dbline 38
 0043           ;       }
 0043           ;       
 0043           ;       return 0;
 0043           ; }
 0043           ; 
 0043           ; // This function get's a line of text. It writes data into buffer with a maximum size of bufferLen. The function returns number of bytes written
 0043           ; // when enter is pressed
 0043           ; char GetLine(char *buffer, char bufferLen)
 0043           ; {
 0043                   .dbline 40
 0043           ;       char c;
 0043           ;       char strPos = 0; // Current position in the string
 0043 560100            mov [X+1],0
 0046                   .dbline 42
 0046           ;       
 0046           ;       UART_PutChar('>');
 0046 10                push X
 0047 503E              mov A,62
 0049 7C0000            xcall _UART_PutChar
 004C 20                pop X
 004D 8094              xjmp L10
 004F           L9:
 004F                   .dbline 45
 004F           ;       
 004F           ;       while (1)
 004F           ;       {
 004F                   .dbline 46
 004F           ;               c = UART_cReadChar(); // Read the character
 004F 10                push X
 0050 7C0000            xcall _UART_cReadChar
 0053 20                pop X
 0054 62D000            mov REG[0xd0],>__r0
 0057 5400              mov [X+0],A
 0059                   .dbline 48
 0059           ;               
 0059           ;               if (c == 0x08 || c == 0x7F) // Delete or backspace pressed
 0059 3D0008            cmp [X+0],8
 005C A006              jz L14
 005E 3D007F            cmp [X+0],127
 0061 B017              jnz L12
 0063           L14:
 0063                   .dbline 50
 0063           ;               {
 0063           ;                       if (strPos > 0) // Only delete if there are characters to delete
 0063                   .dbline 50
 0063 5000              mov A,0
 0065 3B01              cmp A,[X+1]
 0067 D07A              jnc L13
 0069           X4:
 0069                   .dbline 52
 0069           ;                       {
 0069           ;                               strPos--; // Set the position back one
 0069                   .dbline 52
 0069 7B01              dec [X+1]
 006B                   .dbline 53
 006B           ;                               UART_PutString(rubout); // Sends the rubout sequence to the serial.
 006B 10                push X
 006C 5000              mov A,>_rubout
 006E 08                push A
 006F 5000              mov A,<_rubout
 0071 5C                mov X,A
 0072 18                pop A
 0073 7C0000            xcall _UART_PutString
 0076 20                pop X
 0077                   .dbline 54
 0077           ;                       }
 0077                   .dbline 55
 0077           ;               }
 0077 806A              xjmp L13
 0079           L12:
 0079                   .dbline 56
 0079           ;               else if (c == 0x0D) // Newline enter is pressed
 0079 3D000D            cmp [X+0],13
 007C B027              jnz L17
 007E                   .dbline 58
 007E           ;               {
 007E           ;                       buffer[strPos] = 0x00;
 007E                   .dbline 58
 007E 62D000            mov REG[0xd0],>__r0
 0081 5201              mov A,[X+1]
 0083 5300              mov [__r1],A
 0085 550000            mov [__r0],0
 0088 52FC              mov A,[X-4]
 008A 0400              add [__r1],A
 008C 52FB              mov A,[X-5]
 008E 0C00              adc [__r0],A
 0090 5100              mov A,[__r0]
 0092 60D5              mov REG[0xd5],A
 0094 5000              mov A,0
 0096 3F00              mvi [__r1],A
 0098                   .dbline 59
 0098           ;                       UART_PutCRLF(); // Go to another line
 0098 10                push X
 0099 7C0000            xcall _UART_PutCRLF
 009C 20                pop X
 009D                   .dbline 60
 009D           ;                       return strPos;
 009D 5201              mov A,[X+1]
 009F 62D000            mov REG[0xd0],>__r0
 00A2 8041              xjmp L8
 00A4           L17:
 00A4                   .dbline 62
 00A4           ;               }
 00A4           ;               else if (c >= 0x20 && c < 0x7F) // Only echo valid characters to the string. These are any alphabet, numeric, or symbols
 00A4 3D0020            cmp [X+0],32
 00A7 C03A              jc L19
 00A9           X5:
 00A9 3D007F            cmp [X+0],127
 00AC D035              jnc L19
 00AE           X6:
 00AE                   .dbline 64
 00AE           ;               {
 00AE           ;                       if (strPos < bufferLen) // If there is space in the buffer
 00AE                   .dbline 64
 00AE 5201              mov A,[X+1]
 00B0 3BFA              cmp A,[X-6]
 00B2 D028              jnc L21
 00B4           X7:
 00B4                   .dbline 66
 00B4           ;                       {
 00B4           ;                               buffer[strPos++] = c; // Set the current character in buffer to c and then increment strPos
 00B4                   .dbline 66
 00B4 62D000            mov REG[0xd0],>__r0
 00B7 5201              mov A,[X+1]
 00B9 5300              mov [__r1],A
 00BB 550000            mov [__r0],0
 00BE 0101              add A,1
 00C0 5401              mov [X+1],A
 00C2 52FC              mov A,[X-4]
 00C4 0400              add [__r1],A
 00C6 52FB              mov A,[X-5]
 00C8 0C00              adc [__r0],A
 00CA 5100              mov A,[__r0]
 00CC 60D5              mov REG[0xd5],A
 00CE 5200              mov A,[X+0]
 00D0 3F00              mvi [__r1],A
 00D2                   .dbline 67
 00D2           ;                               UART_PutChar(c); // Send the character to the computer
 00D2 10                push X
 00D3 5200              mov A,[X+0]
 00D5 7C0000            xcall _UART_PutChar
 00D8 20                pop X
 00D9                   .dbline 68
 00D9           ;                       }
 00D9 8008              xjmp L22
 00DB           L21:
 00DB                   .dbline 70
 00DB           ;                       else
 00DB           ;                               UART_PutChar(0x07); // Send BEL key because there is no more space left to add to the string
 00DB 10                push X
 00DC 5007              mov A,7
 00DE 7C0000            xcall _UART_PutChar
 00E1 20                pop X
 00E2           L22:
 00E2                   .dbline 71
 00E2           ;               }
 00E2           L19:
 00E2           L13:
 00E2                   .dbline 72
 00E2           ;       }
 00E2           L10:
 00E2                   .dbline 44
 00E2 8F6C              xjmp L9
 00E4           X3:
 00E4                   .dbline -2
 00E4           L8:
 00E4 38FE              add SP,-2
 00E6 20                pop X
 00E7                   .dbline 0 ; func end
 00E7 7F                ret
 00E8                   .dbsym l strPos 1 c
 00E8                   .dbsym l c 0 c
 00E8                   .dbsym l bufferLen -6 c
 00E8                   .dbsym l buffer -5 pc
 00E8                   .dbend
 00E8                   .dbfunc e HexConversion _HexConversion fI
 00E8           ;              i -> X+6
 00E8           ;           temp -> X+4
 00E8           ;            str -> X+2
 00E8           ;             ii -> X+0
 00E8           ;            dst -> X-7
 00E8           ;            src -> X-5
 00E8           _HexConversion::
 00E8                   .dbline -1
 00E8 10                push X
 00E9 4F                mov X,SP
 00EA 3808              add SP,8
 00EC                   .dbline 80
 00EC           ;       
 00EC           ;       return 0;
 00EC           ; }
 00EC           ; 
 00EC           ; // This takes a string that has hex such as 'A4 FF 01 04' and converts it into a string containing the hex files. Returns -1 if error, otherwise it returns
 00EC           ; // the number of bytes converted
 00EC           ; int HexConversion(char *src, char *dst)
 00EC           ; {
 00EC                   .dbline 82
 00EC           ;       char *str;
 00EC           ;     int i = 0;
 00EC 560700            mov [X+7],0
 00EF 560600            mov [X+6],0
 00F2                   .dbline 83
 00F2           ;     int ii = 0;
 00F2 560100            mov [X+1],0
 00F5 560000            mov [X+0],0
 00F8                   .dbline 86
 00F8           ;       int temp;
 00F8           ; 
 00F8           ;     str = cstrtok(src, " ");
 00F8 5064              mov A,>L24
 00FA 08                push A
 00FB 5064              mov A,<L24
 00FD 08                push A
 00FE 52FB              mov A,[X-5]
 0100 08                push A
 0101 52FC              mov A,[X-4]
 0103 08                push A
 0104 7C0000            xcall _cstrtok
 0107 38FC              add SP,-4
 0109 62D000            mov REG[0xd0],>__r0
 010C 5100              mov A,[__r1]
 010E 5403              mov [X+3],A
 0110 5100              mov A,[__r0]
 0112 5402              mov [X+2],A
 0114           L25:
 0114                   .dbline 88
 0114           ;     do
 0114           ;     {
 0114                   .dbline 89
 0114           ;         if (strlen(str) != 2)
 0114 5202              mov A,[X+2]
 0116 08                push A
 0117 5203              mov A,[X+3]
 0119 08                push A
 011A 7C0000            xcall _strlenLMM
 011D 38FE              add SP,-2
 011F 62D000            mov REG[0xd0],>__r0
 0122 3C0000            cmp [__r0],0
 0125 B006              jnz X8
 0127 3C0002            cmp [__r1],2
 012A A00C              jz L28
 012C           X8:
 012C                   .dbline 90
 012C           ;             return -1;
 012C 62D000            mov REG[0xd0],>__r0
 012F 5500FF            mov [__r1],-1
 0132 5500FF            mov [__r0],-1
 0135 80D3              xjmp L23
 0137           L28:
 0137                   .dbline 92
 0137           ; 
 0137           ;         for (ii = 0; ii < strlen(str); ++ii)
 0137 560100            mov [X+1],0
 013A 560000            mov [X+0],0
 013D 803C              xjmp L33
 013F           L30:
 013F                   .dbline 93
 013F           ;             if (!isxdigit(str[ii]))
 013F 62D000            mov REG[0xd0],>__r0
 0142 5201              mov A,[X+1]
 0144 0303              add A,[X+3]
 0146 5300              mov [__r1],A
 0148 5200              mov A,[X+0]
 014A 0B02              adc A,[X+2]
 014C 60D4              mov REG[0xd4],A
 014E 3E00              mvi A,[__r1]
 0150 5300              mov [__r1],A
 0152 5000              mov A,0
 0154 08                push A
 0155 5100              mov A,[__r1]
 0157 08                push A
 0158 7C0000            xcall _isxdigit
 015B 38FE              add SP,-2
 015D 62D000            mov REG[0xd0],>__r0
 0160 3C0000            cmp [__r0],0
 0163 B011              jnz L34
 0165 3C0000            cmp [__r1],0
 0168 B00C              jnz L34
 016A           X9:
 016A                   .dbline 94
 016A           ;                 return -1;
 016A 62D000            mov REG[0xd0],>__r0
 016D 5500FF            mov [__r1],-1
 0170 5500FF            mov [__r0],-1
 0173 8095              xjmp L23
 0175           L34:
 0175           L31:
 0175                   .dbline 92
 0175 7701              inc [X+1]
 0177 0F0000            adc [X+0],0
 017A           L33:
 017A                   .dbline 92
 017A 5202              mov A,[X+2]
 017C 08                push A
 017D 5203              mov A,[X+3]
 017F 08                push A
 0180 7C0000            xcall _strlenLMM
 0183 38FE              add SP,-2
 0185 62D000            mov REG[0xd0],>__r0
 0188 5201              mov A,[X+1]
 018A 1200              sub A,[__r1]
 018C 5200              mov A,[X+0]
 018E 1A00              sbb A,[__r0]
 0190 CFAE              jc L30
 0192           X10:
 0192                   .dbline 96
 0192           ; 
 0192           ;         csscanf(str, "%x", &temp);
 0192 62D000            mov REG[0xd0],>__r0
 0195 5A00              mov [__r1],X
 0197 060004            add [__r1],4
 019A 5007              mov A,7
 019C 08                push A
 019D 5100              mov A,[__r1]
 019F 08                push A
 01A0 5061              mov A,>L36
 01A2 08                push A
 01A3 5061              mov A,<L36
 01A5 08                push A
 01A6 5202              mov A,[X+2]
 01A8 08                push A
 01A9 5203              mov A,[X+3]
 01AB 08                push A
 01AC 7C0000            xcall _csscanf
 01AF                   .dbline 97
 01AF           ;               dst[i++] = temp;
 01AF 62D000            mov REG[0xd0],>__r0
 01B2 5207              mov A,[X+7]
 01B4 5300              mov [__r1],A
 01B6 5206              mov A,[X+6]
 01B8 5300              mov [__r0],A
 01BA 5100              mov A,[__r1]
 01BC 0101              add A,1
 01BE 5407              mov [X+7],A
 01C0 5100              mov A,[__r0]
 01C2 0900              adc A,0
 01C4 5406              mov [X+6],A
 01C6 5205              mov A,[X+5]
 01C8 5300              mov [__r2],A
 01CA 52FA              mov A,[X-6]
 01CC 0400              add [__r1],A
 01CE 52F9              mov A,[X-7]
 01D0 0C00              adc [__r0],A
 01D2 5100              mov A,[__r0]
 01D4 60D5              mov REG[0xd5],A
 01D6 5100              mov A,[__r2]
 01D8 3F00              mvi [__r1],A
 01DA                   .dbline 98
 01DA           ;         str = cstrtok(0x00, " ");
 01DA 5064              mov A,>L24
 01DC 08                push A
 01DD 5064              mov A,<L24
 01DF 08                push A
 01E0 5000              mov A,0
 01E2 08                push A
 01E3 08                push A
 01E4 7C0000            xcall _cstrtok
 01E7 38F6              add SP,-10
 01E9 62D000            mov REG[0xd0],>__r0
 01EC 5100              mov A,[__r1]
 01EE 5403              mov [X+3],A
 01F0 5100              mov A,[__r0]
 01F2 5402              mov [X+2],A
 01F4                   .dbline 99
 01F4           ;     } while (str != 0x00);
 01F4           L26:
 01F4                   .dbline 99
 01F4 3D0200            cmp [X+2],0
 01F7 BF1C              jnz L25
 01F9 3D0300            cmp [X+3],0
 01FC BF17              jnz L25
 01FE           X11:
 01FE                   .dbline 101
 01FE           ; 
 01FE           ;     return i;
 01FE 62D000            mov REG[0xd0],>__r0
 0201 5207              mov A,[X+7]
 0203 5300              mov [__r1],A
 0205 5206              mov A,[X+6]
 0207 5300              mov [__r0],A
 0209                   .dbline -2
 0209           L23:
 0209 38F8              add SP,-8
 020B 20                pop X
 020C                   .dbline 0 ; func end
 020C 7F                ret
 020D                   .dbsym l i 6 I
 020D                   .dbsym l temp 4 I
 020D                   .dbsym l str 2 pc
 020D                   .dbsym l ii 0 I
 020D                   .dbsym l dst -7 pc
 020D                   .dbsym l src -5 pc
 020D                   .dbend
 020D                   .dbfunc e Lowercase _Lowercase fpc
 020D           ;              i -> X+0
 020D           ;            str -> X-5
 020D           _Lowercase::
 020D                   .dbline -1
 020D 10                push X
 020E 4F                mov X,SP
 020F 3804              add SP,4
 0211                   .dbline 105
 0211           ; }
 0211           ; 
 0211           ; char *Lowercase(char *str)
 0211           ; {
 0211                   .dbline 107
 0211           ;       int i;
 0211           ;       for (i = 0; str[i] != '\0'; ++i)
 0211 560100            mov [X+1],0
 0214 560000            mov [X+0],0
 0217 8043              xjmp L41
 0219           L38:
 0219                   .dbline 108
 0219           ;               str[i] = tolower(str[i]);
 0219 62D000            mov REG[0xd0],>__r0
 021C 5201              mov A,[X+1]
 021E 03FC              add A,[X-4]
 0220 5300              mov [__r1],A
 0222 5200              mov A,[X+0]
 0224 0BFB              adc A,[X-5]
 0226 5300              mov [__r0],A
 0228 5100              mov A,[__r1]
 022A 5403              mov [X+3],A
 022C 5100              mov A,[__r0]
 022E 5402              mov [X+2],A
 0230 60D4              mov REG[0xd4],A
 0232 3E00              mvi A,[__r1]
 0234 7A00              dec [__r1]
 0236 5300              mov [__r3],A
 0238 5000              mov A,0
 023A 08                push A
 023B 5100              mov A,[__r3]
 023D 08                push A
 023E 7C0000            xcall _tolower
 0241 38FE              add SP,-2
 0243 62D000            mov REG[0xd0],>__r0
 0246 5100              mov A,[__r1]
 0248 5300              mov [__r0],A
 024A 5203              mov A,[X+3]
 024C 5300              mov [__r3],A
 024E 5202              mov A,[X+2]
 0250 60D5              mov REG[0xd5],A
 0252 5100              mov A,[__r0]
 0254 3F00              mvi [__r3],A
 0256           L39:
 0256                   .dbline 107
 0256 7701              inc [X+1]
 0258 0F0000            adc [X+0],0
 025B           L41:
 025B                   .dbline 107
 025B 62D000            mov REG[0xd0],>__r0
 025E 5201              mov A,[X+1]
 0260 03FC              add A,[X-4]
 0262 5300              mov [__r1],A
 0264 5200              mov A,[X+0]
 0266 0BFB              adc A,[X-5]
 0268 60D4              mov REG[0xd4],A
 026A 3E00              mvi A,[__r1]
 026C 3900              cmp A,0
 026E BFAA              jnz L38
 0270                   .dbline 110
 0270           ;       
 0270           ;       return str;
 0270 52FC              mov A,[X-4]
 0272 5300              mov [__r1],A
 0274 52FB              mov A,[X-5]
 0276 5300              mov [__r0],A
 0278                   .dbline -2
 0278           L37:
 0278 38FC              add SP,-4
 027A 20                pop X
 027B                   .dbline 0 ; func end
 027B 7F                ret
 027C                   .dbsym l i 0 I
 027C                   .dbsym l str -5 pc
 027C                   .dbend
 027C                   .dbfunc e main _main fV
 027C           ;         memLoc -> X+18
 027C           ;   groupAddress -> X+16
 027C           ;       dataType -> X+15
 027C           ;         hexStr -> X+11
 027C           ;       numBytes -> X+9
 027C           ;              i -> X+7
 027C           ;         memLoc -> X+12
 027C           ;            len -> X+10
 027C           ;   groupAddress -> X+8
 027C           ;       dataType -> X+7
 027C           ;         strLoc -> X+5
 027C           ;   slaveAddress -> X+4
 027C           ;            cmd -> X+2
 027C           ;         params -> X+0
 027C           _main::
 027C                   .dbline -1
 027C 10                push X
 027D 4F                mov X,SP
 027E 3814              add SP,20
 0280                   .dbline 114
 0280           ; }
 0280           ; 
 0280           ; void main(void)
 0280           ; {     
 0280                   .dbline 115
 0280           ;       M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
 0280 7101                      or  F, 01h
 0282           
 0282                   .dbline 117
 0282           ;       
 0282           ;       UART_Start(UART_PARITY_NONE);
 0282 10                push X
 0283 5000              mov A,0
 0285 7C0000            xcall _UART_Start
 0288                   .dbline 118
 0288           ;       Counter16_Start();
 0288 7C0000            xcall _Counter16_Start
 028B                   .dbline 120
 028B           ;       
 028B           ;       LCD_Start();
 028B 7C0000            xcall _LCD_Start
 028E                   .dbline 122
 028E           ;       
 028E           ;       I2CHW_Start();
 028E 7C0000            xcall _I2CHW_Start
 0291                   .dbline 123
 0291           ;       I2CHW_EnableMstr();
 0291 7C0000            xcall _I2CHW_EnableMstr
 0294                   .dbline 124
 0294           ;       I2CHW_EnableInt();
 0294 7C0000            xcall _I2CHW_EnableInt
 0297                   .dbline 126
 0297           ; 
 0297           ;       UART_CPutString("########################## I2C External SRAM ########################\r\n\
 0297 50B8              mov A,>L43
 0299 08                push A
 029A 50B8              mov A,<L43
 029C 5C                mov X,A
 029D 18                pop A
 029E 7C0000            xcall _UART_CPutString
 02A1 20                pop X
 02A2 8672              xjmp L45
 02A4           L44:
 02A4                   .dbline 144
 02A4           ; #     W # XX T [Data]\r\n\
 02A4           ; #             W    - Write command\r\n\
 02A4           ; #             #    - Group Address (0 - 7)\r\n\
 02A4           ; #             XX   - Memory Location in hex (00 - FF)\r\n\
 02A4           ; #             T    - Data Type, either A for ASCII or H for Hexadecimal\r\n\
 02A4           ; #             Data - Either ASCII string or Hexadecimal separates by spaces\r\n\
 02A4           ; #\t\t\tA - Mary had a little lamb\r\n\
 02A4           ; #\t\t\tH - 01 FF A0 0F D8 C3\r\n\
 02A4           ; #\r\n\
 02A4           ; #     R # XX T NN\r\n\
 02A4           ; #             R    - Read command\r\n\
 02A4           ; #             #    - Group Address (0 - 7)\r\n\
 02A4           ; #             XX   - Memory Location in hex (00 - FF)\r\n\
 02A4           ; #             T    - Data Type, either A for ASCII or H for Hexadecimal\r\n\
 02A4           ; #             NN       - Number of bytes to read in hexadecimal\r\n\
 02A4           ; #####################################################################\r\n");
 02A4           ;       while (1)
 02A4           ;       {
 02A4                   .dbline 147
 02A4           ;               char *cmd;
 02A4           ;               char *params;
 02A4           ;               char slaveAddress = 0x50;
 02A4 560450            mov [X+4],80
 02A7                   .dbline 148
 02A7           ;               int strLoc = -1;
 02A7 5606FF            mov [X+6],-1
 02AA 5605FF            mov [X+5],-1
 02AD                   .dbline 150
 02AD           ;               
 02AD           ;               GetLine(buf, 79); // Retrieves a line from UART
 02AD 504F              mov A,79
 02AF 08                push A
 02B0 5000              mov A,>_buf
 02B2 08                push A
 02B3 5000              mov A,<_buf
 02B5 08                push A
 02B6 9D87              xcall _GetLine
 02B8 38FD              add SP,-3
 02BA 62D000            mov REG[0xd0],>__r0
 02BD                   .dbline 152
 02BD           ;               
 02BD           ;               memset(data, 0x00, 256);
 02BD 5001              mov A,1
 02BF 08                push A
 02C0 5000              mov A,0
 02C2 08                push A
 02C3 08                push A
 02C4 08                push A
 02C5 5000              mov A,>_data
 02C7 08                push A
 02C8 5000              mov A,<_data
 02CA 08                push A
 02CB 7C0000            xcall _memsetLMM
 02CE                   .dbline 153
 02CE           ;               cmd = Lowercase(cstrtok(buf, " "));
 02CE 5064              mov A,>L24
 02D0 08                push A
 02D1 5064              mov A,<L24
 02D3 08                push A
 02D4 5000              mov A,>_buf
 02D6 08                push A
 02D7 5000              mov A,<_buf
 02D9 08                push A
 02DA 7C0000            xcall _cstrtok
 02DD 38F6              add SP,-10
 02DF 62D000            mov REG[0xd0],>__r0
 02E2 5100              mov A,[__r0]
 02E4 08                push A
 02E5 5100              mov A,[__r1]
 02E7 08                push A
 02E8 9F23              xcall _Lowercase
 02EA 62D000            mov REG[0xd0],>__r0
 02ED 5100              mov A,[__r1]
 02EF 5403              mov [X+3],A
 02F1 5100              mov A,[__r0]
 02F3 5402              mov [X+2],A
 02F5                   .dbline 154
 02F5           ;               if (strlen(cmd) == 1 && cmd[0] == 'w')
 02F5 5202              mov A,[X+2]
 02F7 08                push A
 02F8 5203              mov A,[X+3]
 02FA 08                push A
 02FB 7C0000            xcall _strlenLMM
 02FE 38FC              add SP,-4
 0300 62D000            mov REG[0xd0],>__r0
 0303 3C0000            cmp [__r0],0
 0306 B2B5              jnz L47
 0308 3C0001            cmp [__r1],1
 030B B2B0              jnz L47
 030D           X13:
 030D 62D000            mov REG[0xd0],>__r0
 0310 5203              mov A,[X+3]
 0312 5300              mov [__r1],A
 0314 5202              mov A,[X+2]
 0316 60D4              mov REG[0xd4],A
 0318 3E00              mvi A,[__r1]
 031A 3977              cmp A,119
 031C B29F              jnz L47
 031E                   .dbline 156
 031E           ;               {       
 031E           ;                       int groupAddress;
 031E                   .dbline 162
 031E           ;                       int memLoc;
 031E           ;                       char dataType;
 031E           ;                       
 031E           ;                       int len;
 031E           ;                       
 031E           ;                       params = cstrtok(0x00, " ");
 031E 5064              mov A,>L24
 0320 08                push A
 0321 5064              mov A,<L24
 0323 08                push A
 0324 5000              mov A,0
 0326 08                push A
 0327 08                push A
 0328 7C0000            xcall _cstrtok
 032B 62D000            mov REG[0xd0],>__r0
 032E 5100              mov A,[__r1]
 0330 5401              mov [X+1],A
 0332 5100              mov A,[__r0]
 0334 5400              mov [X+0],A
 0336                   .dbline 163
 0336           ;                       if (strlen(params) != 1 || csscanf(params, "%d", &groupAddress) != 1) goto error;
 0336 5200              mov A,[X+0]
 0338 08                push A
 0339 5201              mov A,[X+1]
 033B 08                push A
 033C 7C0000            xcall _strlenLMM
 033F 38FA              add SP,-6
 0341 62D000            mov REG[0xd0],>__r0
 0344 3C0000            cmp [__r0],0
 0347 B032              jnz L52
 0349 3C0001            cmp [__r1],1
 034C B02D              jnz L52
 034E           X14:
 034E 62D000            mov REG[0xd0],>__r0
 0351 5A00              mov [__r1],X
 0353 060008            add [__r1],8
 0356 5007              mov A,7
 0358 08                push A
 0359 5100              mov A,[__r1]
 035B 08                push A
 035C 50B5              mov A,>L51
 035E 08                push A
 035F 50B5              mov A,<L51
 0361 08                push A
 0362 5200              mov A,[X+0]
 0364 08                push A
 0365 5201              mov A,[X+1]
 0367 08                push A
 0368 7C0000            xcall _csscanf
 036B 38FA              add SP,-6
 036D 62D000            mov REG[0xd0],>__r0
 0370 3C0000            cmp [__r0],0
 0373 B006              jnz X15
 0375 3C0001            cmp [__r1],1
 0378 A003              jz L49
 037A           X15:
 037A           L52:
 037A                   .dbline 163
 037A 858E              xjmp L53
 037C           L49:
 037C                   .dbline 165
 037C           ;       
 037C           ;                       params = cstrtok(0x00, " ");
 037C 5064              mov A,>L24
 037E 08                push A
 037F 5064              mov A,<L24
 0381 08                push A
 0382 5000              mov A,0
 0384 08                push A
 0385 08                push A
 0386 7C0000            xcall _cstrtok
 0389 62D000            mov REG[0xd0],>__r0
 038C 5100              mov A,[__r1]
 038E 5401              mov [X+1],A
 0390 5100              mov A,[__r0]
 0392 5400              mov [X+0],A
 0394                   .dbline 166
 0394           ;                       if (strlen(params) != 2 || csscanf(params, "%x", &memLoc) != 1) goto error;
 0394 5200              mov A,[X+0]
 0396 08                push A
 0397 5201              mov A,[X+1]
 0399 08                push A
 039A 7C0000            xcall _strlenLMM
 039D 38FA              add SP,-6
 039F 62D000            mov REG[0xd0],>__r0
 03A2 3C0000            cmp [__r0],0
 03A5 B032              jnz L56
 03A7 3C0002            cmp [__r1],2
 03AA B02D              jnz L56
 03AC           X16:
 03AC 62D000            mov REG[0xd0],>__r0
 03AF 5A00              mov [__r1],X
 03B1 06000C            add [__r1],12
 03B4 5007              mov A,7
 03B6 08                push A
 03B7 5100              mov A,[__r1]
 03B9 08                push A
 03BA 5061              mov A,>L36
 03BC 08                push A
 03BD 5061              mov A,<L36
 03BF 08                push A
 03C0 5200              mov A,[X+0]
 03C2 08                push A
 03C3 5201              mov A,[X+1]
 03C5 08                push A
 03C6 7C0000            xcall _csscanf
 03C9 38FA              add SP,-6
 03CB 62D000            mov REG[0xd0],>__r0
 03CE 3C0000            cmp [__r0],0
 03D1 B006              jnz X17
 03D3 3C0001            cmp [__r1],1
 03D6 A003              jz L54
 03D8           X17:
 03D8           L56:
 03D8                   .dbline 166
 03D8 8530              xjmp L53
 03DA           L54:
 03DA                   .dbline 168
 03DA           ;                       
 03DA           ;                       params = cstrtok(0x00, " ");
 03DA 5064              mov A,>L24
 03DC 08                push A
 03DD 5064              mov A,<L24
 03DF 08                push A
 03E0 5000              mov A,0
 03E2 08                push A
 03E3 08                push A
 03E4 7C0000            xcall _cstrtok
 03E7 62D000            mov REG[0xd0],>__r0
 03EA 5100              mov A,[__r1]
 03EC 5401              mov [X+1],A
 03EE 5100              mov A,[__r0]
 03F0 5400              mov [X+0],A
 03F2                   .dbline 169
 03F2           ;                       if (strlen(params) != 1 || csscanf(params, "%c", &dataType) != 1) goto error;
 03F2 5200              mov A,[X+0]
 03F4 08                push A
 03F5 5201              mov A,[X+1]
 03F7 08                push A
 03F8 7C0000            xcall _strlenLMM
 03FB 38FA              add SP,-6
 03FD 62D000            mov REG[0xd0],>__r0
 0400 3C0000            cmp [__r0],0
 0403 B032              jnz L60
 0405 3C0001            cmp [__r1],1
 0408 B02D              jnz L60
 040A           X18:
 040A 62D000            mov REG[0xd0],>__r0
 040D 5A00              mov [__r1],X
 040F 060007            add [__r1],7
 0412 5007              mov A,7
 0414 08                push A
 0415 5100              mov A,[__r1]
 0417 08                push A
 0418 50B2              mov A,>L59
 041A 08                push A
 041B 50B2              mov A,<L59
 041D 08                push A
 041E 5200              mov A,[X+0]
 0420 08                push A
 0421 5201              mov A,[X+1]
 0423 08                push A
 0424 7C0000            xcall _csscanf
 0427 38FA              add SP,-6
 0429 62D000            mov REG[0xd0],>__r0
 042C 3C0000            cmp [__r0],0
 042F B006              jnz X19
 0431 3C0001            cmp [__r1],1
 0434 A003              jz L57
 0436           X19:
 0436           L60:
 0436                   .dbline 169
 0436 84D2              xjmp L53
 0438           L57:
 0438                   .dbline 171
 0438           ;                       
 0438           ;                       params = cstrtok(0x00, "\0");
 0438 50B0              mov A,>L61
 043A 08                push A
 043B 50B0              mov A,<L61
 043D 08                push A
 043E 5000              mov A,0
 0440 08                push A
 0441 08                push A
 0442 7C0000            xcall _cstrtok
 0445 62D000            mov REG[0xd0],>__r0
 0448 5100              mov A,[__r1]
 044A 5401              mov [X+1],A
 044C 5100              mov A,[__r0]
 044E 5400              mov [X+0],A
 0450                   .dbline 172
 0450           ;                       if (strlen(params) == 0) goto error;
 0450 5200              mov A,[X+0]
 0452 08                push A
 0453 5201              mov A,[X+1]
 0455 08                push A
 0456 7C0000            xcall _strlenLMM
 0459 38FA              add SP,-6
 045B 62D000            mov REG[0xd0],>__r0
 045E 3C0000            cmp [__r0],0
 0461 B008              jnz L62
 0463 3C0000            cmp [__r1],0
 0466 B003              jnz L62
 0468           X20:
 0468                   .dbline 172
 0468 84A0              xjmp L53
 046A           L62:
 046A                   .dbline 173
 046A           ;                       LCD_Position(0, 1);
 046A 10                push X
 046B 5701              mov X,1
 046D 5000              mov A,0
 046F 7C0000            xcall _LCD_Position
 0472 20                pop X
 0473                   .dbline 174
 0473           ;                       LCD_PrHexInt(strlen(params));
 0473 5200              mov A,[X+0]
 0475 08                push A
 0476 5201              mov A,[X+1]
 0478 08                push A
 0479 7C0000            xcall _strlenLMM
 047C 38FE              add SP,-2
 047E 10                push X
 047F 62D000            mov REG[0xd0],>__r0
 0482 5100              mov A,[__r0]
 0484 08                push A
 0485 5100              mov A,[__r1]
 0487 20                pop X
 0488 7C0000            xcall _LCD_PrHexInt
 048B 20                pop X
 048C                   .dbline 175
 048C           ;                       LCD_PrHexByte(params[0]);
 048C 62D000            mov REG[0xd0],>__r0
 048F 5201              mov A,[X+1]
 0491 5300              mov [__r1],A
 0493 5200              mov A,[X+0]
 0495 60D4              mov REG[0xd4],A
 0497 3E00              mvi A,[__r1]
 0499 10                push X
 049A 7C0000            xcall _LCD_PrHexByte
 049D 20                pop X
 049E                   .dbline 176
 049E           ;                       LCD_PrHexByte(params[1]);
 049E 62D000            mov REG[0xd0],>__r0
 04A1 5201              mov A,[X+1]
 04A3 0101              add A,1
 04A5 5300              mov [__r1],A
 04A7 5200              mov A,[X+0]
 04A9 0900              adc A,0
 04AB 60D4              mov REG[0xd4],A
 04AD 3E00              mvi A,[__r1]
 04AF 10                push X
 04B0 7C0000            xcall _LCD_PrHexByte
 04B3 20                pop X
 04B4                   .dbline 178
 04B4           ;                       
 04B4           ;                       dataType = tolower(dataType); // Lowercase this stuff b/c case insensitive
 04B4 62D000            mov REG[0xd0],>__r0
 04B7 5207              mov A,[X+7]
 04B9 5300              mov [__r1],A
 04BB 5000              mov A,0
 04BD 08                push A
 04BE 5100              mov A,[__r1]
 04C0 08                push A
 04C1 7C0000            xcall _tolower
 04C4 38FE              add SP,-2
 04C6 62D000            mov REG[0xd0],>__r0
 04C9 5100              mov A,[__r1]
 04CB 5407              mov [X+7],A
 04CD                   .dbline 179
 04CD           ;                       if (groupAddress < 0 || groupAddress > 7)
 04CD 5209              mov A,[X+9]
 04CF 1100              sub A,0
 04D1 5208              mov A,[X+8]
 04D3 3180              xor A,-128
 04D5 1980              sbb A,(0 ^ 0x80)
 04D7 C014              jc L66
 04D9           X21:
 04D9 5007              mov A,7
 04DB 1309              sub A,[X+9]
 04DD 5208              mov A,[X+8]
 04DF 3180              xor A,-128
 04E1 62D000            mov REG[0xd0],>__r0
 04E4 5300              mov [__rX],A
 04E6 5080              mov A,(0 ^ 0x80)
 04E8 1A00              sbb A,[__rX]
 04EA D003              jnc L64
 04EC           X22:
 04EC           L66:
 04EC                   .dbline 180
 04EC           ;                               goto error;
 04EC 841C              xjmp L53
 04EE           L64:
 04EE                   .dbline 182
 04EE           ;                       
 04EE           ;                       data[0] = memLoc;
 04EE 520D              mov A,[X+13]
 04F0 62D000            mov REG[0xd0],>_data
 04F3 5300              mov [_data],A
 04F5                   .dbline 183
 04F5           ;                       slaveAddress |= groupAddress;
 04F5 62D000            mov REG[0xd0],>__r0
 04F8 5204              mov A,[X+4]
 04FA 5300              mov [__r1],A
 04FC 5209              mov A,[X+9]
 04FE 2C00              or [__r1],A
 0500 5100              mov A,[__r1]
 0502 5404              mov [X+4],A
 0504                   .dbline 185
 0504           ;                       
 0504           ;                       if (dataType == 'a')
 0504 3D0761            cmp [X+7],97
 0507 B02E              jnz L67
 0509                   .dbline 187
 0509           ;                       {
 0509           ;                               strcpy((data + 1), params); // If it wants ASCII, just copy it into src buffer
 0509                   .dbline 187
 0509 5200              mov A,[X+0]
 050B 08                push A
 050C 5201              mov A,[X+1]
 050E 08                push A
 050F 5001              mov A,>_data+1
 0511 08                push A
 0512 5001              mov A,<_data+1
 0514 08                push A
 0515 7C0000            xcall _strcpyLMM
 0518                   .dbline 188
 0518           ;                               len = strlen((data + 1)) + 1; // Length is the length of string
 0518 5001              mov A,>_data+1
 051A 08                push A
 051B 5001              mov A,<_data+1
 051D 08                push A
 051E 7C0000            xcall _strlenLMM
 0521 38FA              add SP,-6
 0523 62D000            mov REG[0xd0],>__r0
 0526 060001            add [__r1],1
 0529 0E0000            adc [__r0],0
 052C 5100              mov A,[__r1]
 052E 540B              mov [X+11],A
 0530 5100              mov A,[__r0]
 0532 540A              mov [X+10],A
 0534                   .dbline 189
 0534           ;                       }
 0534 8032              xjmp L68
 0536           L67:
 0536                   .dbline 190
 0536           ;                       else if (dataType == 'h')
 0536 3D0768            cmp [X+7],104
 0539 B3CF              jnz L53
 053B                   .dbline 192
 053B           ;                       {
 053B           ;                               if ((len = HexConversion(params, (data + 1))) == -1) // Take hex data and convert to numbers into src + 1(src[0] has the memory loc)
 053B                   .dbline 192
 053B 5001              mov A,>_data+1
 053D 08                push A
 053E 5001              mov A,<_data+1
 0540 08                push A
 0541 5200              mov A,[X+0]
 0543 08                push A
 0544 5201              mov A,[X+1]
 0546 08                push A
 0547 9B9F              xcall _HexConversion
 0549 38FC              add SP,-4
 054B 62D000            mov REG[0xd0],>__r0
 054E 5100              mov A,[__r1]
 0550 540B              mov [X+11],A
 0552 5100              mov A,[__r0]
 0554 540A              mov [X+10],A
 0556 3C00FF            cmp [__r0],-1
 0559 B008              jnz L73
 055B 3C00FF            cmp [__r1],-1
 055E B003              jnz L73
 0560           X23:
 0560                   .dbline 193
 0560           ;                                       goto error;
 0560 83A8              xjmp L53
 0562           L73:
 0562                   .dbline 194
 0562           ;                               len++; // Add one to the length because of the memoryLocation
 0562 770B              inc [X+11]
 0564 0F0A00            adc [X+10],0
 0567                   .dbline 195
 0567           ;                       }
 0567                   .dbline 197
 0567           ;                       else
 0567           ;                               goto error;
 0567           L72:
 0567           L68:
 0567                   .dbline 199
 0567           ;                       
 0567           ;                       I2CHW_bWriteBytes(slaveAddress, data, len, I2CHW_CompleteXfer); // Write it
 0567 10                push X
 0568 5000              mov A,0
 056A 08                push A
 056B 62D000            mov REG[0xd0],>__r0
 056E 520B              mov A,[X+11]
 0570 08                push A
 0571 5000              mov A,>_data
 0573 08                push A
 0574 5000              mov A,<_data
 0576 08                push A
 0577 5204              mov A,[X+4]
 0579 08                push A
 057A 7C0000            xcall _I2CHW_bWriteBytes
 057D 38FB              add SP,-5
 057F 20                pop X
 0580           L76:
 0580                   .dbline 200
 0580           ;                       while (!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
 0580           L77:
 0580                   .dbline 200
 0580 10                push X
 0581 7C0000            xcall _I2CHW_bReadI2CStatus
 0584 20                pop X
 0585 62D000            mov REG[0xd0],>__r0
 0588 5300              mov [__r0],A
 058A 470040            tst [__r0],64
 058D AFF2              jz L76
 058F                   .dbline 201
 058F           ;                       I2CHW_ClrWrStatus();
 058F 10                push X
 0590 7C0000            xcall _I2CHW_ClrWrStatus
 0593 20                pop X
 0594                   .dbline 203
 0594           ;                       
 0594           ;                       csprintf(data, "%x bytes were written", len); // Look up sprintf on Google for information 
 0594 520A              mov A,[X+10]
 0596 08                push A
 0597 520B              mov A,[X+11]
 0599 08                push A
 059A 509A              mov A,>L79
 059C 08                push A
 059D 509A              mov A,<L79
 059F 08                push A
 05A0 5000              mov A,>_data
 05A2 08                push A
 05A3 5000              mov A,<_data
 05A5 08                push A
 05A6 7C0000            xcall _csprintf
 05A9 38FA              add SP,-6
 05AB                   .dbline 204
 05AB           ;                       UART_PutString(data);
 05AB 10                push X
 05AC 5000              mov A,>_data
 05AE 08                push A
 05AF 5000              mov A,<_data
 05B1 5C                mov X,A
 05B2 18                pop A
 05B3 7C0000            xcall _UART_PutString
 05B6                   .dbline 205
 05B6           ;                       UART_PutCRLF();
 05B6 7C0000            xcall _UART_PutCRLF
 05B9 20                pop X
 05BA                   .dbline 206
 05BA           ;               }
 05BA 835A              xjmp L45
 05BC           L47:
 05BC                   .dbline 207
 05BC           ;               else if (strlen(cmd) == 1 && cmd[0] == 'r')
 05BC 5202              mov A,[X+2]
 05BE 08                push A
 05BF 5203              mov A,[X+3]
 05C1 08                push A
 05C2 7C0000            xcall _strlenLMM
 05C5 38FE              add SP,-2
 05C7 62D000            mov REG[0xd0],>__r0
 05CA 3C0000            cmp [__r0],0
 05CD B33B              jnz L53
 05CF 3C0001            cmp [__r1],1
 05D2 B336              jnz L53
 05D4           X24:
 05D4 62D000            mov REG[0xd0],>__r0
 05D7 5203              mov A,[X+3]
 05D9 5300              mov [__r1],A
 05DB 5202              mov A,[X+2]
 05DD 60D4              mov REG[0xd4],A
 05DF 3E00              mvi A,[__r1]
 05E1 3972              cmp A,114
 05E3 B325              jnz L53
 05E5                   .dbline 209
 05E5           ;               {
 05E5           ;                       int groupAddress;
 05E5                   .dbline 217
 05E5           ;                       int memLoc;
 05E5           ;                       char dataType;
 05E5           ;                       int numBytes;
 05E5           ;                       
 05E5           ;                       char hexStr[4];
 05E5           ;                       int i;
 05E5           ; 
 05E5           ;                       params = cstrtok(0x00, " ");
 05E5 5064              mov A,>L24
 05E7 08                push A
 05E8 5064              mov A,<L24
 05EA 08                push A
 05EB 5000              mov A,0
 05ED 08                push A
 05EE 08                push A
 05EF 7C0000            xcall _cstrtok
 05F2 62D000            mov REG[0xd0],>__r0
 05F5 5100              mov A,[__r1]
 05F7 5401              mov [X+1],A
 05F9 5100              mov A,[__r0]
 05FB 5400              mov [X+0],A
 05FD                   .dbline 218
 05FD           ;                       if (strlen(params) != 1 || csscanf(params, "%d", &groupAddress) != 1) goto error;
 05FD 5200              mov A,[X+0]
 05FF 08                push A
 0600 5201              mov A,[X+1]
 0602 08                push A
 0603 7C0000            xcall _strlenLMM
 0606 38FA              add SP,-6
 0608 62D000            mov REG[0xd0],>__r0
 060B 3C0000            cmp [__r0],0
 060E B032              jnz L84
 0610 3C0001            cmp [__r1],1
 0613 B02D              jnz L84
 0615           X25:
 0615 62D000            mov REG[0xd0],>__r0
 0618 5A00              mov [__r1],X
 061A 060010            add [__r1],16
 061D 5007              mov A,7
 061F 08                push A
 0620 5100              mov A,[__r1]
 0622 08                push A
 0623 50B5              mov A,>L51
 0625 08                push A
 0626 50B5              mov A,<L51
 0628 08                push A
 0629 5200              mov A,[X+0]
 062B 08                push A
 062C 5201              mov A,[X+1]
 062E 08                push A
 062F 7C0000            xcall _csscanf
 0632 38FA              add SP,-6
 0634 62D000            mov REG[0xd0],>__r0
 0637 3C0000            cmp [__r0],0
 063A B006              jnz X26
 063C 3C0001            cmp [__r1],1
 063F A003              jz L82
 0641           X26:
 0641           L84:
 0641                   .dbline 218
 0641 82C7              xjmp L53
 0643           L82:
 0643                   .dbline 220
 0643           ;       
 0643           ;                       params = cstrtok(0x00, " ");
 0643 5064              mov A,>L24
 0645 08                push A
 0646 5064              mov A,<L24
 0648 08                push A
 0649 5000              mov A,0
 064B 08                push A
 064C 08                push A
 064D 7C0000            xcall _cstrtok
 0650 62D000            mov REG[0xd0],>__r0
 0653 5100              mov A,[__r1]
 0655 5401              mov [X+1],A
 0657 5100              mov A,[__r0]
 0659 5400              mov [X+0],A
 065B                   .dbline 221
 065B           ;                       if (strlen(params) != 2 || csscanf(params, "%x", &memLoc) != 1) goto error;
 065B 5200              mov A,[X+0]
 065D 08                push A
 065E 5201              mov A,[X+1]
 0660 08                push A
 0661 7C0000            xcall _strlenLMM
 0664 38FA              add SP,-6
 0666 62D000            mov REG[0xd0],>__r0
 0669 3C0000            cmp [__r0],0
 066C B032              jnz L87
 066E 3C0002            cmp [__r1],2
 0671 B02D              jnz L87
 0673           X27:
 0673 62D000            mov REG[0xd0],>__r0
 0676 5A00              mov [__r1],X
 0678 060012            add [__r1],18
 067B 5007              mov A,7
 067D 08                push A
 067E 5100              mov A,[__r1]
 0680 08                push A
 0681 5061              mov A,>L36
 0683 08                push A
 0684 5061              mov A,<L36
 0686 08                push A
 0687 5200              mov A,[X+0]
 0689 08                push A
 068A 5201              mov A,[X+1]
 068C 08                push A
 068D 7C0000            xcall _csscanf
 0690 38FA              add SP,-6
 0692 62D000            mov REG[0xd0],>__r0
 0695 3C0000            cmp [__r0],0
 0698 B006              jnz X28
 069A 3C0001            cmp [__r1],1
 069D A003              jz L85
 069F           X28:
 069F           L87:
 069F                   .dbline 221
 069F 8269              xjmp L53
 06A1           L85:
 06A1                   .dbline 223
 06A1           ;                       
 06A1           ;                       params = cstrtok(0x00, " ");
 06A1 5064              mov A,>L24
 06A3 08                push A
 06A4 5064              mov A,<L24
 06A6 08                push A
 06A7 5000              mov A,0
 06A9 08                push A
 06AA 08                push A
 06AB 7C0000            xcall _cstrtok
 06AE 62D000            mov REG[0xd0],>__r0
 06B1 5100              mov A,[__r1]
 06B3 5401              mov [X+1],A
 06B5 5100              mov A,[__r0]
 06B7 5400              mov [X+0],A
 06B9                   .dbline 224
 06B9           ;                       if (strlen(params) != 1 || csscanf(params, "%c", &dataType) != 1) goto error;
 06B9 5200              mov A,[X+0]
 06BB 08                push A
 06BC 5201              mov A,[X+1]
 06BE 08                push A
 06BF 7C0000            xcall _strlenLMM
 06C2 38FA              add SP,-6
 06C4 62D000            mov REG[0xd0],>__r0
 06C7 3C0000            cmp [__r0],0
 06CA B032              jnz L90
 06CC 3C0001            cmp [__r1],1
 06CF B02D              jnz L90
 06D1           X29:
 06D1 62D000            mov REG[0xd0],>__r0
 06D4 5A00              mov [__r1],X
 06D6 06000F            add [__r1],15
 06D9 5007              mov A,7
 06DB 08                push A
 06DC 5100              mov A,[__r1]
 06DE 08                push A
 06DF 50B2              mov A,>L59
 06E1 08                push A
 06E2 50B2              mov A,<L59
 06E4 08                push A
 06E5 5200              mov A,[X+0]
 06E7 08                push A
 06E8 5201              mov A,[X+1]
 06EA 08                push A
 06EB 7C0000            xcall _csscanf
 06EE 38FA              add SP,-6
 06F0 62D000            mov REG[0xd0],>__r0
 06F3 3C0000            cmp [__r0],0
 06F6 B006              jnz X30
 06F8 3C0001            cmp [__r1],1
 06FB A003              jz L88
 06FD           X30:
 06FD           L90:
 06FD                   .dbline 224
 06FD 820B              xjmp L53
 06FF           L88:
 06FF                   .dbline 226
 06FF           ;                       
 06FF           ;                       params = cstrtok(0x00, " ");
 06FF 5064              mov A,>L24
 0701 08                push A
 0702 5064              mov A,<L24
 0704 08                push A
 0705 5000              mov A,0
 0707 08                push A
 0708 08                push A
 0709 7C0000            xcall _cstrtok
 070C 62D000            mov REG[0xd0],>__r0
 070F 5100              mov A,[__r1]
 0711 5401              mov [X+1],A
 0713 5100              mov A,[__r0]
 0715 5400              mov [X+0],A
 0717                   .dbline 227
 0717           ;                       if (strlen(params) != 2 || csscanf(params, "%x", &numBytes) != 1) goto error;
 0717 5200              mov A,[X+0]
 0719 08                push A
 071A 5201              mov A,[X+1]
 071C 08                push A
 071D 7C0000            xcall _strlenLMM
 0720 38FA              add SP,-6
 0722 62D000            mov REG[0xd0],>__r0
 0725 3C0000            cmp [__r0],0
 0728 B032              jnz L93
 072A 3C0002            cmp [__r1],2
 072D B02D              jnz L93
 072F           X31:
 072F 62D000            mov REG[0xd0],>__r0
 0732 5A00              mov [__r1],X
 0734 060009            add [__r1],9
 0737 5007              mov A,7
 0739 08                push A
 073A 5100              mov A,[__r1]
 073C 08                push A
 073D 5061              mov A,>L36
 073F 08                push A
 0740 5061              mov A,<L36
 0742 08                push A
 0743 5200              mov A,[X+0]
 0745 08                push A
 0746 5201              mov A,[X+1]
 0748 08                push A
 0749 7C0000            xcall _csscanf
 074C 38FA              add SP,-6
 074E 62D000            mov REG[0xd0],>__r0
 0751 3C0000            cmp [__r0],0
 0754 B006              jnz X32
 0756 3C0001            cmp [__r1],1
 0759 A003              jz L91
 075B           X32:
 075B           L93:
 075B                   .dbline 227
 075B 81AD              xjmp L53
 075D           L91:
 075D                   .dbline 229
 075D           ;                       
 075D           ;                       if (cstrtok(0x00, " ") != 0x00) goto error;
 075D 5064              mov A,>L24
 075F 08                push A
 0760 5064              mov A,<L24
 0762 08                push A
 0763 5000              mov A,0
 0765 08                push A
 0766 08                push A
 0767 7C0000            xcall _cstrtok
 076A 38FC              add SP,-4
 076C 62D000            mov REG[0xd0],>__r0
 076F 3C0000            cmp [__r0],0
 0772 B006              jnz X33
 0774 3C0000            cmp [__r1],0
 0777 A003              jz L94
 0779           X33:
 0779                   .dbline 229
 0779 818F              xjmp L53
 077B           L94:
 077B                   .dbline 230
 077B           ;                       LCD_Position(1, 0);
 077B 10                push X
 077C 5700              mov X,0
 077E 5001              mov A,1
 0780 7C0000            xcall _LCD_Position
 0783 20                pop X
 0784                   .dbline 231
 0784           ;                       LCD_PrHexInt(strlen(cstrtok(0x00, "\0")));
 0784 50B0              mov A,>L61
 0786 08                push A
 0787 50B0              mov A,<L61
 0789 08                push A
 078A 5000              mov A,0
 078C 08                push A
 078D 08                push A
 078E 7C0000            xcall _cstrtok
 0791 62D000            mov REG[0xd0],>__r0
 0794 5100              mov A,[__r0]
 0796 08                push A
 0797 5100              mov A,[__r1]
 0799 08                push A
 079A 7C0000            xcall _strlenLMM
 079D 38FA              add SP,-6
 079F 10                push X
 07A0 62D000            mov REG[0xd0],>__r0
 07A3 5100              mov A,[__r0]
 07A5 08                push A
 07A6 5100              mov A,[__r1]
 07A8 20                pop X
 07A9 7C0000            xcall _LCD_PrHexInt
 07AC 20                pop X
 07AD                   .dbline 233
 07AD           ;                       
 07AD           ;                       dataType = tolower(dataType); // Lowercase this stuff b/c case insensitive
 07AD 62D000            mov REG[0xd0],>__r0
 07B0 520F              mov A,[X+15]
 07B2 5300              mov [__r1],A
 07B4 5000              mov A,0
 07B6 08                push A
 07B7 5100              mov A,[__r1]
 07B9 08                push A
 07BA 7C0000            xcall _tolower
 07BD 38FE              add SP,-2
 07BF 62D000            mov REG[0xd0],>__r0
 07C2 5100              mov A,[__r1]
 07C4 540F              mov [X+15],A
 07C6                   .dbline 234
 07C6           ;                       if (groupAddress < 0 || groupAddress > 7)
 07C6 5211              mov A,[X+17]
 07C8 1100              sub A,0
 07CA 5210              mov A,[X+16]
 07CC 3180              xor A,-128
 07CE 1980              sbb A,(0 ^ 0x80)
 07D0 C014              jc L98
 07D2           X34:
 07D2 5007              mov A,7
 07D4 1311              sub A,[X+17]
 07D6 5210              mov A,[X+16]
 07D8 3180              xor A,-128
 07DA 62D000            mov REG[0xd0],>__r0
 07DD 5300              mov [__rX],A
 07DF 5080              mov A,(0 ^ 0x80)
 07E1 1A00              sbb A,[__rX]
 07E3 D003              jnc L96
 07E5           X35:
 07E5           L98:
 07E5                   .dbline 235
 07E5           ;                               goto error;
 07E5 8123              xjmp L53
 07E7           L96:
 07E7                   .dbline 237
 07E7           ;                       
 07E7           ;                       data[0] = memLoc;
 07E7 5213              mov A,[X+19]
 07E9 62D000            mov REG[0xd0],>_data
 07EC 5300              mov [_data],A
 07EE                   .dbline 238
 07EE           ;                       slaveAddress |= groupAddress;
 07EE 62D000            mov REG[0xd0],>__r0
 07F1 5204              mov A,[X+4]
 07F3 5300              mov [__r1],A
 07F5 5211              mov A,[X+17]
 07F7 2C00              or [__r1],A
 07F9 5100              mov A,[__r1]
 07FB 5404              mov [X+4],A
 07FD                   .dbline 240
 07FD           ;                       
 07FD           ;                       I2CHW_bWriteBytes(slaveAddress, data, 1, I2CHW_NoStop);
 07FD 10                push X
 07FE 5002              mov A,2
 0800 08                push A
 0801 5001              mov A,1
 0803 08                push A
 0804 5000              mov A,>_data
 0806 08                push A
 0807 5000              mov A,<_data
 0809 08                push A
 080A 5204              mov A,[X+4]
 080C 08                push A
 080D 7C0000            xcall _I2CHW_bWriteBytes
 0810 38FB              add SP,-5
 0812 20                pop X
 0813           L99:
 0813                   .dbline 241
 0813           ;                       while (!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
 0813           L100:
 0813                   .dbline 241
 0813 10                push X
 0814 7C0000            xcall _I2CHW_bReadI2CStatus
 0817 20                pop X
 0818 62D000            mov REG[0xd0],>__r0
 081B 5300              mov [__r0],A
 081D 470040            tst [__r0],64
 0820 AFF2              jz L99
 0822                   .dbline 242
 0822           ;                       I2CHW_ClrWrStatus();
 0822 10                push X
 0823 7C0000            xcall _I2CHW_ClrWrStatus
 0826 20                pop X
 0827                   .dbline 244
 0827           ;                       
 0827           ;                       I2CHW_fReadBytes(slaveAddress, data, numBytes, I2CHW_RepStart);
 0827 10                push X
 0828 5001              mov A,1
 082A 08                push A
 082B 62D000            mov REG[0xd0],>__r0
 082E 520A              mov A,[X+10]
 0830 08                push A
 0831 5000              mov A,>_data
 0833 08                push A
 0834 5000              mov A,<_data
 0836 08                push A
 0837 5204              mov A,[X+4]
 0839 08                push A
 083A 7C0000            xcall _I2CHW_fReadBytes
 083D 38FB              add SP,-5
 083F 20                pop X
 0840           L102:
 0840                   .dbline 245
 0840           ;                       while(!(I2CHW_bReadI2CStatus() & I2CHW_RD_COMPLETE));
 0840           L103:
 0840                   .dbline 245
 0840 10                push X
 0841 7C0000            xcall _I2CHW_bReadI2CStatus
 0844 20                pop X
 0845 62D000            mov REG[0xd0],>__r0
 0848 5300              mov [__r0],A
 084A 470004            tst [__r0],4
 084D AFF2              jz L102
 084F                   .dbline 246
 084F           ;                       I2CHW_ClrRdStatus();
 084F 10                push X
 0850 7C0000            xcall _I2CHW_ClrRdStatus
 0853 20                pop X
 0854                   .dbline 248
 0854           ;                       
 0854           ;                       if (dataType == 'a')
 0854 3D0F61            cmp [X+15],97
 0857 B040              jnz L105
 0859                   .dbline 250
 0859           ;                       {
 0859           ;                               for (i = 0; i < numBytes; ++i)
 0859                   .dbline 250
 0859 560800            mov [X+8],0
 085C 560700            mov [X+7],0
 085F 801C              xjmp L110
 0861           L107:
 0861                   .dbline 251
 0861           ;                                       UART_PutChar(data[i]);
 0861 62D000            mov REG[0xd0],>__r0
 0864 5208              mov A,[X+8]
 0866 0100              add A,<_data
 0868 5300              mov [__r1],A
 086A 5207              mov A,[X+7]
 086C 0900              adc A,>_data
 086E 60D4              mov REG[0xd4],A
 0870 3E00              mvi A,[__r1]
 0872 10                push X
 0873 7C0000            xcall _UART_PutChar
 0876 20                pop X
 0877           L108:
 0877                   .dbline 250
 0877 7708              inc [X+8]
 0879 0F0700            adc [X+7],0
 087C           L110:
 087C                   .dbline 250
 087C 5208              mov A,[X+8]
 087E 130A              sub A,[X+10]
 0880 5209              mov A,[X+9]
 0882 3180              xor A,-128
 0884 62D000            mov REG[0xd0],>__r0
 0887 5300              mov [__rX],A
 0889 5207              mov A,[X+7]
 088B 3180              xor A,-128
 088D 1A00              sbb A,[__rX]
 088F CFD1              jc L107
 0891           X36:
 0891                   .dbline 252
 0891           ;                               UART_PutCRLF();
 0891 10                push X
 0892 7C0000            xcall _UART_PutCRLF
 0895 20                pop X
 0896                   .dbline 253
 0896           ;                       }
 0896 807E              xjmp L45
 0898           L105:
 0898                   .dbline 254
 0898           ;                       else if (dataType == 'h')
 0898 3D0F68            cmp [X+15],104
 089B B06D              jnz L53
 089D                   .dbline 256
 089D           ;                       {
 089D           ;                               for (i = 0; i < numBytes; ++i)
 089D                   .dbline 256
 089D 560800            mov [X+8],0
 08A0 560700            mov [X+7],0
 08A3 8049              xjmp L116
 08A5           L113:
 08A5                   .dbline 257
 08A5           ;                               {
 08A5                   .dbline 258
 08A5           ;                                       csprintf(hexStr, "%X ", data[i]);
 08A5 62D000            mov REG[0xd0],>__r0
 08A8 5208              mov A,[X+8]
 08AA 0100              add A,<_data
 08AC 5300              mov [__r1],A
 08AE 5207              mov A,[X+7]
 08B0 0900              adc A,>_data
 08B2 60D4              mov REG[0xd4],A
 08B4 3E00              mvi A,[__r1]
 08B6 5300              mov [__r1],A
 08B8 5000              mov A,0
 08BA 08                push A
 08BB 5100              mov A,[__r1]
 08BD 08                push A
 08BE 5096              mov A,>L117
 08C0 08                push A
 08C1 5096              mov A,<L117
 08C3 08                push A
 08C4 5A00              mov [__r1],X
 08C6 06000B            add [__r1],11
 08C9 5007              mov A,7
 08CB 08                push A
 08CC 5100              mov A,[__r1]
 08CE 08                push A
 08CF 7C0000            xcall _csprintf
 08D2 38FA              add SP,-6
 08D4                   .dbline 259
 08D4           ;                                       UART_PutString(hexStr);
 08D4 62D000            mov REG[0xd0],>__r0
 08D7 5A00              mov [__r1],X
 08D9 06000B            add [__r1],11
 08DC 10                push X
 08DD 5007              mov A,7
 08DF 08                push A
 08E0 5100              mov A,[__r1]
 08E2 5C                mov X,A
 08E3 18                pop A
 08E4 7C0000            xcall _UART_PutString
 08E7 20                pop X
 08E8                   .dbline 260
 08E8           ;                               }
 08E8           L114:
 08E8                   .dbline 256
 08E8 7708              inc [X+8]
 08EA 0F0700            adc [X+7],0
 08ED           L116:
 08ED                   .dbline 256
 08ED 5208              mov A,[X+8]
 08EF 130A              sub A,[X+10]
 08F1 5209              mov A,[X+9]
 08F3 3180              xor A,-128
 08F5 62D000            mov REG[0xd0],>__r0
 08F8 5300              mov [__rX],A
 08FA 5207              mov A,[X+7]
 08FC 3180              xor A,-128
 08FE 1A00              sbb A,[__rX]
 0900 CFA4              jc L113
 0902           X37:
 0902                   .dbline 261
 0902           ;                               UART_PutCRLF();
 0902 10                push X
 0903 7C0000            xcall _UART_PutCRLF
 0906 20                pop X
 0907                   .dbline 262
 0907           ;                       }
 0907                   .dbline 264
 0907           ;                       else
 0907           ;                               goto error;
 0907                   .dbline 265
 0907           ;               }
 0907                   .dbline 267
 0907           ;               else 
 0907           ;                       goto error;
 0907                   .dbline 269
 0907           ;               
 0907           ;               continue;
 0907 800D              xjmp L45
 0909           L53:
 0909                   .dbline 271
 0909           ;               error:
 0909           ;                       UART_CPutString("Invalid format entered. Valid formats are:\r\n\tW [GroupAddress] [MemoryLocation] [h|a] Hex/ASCII\r\n\tR [GroupAddress] [MemoryLocation] [h|a] [NumBytes]\r\n");
 0909 10                push X
 090A 5000              mov A,>L118
 090C 08                push A
 090D 5000              mov A,<L118
 090F 5C                mov X,A
 0910 18                pop A
 0911 7C0000            xcall _UART_CPutString
 0914 20                pop X
 0915                   .dbline 272
 0915           ;       }
 0915           L45:
 0915                   .dbline 143
 0915 898E              xjmp L44
 0917           X12:
 0917                   .dbline -2
 0917           L42:
 0917 38EC              add SP,-20
 0919 20                pop X
 091A                   .dbline 0 ; func end
 091A 8FFF              jmp .
 091C                   .dbsym l memLoc 18 I
 091C                   .dbsym l groupAddress 16 I
 091C                   .dbsym l dataType 15 c
 091C                   .dbsym l hexStr 11 A[4:4]c
 091C                   .dbsym l numBytes 9 I
 091C                   .dbsym l i 7 I
 091C                   .dbsym l memLoc 12 I
 091C                   .dbsym l len 10 I
 091C                   .dbsym l groupAddress 8 I
 091C                   .dbsym l dataType 7 c
 091C                   .dbsym l strLoc 5 I
 091C                   .dbsym l slaveAddress 4 c
 091C                   .dbsym l cmd 2 pc
 091C                   .dbsym l params 0 pc
 091C                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Jacob\Desktop\ECE381\I2CRAM\I2CRAM\main.c
 0000           _data::
 0000 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 003C 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 0078 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 00B4 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 00F0 00000000000000000000      .word 0,0,0,0,0
 00FA 000000000000      .byte 0,0,0,0,0,0
 0100                   .dbsym e data _data A[256:256]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Jacob\Desktop\ECE381\I2CRAM\I2CRAM\main.c
 0000           _buf::
 0000 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 003C 00000000000000000000      .word 0,0,0,0,0
 0046 00000000000000000000      .byte 0,0,0,0,0,0,0,0,0,0
 0050                   .dbsym e buf _buf A[80:80]c
                        .area lit(rom, con, rel, lit)
 0000           L118:
 0000 496E76616C696420666F726D61742065  .byte 'I,'n,'v,'a,'l,'i,'d,32,'f,'o,'r,'m,'a,'t,32,'e
 0010 6E74657265642E2056616C696420666F  .byte 'n,'t,'e,'r,'e,'d,46,32,'V,'a,'l,'i,'d,32,'f,'o
 0020 726D617473206172653A0D0A0957205B  .byte 'r,'m,'a,'t,'s,32,'a,'r,'e,58,13,10,9,'W,32,91
 0030 47726F7570416464726573735D205B4D  .byte 'G,'r,'o,'u,'p,'A,'d,'d,'r,'e,'s,'s,93,32,91,'M
 0040 656D6F72794C6F636174696F6E5D205B  .byte 'e,'m,'o,'r,'y,'L,'o,'c,'a,'t,'i,'o,'n,93,32,91
 0050 687C615D204865782F41534349490D0A  .byte 'h,124,'a,93,32,'H,'e,'x,47,'A,'S,'C,'I,'I,13,10
 0060 0952205B47726F757041646472657373  .byte 9,'R,32,91,'G,'r,'o,'u,'p,'A,'d,'d,'r,'e,'s,'s
 0070 5D205B4D656D6F72794C6F636174696F  .byte 93,32,91,'M,'e,'m,'o,'r,'y,'L,'o,'c,'a,'t,'i,'o
 0080 6E5D205B687C615D205B4E756D427974  .byte 'n,93,32,91,'h,124,'a,93,32,91,'N,'u,'m,'B,'y,'t
 0090 65735D0D0A00      .byte 'e,'s,93,13,10,0
 0096           L117:
 0096 25582000          .byte 37,'X,32,0
 009A           L79:
 009A 25782062797465732077657265207772  .byte 37,'x,32,'b,'y,'t,'e,'s,32,'w,'e,'r,'e,32,'w,'r
 00AA 697474656E00      .byte 'i,'t,'t,'e,'n,0
 00B0           L61:
 00B0 0000              .byte 0,0
 00B2           L59:
 00B2 256300            .byte 37,'c,0
 00B5           L51:
 00B5 256400            .byte 37,'d,0
 00B8           L43:
 00B8 23232323232323232323232323232323  .byte 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
 00C8 23232323232323232323204932432045  .byte 35,35,35,35,35,35,35,35,35,35,32,'I,50,'C,32,'E
 00D8 787465726E616C205352414D20232323  .byte 'x,'t,'e,'r,'n,'a,'l,32,'S,'R,'A,'M,32,35,35,35
 00E8 23232323232323232323232323232323  .byte 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
 00F8 23232323230D0A230957202320585820  .byte 35,35,35,35,35,13,10,35,9,'W,32,35,32,'X,'X,32
 0108 54205B446174615D0D0A230909572020  .byte 'T,32,91,'D,'a,'t,'a,93,13,10,35,9,9,'W,32,32
 0118 20202D20577269746520636F6D6D616E  .byte 32,32,45,32,'W,'r,'i,'t,'e,32,'c,'o,'m,'m,'a,'n
 0128 640D0A23090923202020202D2047726F  .byte 'd,13,10,35,9,9,35,32,32,32,32,45,32,'G,'r,'o
 0138 75702041646472657373202830202D20  .byte 'u,'p,32,'A,'d,'d,'r,'e,'s,'s,32,40,48,32,45,32
 0148 37290D0A23090958582020202D204D65  .byte 55,41,13,10,35,9,9,'X,'X,32,32,32,45,32,'M,'e
 0158 6D6F7279204C6F636174696F6E20696E  .byte 'm,'o,'r,'y,32,'L,'o,'c,'a,'t,'i,'o,'n,32,'i,'n
 0168 2068657820283030202D204646290D0A  .byte 32,'h,'e,'x,32,40,48,48,32,45,32,'F,'F,41,13,10
 0178 23090954202020202D20446174612054  .byte 35,9,9,'T,32,32,32,32,45,32,'D,'a,'t,'a,32,'T
 0188 7970652C20656974686572204120666F  .byte 'y,'p,'e,44,32,'e,'i,'t,'h,'e,'r,32,'A,32,'f,'o
 0198 72204153434949206F72204820666F72  .byte 'r,32,'A,'S,'C,'I,'I,32,'o,'r,32,'H,32,'f,'o,'r
 01A8 2048657861646563696D616C0D0A2309  .byte 32,'H,'e,'x,'a,'d,'e,'c,'i,'m,'a,'l,13,10,35,9
 01B8 0944617461202D204569746865722041  .byte 9,'D,'a,'t,'a,32,45,32,'E,'i,'t,'h,'e,'r,32,'A
 01C8 5343494920737472696E67206F722048  .byte 'S,'C,'I,'I,32,'s,'t,'r,'i,'n,'g,32,'o,'r,32,'H
 01D8 657861646563696D616C207365706172  .byte 'e,'x,'a,'d,'e,'c,'i,'m,'a,'l,32,'s,'e,'p,'a,'r
 01E8 61746573206279207370616365730D0A  .byte 'a,'t,'e,'s,32,'b,'y,32,'s,'p,'a,'c,'e,'s,13,10
 01F8 2309090941202D204D61727920686164  .byte 35,9,9,9,'A,32,45,32,'M,'a,'r,'y,32,'h,'a,'d
 0208 2061206C6974746C65206C616D620D0A  .byte 32,'a,32,'l,'i,'t,'t,'l,'e,32,'l,'a,'m,'b,13,10
 0218 2309090948202D203031204646204130  .byte 35,9,9,9,'H,32,45,32,48,49,32,'F,'F,32,'A,48
 0228 2030462044382043330D0A230D0A2309  .byte 32,48,'F,32,'D,56,32,'C,51,13,10,35,13,10,35,9
 0238 5220232058582054204E4E0D0A230909  .byte 'R,32,35,32,'X,'X,32,'T,32,'N,'N,13,10,35,9,9
 0248 52202020202D205265616420636F6D6D  .byte 'R,32,32,32,32,45,32,'R,'e,'a,'d,32,'c,'o,'m,'m
 0258 616E640D0A23090923202020202D2047  .byte 'a,'n,'d,13,10,35,9,9,35,32,32,32,32,45,32,'G
 0268 726F7570204164647265737320283020  .byte 'r,'o,'u,'p,32,'A,'d,'d,'r,'e,'s,'s,32,40,48,32
 0278 2D2037290D0A23090958582020202D20  .byte 45,32,55,41,13,10,35,9,9,'X,'X,32,32,32,45,32
 0288 4D656D6F7279204C6F636174696F6E20  .byte 'M,'e,'m,'o,'r,'y,32,'L,'o,'c,'a,'t,'i,'o,'n,32
 0298 696E2068657820283030202D20464629  .byte 'i,'n,32,'h,'e,'x,32,40,48,48,32,45,32,'F,'F,41
 02A8 0D0A23090954202020202D2044617461  .byte 13,10,35,9,9,'T,32,32,32,32,45,32,'D,'a,'t,'a
 02B8 20547970652C20656974686572204120  .byte 32,'T,'y,'p,'e,44,32,'e,'i,'t,'h,'e,'r,32,'A,32
 02C8 666F72204153434949206F7220482066  .byte 'f,'o,'r,32,'A,'S,'C,'I,'I,32,'o,'r,32,'H,32,'f
 02D8 6F722048657861646563696D616C0D0A  .byte 'o,'r,32,'H,'e,'x,'a,'d,'e,'c,'i,'m,'a,'l,13,10
 02E8 2309094E4E09202D204E756D62657220  .byte 35,9,9,'N,'N,9,32,45,32,'N,'u,'m,'b,'e,'r,32
 02F8 6F6620627974657320746F2072656164  .byte 'o,'f,32,'b,'y,'t,'e,'s,32,'t,'o,32,'r,'e,'a,'d
 0308 20696E2068657861646563696D616C0D  .byte 32,'i,'n,32,'h,'e,'x,'a,'d,'e,'c,'i,'m,'a,'l,13
 0318 0A232323232323232323232323232323  .byte 10,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
 0328 23232323232323232323232323232323  .byte 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
 0338 23232323232323232323232323232323  .byte 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
 0348 23232323232323232323232323232323  .byte 35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
 0358 2323232323230D0A00        .byte 35,35,35,35,35,35,13,10,0
 0361           L36:
 0361 257800            .byte 37,'x,0
 0364           L24:
 0364 2000              .byte 32,0
