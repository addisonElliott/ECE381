FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 0B 72 LJMP  _Counter16_ISR     (0153)     ljmp	_Counter16_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 06 44 LJMP  _UART_TX_ISR       (0157)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 06 45 LJMP  _UART_RX_ISR       (0161)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 09 B5 LJMP  _I2CHW_ISR         (0213)     ljmp	_I2CHW_ISR
0063: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [errno+116],0x0    (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [errno+117],0x0    (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 05 E2 LCALL 0x05E2             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 04    MOV   A,0x4              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 D5    MOV   X,0xD5             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 7D    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 7D    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 7D    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 7C    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 7D    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 7D FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 7C    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 7C    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 7D    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 7D FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 7C    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 0E 3B LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
04DD: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_i2cram_Bank1
                                        (0019) export LoadConfigTBL_i2cram_Bank0
                                        (0020) export LoadConfigTBL_i2cram_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_i2cram_Bank0:
                                        (0023) ;  Instance name Counter16, User Module Counter16
                                        (0024) ;       Instance name Counter16, Block Name CNTR16_LSB(DBB00)
                                        (0025) 	db		23h, 00h		;Counter16_CONTROL_LSB_REG(DBB00CR0)
                                        (0026) 	db		21h, 9eh		;Counter16_PERIOD_LSB_REG(DBB00DR1)
                                        (0027) 	db		22h, 4fh		;Counter16_COMPARE_LSB_REG(DBB00DR2)
                                        (0028) ;       Instance name Counter16, Block Name CNTR16_MSB(DBB01)
                                        (0029) 	db		27h, 00h		;Counter16_CONTROL_MSB_REG(DBB01CR0)
                                        (0030) 	db		25h, 00h		;Counter16_PERIOD_MSB_REG(DBB01DR1)
                                        (0031) 	db		26h, 00h		;Counter16_COMPARE_MSB_REG(DBB01DR2)
                                        (0032) ;  Instance name I2CHW, User Module I2CHW
                                        (0033) ;  Instance name UART, User Module UART
                                        (0034) ;       Instance name UART, Block Name RX(DCB03)
                                        (0035) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0036) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0037) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0038) ;       Instance name UART, Block Name TX(DCB02)
                                        (0039) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0040) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0041) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0042) ;  Global Register values Bank 0
                                        (0043) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0044) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0045) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0046) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0047) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0048) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0049) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0050) 	db		b0h, 30h		; Row_0_InputMux register (RDI0RI)
                                        (0051) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0052) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0053) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0054) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0055) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0056) 	db		b6h, 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0057) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0058) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0059) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0060) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0061) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0062) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0063) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0064) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0065) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0066) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0067) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0068) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0069) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0070) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0071) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0072) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0073) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0074) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0075) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0076) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0077) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0078) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0079) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0080) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0081) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0082) 	db		ffh
                                        (0083) LoadConfigTBL_i2cram_Bank1:
                                        (0084) ;  Instance name Counter16, User Module Counter16
                                        (0085) ;       Instance name Counter16, Block Name CNTR16_LSB(DBB00)
                                        (0086) 	db		20h, 11h		;Counter16_FUNC_LSB_REG(DBB00FN)
                                        (0087) 	db		21h, 15h		;Counter16_INPUT_LSB_REG(DBB00IN)
                                        (0088) 	db		22h, 40h		;Counter16_OUTPUT_LSB_REG(DBB00OU)
                                        (0089) ;       Instance name Counter16, Block Name CNTR16_MSB(DBB01)
                                        (0090) 	db		24h, 31h		;Counter16_FUNC_MSB_REG(DBB01FN)
                                        (0091) 	db		25h, 35h		;Counter16_INPUT_MSB_REG(DBB01IN)
                                        (0092) 	db		26h, 44h		;Counter16_OUTPUT_MSB_REG(DBB01OU)
                                        (0093) ;  Instance name I2CHW, User Module I2CHW
                                        (0094) ;  Instance name UART, User Module UART
                                        (0095) ;       Instance name UART, Block Name RX(DCB03)
                                        (0096) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0097) 	db		2dh, e8h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0098) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0099) ;       Instance name UART, Block Name TX(DCB02)
                                        (0100) 	db		28h, 0dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0101) 	db		29h, 08h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0102) 	db		2ah, 47h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0103) ;  Global Register values Bank 1
                                        (0104) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0105) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0106) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0107) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0108) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0109) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0110) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0111) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0112) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0113) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0114) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0115) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0116) 	db		e1h, 1fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0117) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0118) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0119) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0120) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0121) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0122) 	db		ffh
                                        (0123) AREA psoc_config(rom, rel)
                                        (0124) LoadConfigTBL_i2cram_Ordered:
                                        (0125) ;  Ordered Global Register values
                                        (0126) 	M8C_SetBank0
04DF: 62 00 00 MOV   REG[0x0],0x0       (0127) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
04E2: 71 10    OR    F,0x10             
                                        (0128) 	M8C_SetBank1
04E4: 62 00 00 MOV   REG[0x0],0x0       (0129) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
04E7: 62 01 FF MOV   REG[0x1],0xFF      (0130) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
04EA: 70 EF    AND   F,0xEF             
                                        (0131) 	M8C_SetBank0
04EC: 62 03 FF MOV   REG[0x3],0xFF      (0132) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
04EF: 62 02 00 MOV   REG[0x2],0x0       (0133) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
04F2: 71 10    OR    F,0x10             
                                        (0134) 	M8C_SetBank1
04F4: 62 02 00 MOV   REG[0x2],0x0       (0135) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
04F7: 62 03 00 MOV   REG[0x3],0x0       (0136) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
04FA: 70 EF    AND   F,0xEF             
                                        (0137) 	M8C_SetBank0
04FC: 62 01 00 MOV   REG[0x1],0x0       (0138) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
04FF: 62 04 A0 MOV   REG[0x4],0xA0      (0139) 	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
0502: 71 10    OR    F,0x10             
                                        (0140) 	M8C_SetBank1
0504: 62 04 A0 MOV   REG[0x4],0xA0      (0141) 	mov	reg[04h], a0h		; Port_1_DriveMode_0 register (PRT1DM0)
0507: 62 05 FF MOV   REG[0x5],0xFF      (0142) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
050A: 70 EF    AND   F,0xEF             
                                        (0143) 	M8C_SetBank0
050C: 62 07 BF MOV   REG[0x7],0xBF      (0144) 	mov	reg[07h], bfh		; Port_1_DriveMode_2 register (PRT1DM2)
050F: 62 06 40 MOV   REG[0x6],0x40      (0145) 	mov	reg[06h], 40h		; Port_1_GlobalSelect register (PRT1GS)
0512: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
0514: 62 06 00 MOV   REG[0x6],0x0       (0147) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0517: 62 07 00 MOV   REG[0x7],0x0       (0148) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
051A: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
051C: 62 05 00 MOV   REG[0x5],0x0       (0150) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
051F: 62 08 00 MOV   REG[0x8],0x0       (0151) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0522: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
0524: 62 08 80 MOV   REG[0x8],0x80      (0153) 	mov	reg[08h], 80h		; Port_2_DriveMode_0 register (PRT2DM0)
0527: 62 09 7F MOV   REG[0x9],0x7F      (0154) 	mov	reg[09h], 7fh		; Port_2_DriveMode_1 register (PRT2DM1)
052A: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
052C: 62 0B 7F MOV   REG[0xB],0x7F      (0156) 	mov	reg[0bh], 7fh		; Port_2_DriveMode_2 register (PRT2DM2)
052F: 62 0A 80 MOV   REG[0xA],0x80      (0157) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
0532: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
0534: 62 0A 00 MOV   REG[0xA],0x0       (0159) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0537: 62 0B 00 MOV   REG[0xB],0x0       (0160) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
053A: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
053C: 62 09 00 MOV   REG[0x9],0x0       (0162) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
053F: 62 0C 00 MOV   REG[0xC],0x0       (0163) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0542: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
0544: 62 0C 00 MOV   REG[0xC],0x0       (0165) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0547: 62 0D 00 MOV   REG[0xD],0x0       (0166) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
054A: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
054C: 62 0F 00 MOV   REG[0xF],0x0       (0168) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
054F: 62 0E 00 MOV   REG[0xE],0x0       (0169) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0552: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
0554: 62 0E 00 MOV   REG[0xE],0x0       (0171) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0557: 62 0F 00 MOV   REG[0xF],0x0       (0172) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
055A: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
055C: 62 0D 00 MOV   REG[0xD],0x0       (0174) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
055F: 62 10 00 MOV   REG[0x10],0x0      (0175) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0562: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
0564: 62 10 00 MOV   REG[0x10],0x0      (0177) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0567: 62 11 00 MOV   REG[0x11],0x0      (0178) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
056A: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
056C: 62 13 00 MOV   REG[0x13],0x0      (0180) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
056F: 62 12 00 MOV   REG[0x12],0x0      (0181) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0572: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
0574: 62 12 00 MOV   REG[0x12],0x0      (0183) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0577: 62 13 00 MOV   REG[0x13],0x0      (0184) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
057A: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
057C: 62 11 00 MOV   REG[0x11],0x0      (0186) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
057F: 62 14 00 MOV   REG[0x14],0x0      (0187) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0582: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
0584: 62 14 00 MOV   REG[0x14],0x0      (0189) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0587: 62 15 00 MOV   REG[0x15],0x0      (0190) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
058A: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
058C: 62 17 00 MOV   REG[0x17],0x0      (0192) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
058F: 62 16 00 MOV   REG[0x16],0x0      (0193) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0592: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
0594: 62 16 00 MOV   REG[0x16],0x0      (0195) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0597: 62 17 00 MOV   REG[0x17],0x0      (0196) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
059A: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
059C: 62 15 00 MOV   REG[0x15],0x0      (0198) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
059F: 62 18 00 MOV   REG[0x18],0x0      (0199) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
05A2: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
05A4: 62 18 00 MOV   REG[0x18],0x0      (0201) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
05A7: 62 19 00 MOV   REG[0x19],0x0      (0202) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
05AA: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
05AC: 62 1B 00 MOV   REG[0x1B],0x0      (0204) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
05AF: 62 1A 00 MOV   REG[0x1A],0x0      (0205) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
05B2: 71 10    OR    F,0x10             
                                        (0206) 	M8C_SetBank1
05B4: 62 1A 00 MOV   REG[0x1A],0x0      (0207) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
05B7: 62 1B 00 MOV   REG[0x1B],0x0      (0208) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
05BA: 70 EF    AND   F,0xEF             
                                        (0209) 	M8C_SetBank0
05BC: 62 19 00 MOV   REG[0x19],0x0      (0210) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
05BF: 62 1C 00 MOV   REG[0x1C],0x0      (0211) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
05C2: 71 10    OR    F,0x10             
                                        (0212) 	M8C_SetBank1
05C4: 62 1C 00 MOV   REG[0x1C],0x0      (0213) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
05C7: 62 1D 00 MOV   REG[0x1D],0x0      (0214) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
05CA: 70 EF    AND   F,0xEF             
                                        (0215) 	M8C_SetBank0
05CC: 62 1F 00 MOV   REG[0x1F],0x0      (0216) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
05CF: 62 1E 00 MOV   REG[0x1E],0x0      (0217) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
05D2: 71 10    OR    F,0x10             
                                        (0218) 	M8C_SetBank1
05D4: 62 1E 00 MOV   REG[0x1E],0x0      (0219) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
05D7: 62 1F 00 MOV   REG[0x1F],0x0      (0220) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
05DA: 70 EF    AND   F,0xEF             
                                        (0221) 	M8C_SetBank0
05DC: 62 1D 00 MOV   REG[0x1D],0x0      (0222) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
05DF: 70 EF    AND   F,0xEF             
                                        (0223) 	M8C_SetBank0
05E1: 7F       RET                      (0224) 	ret
                                        (0225) 
                                        (0226) 
                                        (0227) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_i2cram
                                        (0026) export _LoadConfig_i2cram
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
05E2: 7C 05 E9 LCALL 0x05E9             (0058) 	lcall	LoadConfig_i2cram
05E5: 7C 04 DD LCALL 0x04DD             (0059) 	lcall	LoadConfigTBL_i2cram_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
05E8: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration i2cram
                                        (0067) ;
                                        (0068) ;    Load configuration registers for i2cram.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_i2cram:
                                        (0085)  LoadConfig_i2cram:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
05E9: 10       PUSH  X                  (0088) 	push	x
05EA: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
05EC: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
05EE: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
05EF: 50 02    MOV   A,0x2              (0093)     mov     A, >LoadConfigTBL_i2cram_Bank0
05F1: 57 BC    MOV   X,0xBC             (0094)     mov     X, <LoadConfigTBL_i2cram_Bank0
05F3: 7C 06 04 LCALL 0x0604             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
05F6: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
05F8: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
05F9: 50 03    MOV   A,0x3              (0100)     mov     A, >LoadConfigTBL_i2cram_Bank1
05FB: 57 23    MOV   X,0x23             (0101)     mov     X, <LoadConfigTBL_i2cram_Bank1
05FD: 7C 06 04 LCALL 0x0604             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0600: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
0602: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
0603: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
0604: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
0606: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
0607: 08       PUSH  A                  (0132)     push    A
0608: 4F       MOV   X,SP               (0133)     mov     X, SP
0609: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
060C: D0 04    JNC   0x0611             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
060E: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
0611: 18       POP   A                  (0138)     pop     A
0612: 20       POP   X                  (0139)     pop     X
0613: 70 EF    AND   F,0xEF             
0615: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0618: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
0619: 08       PUSH  A                  (0145)     push    A
061A: 28       ROMX                     (0146)     romx                            ; Load register address from table
061B: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
061D: A0 1F    JZ    0x063D             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
061F: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
0620: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
0623: A0 03    JZ    0x0627             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0625: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
0627: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
0629: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
062A: 20       POP   X                  (0156)     pop     X
062B: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
062C: 09 00    ADC   A,0x0              (0158)     adc     A, 0
062E: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
062F: 08       PUSH  A                  (0160)     push    A
0630: 28       ROMX                     (0161)     romx                            ; load config data from the table
0631: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
0632: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
0634: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
0636: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
0637: 20       POP   X                  (0166)     pop     X
0638: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
0639: 09 00    ADC   A,0x0              (0168)     adc     A, 0
063B: 8F D7    JMP   0x0613             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
063D: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
063F: 70 3F    AND   F,0x3F             
0641: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
0643: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
0644: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
0645: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
0646: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
0649: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
064C: 7F       RET                      (0182)    ret
064D: 41 E1 FB AND   REG[0xE1],0xFB     
0650: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0653: 7F       RET                      (0214)    ret
0654: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
0656: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
0658: A0 07    JZ    0x0660             (0249)    jz    .SetModeRegEmpty
065A: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
065D: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
065F: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
0660: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0663: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
0665: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
0666: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0668: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
066A: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
066C: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
066D: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0670: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
0673: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0674: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0676: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0677: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0679: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
067A: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
067C: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
067D: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
067F: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
0680: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
0682: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
0684: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
0686: A0 06    JZ    0x068D             (0492)    jz   .SetTxCmpMode
                                        (0493) 
0688: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
068B: 80 04    JMP   0x0690             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
068D: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
0690: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
0692: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
0693: 08       PUSH  A                  (0536)    push A
0694: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
0696: A0 06    JZ    0x069D             (0538)    jz   .DisRxInt
0698: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
069B: 80 04    JMP   0x06A0             (0541)    jmp  .CheckTxInt
069D: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
06A0: 18       POP   A                  (0547)    pop  A
06A1: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
06A3: A0 06    JZ    0x06AA             (0549)    jz   .DisTxInt
06A5: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
06A8: 80 04    JMP   0x06AD             (0552)    jmp  .End_IntCntl
06AA: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
06AD: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
06BE: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
06BF: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
06C0: 67       ASR   A                  (0603)    asr   A
06C1: 67       ASR   A                  (0604)    asr   A
06C2: 67       ASR   A                  (0605)    asr   A
06C3: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
06C5: FF E7    INDEX 0x06AE             (0607)    index UART_HEX_STR                  ; Get Hex value
06C7: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
06C9: 18       POP   A                  (0609)    pop   A                             ; Restore value
06CA: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
06CC: FF E0    INDEX 0x06AE             (0611)    index UART_HEX_STR                  ; Get Hex value
06CE: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
06D0: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
06D1: 4B       SWAP  A,X                (0645)    swap  A,X
06D2: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
06D4: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
06D5: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
06D7: 7F       RET                      (0650)    ret
06D8: 49 2B 10 TST   REG[0x2B],0x10     
06DB: AF FC    JZ    _UART_PutChar      
06DD: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
06DF: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
06E0: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
06E3: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
06E5: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
06E7: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
06E8: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
06EA: 08       PUSH  A                  (0756)    push A
06EB: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
06ED: B0 04    JNZ   0x06F2             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
06EF: 18       POP   A                  (0759)    pop  A
06F0: 80 0B    JMP   0x06FC             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
06F2: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
06F4: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
06F5: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
06F6: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
06F8: B0 03    JNZ   0x06FC             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
06FA: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
06FB: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
06FC: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
06FE: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
06FF: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0701: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0703: 08       PUSH  A                  (0819)    push A
0704: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0706: B0 07    JNZ   0x070E             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0708: 18       POP   A                  (0822)    pop  A
0709: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
070B: 4B       SWAP  A,X                (0824)    swap A,X
070C: 80 07    JMP   0x0714             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
070E: 18       POP   A                  (0828)    pop  A
070F: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0711: 4B       SWAP  A,X                (0830)    swap A,X
0712: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0714: 7F       RET                      (0836)    ret
0715: 70 BF    AND   F,0xBF             
0717: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0719: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
071B: A0 06    JZ    0x0722             (0872)    jz    End_PutString                           ; Check for end of string
071D: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
071F: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0720: 8F F8    JMP   0x0719             (0875)    jmp   .PutStringLoop                          ; Get next character
0722: 70 3F    AND   F,0x3F             
0724: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0726: 7F       RET                      (0879)    ret
0727: 70 BF    AND   F,0xBF             
0729: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
072C: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
072D: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
072F: A0 1A    JZ    0x074A             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0731: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
0733: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0735: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
0737: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0739: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
073B: 49 2B 10 TST   REG[0x2B],0x10     
073E: AF FC    JZ    0x073B             
0740: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0742: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
0743: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0746: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0748: 8F E4    JMP   0x072D             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
074A: 70 3F    AND   F,0x3F             
074C: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
074E: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
074F: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0750: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
0753: B0 06    JNZ   0x075A             (0980)    jnz   .CW_WRITEIT
0755: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
0758: A0 1D    JZ    0x0776             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
075A: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
075B: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
075D: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
075F: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
0760: 49 2B 10 TST   REG[0x2B],0x10     
0763: AF FC    JZ    0x0760             
0765: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
0767: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0768: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
076B: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
076E: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0771: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0774: 8F DB    JMP   0x0750             (0995)    jmp   .CW_Loop
0776: 70 3F    AND   F,0x3F             
0778: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
077A: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
077B: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
077C: 10       PUSH  X                  (1030)    push  X
077D: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
077E: A0 0B    JZ    0x078A             (1032)    jz    .End_CPutString
0780: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
0782: 20       POP   X                  (1034)    pop   X
0783: 18       POP   A                  (1035)    pop   A
0784: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0785: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
0787: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
0788: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
078A: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
078C: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
078D: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
078F: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
0791: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0793: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0795: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\i2chwrsrcinits.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHW.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) include "PSoCGPIOINT.inc"
                                        (0026) include "PSoCAPI.inc"
                                        (0027) 
                                        (0028) ;-----------------------------------------------
                                        (0029) ; include instance specific register definitions
                                        (0030) ;-----------------------------------------------
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ;  Global Symbols
                                        (0034) ;-----------------------------------------------
                                        (0035) ;-------------------------------------------------------------------
                                        (0036) ;  Declare the functions global for both assembler and C compiler.
                                        (0037) ;
                                        (0038) ;  Note that there are two names for each API. First name is
                                        (0039) ;  assembler reference. Name with underscore is name refence for
                                        (0040) ;  C compiler.  Calling function in C source code does not require
                                        (0041) ;  the underscore.
                                        (0042) ;-------------------------------------------------------------------
                                        (0043) 
                                        (0044) export    I2CHW_ResumeInt
                                        (0045) export   _I2CHW_ResumeInt
                                        (0046) export    I2CHW_EnableInt
                                        (0047) export   _I2CHW_EnableInt
                                        (0048) export    I2CHW_ClearInt
                                        (0049) export   _I2CHW_ClearInt
                                        (0050) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0051) export    I2CHW_EnableSlave
                                        (0052) export   _I2CHW_EnableSlave
                                        (0053) ENDIF
                                        (0054) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0055) export    I2CHW_EnableMstr
                                        (0056) export   _I2CHW_EnableMstr
                                        (0057) ENDIF
                                        (0058) export    I2CHW_Start
                                        (0059) export   _I2CHW_Start
                                        (0060) export    I2CHW_DisableInt
                                        (0061) export   _I2CHW_DisableInt
                                        (0062) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0063) export    I2CHW_DisableSlave
                                        (0064) export   _I2CHW_DisableSlave
                                        (0065) ENDIF
                                        (0066) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0067) export    I2CHW_DisableMstr
                                        (0068) export   _I2CHW_DisableMstr
                                        (0069) ENDIF
                                        (0070) export    I2CHW_Stop
                                        (0071) export   _I2CHW_Stop
                                        (0072) 
                                        (0073) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0074)  IF (I2CHW_CY8C22x45)
                                        (0075) export    I2CHW_EnableHWAddrCheck
                                        (0076) export   _I2CHW_EnableHWAddrCheck
                                        (0077) export    I2CHW_DisableHWAddrCheck
                                        (0078) export   _I2CHW_DisableHWAddrCheck
                                        (0079)  ENDIF
                                        (0080) ENDIF
                                        (0081) 
                                        (0082) AREA UserModules (ROM, REL)
                                        (0083) 
                                        (0084) .SECTION
                                        (0085) 
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;  FUNCTION NAME: I2CHW_Start
                                        (0088) ;
                                        (0089) ;  DESCRIPTION:
                                        (0090) ;   Initialize the I2CHW I2C bus interface.
                                        (0091) ;
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;
                                        (0094) ;  ARGUMENTS:
                                        (0095) ;
                                        (0096) ;  RETURNS: none
                                        (0097) ;
                                        (0098) ;  SIDE EFFECTS:
                                        (0099) ;    The A and X registers may be modified by this or future implementations
                                        (0100) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0101) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0102) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0103) ;    functions.
                                        (0104) ;          
                                        (0105)  I2CHW_Start:
                                        (0106) _I2CHW_Start:
                                        (0107)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0108) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0109)  IF (I2CHW_CY8C22x45)
                                        (0110)    M8C_SetBank1
                                        (0111)    mov   reg[I2CHW_ADDR], I2CHW_SLAVE_ADDR;I2CHW_HW_ADDR_EN
                                        (0112)    M8C_SetBank0
                                        (0113)  ENDIF
                                        (0114) ENDIF
                                        (0115)     RAM_EPILOGUE RAM_USE_CLASS_1
0796: 7F       RET                      (0116)     ret
                                        (0117) .ENDSECTION
                                        (0118) 
                                        (0119) .SECTION
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;  FUNCTION NAME: I2CHW_ResumeInt
                                        (0122) ;
                                        (0123) ;  DESCRIPTION:
                                        (0124) ;     reEnables SDA interrupt allowing start condition detection. 
                                        (0125) ;     Skips clearing INT_CLR3 by entering the EnableInt at ResumeIntEntry:.
                                        (0126) ;     Remember to call the global interrupt enable function by using
                                        (0127) ;     the macro: M8C_EnableGInt.
                                        (0128) ;-----------------------------------------------------------------------------
                                        (0129) ;  ARGUMENTS: none
                                        (0130) ;
                                        (0131) ;  RETURNS: none
                                        (0132) ;
                                        (0133) ;  SIDE EFFECTS:
                                        (0134) ;    The A and X registers may be modified by this or future implementations
                                        (0135) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0136) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0137) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0138) ;    functions.
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140)  I2CHW_ResumeInt:
                                        (0141) _I2CHW_ResumeInt:
                                        (0142)     RAM_PROLOGUE RAM_USE_CLASS_1
0797: 80 04    JMP   0x079C             (0143)     jmp ResumeIntEntry
0799: 62 DD FE MOV   REG[0xDD],0xFE     
079C: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0144)     
                                        (0145) ;-----------------------------------------------------------------------------
                                        (0146) ;  FUNCTION NAME: I2CHW_EnableInt
                                        (0147) ;
                                        (0148) ;  DESCRIPTION:
                                        (0149) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0150) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0151) ;
                                        (0152) ;-----------------------------------------------------------------------------
                                        (0153) ;
                                        (0154) ;  ARGUMENTS: none
                                        (0155) ;
                                        (0156) ;  RETURNS: none
                                        (0157) ;
                                        (0158) ;  SIDE EFFECTS:
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165)  I2CHW_EnableInt:
                                        (0166) _I2CHW_EnableInt:
                                        (0167)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)     ;first clear any pending interrupts
                                        (0169)     M8C_ClearIntFlag INT_CLR3, I2CHW_INT_MASK
                                        (0170) ResumeIntEntry:
                                        (0171)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_1
079F: 7F       RET                      (0173)     ret
07A0: 62 DD FE MOV   REG[0xDD],0xFE     
                                        (0174) 
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: I2CHW_ClearInt
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;     Clears only the I2C interrupt in the INT_CLR3 register.
                                        (0183) ;
                                        (0184) ;-----------------------------------------------------------------------------
                                        (0185) ;
                                        (0186) ;  ARGUMENTS: none
                                        (0187) ;
                                        (0188) ;  RETURNS: none
                                        (0189) ;
                                        (0190) ;  SIDE EFFECTS:
                                        (0191) ;    The A and X registers may be modified by this or future implementations
                                        (0192) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0193) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0194) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0195) ;    functions.
                                        (0196) ;          
                                        (0197)  I2CHW_ClearInt:
                                        (0198) _I2CHW_ClearInt:
                                        (0199)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0200)     M8C_ClearIntFlag INT_CLR3, I2CHW_INT_MASK
                                        (0201)     RAM_EPILOGUE RAM_USE_CLASS_1
07A3: 7F       RET                      (0202)     ret
07A4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0203)     
                                        (0204) .ENDSECTION
                                        (0205) 
                                        (0206) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))	
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: I2CHW_EnableMstr
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0213) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0214) ;
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS: none
                                        (0218) ;
                                        (0219) ;  RETURNS: none
                                        (0220) ;
                                        (0221) ;  SIDE EFFECTS:
                                        (0222) ;    The A and X registers may be modified by this or future implementations
                                        (0223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0225) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0226) ;    functions.
                                        (0227) ;          
                                        (0228)  I2CHW_EnableMstr:
                                        (0229) _I2CHW_EnableMstr:
                                        (0230)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231) 	;;CDT 28399
                                        (0232) 	RAM_SETPAGE_CUR >I2CHW_bStatus
07A7: 26 00 7F AND   [0x0],0x7F         (0233) 	and [I2CHW_bStatus], ~0x80 ;; ~I2CHW_ISR_ACTIVE
07AA: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0234) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
07AD: 26 02 7F AND   [0x2],0x7F         (0235)     and    [I2CHW_RsrcStatus], ~0x80;;~I2CHW_ISR_ACTIVE        ; Make sure internal control variables weren't corrupted previous to start.
07B0: 43 D6 02 OR    REG[0xD6],0x2      
                                        (0236)     BitSetI2CHW_CFG I2C_M_EN                                         ;Enable SDA interupt
                                        (0237)     RAM_EPILOGUE RAM_USE_CLASS_1
07B3: 7F       RET                      (0238)     ret
07B4: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) ENDIF
                                        (0242) 
                                        (0243) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0244) .SECTION
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  FUNCTION NAME: I2CHW_EnableSlave
                                        (0247) ;
                                        (0248) ;  DESCRIPTION:
                                        (0249) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0250) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0251) ;
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS: none
                                        (0255) ;
                                        (0256) ;  RETURNS: none
                                        (0257) ;
                                        (0258) ;  SIDE EFFECTS:
                                        (0259) ;    The A and X registers may be modified by this or future implementations
                                        (0260) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0261) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0262) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0263) ;    functions.
                                        (0264) ;          
                                        (0265)  I2CHW_EnableSlave:
                                        (0266) _I2CHW_EnableSlave:
                                        (0267)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0268)     
                                        (0269)     M8C_SetBank1 ;The SDA and SCL pins are setting to Hi-z drive mode
                                        (0270)     and reg[I2CHWSDA_DriveMode_0_ADDR],~(I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0271)     or  reg[I2CHWSDA_DriveMode_1_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0272)     M8C_SetBank0
                                        (0273)     or  reg[I2CHWSDA_DriveMode_2_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0274)    
                                        (0275)     BitSetI2CHW_CFG I2C_S_EN                                         ;Enable SDA interrupt
                                        (0276)     nop
                                        (0277)     nop
                                        (0278)     nop
                                        (0279)     nop
                                        (0280)     nop
                                        (0281)    
                                        (0282)     M8C_SetBank1 ;The SDA and SCL pins are restored to Open Drain Low drive mode
                                        (0283)     or reg[I2CHWSDA_DriveMode_0_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0284)     or reg[I2CHWSDA_DriveMode_1_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0285)     M8C_SetBank0
                                        (0286)     or reg[I2CHWSDA_DriveMode_2_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0287)     
                                        (0288)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0289)     ret
                                        (0290) 
                                        (0291) .ENDSECTION
                                        (0292) ENDIF
                                        (0293) 
                                        (0294) .SECTION
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;  FUNCTION NAME: I2CHW_DisableInt
                                        (0297) ;  FUNCTION NAME: I2CHW_Stop
                                        (0298) ;
                                        (0299) ;  DESCRIPTION:
                                        (0300) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: none
                                        (0305) ;
                                        (0306) ;  RETURNS: none
                                        (0307) ;
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315)  I2CHW_DisableInt:
                                        (0316) _I2CHW_DisableInt:
                                        (0317)  I2CHW_Stop:
                                        (0318) _I2CHW_Stop:
                                        (0319)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0320)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0321)     RAM_EPILOGUE RAM_USE_CLASS_1
07B7: 7F       RET                      (0322)     ret
07B8: 41 D6 FD AND   REG[0xD6],0xFD     
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME: I2CHW_DisableSlave
                                        (0330) ;
                                        (0331) ;  DESCRIPTION:
                                        (0332) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0333) ;
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;
                                        (0336) ;  ARGUMENTS: none
                                        (0337) ;
                                        (0338) ;  RETURNS: none
                                        (0339) ;
                                        (0340) ;  SIDE EFFECTS:
                                        (0341) ;    The A and X registers may be modified by this or future implementations
                                        (0342) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0343) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0344) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0345) ;    functions.
                                        (0346) ;          
                                        (0347)  I2CHW_DisableSlave:
                                        (0348) _I2CHW_DisableSlave:
                                        (0349)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0350)     BitClrI2CHW_CFG I2C_S_EN                                         ;Disable the Slave
                                        (0351)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0352)     ret
                                        (0353) 
                                        (0354) .ENDSECTION
                                        (0355) ENDIF
                                        (0356) 
                                        (0357) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0358) .SECTION
                                        (0359) ;-----------------------------------------------------------------------------
                                        (0360) ;  FUNCTION NAME: I2CHW_DisableMstr
                                        (0361) ;
                                        (0362) ;  DESCRIPTION:
                                        (0363) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0364) ;
                                        (0365) ;-----------------------------------------------------------------------------
                                        (0366) ;
                                        (0367) ;  ARGUMENTS: none
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378)  I2CHW_DisableMstr:
                                        (0379) _I2CHW_DisableMstr:
                                        (0380)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0381)     BitClrI2CHW_CFG I2C_M_EN                                         ;Disable the Master
                                        (0382)     RAM_EPILOGUE RAM_USE_CLASS_1
07BB: 7F       RET                      (0383)    ret
                                        (0384) 
                                        (0385) .ENDSECTION
                                        (0386) ENDIF
                                        (0387) 
                                        (0388) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0389)  IF (I2CHW_CY8C22x45)
                                        (0390)  .SECTION
                                        (0391) ;-----------------------------------------------------------------------------
                                        (0392) ;  FUNCTION NAME: void  I2CHW_EnableHWAddrCheck(void)
                                        (0393) ;
                                        (0394) ;  DESCRIPTION:
                                        (0395) ;   Set respective bit to engage the HardWare Address Recognition 
                                        (0396) ;   feature in I2C slave block.
                                        (0397) ;
                                        (0398) ;-----------------------------------------------------------------------------
                                        (0399) ;
                                        (0400) ;  ARGUMENTS: none
                                        (0401) ;
                                        (0402) ;  RETURNS: none
                                        (0403) ;
                                        (0404) ;  SIDE EFFECTS:
                                        (0405) ;    If the HardWare Address Recognition feature is enabled, the ROM registers reading does not work.
                                        (0406) ;    The HardWare Address Recognition feature should be disabled for using ROM registers.
                                        (0407) ;
                                        (0408) ;    The A and X registers may be modified by this or future implementations
                                        (0409) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0410) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0411) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0412) ;    functions.
                                        (0413) ;
                                        (0414)  I2CHW_EnableHWAddrCheck:
                                        (0415) _I2CHW_EnableHWAddrCheck:
                                        (0416)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0417)    M8C_SetBank1
                                        (0418)    or    reg[I2CHW_ADDR], I2CHW_HW_ADDR_EN
                                        (0419)    M8C_SetBank0
                                        (0420)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0421)    ret
                                        (0422) .ENDSECTION
                                        (0423) 
                                        (0424) .SECTION
                                        (0425) ;-----------------------------------------------------------------------------
                                        (0426) ;  FUNCTION NAME: void  I2CHW_DisableHWAddrCheck(void)
                                        (0427) ;
                                        (0428) ;  DESCRIPTION:
                                        (0429) ;   Clear respective bit to disengage the HardWare Address Recognition 
                                        (0430) ;   feature in I2C slave block.
                                        (0431) ;
                                        (0432) ;-----------------------------------------------------------------------------
                                        (0433) ;
                                        (0434) ;  ARGUMENTS: none
                                        (0435) ;
                                        (0436) ;  RETURNS: none
                                        (0437) ;
                                        (0438) ;  SIDE EFFECTS:
                                        (0439) ;    The A and X registers may be modified by this or future implementations
                                        (0440) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0441) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0442) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0443) ;    functions.
                                        (0444) ;
                                        (0445)  I2CHW_DisableHWAddrCheck:
                                        (0446) _I2CHW_DisableHWAddrCheck:
                                        (0447)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0448)    M8C_SetBank1
                                        (0449)    and   reg[I2CHW_ADDR], ~I2CHW_HW_ADDR_EN
                                        (0450)    M8C_SetBank0
                                        (0451)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0452)    ret
                                        (0453) .ENDSECTION
                                        (0454)  ENDIF
                                        (0455) ENDIF
                                        (0456) 
                                        (0457) ; End of File I2CHW.asm
FILE: lib\i2chwmstr.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
07BC: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: I2CHWMSTR.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: <UMName> User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) include "I2CHWMstr.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) 
                                        (0031) export   I2CHW_fSendRepeatStart
                                        (0032) export  _I2CHW_fSendRepeatStart
                                        (0033) export   I2CHW_fSendStart
                                        (0034) export  _I2CHW_fSendStart
                                        (0035) export   I2CHW_SendStop
                                        (0036) export  _I2CHW_SendStop
                                        (0037) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0038) export  _I2CHW_fReadBytes
                                        (0039) export  _I2CHW_bWriteBytes
                                        (0040) export  _I2CHW_bWriteCBytes
                                        (0041) 
                                        (0042) export   I2CHW_fWrite
                                        (0043) export  _I2CHW_fWrite
                                        (0044) 
                                        (0045) export   I2CHW_bRead
                                        (0046) export  _I2CHW_bRead
                                        (0047) 
                                        (0048) export    I2CHW_bReadBusStatus
                                        (0049) export   _I2CHW_bReadBusStatus
                                        (0050) 
                                        (0051) 
                                        (0052) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0053) 
                                        (0054) export   I2CHW_fReadBytes
                                        (0055) export   I2CHW_bWriteBytes
                                        (0056) export   I2CHW_bWriteCBytes
                                        (0057) 
                                        (0058) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0059) 
                                        (0060) ;-------------------------------------------------------------------
                                        (0061) ;  Declare the varables for both the assembler and C compiler.
                                        (0062) ;
                                        (0063) ;-------------------------------------------------------------------
                                        (0064) export  I2CHW_bStatus
                                        (0065) export _I2CHW_bStatus
                                        (0066) 
                                        (0067) ;-----------------------------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;-----------------------------------------------
                                        (0070) area InterruptRAM(RAM, REL, CON)
                                        (0071) 
                                        (0072) _I2CHW_bStatus:
                                        (0073)  I2CHW_bStatus:                        blk   1  ; Status during transfers
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) ;-----------------------------------------------
                                        (0077) ;  EQUATES
                                        (0078) ;-----------------------------------------------
                                        (0079) I2CHW_SLAVE_ACKed:                     equ 0x01 ; This bit set if Slave ACKed Master
                                        (0080) I2CHW_SEND_ACK:                        equ 0x10 ; If this flag set, Master should send ACK
                                        (0081) 
                                        (0082) 
                                        (0083) .SECTION
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;  FUNCTION NAME: I2CHW_fReadBytes
                                        (0086) ;
                                        (0087) ;  DESCRIPTION:
                                        (0088) ;       Read Multiple bytes from a slave.  Use the ISR to perform operation.
                                        (0089) ;-----------------------------------------------------------------------------
                                        (0090) ;
                                        (0091) ;  ARGUMENTS:
                                        (0092) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0093) ;           to determine if:
                                        (0094) ;             0x01 => Use RepeatStart instead of Start
                                        (0095) ;             0x02 => Don't send Stop
                                        (0096) ;  [SP-6]=> Count of bytes to read.
                                        (0097) ;  [SP-5]=> MSB of Array address to put data in (ignorned for small mem model)
                                        (0098) ;  [SP-4]=> LSB of Array address to put data in 
                                        (0099) ;  [SP-3]=> Address of slave
                                        (0100) ;
                                        (0101) ;  RETURNS:       None
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;          
                                        (0110) ;    Currently only the page pointer registers listed below are modified: 
                                        (0111) ;          CUR_PP
                                        (0112) ;
                                        (0113) ;  THEORY of OPERATION or PROCEDURE:
                                        (0114) ;    I2C and block must be operational.
                                        (0115) ;    This routine will enable the I2C interrupt!
                                        (0116) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (0117) ;    pend on the ISR_ACTIVE bit until it can run
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) IF	(TOOLCHAIN & HITECH)
                                        (0121) RxMode:         set  -7
                                        (0122) RxCnt:          set  -6
                                        (0123) RxArrayHI:      set  -5
                                        (0124) RxArrayLO:      set  -4
                                        (0125) RxSlaveAddr:    set  -3
                                        (0126) ELSE
                                        (0127) RxMode:         equ  -7
                                        (0128) RxCnt:          equ  -6
                                        (0129) RxArrayHI:      equ  -5
                                        (0130) RxArrayLO:      equ  -4
                                        (0131) RxSlaveAddr:    equ  -3
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) _I2CHW_fReadBytes:			      
                                        (0135)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0136)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0137) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
07BF: 4F       MOV   X,SP               (0138) 	mov   X, SP
                                        (0139) I2CMSCR_NotReady1:
07C0: 51 02    MOV   A,[0x2]            (0140)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
07C2: 47 02 80 TST   [0x2],0x80         (0141)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0142)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0143)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0144)           ;For multi master operations, a pening start or restart
                                        (0145)           ;request might be OK, the master might be waiting to
                                        (0146)           ;acquire the bus from another master
07C5: BF FA    JNZ   0x07C0             (0147)     jnz   I2CMSCR_NotReady1
07C7: 2E 02 80 OR    [0x2],0x80         (0148)     or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared by ISR
                                        (0149)     ;get the address from the parameters on the stack
07CA: 52 FD    MOV   A,[X-3]            (0150)     mov   A, [X + RxSlaveAddr]
07CC: 64       ASL   A                  (0151)     asl   A                                                ; Shift address to the left to make
                                        (0152)                                                            ; a complete byte with the R/W bit.
07CD: 29 01    OR    A,0x1              (0153)     or    A,0x01                                           ; OR the address with the Read bit.
07CF: 53 01    MOV   [0x1],A            (0154)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
07D1: 60 D8    MOV   REG[0xD8],A        (0155)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
07D3: 55 00 00 MOV   [0x0],0x0          (0156)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
07D6: 52 F9    MOV   A,[X-7]            (0157)     mov   A, [X+RxMode]                                    ; place the RxMode in status so ISR can access it
07D8: 53 00    MOV   [0x0],A            (0158)     mov   [I2CHW_bStatus],A
                                        (0159)     ;
                                        (0160)     ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0161)     ;
07DA: 10       PUSH  X                  (0162)     push   X                                               ;preserve since it's used later
07DB: 52 FA    MOV   A,[X-6]            (0163)     mov    A, [X+RxCnt]                                    ;get the write buf size
07DD: 08       PUSH  A                  (0164)     push   A
07DE: 52 FB    MOV   A,[X-5]            (0165)     mov    A, [X+RxArrayHI]                                ;get the write addrHI
07E0: 08       PUSH  A                  (0166)     push   A										   
07E1: 52 FC    MOV   A,[X-4]            (0167)     mov    A, [X+RxArrayLO]							                         ;get the write addrLO
07E3: 08       PUSH  A                  (0168)     push   A                                               ;this will be ignored
07E4: 93 0C    CALL  _I2CHW_InitWrite   (0169)     call  I2CHW_InitWrite                                  ;sets the addr and byte count to write to
07E6: 38 FD    ADD   SP,0xFD            (0170)     add    SP, -3
07E8: 20       POP   X                  (0171)     pop    X                                               ;restore X to be used for the rest of this routine
                                        (0172)     
07E9: 51 01    MOV   A,[0x1]            (0173)     mov   A,[I2CHW_SlaveAddr]
07EB: 48 F9 01 TST   [X-7],0x1          (0174)     tst   [x+RxMode],I2CHW_RepStart
07EE: B0 0A    JNZ   0x07F9             (0175)     jnz   DoRestartRx
07F0: 49 D7 01 TST   REG[0xD7],0x1      (0176)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
07F3: B0 05    JNZ   0x07F9             (0177)     jnz   DoRestartRx
07F5: 91 2E    CALL  0x0925             (0178)     call  I2C_DoStart                                      ; Send a start and address.
07F7: 80 03    JMP   0x07FB             (0179)     jmp   CheckRxAck
                                        (0180) DoRestartRx:
07F9: 90 93    CALL  0x088E             (0181)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
07FB: 70 3F    AND   F,0x3F             
07FD: 71 C0    OR    F,0xC0             
                                        (0182)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (0183)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (0184)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (0185) 
                                        (0186) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0187)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (0188)         ;is finished.
                                        (0189) End_RD:
                                        (0190)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0191)     RAM_EPILOGUE RAM_USE_CLASS_4
07FF: 7F       RET                      (0192)     ret
0800: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0193) 
                                        (0194) .ENDSECTION
                                        (0195) 
                                        (0196) .SECTION
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;  FUNCTION NAME: I2CHW_bWriteBytes
                                        (0199) ;
                                        (0200) ;  DESCRIPTION:
                                        (0201) ;    Write multiple data bits to slave device.
                                        (0202) ;
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;
                                        (0205) ;  ARGUMENTS:
                                        (0206) ; [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0207) ;          to determine if:
                                        (0208) ;              0x01 => Use RePeatStart instead of Start
                                        (0209) ;              0x02 => Don't send Stop
                                        (0210) ; [SP-6]=> Count of bytes to write.
                                        (0211) ; [SP-5]=> MSB of Array address to put data in (ignored small mem model).
                                        (0212) ; [SP-4]=> LSB of Array address to put data in.
                                        (0213) ; [SP-3]=> Address of slave
                                        (0214) ;
                                        (0215) ;
                                        (0216) ;  RETURNS:     None
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS:
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;          
                                        (0225) ;    Currently only the page pointer registers listed below are modified: 
                                        (0226) ;          CUR_PP
                                        (0227) ;
                                        (0228) ;  THEORY of OPERATION or PROCEDURE:
                                        (0229) ;
                                        (0230) ;-----------------------------------------------------------------------------
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232) TxMode:       set  -7
                                        (0233) TxByteCount:  set  -6
                                        (0234) TxArrayHI:    set  -5
                                        (0235) TxArrayLO:    set  -4
                                        (0236) TxSlaveAddr:  set  -3
                                        (0237) ELSE
                                        (0238) TxMode:       equ  -7
                                        (0239) TxByteCount:  equ  -6
                                        (0240) TxArrayHI:    equ  -5
                                        (0241) TxArrayLO:    equ  -4
                                        (0242) TxSlaveAddr:  equ  -3
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) _I2CHW_bWriteBytes:
                                        (0246)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0247)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0248) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
                                        (0249) 
0803: 4F       MOV   X,SP               (0250) 	mov   X, SP
                                        (0251) I2CMSCR_NotReady2:
0804: 51 02    MOV   A,[0x2]            (0252)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0806: 47 02 80 TST   [0x2],0x80         (0253)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0254)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0255)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0256)           ;For multi master operations, a pening start or restart
                                        (0257)           ;request might be OK, the master might be waiting to
                                        (0258)           ;acquire the bus from another master
0809: BF FA    JNZ   0x0804             (0259)     jnz   I2CMSCR_NotReady2
080B: 2E 02 80 OR    [0x2],0x80         (0260)     or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared at end of ISR
080E: 52 FD    MOV   A,[X-3]            (0261)     mov   A, [X + TxSlaveAddr]
0810: 64       ASL   A                  (0262)     asl   A                                                ; Shift address to the left to make
                                        (0263)                                                            ; a complete byte with the R/W bit.
                                        (0264)                                                            ; The ASL takes care of clearing bit 0.
0811: 55 00 00 MOV   [0x0],0x0          (0265)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0814: 53 01    MOV   [0x1],A            (0266)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0816: 60 D8    MOV   REG[0xD8],A        (0267)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0818: 52 F9    MOV   A,[X-7]            (0268)     mov   A, [X+TxMode]                                    ; place the TxMode in status so ISR can access it
081A: 53 00    MOV   [0x0],A            (0269)     mov   [I2CHW_bStatus],A
                                        (0270)     ;
                                        (0271)     ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0272)     ;
081C: 10       PUSH  X                  (0273)         push   X                                                ;preserve since it's used later
081D: 77 FA    INC   [X-6]              (0274)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (0275) 
081F: 52 FA    MOV   A,[X-6]            (0276)         mov    A, [X+TxByteCount]                               ;get the write buf size
0821: 08       PUSH  A                  (0277)         push   A
0822: 52 FB    MOV   A,[X-5]            (0278)         mov    A, [X+TxArrayHI]                                 ;get the write buf addr
0824: 08       PUSH  A                  (0279)         push   A                                                                                            ;this will be ignored
0825: 52 FC    MOV   A,[X-4]            (0280)         mov    A, [X+TxArrayLO]                                 ;get the write buf addr
0827: 08       PUSH  A                  (0281)         push   A
0828: 93 06    CALL  _I2CHW_InitRamRead (0282)         call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
082A: 38 FD    ADD   SP,0xFD            (0283)         add SP, -3
082C: 20       POP   X                  (0284)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0285)     ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (0286) 
                                        (0287) 
082D: 51 01    MOV   A,[0x1]            (0288)     mov   A,[I2CHW_SlaveAddr]
082F: 48 F9 01 TST   [X-7],0x1          (0289)     tst   [x+TxMode],I2CHW_RepStart
0832: B0 0A    JNZ   0x083D             (0290)     jnz   DoRestartTx
0834: 49 D7 01 TST   REG[0xD7],0x1      (0291)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0837: BF C1    JNZ   0x07F9             (0292)     jnz   DoRestartRx
0839: 90 EA    CALL  0x0925             (0293)     call  I2C_DoStart                                      ; Send a start and address.
083B: 80 03    JMP   0x083F             (0294)     jmp   DoTxAck
                                        (0295) DoRestartTx:
083D: 90 4F    CALL  0x088E             (0296)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
083F: 70 3F    AND   F,0x3F             
0841: 71 C0    OR    F,0xC0             
                                        (0297) DoTxAck:
                                        (0298) 
                                        (0299) 
                                        (0300) WriteSlaveAck:
                                        (0301)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0302) 	RAM_EPILOGUE RAM_USE_CLASS_4
0843: 7F       RET                      (0303)     ret
0844: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0304) 
                                        (0305) .ENDSECTION
                                        (0306) 
                                        (0307) .SECTION
                                        (0308) ;-----------------------------------------------------------------------------
                                        (0309) ;  FUNCTION NAME: I2CHW_bWriteCBytes
                                        (0310) ;
                                        (0311) ;  DESCRIPTION:
                                        (0312) ;    Write multiple data bits to slave device from ROM
                                        (0313) ;
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;
                                        (0316) ;  ARGUMENTS:
                                        (0317) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0318) ;            to determine if:
                                        (0319) ;               0x01 => Use RepeatStart instead of Start
                                        (0320) ;               0x02 => Don't send Stop
                                        (0321) ;  [SP-6]=> Count of bytes to write.
                                        (0322) ;  [SP-5]=> MSB of ROM Array address to get data from
                                        (0323) ;  [SP-4]=> LSB of ROM Array address to get data from.
                                        (0324) ;  [SP-3]=> Address of slave
                                        (0325) ;
                                        (0326) ;  RETURNS:
                                        (0327) ;    None
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;
                                        (0339) ;  THEORY of OPERATION or PROCEDURE:
                                        (0340) ;
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) IF	(TOOLCHAIN & HITECH)
                                        (0343) TxCMode:       set  -7
                                        (0344) TxCByteCount:  set  -6
                                        (0345) TxCArrayMSB:   set  -5
                                        (0346) TxCArrayLSB:   set  -4
                                        (0347) ;TxSlaveAddr:  set  -3	  ;defined above this line if for reference only
                                        (0348) ELSE
                                        (0349) TxCMode:       equ  -7
                                        (0350) TxCByteCount:  equ  -6
                                        (0351) TxCArrayMSB:   equ  -5
                                        (0352) TxCArrayLSB:   equ  -4
                                        (0353) ;TxSlaveAddr:  equ  -3	  ;defined above this line if for reference only
                                        (0354) ENDIF
                                        (0355) 
                                        (0356) _I2CHW_bWriteCBytes:
                                        (0357)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0358) 	RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0359) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0847: 4F       MOV   X,SP               (0360) 	mov   X, SP
                                        (0361) I2CMSCR_NotReady3:
0848: 51 02    MOV   A,[0x2]            (0362)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
084A: 47 02 80 TST   [0x2],0x80         (0363)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0364)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0365)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0366)           ;For multi master operations, a pening start or restart
                                        (0367)           ;request might be OK, the master might be waiting to
                                        (0368)           ;acquire the bus from another master
084D: BF FA    JNZ   0x0848             (0369)         jnz   I2CMSCR_NotReady3
084F: 2E 02 80 OR    [0x2],0x80         (0370)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
0852: 52 FD    MOV   A,[X-3]            (0371)     mov   A, [X + TxSlaveAddr]
0854: 64       ASL   A                  (0372)     asl   A                                                ; Shift address to the left to make
                                        (0373)                                                            ; a complete byte with the R/W bit.
                                        (0374)                                                            ; The ASL takes care of clearing bit 0.
0855: 55 00 00 MOV   [0x0],0x0          (0375)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0858: 53 01    MOV   [0x1],A            (0376)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
085A: 60 D8    MOV   REG[0xD8],A        (0377)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
085C: 52 F9    MOV   A,[X-7]            (0378)     mov   A, [X+TxCMode]                                                             ; place the RxMode in status so ISR can access it
085E: 53 00    MOV   [0x0],A            (0379)     mov   [I2CHW_bStatus],A
                                        (0380)     ;
                                        (0381)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0382)         ;
0860: 10       PUSH  X                  (0383)         push   X                                                ;preserve X since it's used later
                                        (0384) 
0861: 50 00    MOV   A,0x0              (0385)          mov    A, 0                                             ;get the write buf size (this is the hi order part)
0863: 77 FA    INC   [X-6]              (0386)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
0865: D0 02    JNC   0x0868             (0387)         jnc    . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
0867: 74       INC   A                  (0388)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
0868: 08       PUSH  A                  (0389)         push   A
0869: 52 FA    MOV   A,[X-6]            (0390)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
086B: 08       PUSH  A                  (0391)         push   A
086C: 52 FB    MOV   A,[X-5]            (0392)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
086E: 08       PUSH  A                  (0393)         push   A                                                                                        ;this will be ignored
086F: 52 FC    MOV   A,[X-4]            (0394)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
0871: 08       PUSH  A                  (0395)         push   A
                                        (0396) 
0872: 92 E9    CALL  _I2CHW_InitFlashRead(0397)         call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
0874: 38 FC    ADD   SP,0xFC            (0398)         add SP, -4
0876: 20       POP   X                  (0399)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0400) 
                                        (0401)     ;or  [I2CHW_RsrcStatus],I2C_READFLASH
0877: 51 01    MOV   A,[0x1]            (0402)     mov   A,[I2CHW_SlaveAddr]
0879: 48 F9 01 TST   [X-7],0x1          (0403)     tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
087C: B0 0A    JNZ   0x0887             (0404)     jnz   DoCRestartTx                                     ; should executed.
087E: 49 D7 01 TST   REG[0xD7],0x1      (0405)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0881: BF 77    JNZ   0x07F9             (0406)     jnz   DoRestartRx
0883: 90 A0    CALL  0x0925             (0407)     call  I2C_DoStart                                      ; Send a start and address.
0885: 80 03    JMP   0x0889             (0408)     jmp   DoCTxAck
                                        (0409) DoCRestartTx:
0887: 90 05    CALL  0x088E             (0410)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0889: 70 3F    AND   F,0x3F             
088B: 71 C0    OR    F,0xC0             
                                        (0411) 
                                        (0412) DoCTxAck:                                                  ; Test to see if Slave is ACKed
                                        (0413) 
                                        (0414) CWriteSlaveAck:
                                        (0415)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0416)     RAM_EPILOGUE RAM_USE_CLASS_4
088D: 7F       RET                      (0417)     ret
088E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0418) 
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: I2CHW_DoBufferRepeatStart
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;    Send repeated start condition and send slave address for buffered transfers.
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     This routine is called internally only.  It is not exported or intended as an API
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;    None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS:
                                        (0437) ;    The A and X registers may be modified by this or future implementations
                                        (0438) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0439) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0440) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0441) ;    functions.
                                        (0442) ;          
                                        (0443) ;  THEORY of OPERATION or PROCEDURE:
                                        (0444) ;    This is similar to the I2C_DoRepeatStart entry point but this function does not
                                        (0445) ;    wait for the byte_complete flag.  That is this is not polled and is therefore compatible
                                        (0446) ;    with the buffered read and write functions (above).
                                        (0447) ;
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) 
                                        (0450) I2CHW_DoBufferRepeatStart:
                                        (0451)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0452) 	RAM_SETPAGE_CUR >I2CHW_SlaveAddr
                                        (0453)     ;here the path through the routine is dependent on the previous transmission.
                                        (0454)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0455)         ; I2C interrupt
                                        (0456)         ; 2a. the master must NAK the byte if he is reading from the slave.
                                        (0457)         ; We do have to look at the status of the I2C block to see what is going on because if there was a
                                        (0458)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0459)         ; by setting the master restart bit and clearing to I2C_SCR (I2C_TX)
                                        (0460)         ; 2b. if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0461)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0462)         ; 3. once the ISR starts it will figure out which direction we are going with data (sending/receiving)
                                        (0463)         ;
0891: 60 D8    MOV   REG[0xD8],A        (0464)     mov   reg[I2CHW_DR], A
0893: 53 01    MOV   [0x1],A            (0465)         mov   [I2CHW_SlaveAddr], A
                                        (0466)         ;tst      reg[I2CHW_MSCR], I2CM_MASTEROP           ;do we even have control of the bus?
                                        (0467)         ;jz    notBusMasterErr
0895: 5D D9    MOV   A,REG[0xD9]        (0468)     mov   A, reg[I2CHW_MSCR]                               ;read the mscr register to look for pending master operations
0897: 21 0F    AND   A,0xF              (0469)     and   A, 0x0f                                          ;only look at the lower bits
0899: A0 11    JZ    0x08AB             (0470)         jz    BusIdleSendStart
089B: 62 D9 02 MOV   REG[0xD9],0x2      
                                        (0471)         ; for a single master system this should not be an issue,
                                        (0472)         ; so we'll go ahead and request the restart.  If a stop condition was already generated
                                        (0473)         ; the state machine will automatically generate a start instead.
                                        (0474) 
                                        (0475)         ;SetI2CHW_SCR I2CM_RESTRT
                                        (0476)     ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0477)         ;SetI2CHW_SCR          I2C_TX                                ;even though the restart has been requested the state
                                        (0478)         ;mov      reg[I2CHW_SCR], I2C_TX                   ;even though the restart has been requested the state
                                        (0479) 
                                        (0480) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0481)         SetI2CHW_MSCR I2CM_RESTRT
                                        (0482) ;ELSE
                                        (0483) ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0484) ;ENDIF
089E: 49 D7 04 TST   REG[0xD7],0x4      (0485)     tst   reg[I2CHW_SCR], I2C_TX
08A1: B0 05    JNZ   0x08A7             (0486)     jnz   I2C_RestartRecieve
08A3: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0487) 
                                        (0488) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0489)     SetI2CHW_SCR I2C_TX                                    ;even though the restart has been requested the state
                                        (0490) ;ELSE
                                        (0491) ;    mov   reg[I2CHW_SCR], I2C_TX                          ;send Ack
                                        (0492) ;ENDIF
                                        (0493) 
                                        (0494)     RAM_EPILOGUE RAM_USE_CLASS_4
08A6: 7F       RET                      (0495)     ret
08A7: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0496) I2C_RestartRecieve:
                                        (0497) 
                                        (0498) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0499)     SetI2CHW_SCR 0                                         ;even though the restart has been requested the state
                                        (0500) ;ELSE
                                        (0501) ;    mov   reg[I2CHW_SCR], 0                               ;send Ack
                                        (0502) ;ENDIF
                                        (0503) 
                                        (0504)    RAM_EPILOGUE RAM_USE_CLASS_4
08AA: 7F       RET                      (0505)    ret
                                        (0506) 
                                        (0507) BusIdleSendStart:
08AB: 51 01    MOV   A,[0x1]            (0508)    mov    A, [I2CHW_SlaveAddr]
08AD: 90 76    CALL  0x0925             (0509)    call   I2C_DoStart
                                        (0510)    ;Since something appears to be messed up do the next best thing to a repeat start, send a start.
                                        (0511)    RAM_EPILOGUE RAM_USE_CLASS_4
08AF: 7F       RET                      (0512)    ret
08B0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0513) 
                                        (0514) .ENDSECTION
                                        (0515) 
                                        (0516) .SECTION
                                        (0517) 
                                        (0518) ;-----------------------------------------------------------------------------
                                        (0519) ;  FUNCTION NAME: I2CHW_fSendRepeatStart
                                        (0520) ;
                                        (0521) ;  DESCRIPTION:
                                        (0522) ;    Send repeated start condition and send slave address.
                                        (0523) ;
                                        (0524) ;-----------------------------------------------------------------------------
                                        (0525) ;
                                        (0526) ;  ARGUMENTS:
                                        (0527) ;    I2CHW_bAddr - Contains the slave address and transfer direction.
                                        (0528) ;
                                        (0529) ;  RETURNS:
                                        (0530) ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0531) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0532) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0533) ;
                                        (0534) ;  SIDE EFFECTS:
                                        (0535) ;    The A and X registers may be modified by this or future implementations
                                        (0536) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0537) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0538) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0539) ;    functions.
                                        (0540) ;          
                                        (0541) ;    Currently only the page pointer registers listed below are modified: 
                                        (0542) ;          CUR_PP
                                        (0543) ;
                                        (0544) ;  THEORY of OPERATION or PROCEDURE:
                                        (0545) ;    Prepare to send start by setting SCl and SDA high.
                                        (0546) ;    must be followed directly by I2CHW_start.
                                        (0547) ;
                                        (0548) ;-----------------------------------------------------------------------------
                                        (0549)  I2CHW_fSendRepeatStart:
                                        (0550) _I2CHW_fSendRepeatStart:
                                        (0551)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0552) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0553)     ;wait if the bus is already busy...
08B3: 08       PUSH  A                  (0554)     push  A
08B4: 55 00 00 MOV   [0x0],0x0          (0555)     mov   [I2CHW_bStatus], 0x00
                                        (0556) I2CMSCR_NotReady4:
08B7: 51 02    MOV   A,[0x2]            (0557)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
08B9: 47 02 80 TST   [0x2],0x80         (0558)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0559)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0560)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0561)           ;For multi master operations, a pening start or restart
                                        (0562)           ;request might be OK, the master might be waiting to
                                        (0563)           ;acquire the bus from another master
08BC: BF FA    JNZ   0x08B7             (0564)     jnz   I2CMSCR_NotReady4
08BE: 18       POP   A                  (0565)     pop   A
                                        (0566) 
                                        (0567) 
08BF: 64       ASL   A                  (0568)     asl   a                                                ; Shift address to the left
08C0: 79       DEC   X                  (0569)     dec   x                                                ; If zero, C flag will be set
08C1: C0 03    JC    0x08C5             (0570)     jc    I2C_DoRepeatStart                                ; Do a write if zero
08C3: 29 01    OR    A,0x1              (0571)     or    a,0x01                                           ; Set Read flag
                                        (0572) 
                                        (0573) I2C_DoRepeatStart:
                                        (0574)     ;here the path through the routine is dependent on the previous transmission.
                                        (0575)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0576)         ; I2C interrupt
                                        (0577)         ; 2. the master must NAK the byte if he is reading from the slave.
                                        (0578)         ; We don't have to look at the status of the I2C block to see what is going on because if there was a
                                        (0579)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0580)         ; by setting the master restart bit and writing to I2C_SCR (I2C_TX)
                                        (0581)         ; if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0582)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0583)         ;
08C5: 60 D8    MOV   REG[0xD8],A        (0584)     mov   reg[I2CHW_DR], A
08C7: 53 01    MOV   [0x1],A            (0585)     mov   [I2CHW_SlaveAddr], A
08C9: 49 D9 04 TST   REG[0xD9],0x4      (0586)     tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
08CC: A0 1C    JZ    0x08E9             (0587)     jz    notBusMaster1
08CE: 62 D9 02 MOV   REG[0xD9],0x2      
08D1: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0588)     ;SetI2CHW_MSCR  I2CM_RESTRT
                                        (0589)     ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0590)     ;SetI2CHW_SCR         I2C_TX                           ;even though the restart has been requested the state
                                        (0591)     ;mov      reg[I2CHW_SCR], I2C_TX                       ;even though the restart has been requested the state
                                        (0592)                                                                 ; machine is stalling the SCL and has to be 'released'
                                        (0593) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0594)     SetI2CHW_MSCR I2CM_RESTRT
                                        (0595)     SetI2CHW_SCR  0                                        ;getting a restart out requires a 0 into the SCR reg
                                        (0596) ;ELSE
                                        (0597) ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0598) ;    mov   reg[I2CHW_SCR], 0                               ;getting a restart out requires a 0 into the SCR reg
                                        (0599) ;ENDIF
                                        (0600) 
                                        (0601) WaitRepStrtCompl:
08D4: 5D D7    MOV   A,REG[0xD7]        (0602)     mov   A,  reg[I2CHW_SCR]
08D6: 49 D7 01 TST   REG[0xD7],0x1      (0603)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
08D9: AF FA    JZ    0x08D4             (0604)     jz    WaitRepStrtCompl
08DB: 49 D7 02 TST   REG[0xD7],0x2      (0605)     tst   reg[I2CHW_SCR], I2C_LST_BIT
08DE: B0 07    JNZ   0x08E6             (0606)     jnz   Err_Exit_RepStart
08E0: 55 00 01 MOV   [0x0],0x1          (0607)     mov   [I2CHW_bStatus], 0x01
08E3: 50 01    MOV   A,0x1              (0608)     mov   A, 01
                                        (0609)     RAM_EPILOGUE RAM_USE_CLASS_4
08E5: 7F       RET                      (0610)     ret
                                        (0611) 
                                        (0612) Err_Exit_RepStart:
08E6: 50 00    MOV   A,0x0              (0613)     mov   A, 0
                                        (0614)     RAM_EPILOGUE RAM_USE_CLASS_4
08E8: 7F       RET                      (0615)     ret
                                        (0616) 
                                        (0617)  notBusMaster1:
                                        (0618)     ;SetI2CHW_MSCR 0
                                        (0619)     ;mov reg[I2CHW_MSCR], 0                                ;we certainly cant restart if we've not Master
                                        (0620)     ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
08E9: 50 00    MOV   A,0x0              (0621)     mov   A, 0
                                        (0622)     RAM_EPILOGUE RAM_USE_CLASS_4
08EB: 7F       RET                      (0623)     ret
08EC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0624) 
                                        (0625) .ENDSECTION
                                        (0626) 
                                        (0627) .SECTION
                                        (0628) ;-----------------------------------------------------------------------------
                                        (0629) ;  FUNCTION NAME: I2CHW_fSendStart
                                        (0630) ;
                                        (0631) ;  DESCRIPTION:
                                        (0632) ;    Generates start condition and sends slave address.
                                        (0633) ;
                                        (0634) ;-----------------------------------------------------------------------------
                                        (0635) ;
                                        (0636) ;  ARGUMENTS:
                                        (0637) ;    A => Contains the slave address.
                                        (0638) ;
                                        (0639) ;  RETURNS:
                                        (0640) ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0641) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0642) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0643) ;
                                        (0644) ;  SIDE EFFECTS:
                                        (0645) ;    The A and X registers may be modified by this or future implementations
                                        (0646) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0647) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0648) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0649) ;    functions.
                                        (0650) ;          
                                        (0651) ;    Currently only the page pointer registers listed below are modified: 
                                        (0652) ;          CUR_PP
                                        (0653) ;
                                        (0654) ;  THEORY of OPERATION or PROCEDURE:
                                        (0655) ;   Send start by setting SDA low while SCL is high. Set
                                        (0656) ;   SCL low in preparation to send address. 
                                        (0657) ;   Sends address, waits for byte complete
                                        (0658) ;   An address must be followed by a read or write of data if it was acked by a slave
                                        (0659) ;
                                        (0660) ;  WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0661) ;   flag is set to return.
                                        (0662) ;
                                        (0663) ;
                                        (0664) ;-----------------------------------------------------------------------------
                                        (0665)  I2CHW_fSendStart:
                                        (0666) _I2CHW_fSendStart:
                                        (0667)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0668) 	RAM_SETPAGE_CUR >I2CHW_bStatus 
                                        (0669)     ;wait if the bus is already busy...
08EF: 08       PUSH  A                  (0670)     push  A
08F0: 55 00 00 MOV   [0x0],0x0          (0671)     mov   [I2CHW_bStatus], 0x00
                                        (0672) I2CMSCR_NotReady5:
08F3: 51 02    MOV   A,[0x2]            (0673)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
08F5: 47 02 80 TST   [0x2],0x80         (0674)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0675)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0676)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0677)           ;For multi master operations, a pening start or restart
                                        (0678)           ;request might be OK, the master might be waiting to
                                        (0679)           ;acquire the bus from another master
08F8: BF FA    JNZ   0x08F3             (0680)     jnz   I2CMSCR_NotReady5
08FA: 18       POP   A                  (0681)     pop   A
08FB: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0682) 
                                        (0683) 
                                        (0684)     ; disable the interrupt
                                        (0685)         ; *** NOT REENABLED ***
                                        (0686)         ;
                                        (0687)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
08FE: 49 D7 01 TST   REG[0xD7],0x1      (0688)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ;If there is a pending BYTE_COMPL here
                                        (0689)                                                                 ;it is highly probable that a start is not the
                                        (0690)                                                                                                                     ;correct thing to do.
                                        (0691)                                                                                                                     ;leaving
0901: B0 20    JNZ   0x0922             (0692)     jnz   Err_Exit_Start
                                        (0693) 
0903: 64       ASL   A                  (0694)     asl   a                                                ; Shift address to the left
0904: 79       DEC   X                  (0695)     dec   x                                                ; If zero, C flag will be set
0905: C0 03    JC    0x0909             (0696)     jc    I2C_SndWRStart                                   ; Do a write if zero
0907: 29 01    OR    A,0x1              (0697)     or    a,0x01                                           ; Set Read flag
                                        (0698) I2C_SndWRStart:
0909: 60 D8    MOV   REG[0xD8],A        (0699)     mov   reg[I2CHW_DR], A
090B: 53 01    MOV   [0x1],A            (0700)     mov   [I2CHW_SlaveAddr], A
090D: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0701)     ;SetI2CHW_MSCR, I2CM_SNDSTRT
                                        (0702)     ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0703) 
                                        (0704) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0705)     SetI2CHW_MSCR I2CM_SNDSTRT
                                        (0706) ;ELSE
                                        (0707) ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0708) ;ENDIF
                                        (0709) 
                                        (0710) 
                                        (0711) WaitStrtByteCompl:
0910: 5D D7    MOV   A,REG[0xD7]        (0712)     mov   A,  reg[I2CHW_SCR]
0912: 49 D7 01 TST   REG[0xD7],0x1      (0713)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0915: AF FA    JZ    0x0910             (0714)     jz    WaitStrtByteCompl
0917: 49 D7 02 TST   REG[0xD7],0x2      (0715)     tst   reg[I2CHW_SCR], I2C_LST_BIT
091A: B0 07    JNZ   0x0922             (0716)     jnz   Err_Exit_Start
091C: 55 00 01 MOV   [0x0],0x1          (0717)     mov   [I2CHW_bStatus], 0x01
091F: 50 01    MOV   A,0x1              (0718)     mov   A, 01
                                        (0719)     RAM_EPILOGUE RAM_USE_CLASS_4
0921: 7F       RET                      (0720)     ret
                                        (0721) Err_Exit_Start:
0922: 50 00    MOV   A,0x0              (0722)     mov   A, 0
                                        (0723)     RAM_EPILOGUE RAM_USE_CLASS_4
0924: 7F       RET                      (0724)     ret
0925: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0725) 
                                        (0726) I2C_DoStart:
                                        (0727)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0728)     RAM_SETPAGE_CUR >I2CHW_SlaveAddr
                                        (0729)     ;here we are not required to test for master operation since we are only attempting to gain control of the bus
                                        (0730)     ; by attempting to assert a Start
                                        (0731)     
0928: 60 D8    MOV   REG[0xD8],A        (0732)     mov   reg[I2CHW_DR], A
092A: 53 01    MOV   [0x1],A            (0733)     mov   [I2CHW_SlaveAddr], A
092C: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0734)     ;SetI2CHW_MSCR  I2CM_SNDSTRT
                                        (0735)     ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0736) 
                                        (0737) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0738)     SetI2CHW_MSCR I2CM_SNDSTRT
                                        (0739) ;ELSE
                                        (0740) ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0741) ;ENDIF
                                        (0742)     RAM_EPILOGUE RAM_USE_CLASS_4
092F: 7F       RET                      (0743)     ret
0930: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0744) ;
                                        (0745) ;   DO NOT PLACE
                                        (0746) ;   .SECTION
                                        (0747) ;   .ENDSECTION
                                        (0748) ;   _fSendStart USES CODE BELOW
                                        (0749) ;
                                        (0750) ;-----------------------------------------------------------------------------
                                        (0751) ;  FUNCTION NAME: I2CHW_fWrite
                                        (0752) ;
                                        (0753) ;  DESCRIPTION:
                                        (0754) ;    Writes a byte to the I2C master bus.
                                        (0755) ;
                                        (0756) ;-----------------------------------------------------------------------------
                                        (0757) ;
                                        (0758) ;  ARGUMENTS:
                                        (0759) ;    A contains Data to be written to I2C slave.
                                        (0760) ;
                                        (0761) ;  RETURNS:
                                        (0762) ;    1 If ACKed, else 0
                                        (0763) ;
                                        (0764) ;  SIDE EFFECTS:
                                        (0765) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0766) ;
                                        (0767) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0768) ;
                                        (0769) ;  FUNCTION NAME: I2CHW_fWrite
                                        (0770) ;
                                        (0771) ;  DESCRIPTION:
                                        (0772) ;    Writes a data byte to the I2C master bus. 
                                        (0773) ;
                                        (0774) ;  ARGUMENTS:
                                        (0775) ;    Reg A contains slave address.
                                        (0776) ;    I2CHW_bData - Contains data to be transmitted.
                                        (0777) ;
                                        (0778) ;  RETURNS:
                                        (0779) ;    I2CHW_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0780) ;
                                        (0781) ;  SIDE EFFECTS:
                                        (0782) ;    The A and X registers may be modified by this or future implementations
                                        (0783) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0784) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0785) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0786) ;    functions.
                                        (0787) ;          
                                        (0788) ;    Currently only the page pointer registers listed below are modified: 
                                        (0789) ;          CUR_PP
                                        (0790) ;
                                        (0791) ;    Send data byte to slave. .
                                        (0792) ;
                                        (0793) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0794) ;    flag is set to return.
                                        (0795) ;
                                        (0796)  I2CHW_fWrite:
                                        (0797) _I2CHW_fWrite:
                                        (0798)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0799) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0800)     ; disable the interrupt
                                        (0801)         ; *** NOT REENABLED ***
                                        (0802)         ;
0933: 60 D8    MOV   REG[0xD8],A        (0803)     mov   reg[I2CHW_DR],A                                  ; Put data in Data Reg
0935: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0804)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0938: 5D D9    MOV   A,REG[0xD9]        (0805)     mov   A,  reg[I2CHW_MSCR]                              ;MSCR into A incase there is an error here
093A: 49 D9 04 TST   REG[0xD9],0x4      (0806)     tst   reg[I2CHW_MSCR],I2CM_MASTEROP                    ;Do we have control of the bus?
093D: A0 19    JZ    0x0957             (0807)     jz    Err_Exit_fWrite
                                        (0808) 
093F: 55 00 00 MOV   [0x0],0x0          (0809)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
0942: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0810)     ;SetI2CHW_SCR I2C_TX
                                        (0811)     ;mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                                        (0812) 
                                        (0813) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0814)         SetI2CHW_SCR I2C_TX                                ; Put data in Data Reg
                                        (0815) ;ELSE
                                        (0816) ;    mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                                        (0817) ;ENDIF
                                        (0818) 
                                        (0819) 
                                        (0820) I2CHW_write:
                                        (0821) _I2CHW_write:
                                        (0822) ;    mov   reg[I2CHW_SCR],A                                ; Put data in bData
                                        (0823) ;   jmp   I2CHW_get_ack                                    ; This jump is not required since it falls
                                        (0824) 
                                        (0825) WaitTXByteCompl:
0945: 5D D7    MOV   A,REG[0xD7]        (0826)     mov   A, reg[I2CHW_SCR]
0947: 49 D7 01 TST   REG[0xD7],0x1      (0827)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
094A: AF FA    JZ    0x0945             (0828)     jz    WaitTXByteCompl
094C: 49 D7 02 TST   REG[0xD7],0x2      (0829)     tst   reg[I2CHW_SCR], I2C_LST_BIT
094F: B0 07    JNZ   0x0957             (0830)     jnz   Err_Exit_fWrite
0951: 55 00 FF MOV   [0x0],0xFF         (0831)     mov   [I2CHW_bStatus], 0xff
0954: 50 01    MOV   A,0x1              (0832)     mov   A, 01
                                        (0833)     RAM_EPILOGUE RAM_USE_CLASS_4
0956: 7F       RET                      (0834)     ret
                                        (0835) 
                                        (0836) Err_Exit_fWrite:
0957: 50 00    MOV   A,0x0              (0837)     mov   A, 0
0959: 53 00    MOV   [0x0],A            (0838)     mov   [I2CHW_bStatus], A
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
095B: 7F       RET                      (0840)     ret
095C: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0841) 
                                        (0842) .ENDSECTION
                                        (0843) 
                                        (0844) .SECTION
                                        (0845) ;-----------------------------------------------------------------------------
                                        (0846) ;  FUNCTION NAME: I2CHW_get_ack
                                        (0847) ;
                                        (0848) ;  DESCRIPTION:
                                        (0849) ;    Get slave acknowledge response. Used to poll for I2C_BYTE_COMPL and then test Ack (I2C_LST_BIT)
                                        (0850) ;
                                        (0851) ;-----------------------------------------------------------------------------
                                        (0852) ;
                                        (0853) ;  ARGUMENTS:
                                        (0854) ;
                                        (0855) ;  RETURNS:
                                        (0856) ;    Sets flag in I2CHW_bStatus if ACKed by Slave.  !!!
                                        (0857) ;
                                        (0858) ;  SIDE EFFECTS:
                                        (0859) ;    The A and X registers may be modified by this or future implementations
                                        (0860) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0861) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0862) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0863) ;    functions.
                                        (0864) ;          
                                        (0865) ;    Currently only the page pointer registers listed below are modified: 
                                        (0866) ;          CUR_PP
                                        (0867) ;
                                        (0868) ;    Do the ack clock and check for Slave ACK
                                        (0869) ;
                                        (0870) I2CHW_get_ack:
                                        (0871) _I2CHW_get_ack:
                                        (0872)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0873) 	RAM_SETPAGE_CUR >I2CHW_bStatus
095F: 26 00 FE AND   [0x0],0xFE         (0874)     and [I2CHW_bStatus], ~I2CHW_SLAVE_ACKed
0962: 49 D7 01 TST   REG[0xD7],0x1      (0875)     tst reg[I2CHW_SCR], I2C_BYTE_COMPL
0965: BF F6    JNZ   0x095C             (0876)     jnz I2CHW_get_ack
0967: 49 D7 02 TST   REG[0xD7],0x2      (0877)     tst reg[I2CHW_SCR], I2C_LST_BIT
096A: B0 04    JNZ   0x096F             (0878)     jnz notAcked
096C: 2E 00 01 OR    [0x0],0x1          (0879)     or [I2CHW_bStatus], I2CHW_SLAVE_ACKed
                                        (0880) notAcked:
                                        (0881)     RAM_EPILOGUE RAM_USE_CLASS_4
096F: 7F       RET                      (0882)     ret
0970: 62 D0 00 MOV   REG[0xD0],0x0      
0973: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0883) 
                                        (0884) .ENDSECTION
                                        (0885) 
                                        (0886) .SECTION
                                        (0887) 
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;  FUNCTION NAME: I2CHW_bRead
                                        (0890) ;
                                        (0891) ;  DESCRIPTION:
                                        (0892) ;    Reads 1 data byte from the I2C master bus.
                                        (0893) ;
                                        (0894) ;-----------------------------------------------------------------------------
                                        (0895) ;
                                        (0896) ;  ARGUMENTS:
                                        (0897) ;    Reg A Contains the Slave Address.
                                        (0898) ;    I2CHW_bStatus - Set for no ack to be followed by stop.
                                        (0899) ;    Clear for ack to indicate more data to follow.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2CHW_bData - Contains received data.
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Must be followed by I2CHW_put_ack.
                                        (0915) ;    The I2CHW interrupt should be disabled since this routine will poll the
                                        (0916) ;    reg[I2CHW_SCR] to determine when a byte is available
                                        (0917) ;
                                        (0918) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0919) ;    flag is set to return.
                                        (0920) ;
                                        (0921) I2CHW_bRead:
                                        (0922) _I2CHW_bRead:
                                        (0923)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0924) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0925)     ; disable the interrupt
                                        (0926)     ; *** NOT REENABLED ***
                                        (0927)     ;
                                        (0928)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0976: 49 D9 04 TST   REG[0xD9],0x4      (0929)     tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
0979: A0 28    JZ    0x09A2             (0930)     jz    notBusMaster2
                                        (0931) 
097B: 55 00 00 MOV   [0x0],0x0          (0932)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                                        (0933)     ;or    I2CHW_SEND_ACK                                  ; Set ACK flag
                                        (0934) ;
                                        (0935) ; Check for the special case of the first read after and address is sent
                                        (0936) ;
                                        (0937) 
097E: 08       PUSH  A                  (0938)     push  A                                                ;preserve the information about wether to ACK or NAK this byte
097F: 5D D7    MOV   A,REG[0xD7]        (0939)     mov   A, reg[I2CHW_SCR]
0981: 49 D7 08 TST   REG[0xD7],0x8      (0940)     tst   reg[I2CHW_SCR], I2C_ADDRIN
0984: A0 04    JZ    0x0989             (0941)     jz    WaitRXByteCompl                                  ;addr bit not set then this is a normal read
0986: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0942)     ;SetI2CHW_SCR 0
                                        (0943)     ;mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0944) 
                                        (0945) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0946)     SetI2CHW_SCR 0                                         ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0947) ;ELSE
                                        (0948) ;    mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0949) ;ENDIF
                                        (0950)                                                            ; through to I2CHW_put_ack.
                                        (0951) 
                                        (0952)     ;must DROP through to send an Ack and another byte,
                                        (0953)     ;to stop reading we NAK the slave
                                        (0954) WaitRXByteCompl:
0989: 49 D7 01 TST   REG[0xD7],0x1      (0955)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
098C: AF FC    JZ    0x0989             (0956)     jz    WaitRXByteCompl
                                        (0957) 
098E: 18       POP   A                  (0958)     pop   A                                                ;recover the saved ACK/NAK flag
098F: 21 FF    AND   A,0xFF             (0959)     and   A,0xFF                                           ; Is Ack flag set"
0991: A0 0A    JZ    0x099C             (0960)     jz    exit_bRead_NOACK                                 ; Don't ACK
                                        (0961) 
                                        (0962)         ;now if the ACK flag was set, Ack the data which will release the bus and start the next byte in
                                        (0963)         ;otherwise do NOTHING to the SCR reg.  This will allow the calling routine to generate a repeat start
                                        (0964)         ;or a stop depending on it's preference.
                                        (0965) 
                                        (0966) 
0993: 5D D8    MOV   A,REG[0xD8]        (0967)     mov   A, reg[I2CHW_DR]                                 ; Record data received
0995: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0968)     ;SetI2CHW_SCR I2C_ACKOUT
                                        (0969)     ;mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                                        (0970) 
                                        (0971) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0972)     SetI2CHW_SCR I2C_ACKOUT                                ; Record data received
                                        (0973) ;ELSE
                                        (0974) ;    mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                                        (0975) ;ENDIF
                                        (0976) 
0998: 55 00 01 MOV   [0x0],0x1          (0977)     mov   [I2CHW_bStatus],0x01                             ; Clear ACK flag
                                        (0978)     RAM_EPILOGUE RAM_USE_CLASS_4
099B: 7F       RET                      (0979)     ret
                                        (0980) 
                                        (0981) exit_bRead_NOACK:
099C: 5D D8    MOV   A,REG[0xD8]        (0982)     mov   A, reg[I2CHW_DR]                                 ; Record data received
                                        (0983)     ; send no Ack or Nak, the calling routine will have to decide to NAK or execute a repeat start.
                                        (0984)     ; sending nothing leaves the bus held in wait until a decision is made.
099E: 55 00 00 MOV   [0x0],0x0          (0985)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                                        (0986)     RAM_EPILOGUE RAM_USE_CLASS_4
09A1: 7F       RET                      (0987)     ret
                                        (0988) 
                                        (0989) notBusMaster2:
09A2: 55 00 FF MOV   [0x0],0xFF         (0990)    mov   [I2CHW_bStatus], 0xff
                                        (0991)    ;SetI2CHW_SCR 0
                                        (0992)    ;mov          reg[I2CHW_MSCR], 0                        ;we certainly cant restart if we've not Master
                                        (0993)    ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
                                        (0994)    RAM_EPILOGUE RAM_USE_CLASS_4
09A5: 7F       RET                      (0995)    ret
                                        (0996) 
                                        (0997) .ENDSECTION
                                        (0998) 
                                        (0999) 
                                        (1000) .SECTION
                                        (1001) ;-----------------------------------------------------------------------------
                                        (1002) ;  FUNCTION NAME: I2CHW_SendStop
                                        (1003) ;
                                        (1004) ;  DESCRIPTION:
                                        (1005) ;    Assert stop condition.
                                        (1006) ;
                                        (1007) ;-----------------------------------------------------------------------------
                                        (1008) ;
                                        (1009) ;  ARGUMENTS: none
                                        (1010) ;
                                        (1011) ;  RETURNS: none
                                        (1012) ;
                                        (1013) ;  SIDE EFFECTS:
                                        (1014) ;    The A and X registers may be modified by this or future implementations
                                        (1015) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1016) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1017) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1018) ;    functions.
                                        (1019) ;
                                        (1020) ;  THEORY of OPERATION or PROCEDURE:
                                        (1021) ;     Send stop by releasing SDA high while SCL high. When in Master Read Mode, this
                                        (1022) ;     is done by nak'ing a read from the slave, in Master Write Mode this is done by clearing
                                        (1023) ;     the I2C_TX bit in  reg[I2CHW_SCR].  In either case this is a zero written to
                                        (1024) ;     reg[I2CHW_SCR].
                                        (1025) ;
                                        (1026)  I2CHW_SendStop:
                                        (1027) _I2CHW_SendStop:
                                        (1028)     RAM_PROLOGUE RAM_USE_CLASS_1
09A6: 49 D9 04 TST   REG[0xD9],0x4      (1029)     tst   reg[I2CHW_MSCR], I2CM_MASTEROP                   ;do we even have control of the bus?
09A9: A0 04    JZ    0x09AE             (1030)     jz    notBusMaster3
09AB: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (1031)     ;SetI2CHW_SCR 0
                                        (1032)     ;mov  reg[I2CHW_SCR], 0
                                        (1033) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (1034)     SetI2CHW_SCR 0                                         ; Put data in Data Reg
                                        (1035) ;ELSE
                                        (1036) ;    mov   reg[I2CHW_SCR], 0                               ; Put data in Data Reg
                                        (1037) ;ENDIF
                                        (1038) 
                                        (1039) notBusMaster3:
                                        (1040)     RAM_EPILOGUE RAM_USE_CLASS_1
09AE: 7F       RET                      (1041)     ret
09AF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1042) .ENDSECTION
                                        (1043) 
                                        (1044) .SECTION
                                        (1045) ;-----------------------------------------------------------------------------
                                        (1046) ;  FUNCTION NAME: I2CHW_bReadBusStatus
                                        (1047) ;
                                        (1048) ;  DESCRIPTION:
                                        (1049) ;     Returns the Status bits in the bStatus Register
                                        (1050) ;
                                        (1051) ;-----------------------------------------------------------------------------
                                        (1052) ;
                                        (1053) ;  ARGUMENTS:
                                        (1054) ;
                                        (1055) ;  RETURNS:
                                        (1056) ;     BYTE  bStatus -  Bus status data.  Use the following defined bits
                                        (1057) ;     returned in A.
                                        (1058) ;       I2CHW_RepStart:                     equ  0x01
                                        (1059) ;       I2CHW_NoStop:                       equ  0x02
                                        (1060) ;       I2CHW_NAKnextWr:                    equ  0x04
                                        (1061) ;
                                        (1062) ;  SIDE EFFECTS:
                                        (1063) ;    The A and X registers may be modified by this or future implementations
                                        (1064) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1065) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1066) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1067) ;    functions.
                                        (1068) ;          
                                        (1069) ;  THEORY of OPERATION or PROCEDURE:
                                        (1070) ;     Read the Bus Status register.
                                        (1071) ;
                                        (1072) 
                                        (1073)  I2CHW_bReadBusStatus:
                                        (1074) _I2CHW_bReadBusStatus:
                                        (1075)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1076)    RAM_SETPAGE_CUR >I2CHW_bStatus				                      ;Set the Page Pointer for LMM
09B2: 51 00    MOV   A,[0x0]            (1077)    mov   A, [I2CHW_bStatus]                      ;return the status in A
                                        (1078)    RAM_EPILOGUE RAM_USE_CLASS_4
09B4: 7F       RET                      (1079)    ret
                                        (1080) 
                                        (1081) .ENDSECTION
                                        (1082) 
                                        (1083) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1084) .SECTION
                                        (1085) ;-----------------------------------------------------------------------------
                                        (1086) ;  FUNCTION NAME: I2CHW_fReadBytes
                                        (1087) ;
                                        (1088) ;  DESCRIPTION:
                                        (1089) ;
                                        (1090) ;-----------------------------------------------------------------------------
                                        (1091) ;
                                        (1092) ;  ARGUMENTS:
                                        (1093) ;      A => Address of slave
                                        (1094) ;      X => Pointer to other arguments.
                                        (1095) ;    [x] => LSB of Array address to put data in.
                                        (1096) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (1097) ;  [X-2] => Count of bytes to read.
                                        (1098) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (1099) ;           to determine if:
                                        (1100) ;             0x01 => Use RepeatStart instead of Start
                                        (1101) ;             0x02 => Don't send Stop
                                        (1102) ;
                                        (1103) ;  RETURNS:       None
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;    I2C and block must be operational.
                                        (1117) ;    This routine will enable the I2C interrupt!
                                        (1118) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (1119) ;    pend on the ISR_ACTIVE bit until it can run
                                        (1120) ;
                                        (1121) IF	(TOOLCHAIN & HITECH)
                                        (1122) RxArray:      set   0
                                        (1123) RxByteCount:  set  -2
                                        (1124) RxMode:       set  -3
                                        (1125) ELSE
                                        (1126) RxArray:      equ   0
                                        (1127) RxByteCount:  equ  -2
                                        (1128) RxMode:       equ  -3
                                        (1129) ENDIF
                                        (1130) 
                                        (1131) 
                                        (1132)  I2CHW_fReadBytes:
                                        (1133)     push  A
                                        (1134) I2CMSCR_NotReady1Smm:
                                        (1135)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1136)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1137)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1138)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1139)           ;For multi master operations, a pening start or restart
                                        (1140)           ;request might be OK, the master might be waiting to
                                        (1141)           ;acquire the bus from another master
                                        (1142)         jnz   I2CMSCR_NotReady1Smm
                                        (1143)     pop   A
                                        (1144)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared by ISR
                                        (1145)     asl   A                                                ; Shift address to the left to make
                                        (1146)                                                            ; a complete byte with the R/W bit.
                                        (1147)     or    A,0x01                                           ; OR the address with the Read bit.
                                        (1148)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1149)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1150)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1151)     mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1152)     mov   [I2CHW_bStatus],A
                                        (1153)     ;
                                        (1154)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1155)         ;
                                        (1156)         push   X                                                ;preserve since it's used later
                                        (1157)         mov    A, [X+RxByteCount]                               ;get the write buf size
                                        (1158)         push   A
                                        (1159)         push   A                                                                                            ;this will be ignored
                                        (1160)         mov    A, [X+RxArray]                                   ;get the write buf addr
                                        (1161)         push   A
                                        (1162)         mov    X, sp
                                        (1163)         dec    X
                                        (1164)         call  I2CHW_InitWrite                              ;sets the addr and byte count to write to
                                        (1165)         add SP, -3
                                        (1166)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1167) 
                                        (1168)     mov   A,[I2CHW_SlaveAddr]
                                        (1169)     tst   [x+RxMode],I2CHW_RepStart
                                        (1170)     jnz   DoRestartRxSmm
                                        (1171)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1172)     jnz   DoRestartRxSmm
                                        (1173)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1174)     jmp   CheckRxAckSmm
                                        (1175) DoRestartRxSmm:
                                        (1176)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1177)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (1178)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (1179)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (1180) 
                                        (1181) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
                                        (1182)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (1183)         ;is finished.
                                        (1184) ;End_RD:
                                        (1185)     ret
                                        (1186) 
                                        (1187) .ENDSECTION
                                        (1188) 
                                        (1189) .SECTION
                                        (1190) ;-----------------------------------------------------------------------------
                                        (1191) ;  FUNCTION NAME: I2CHW_bWriteBytes
                                        (1192) ;
                                        (1193) ;  DESCRIPTION:
                                        (1194) ;    Write multiple data bits to slave device.
                                        (1195) ;
                                        (1196) ;-----------------------------------------------------------------------------
                                        (1197) ;
                                        (1198) ;  ARGUMENTS:
                                        (1199) ;     A => Address of slave
                                        (1200) ;     X => Pointer to other arguments.
                                        (1201) ;   [x] => LSB of Array address to put data in.
                                        (1202) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (1203) ; [X-2] => Count of bytes to write.
                                        (1204) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (1205) ;          to determine if:
                                        (1206) ;              0x01 => Use RePeatStart instead of Start
                                        (1207) ;              0x02 => Don't send Stop
                                        (1208) ;
                                        (1209) ;
                                        (1210) ;  RETURNS:     None
                                        (1211) ;
                                        (1212) ;  SIDE EFFECTS:
                                        (1213) ;    The A and X registers may be modified by this or future implementations
                                        (1214) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1215) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1216) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1217) ;    functions.
                                        (1218) ;          
                                        (1219) IF	(TOOLCHAIN & HITECH)
                                        (1220) TxArray:      set   0
                                        (1221) TxByteCount:  set  -2
                                        (1222) TxMode:       set  -3
                                        (1223) ELSE
                                        (1224) TxArray:      equ   0
                                        (1225) TxByteCount:  equ  -2
                                        (1226) TxMode:       equ  -3
                                        (1227) ENDIF
                                        (1228) 
                                        (1229)  I2CHW_bWriteBytes:
                                        (1230)     push  A
                                        (1231) I2CMSCR_NotReady2Smm:
                                        (1232)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1233)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1234)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1235)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1236)           ;For multi master operations, a pening start or restart
                                        (1237)           ;request might be OK, the master might be waiting to
                                        (1238)           ;acquire the bus from another master
                                        (1239)         jnz   I2CMSCR_NotReady2Smm
                                        (1240)     pop   A
                                        (1241)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared at end of ISR
                                        (1242)     asl   A                                                ; Shift address to the left to make
                                        (1243)                                                            ; a complete byte with the R/W bit.
                                        (1244)                                                            ; The ASL takes care of clearing bit 0.
                                        (1245)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1246)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1247)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1248)     mov   A, [X+TxMode]                                                             ; place the TxMode in status so ISR can access it
                                        (1249)     mov   [I2CHW_bStatus],A
                                        (1250)     ;
                                        (1251)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1252)         ;
                                        (1253)         push   X                                                ;preserve since it's used later
                                        (1254)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1255)                                                                 ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1256)         mov    A, [X+TxByteCount]                               ;get the write buf size
                                        (1257)         push   A
                                        (1258)         push   A                                                                                            ;this will be ignored
                                        (1259)         mov    A, [X+TxArray]                                   ;get the write buf addr
                                        (1260)         push   A
                                        (1261)         mov    X, sp
                                        (1262)         dec    X
                                        (1263)         call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
                                        (1264)         add    SP, -3
                                        (1265)         pop    X                                                ;restore X to be used for the rest of this routine
                                        (1266)     ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (1267) 
                                        (1268) 
                                        (1269)     mov   A,[I2CHW_SlaveAddr]
                                        (1270)     tst   [x+TxMode],I2CHW_RepStart
                                        (1271)     jnz   DoRestartTxSmm
                                        (1272)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1273)     jnz   DoRestartRxSmm
                                        (1274)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1275)     jmp   DoTxAckSmm
                                        (1276) DoRestartTxSmm:
                                        (1277)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1278) DoTxAckSmm:
                                        (1279) 
                                        (1280) 
                                        (1281) ;WriteSlaveAck:
                                        (1282)     ret
                                        (1283) 
                                        (1284) .ENDSECTION
                                        (1285) 
                                        (1286) .SECTION
                                        (1287) ;-----------------------------------------------------------------------------
                                        (1288) ;  FUNCTION NAME: I2CHW_bWriteCBytes
                                        (1289) ;
                                        (1290) ;  DESCRIPTION:
                                        (1291) ;    Write multiple data bits to slave device from ROM
                                        (1292) ;
                                        (1293) ;-----------------------------------------------------------------------------
                                        (1294) ;
                                        (1295) ;  ARGUMENTS:
                                        (1296) ;      A => Address of slave
                                        (1297) ;      X => Pointer to other arguments.
                                        (1298) ;     [x] => LSB of ROM Array address to put data in.
                                        (1299) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (1300) ;   [X-2] => Count of bytes to write.
                                        (1301) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (1302) ;            to determine if:
                                        (1303) ;               0x01 => Use RepeatStart instead of Start
                                        (1304) ;               0x02 => Don't send Stop
                                        (1305) ;
                                        (1306) ;  RETURNS:
                                        (1307) ;    None
                                        (1308) ;
                                        (1309) ;  SIDE EFFECTS:
                                        (1310) ;    The A and X registers may be modified by this or future implementations
                                        (1311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1314) ;    functions.
                                        (1315) ;          
                                        (1316) IF	(TOOLCHAIN & HITECH)
                                        (1317) TxCArrayLSB:   set   0
                                        (1318) TxCArrayMSB:   set  -1
                                        (1319) TxCByteCount:  set  -2
                                        (1320) TxCMode:       set  -3
                                        (1321) ELSE
                                        (1322) TxCArrayLSB:   equ   0
                                        (1323) TxCArrayMSB:   equ  -1
                                        (1324) TxCByteCount:  equ  -2
                                        (1325) TxCMode:       equ  -3
                                        (1326) ENDIF
                                        (1327) 
                                        (1328)  I2CHW_bWriteCBytes:
                                        (1329)     push  A
                                        (1330) I2CMSCR_NotReady3Smm:
                                        (1331)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1332)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1333)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1334)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1335)           ;For multi master operations, a pening start or restart
                                        (1336)           ;request might be OK, the master might be waiting to
                                        (1337)           ;acquire the bus from another master
                                        (1338)         jnz   I2CMSCR_NotReady3Smm
                                        (1339)     pop   A
                                        (1340)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
                                        (1341)         asl   A                                                 ; Shift address to the left to make
                                        (1342)                                                            ; a complete byte with the R/W bit.
                                        (1343)                                                            ; The ASL takes care of clearing bit 0.
                                        (1344)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1345)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1346)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1347)         mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1348)     mov   [I2CHW_bStatus],A
                                        (1349)     ;
                                        (1350)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1351)         ;
                                        (1352)         push   X                                                ;preserve X since it's used later
                                        (1353)         mov    A, 0                                             ;get the write buf size (this is the hi order part)
                                        (1354)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1355)         jnc     . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1356)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
                                        (1357)         push   A
                                        (1358)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
                                        (1359)         push   A
                                        (1360)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
                                        (1361)         push   A                                                                                        ;this will be ignored
                                        (1362)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
                                        (1363)         push   A
                                        (1364)         mov    X, sp
                                        (1365)         dec    X
                                        (1366)         call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
                                        (1367)         add SP, -4
                                        (1368)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1369)     ;or  [I2CHW_RsrcStatus],I2C_READFLASH
                                        (1370)     mov   A,[I2CHW_SlaveAddr]
                                        (1371)     tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
                                        (1372)     jnz   DoCRestartTxSmm                                      ; should executed.
                                        (1373)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1374)     jnz   DoRestartRxSmm
                                        (1375)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1376)     jmp   DoCTxAckSmm
                                        (1377) DoCRestartTxSmm:
                                        (1378)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1379) 
                                        (1380) DoCTxAckSmm:                                                   ; Test to see if Slave is ACKed
                                        (1381) 
                                        (1382) ;CWriteSlaveAck:
                                        (1383)         ret
                                        (1384) 
                                        (1385) .ENDSECTION
                                        (1386) 
                                        (1387) 
                                        (1388) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (1389) 
                                        (1390) ; End of File I2CHW.asm
                                        (1391) 
                                        (1392) 
FILE: lib\i2chwint.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWINT.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CHW Master Interrupt Service Routine
                                        (0008) ;;  This is the interrupt service routine for the Single Master I2C function.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "I2CHWCommon.inc"
                                        (0017) include "I2CHWMstr.inc"
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export     I2CHW_Read_Count
                                        (0024) export    _I2CHW_Read_Count
                                        (0025) export     I2CHW_Write_Count
                                        (0026) export    _I2CHW_Write_Count
                                        (0027) 
                                        (0028) export    pI2CHW_Read_BufLO
                                        (0029) export   _pI2CHW_Read_BufLO
                                        (0030) export    pI2CHW_Write_BufLO
                                        (0031) export   _pI2CHW_Write_BufLO
                                        (0032) export    I2CHW_RsrcStatus
                                        (0033) export   _I2CHW_RsrcStatus
                                        (0034) export    I2CHW_SlaveAddr
                                        (0035) export   _I2CHW_SlaveAddr
                                        (0036) 
                                        (0037) ;-----------------------------------------------
                                        (0038) ; WARNING: The variables below are deprecated
                                        (0039) ; and have been replaced with Read_BufLO
                                        (0040) ; and Write_BufLO
                                        (0041) ;-----------------------------------------------
                                        (0042) export    pI2CHW_Read_Buf
                                        (0043) export   _pI2CHW_Read_Buf
                                        (0044) export    pI2CHW_Write_Buf
                                        (0045) export   _pI2CHW_Write_Buf
                                        (0046) ;-----------------------------------------------
                                        (0047) ; END WARNING
                                        (0048) ;-----------------------------------------------
                                        (0049)  
                                        (0050) area InterruptRAM(RAM, REL, CON)
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ; Variable Allocation
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056)   I2CHW_SlaveAddr:
                                        (0057)  _I2CHW_SlaveAddr:                           blk      1
                                        (0058)   I2CHW_RsrcStatus:
                                        (0059)  _I2CHW_RsrcStatus:                          blk     1
                                        (0060)   I2CHW_Write_Count:
                                        (0061)  _I2CHW_Write_Count:                         blk    1
                                        (0062) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0063) export    pI2CHW_Write_BufHI
                                        (0064) export   _pI2CHW_Write_BufHI
                                        (0065) 
                                        (0066)  pI2CHW_Write_BufHI:
                                        (0067) _pI2CHW_Write_BufHI:                         blk     1
                                        (0068) ENDIF
                                        (0069) ;-----------------------------------------------
                                        (0070) ; WARNING: The variable below is deprecated
                                        (0071) ; and has been replaced Write_BufLO
                                        (0072) ;-----------------------------------------------
                                        (0073)  pI2CHW_Write_Buf:
                                        (0074) _pI2CHW_Write_Buf:
                                        (0075) ;-----------------------------------------------
                                        (0076) ; END WARNING
                                        (0077) ;-----------------------------------------------
                                        (0078)  pI2CHW_Write_BufLO:
                                        (0079) _pI2CHW_Write_BufLO:                         blk      1
                                        (0080) 
                                        (0081) IF I2CHW_READ_FLASH
                                        (0082) export    pI2CHW_Read_BufHI
                                        (0083) export   _pI2CHW_Read_BufHI
                                        (0084) 
                                        (0085)  pI2CHW_Read_BufHI:
                                        (0086) _pI2CHW_Read_BufHI:                          blk     1
                                        (0087) ELSE
                                        (0088) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0089) export    pI2CHW_Read_BufHI
                                        (0090) export   _pI2CHW_Read_BufHI
                                        (0091) 
                                        (0092)  pI2CHW_Read_BufHI:
                                        (0093) _pI2CHW_Read_BufHI:                          blk     1
                                        (0094) ENDIF
                                        (0095) ENDIF
                                        (0096) 
                                        (0097) ;-----------------------------------------------
                                        (0098) ; WARNING: The variable below is deprecated
                                        (0099) ; and has been replaced Read_BufLO
                                        (0100) ;-----------------------------------------------
                                        (0101)  pI2CHW_Read_Buf:
                                        (0102) _pI2CHW_Read_Buf:
                                        (0103) ;-----------------------------------------------
                                        (0104) ; END WARNING
                                        (0105) ;-----------------------------------------------
                                        (0106)  pI2CHW_Read_BufLO:
                                        (0107) _pI2CHW_Read_BufLO:                          blk       1
                                        (0108) 
                                        (0109) IF I2CHW_READ_FLASH
                                        (0110) export    I2CHW_Read_CountHI
                                        (0111) export   _I2CHW_Read_CountHI
                                        (0112) 
                                        (0113)  I2CHW_Read_CountHI:
                                        (0114) _I2CHW_Read_CountHI:                         blk    1
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)  I2CHW_Read_Count:
                                        (0118) _I2CHW_Read_Count:                           blk      1
                                        (0119) 
                                        (0120) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0121) ;---------------------------------------------------
                                        (0122) ; Insert your custom declarations below this banner
                                        (0123) ;---------------------------------------------------
                                        (0124) 
                                        (0125) ;------------------------
                                        (0126) ; Includes
                                        (0127) ;------------------------
                                        (0128) 
                                        (0129) 	
                                        (0130) ;------------------------
                                        (0131) ;  Constant Definitions
                                        (0132) ;------------------------
                                        (0133) 
                                        (0134) 
                                        (0135) ;------------------------
                                        (0136) ; Variable Allocation
                                        (0137) ;------------------------
                                        (0138) 
                                        (0139) 
                                        (0140) ;---------------------------------------------------
                                        (0141) ; Insert your custom declarations above this banner
                                        (0142) ;---------------------------------------------------
                                        (0143) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0144) 
                                        (0145) 
                                        (0146) 
                                        (0147) AREA UserModules (ROM, REL)
                                        (0148) 
                                        (0149) 
                                        (0150) export _I2CHW_ISR
                                        (0151) ;;****************************************************
                                        (0152) ;; I2C_MASTER  main entry point from vector 60h
                                        (0153) ;;
                                        (0154) ;;****************************************************
                                        (0155) 
                                        (0156) 
                                        (0157) _I2CHW_ISR:
09B5: 08       PUSH  A                  (0158)     push A
09B6: 10       PUSH  X                  (0159)     push X
09B7: 5D D3    MOV   A,REG[0xD3]        
09B9: 08       PUSH  A                  
                                        (0160) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0161)     REG_PRESERVE IDX_PP
                                        (0162) ENDIF
                                        (0163)     
                                        (0164)     ; Stop trap is not recommended because the stop bit cannot be cleared
                                        (0165)     ; User may choose to enable it
                                        (0166)     ; Add code to handle stop condition here
                                        (0167) 
09BA: 49 D7 08 TST   REG[0xD7],0x8      (0168)     tst reg[I2CHW_SCR], I2C_ADDRIN
09BD: A0 18    JZ    0x09D6             (0169)     jz DataState
                                        (0170)     ;test for a start condition sent out, or bus error, ack from slave, or (lost arb & addr)
                                        (0171) AddrState:
09BF: 49 D9 01 TST   REG[0xD9],0x1      (0172)     tst reg[I2CHW_MSCR], I2CM_SNDSTRT
09C2: B0 2F    JNZ   0x09F2             (0173)     jnz NoStart
09C4: 49 D7 02 TST   REG[0xD7],0x2      (0174)     tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
09C7: B0 1E    JNZ   0x09E6             (0175)     jnz SlaveAddrNAK
                                        (0176)                                                            ;slave must have acked here
                                        (0177)                                                            
09C9: 47 01 01 TST   [0x1],0x1          (0178)     tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read (from slave and put it in RAM,
                                        (0179)                                                            ;bit 0 = 0 then write to slave and get it from RAM or Flash
09CC: B0 2E    JNZ   0x09FB             (0180)     jnz I2C_ReadSlave1stByte                               ;bit 0 was 1
09CE: 80 A7    JMP   0x0A76             (0181)     jmp I2C_WriteSlave1stByte                              ;bit 0 was 0
09D0: 18       POP   A                  
09D1: 60 D3    MOV   REG[0xD3],A        
                                        (0182) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0183)     REG_RESTORE IDX_PP
                                        (0184) ENDIF
09D3: 20       POP   X                  (0185)     pop X
09D4: 18       POP   A                  (0186)     pop A
09D5: 7E       RETI                     (0187)     reti
                                        (0188) 
                                        (0189) DataState:
09D6: 2E 02 80 OR    [0x2],0x80         (0190)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
09D9: 47 01 01 TST   [0x1],0x1          (0191)     tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read, bit 0 = 0 then write
09DC: B0 2D    JNZ   0x0A0A             (0192)     jnz I2C_ReadSlave                                      ;bit 0 was 1
                                        (0193) 
                                        (0194) StillDataToWrite:
09DE: 80 9D    JMP   0x0A7C             (0195)     jmp I2C_WriteSlave                                     ;bit 0 was 0
09E0: 18       POP   A                  
09E1: 60 D3    MOV   REG[0xD3],A        
                                        (0196) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0197)     REG_RESTORE IDX_PP
                                        (0198) ENDIF
09E3: 20       POP   X                  (0199)     pop X
09E4: 18       POP   A                  (0200)     pop A
09E5: 7E       RETI                     (0201)     reti
09E6: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0202) 
                                        (0203) 
                                        (0204) SlaveAddrNAK:
                                        (0205)     ;;
                                        (0206)     ;; all there is to do here is to return, the slave didn't respond so it's not there or needs
                                        (0207)     ;; to be tried later.
                                        (0208)     ;;
                                        (0209) ;@PSoC_UserCode_BODY4@ (Do not change this line.)
                                        (0210) ;---------------------------------------------------
                                        (0211) ; Insert your custom code below this banner
                                        (0212) ; to modify the way a NAK from a slave is handled
                                        (0213) ; possibly set a user defined status
                                        (0214) ;---------------------------------------------------
                                        (0215) 
                                        (0216) ;********************************************************
                                        (0217) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0218) ;********************************************************
                                        (0219) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0220) ;
                                        (0221) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0222) ;
                                        (0223)     SetI2CHW_SCR 0     ;sets the tx/rx bit to receive, generates a stop without sending any data
                                        (0224) 
09E9: 26 02 7F AND   [0x2],0x7F         (0225)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
09EC: 18       POP   A                  
09ED: 60 D3    MOV   REG[0xD3],A        
                                        (0226) 
                                        (0227) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0228)     REG_RESTORE IDX_PP
                                        (0229) ENDIF
09EF: 20       POP   X                  (0230)     pop X
09F0: 18       POP   A                  (0231)     pop A
09F1: 7E       RETI                     (0232)     reti
                                        (0233) 
                                        (0234) NoStart:
                                        (0235)     ;here might test loss of arbitration and the presence of an address bit indicating that the
                                        (0236)     ;Master is being addressed as a slave.
                                        (0237)     ;;
                                        (0238)     ;; there may be a need to indicate that there was a Master transmission
                                        (0239)     ;; failure or an unsuccessful attempt.
                                        (0240)     ;;
09F2: 26 02 7F AND   [0x2],0x7F         (0241)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
09F5: 18       POP   A                  
09F6: 60 D3    MOV   REG[0xD3],A        
                                        (0242) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0243)     REG_RESTORE IDX_PP
                                        (0244) ENDIF
09F8: 20       POP   X                  (0245)     pop X
09F9: 18       POP   A                  (0246)     pop A
09FA: 7E       RETI                     (0247)     reti
                                        (0248) 
                                        (0249) I2C_ReadSlave1stByte:
09FB: 2E 02 80 OR    [0x2],0x80         (0250)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
09FE: 26 02 FB AND   [0x2],0xFB         (0251)     and [I2CHW_RsrcStatus], ~I2CHW_RD_COMPLETE
0A01: 62 D7 00 MOV   REG[0xD7],0x0      
0A04: 18       POP   A                  
0A05: 60 D3    MOV   REG[0xD3],A        
                                        (0252) 
                                        (0253) ;read normal data in from slave immediately after the address is sent, there is no data to read
                                        (0254) ;but the bus is stalled at byte complete
                                        (0255) 
                                        (0256) ;
                                        (0257) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0258) ;
                                        (0259)     SetI2CHW_SCR 0     ;sets the tx/rx bit to receive, and clocks a byte in
                                        (0260) 
                                        (0261) 
                                        (0262) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0263)     REG_RESTORE IDX_PP
                                        (0264) ENDIF
0A07: 20       POP   X                  (0265)     pop X
0A08: 18       POP   A                  (0266)     pop A
0A09: 7E       RETI                     (0267)     reti
                                        (0268) 
                                        (0269) I2C_ReadSlave:                                             ;this is just a normal read
                                        (0270) 
                                        (0271) 
                                        (0272) ;;code snipped from old SW I2C below
                                        (0273) ;
                                        (0274) ; MASTER READ from SLAVE
                                        (0275) ; (and writing to it's own RAM--Write_Buf and Write_Cnt)
                                        (0276) ;
                                        (0277) ;@PSoC_UserCode_BODY1_V1.2@ (Do not change this line.)
                                        (0278) ;---------------------------------------------------
                                        (0279) ; Insert your custom code below this banner
                                        (0280) ;---------------------------------------------------
                                        (0281) 
                                        (0282) ;********************************************************
                                        (0283) ; By modifying the section from here down to the next comment block
                                        (0284) ; a user could process data for a custom I2C Master Read (write to RAM) application
                                        (0285) ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
                                        (0286) ;********************************************************
0A0A: 47 00 04 TST   [0x0],0x4          (0287)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
0A0D: B0 14    JNZ   0x0A22             (0288)    jnz   InStoreData
                                        (0289)    ;
                                        (0290)    ;process write data here
                                        (0291)    ;
0A0F: 7A 03    DEC   [0x3]              (0292)    dec   [I2CHW_Write_Count]
0A11: C0 4F    JC    0x0A61             (0293)    jc    CompleteRDXfer                                              ; carry set if value became -1
                                        (0294)    ;jz    InStoreData                                                                                             ;In theory overflow cant happen but stop the transaction anyway.
0A13: 3C 03 00 CMP   [0x3],0x0          (0295)    cmp   [I2CHW_Write_Count], 00                                     ;set nak flag, dec count, and store data
0A16: A0 03    JZ    0x0A1A             (0296)    jz    InNakNextByte
0A18: 80 06    JMP   0x0A1F             (0297)    jmp   InNotBufEnd
                                        (0298) InNakNextByte:                                                       ;set the nakflag in I2CHW_bStatus
0A1A: 2E 00 04 OR    [0x0],0x4          (0299)    or    [I2CHW_bStatus], fI2C_NAKnextWr
0A1D: 80 04    JMP   0x0A22             (0300)    jmp   InStoreData
                                        (0301) InNotBufEnd:
0A1F: 26 00 FB AND   [0x0],0xFB         (0302)    and   [I2CHW_bStatus], ~fI2C_NAKnextWr                            ;clear the nak flag in case it was set from a previous operation
                                        (0303) InStoreData:
                                        (0304)    ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
0A22: 2E 02 10 OR    [0x2],0x10         (0305)    or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR                          ;set current status
                                        (0306) IF SYSTEM_LARGE_MEMORY_MODEL
0A25: 51 04    MOV   A,[0x4]            (0307)    mov   A, [pI2CHW_Write_BufHI]
0A27: 60 D3    MOV   REG[0xD3],A        
                                        (0308) ENDIF
                                        (0309)    RAM_SETPAGE_IDX A
0A29: 58 05    MOV   X,[0x5]            (0310)    mov   X, [pI2CHW_Write_BufLO]
0A2B: 5D D8    MOV   A,REG[0xD8]        (0311)    mov   A, reg[I2CHW_DR]
0A2D: 70 3F    AND   F,0x3F             
0A2F: 71 80    OR    F,0x80             
                                        (0312)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0A31: 54 00    MOV   [X+0],A            (0313)    mov   [X], A
0A33: 70 3F    AND   F,0x3F             
0A35: 71 00    OR    F,0x0              
                                        (0314)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0A37: 76 05    INC   [0x5]              (0315)    inc   [pI2CHW_Write_BufLO]
                                        (0316) 
0A39: 47 00 04 TST   [0x0],0x4          (0317)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
0A3C: B0 0A    JNZ   0x0A47             (0318)    jnz   NAK_this_one
0A3E: 62 D7 10 MOV   REG[0xD7],0x10     
0A41: 18       POP   A                  
0A42: 60 D3    MOV   REG[0xD3],A        
                                        (0319) 
                                        (0320) ;********************************************************
                                        (0321) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0322) ;********************************************************
                                        (0323) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0324) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0325) 
                                        (0326) ;
                                        (0327) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0328) ;
                                        (0329)     SetI2CHW_SCR I2C_ACKOUT                                          ;send Ack
                                        (0330) 
                                        (0331) 
                                        (0332) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0333)     REG_RESTORE IDX_PP
                                        (0334) ENDIF
0A44: 20       POP   X                  (0335)     pop X
0A45: 18       POP   A                  (0336)     pop A
0A46: 7E       RETI                     (0337)     reti
                                        (0338) 
                                        (0339) NAK_this_one:
                                        (0340) 
0A47: 26 00 FB AND   [0x0],0xFB         (0341)     and  [I2CHW_bStatus], ~fI2C_NAKnextWr
                                        (0342) 
                                        (0343)     ; *****
                                        (0344)     ; here we may need to look at the mode that this was called under
                                        (0345)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0346)     ; ******
0A4A: 26 02 F8 AND   [0x2],0xF8         (0347)     and   [I2CHW_RsrcStatus], ~0x07                                  ;clear the read status bits
0A4D: 2E 02 01 OR    [0x2],0x1          (0348)     or    [I2CHW_RsrcStatus], I2CHW_RD_NOERR
0A50: 2E 02 04 OR    [0x2],0x4          (0349)     or    [I2CHW_RsrcStatus], I2CHW_RD_COMPLETE
                                        (0350) 
0A53: 26 00 03 AND   [0x0],0x3          (0351)     and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
0A56: A0 0A    JZ    0x0A61             (0352)     jz      CompleteRDXfer
0A58: 26 02 7F AND   [0x2],0x7F         (0353)     and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0A5B: 18       POP   A                  
0A5C: 60 D3    MOV   REG[0xD3],A        
                                        (0354) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0355)     REG_RESTORE IDX_PP
                                        (0356) ENDIF
0A5E: 20       POP   X                  (0357)     pop X
0A5F: 18       POP   A                  (0358)     pop A
0A60: 7E       RETI                     (0359)     reti
0A61: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0360)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0361)     ;The NAK (not I2C_SNDACK) bit in I2C_SCR below will automatically generate a stop
                                        (0362) 
                                        (0363) CompleteRDXfer:
                                        (0364) 
                                        (0365) ;
                                        (0366) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0367) ;
                                        (0368)     SetI2CHW_SCR 0                                                   ;send Ack
                                        (0369) 
                                        (0370) 
0A64: 26 02 7F AND   [0x2],0x7F         (0371)     and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0A67: 18       POP   A                  
0A68: 60 D3    MOV   REG[0xD3],A        
                                        (0372) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0373)     REG_RESTORE IDX_PP
                                        (0374) ENDIF
0A6A: 20       POP   X                  (0375)     pop X
0A6B: 18       POP   A                  (0376)     pop A
0A6C: 7E       RETI                     (0377)     reti                                                             ;return and wait for the next interrupt (on data)
0A6D: 62 D7 10 MOV   REG[0xD7],0x10     
0A70: 18       POP   A                  
0A71: 60 D3    MOV   REG[0xD3],A        
                                        (0378) 
                                        (0379) AckTheRead:
                                        (0380) 
                                        (0381) ;
                                        (0382) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0383) ;
                                        (0384)     SetI2CHW_SCR I2C_ACKOUT                                          ;send Ack
                                        (0385) 
                                        (0386) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0387)     REG_RESTORE IDX_PP
                                        (0388) ENDIF
0A73: 20       POP   X                  (0389)     pop X
0A74: 18       POP   A                  (0390)     pop A
0A75: 7E       RETI                     (0391)     reti
                                        (0392) 
                                        (0393) 
                                        (0394) I2C_WriteSlave1stByte:
                                        (0395) ;write normal data to slave
0A76: 26 02 BF AND   [0x2],0xBF         (0396)     and [I2CHW_RsrcStatus], ~I2CHW_WR_COMPLETE
0A79: 2E 02 80 OR    [0x2],0x80         (0397)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0398) 
                                        (0399) 
                                        (0400) I2C_WriteSlave:
                                        (0401) 
0A7C: 49 D7 02 TST   REG[0xD7],0x2      (0402)     tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
0A7F: B0 4C    JNZ   0x0ACC             (0403)     jnz SlaveDataNAK
0A81: 50 04    MOV   A,0x4              (0404)     mov A, (I2C_TX)
0A83: 08       PUSH  A                  (0405)     push A
                                        (0406) 
                                        (0407) ;
                                        (0408) ;MASTER is WRITING TO SLAVE (& reading data from ram or flash buffer)
                                        (0409) ;
                                        (0410) ;;code snipped from SW I2C below
                                        (0411) 
                                        (0412) I2C_ObtainOutData:
                                        (0413) 
                                        (0414) 
                                        (0415) ;********************************************************
                                        (0416) ; here we need to get the next data to output (master-read)
                                        (0417) ; also set the status byte for use on exit
                                        (0418) ;********************************************************
                                        (0419) IF I2CHW_READ_FLASH
                                        (0420) ;@PSoC_UserCode_BODY2_V1.2@ (Do not change this line.)
                                        (0421) ;---------------------------------------------------
                                        (0422) ; Insert your custom code below this banner
                                        (0423) ; to modify the way a master might read non-volitile data
                                        (0424) ; to send.
                                        (0425) ;---------------------------------------------------
                                        (0426) 
                                        (0427)     tst  [I2CHW_RsrcStatus],I2CHW_READFLASH
                                        (0428)     jz   ReadOutData
                                        (0429) 
                                        (0430)     ;
                                        (0431)     ;get the data
                                        (0432)     ;
                                        (0433)     mov  X, [pI2CHW_Read_BufLO]
                                        (0434)     mov  A, [pI2CHW_Read_BufHI]
                                        (0435)     romx
                                        (0436)     mov  reg[I2CHW_DR],A
                                        (0437)     dec  [I2CHW_Read_Count]                                          ;calc addr lsb
                                        (0438)     jnc  NoDecHighCount
                                        (0439)     dec  [I2CHW_Read_CountHI]
                                        (0440) 
                                        (0441)     jc   MstrWRComplete
                                        (0442) 
                                        (0443) NoDecHighCount:
                                        (0444) 
                                        (0445)     inc  [pI2CHW_Read_BufLO]                                         ;set the next flash address to read
                                        (0446)     jnc  NoIncHiAddr
                                        (0447)     inc  [pI2CHW_Read_BufHI]
                                        (0448) NoIncHiAddr:
                                        (0449)    jmp   I2CNormalOutput
                                        (0450) ;
                                        (0451) ;****** THERE SHOULD BE NO WAY TO REACH THIS STATE WE'LL JUST TERMINATE THE ACTIVITY SINCE WERE THE MASTER
                                        (0452) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0453) ;
                                        (0454) ;FlashRdOverflow:
                                        (0455)     ;deal with the over flow cond by resending last data byte (dec the low addr)
                                        (0456) 
                                        (0457) ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0458) ;                                                                      ;set count back to 0
                                        (0459) ;   mov   [I2CHW_Read_CountHI], 0                                    ;functionally the same as incrementing ffff and less instructions
                                        (0460) ;   mov   [I2CHW_Read_Count], 0
                                        (0461) ;   jmp   I2CNormalRead
                                        (0462) 
                                        (0463) ;---------------------------------------------------
                                        (0464) ; Insert your custom code above this banner
                                        (0465) ;---------------------------------------------------
                                        (0466) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0467) 
                                        (0468) ENDIF
                                        (0469) ;@PSoC_UserCode_BODY3@ (Do not change this line.)
                                        (0470) ;---------------------------------------------------
                                        (0471) ; Insert your custom code below this banner
                                        (0472) ; to modify the way a master might read RAM data to send
                                        (0473) ; to an I2C device
                                        (0474) ; By replacing the section from here down to the next block
                                        (0475) ; a user could process data for a custom I2C READ application
                                        (0476) ;---------------------------------------------------
                                        (0477) ReadOutData:
                                        (0478)    ;read the current data byte
                                        (0479) IF SYSTEM_LARGE_MEMORY_MODEL
0A84: 51 06    MOV   A,[0x6]            (0480)    mov   A, [pI2CHW_Read_BufHI]
0A86: 60 D3    MOV   REG[0xD3],A        
                                        (0481) ENDIF
                                        (0482)    RAM_SETPAGE_IDX A
0A88: 58 07    MOV   X,[0x7]            (0483)    mov   X, [pI2CHW_Read_BufLO]
0A8A: 70 3F    AND   F,0x3F             
0A8C: 71 80    OR    F,0x80             
                                        (0484)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0A8E: 52 00    MOV   A,[X+0]            (0485)    mov   A, [X]
0A90: 70 3F    AND   F,0x3F             
0A92: 71 00    OR    F,0x0              
                                        (0486)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0A94: 60 D8    MOV   REG[0xD8],A        (0487)    mov   reg[I2CHW_DR], A
0A96: 7A 08    DEC   [0x8]              (0488)    dec   [I2CHW_Read_Count]
                                        (0489) 
0A98: C0 0E    JC    0x0AA7             (0490)    jc    MstrWRComplete
0A9A: 76 07    INC   [0x7]              (0491)    inc   [pI2CHW_Read_BufLO]
0A9C: 80 01    JMP   0x0A9E             (0492)    jmp   I2CNormalOutput
                                        (0493) ;
                                        (0494) ;ram read overflow detected here, just resend the last location in the buffer
                                        (0495) ;
                                        (0496) ;********        THERE SHOULD BE NO WAY TO OVERFLOW FOR THIS CASE
                                        (0497) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0498) ;
                                        (0499) ;RamRDOverflow:
                                        (0500) ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0501) ;   inc   [I2CHW_Read_Count]                                         ; set back to zero
                                        (0502) 
                                        (0503) ;---------------------------------------------------
                                        (0504) ; End user I2C MASTER WRITE TO SLAVE /READ buffer customization section
                                        (0505) ; Insert your custom code above this banner
                                        (0506) ;---------------------------------------------------
                                        (0507) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0508) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0509) I2CNormalOutput:
                                        (0510) 
                                        (0511)     ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                                        (0512)     ;and place there based on whether or not the previous transmission was our I2C address.
0A9E: 18       POP   A                  (0513)     pop   A
0A9F: 60 D7    MOV   REG[0xD7],A        
0AA1: 18       POP   A                  
0AA2: 60 D3    MOV   REG[0xD3],A        
                                        (0514) 
                                        (0515) ;
                                        (0516) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0517) ;
                                        (0518)     SetI2CHW_SCR A                                                   ;Sets the I2C_TX bit in the I2C_SCR reg.
                                        (0519) 
                                        (0520) 
                                        (0521) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0522)     REG_RESTORE IDX_PP
                                        (0523) ENDIF
0AA4: 20       POP   X                  (0524)     pop X
0AA5: 18       POP   A                  (0525)     pop A
0AA6: 7E       RETI                     (0526)     reti ;return and wait for the next interrupt (on data)
                                        (0527) 
                                        (0528) MstrWRComplete:
0AA7: 26 02 8F AND   [0x2],0x8F         (0529)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
0AAA: 2E 02 40 OR    [0x2],0x40         (0530)     or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
0AAD: 2E 02 10 OR    [0x2],0x10         (0531)     or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR
                                        (0532) 
                                        (0533)     ; *****
                                        (0534)     ; here we may need to look at the mode that this was called under
                                        (0535)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0536)     ; ******
0AB0: 26 00 03 AND   [0x0],0x3          (0537)     and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
0AB3: A0 0B    JZ    0x0ABF             (0538)     jz      CompleteWRXfer
0AB5: 18       POP   A                  (0539)     pop  A                                                           ;clear the stack for return
0AB6: 26 02 7F AND   [0x2],0x7F         (0540)     and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0AB9: 18       POP   A                  
0ABA: 60 D3    MOV   REG[0xD3],A        
                                        (0541) 
                                        (0542) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0543)     REG_RESTORE IDX_PP
                                        (0544) ENDIF
0ABC: 20       POP   X                  (0545)     pop X
0ABD: 18       POP   A                  (0546)     pop A
0ABE: 7E       RETI                     (0547)     reti
                                        (0548)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0549)     ; The release of the I2C_TX bit in I2C_SCR below will automatically generate a stop
                                        (0550) 
                                        (0551) CompleteWRXfer:
                                        (0552) 
0ABF: 18       POP   A                  (0553)     pop   A
0AC0: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0554) 
                                        (0555) ;
                                        (0556) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0557) ;
                                        (0558)     SetI2CHW_SCR 0                                                   ;this will release the bus and generate a stop condition
                                        (0559) 
0AC3: 26 02 7F AND   [0x2],0x7F         (0560)    and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0AC6: 18       POP   A                  
0AC7: 60 D3    MOV   REG[0xD3],A        
                                        (0561) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0562)    REG_RESTORE IDX_PP
                                        (0563) ENDIF
0AC9: 20       POP   X                  (0564)    pop X
0ACA: 18       POP   A                  (0565)    pop A
0ACB: 7E       RETI                     (0566)    reti
                                        (0567) 
                                        (0568) SlaveDataNAK:
                                        (0569) ;must also fix up the data buffer.  While it is marginally safe to nak a byte as a slave and 
                                        (0570) ;store it.  It is NEVER safe as a master to notice that a written byte has been nak'ed by a 
                                        (0571) ;slave and fail to resend it.
                                        (0572) ;this piece of code fixes up the count and buffer that the master is using to get data from
                                        (0573) ;to re-transmit the byte when the next master write is done.
0ACC: 76 08    INC   [0x8]              (0574)     inc  [I2CHW_Read_Count]                          ;calc addr lsb
                                        (0575) IF I2CHW_READ_FLASH
                                        (0576)     jnc  NoIncHighCount
                                        (0577)     inc  [I2CHW_Read_CountHI]
                                        (0578) 
                                        (0579) NoIncHighCount:
                                        (0580) ENDIF
0ACE: 7A 07    DEC   [0x7]              (0581)     dec  [pI2CHW_Read_BufLO]                         ;set the next flash address to read
                                        (0582) IF SYSTEM_LARGE_MEMORY_MODEL
0AD0: D0 03    JNC   0x0AD4             (0583)     jnc  NoDecHiAddr
0AD2: 7A 06    DEC   [0x6]              (0584)     dec  [pI2CHW_Read_BufHI]
0AD4: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0585) NoDecHiAddr:
                                        (0586) ELSE
                                        (0587) IF I2CHW_READ_FLASH
                                        (0588)     jnc  NoDecHiCAddr
                                        (0589)     dec  [pI2CHW_Read_BufHI]
                                        (0590) NoDecHiCAddr:
                                        (0591) ENDIF
                                        (0592) ENDIF
                                        (0593) 
                                        (0594) ;;
                                        (0595) ;; all there is to do here is to return & set status, the slave didn't want any more data
                                        (0596) ;;
                                        (0597) ; no pop needed because the nak is detected before the push happens above
                                        (0598) 
                                        (0599) ;
                                        (0600) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0601) ;
                                        (0602)     SetI2CHW_SCR 0                                                   ;this will release the bus and generate a stop condition
                                        (0603) 
0AD7: 26 02 7F AND   [0x2],0x7F         (0604)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0ADA: 26 02 8F AND   [0x2],0x8F         (0605)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
0ADD: 2E 02 40 OR    [0x2],0x40         (0606)     or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
0AE0: 2E 02 20 OR    [0x2],0x20         (0607)     or    [I2CHW_RsrcStatus], I2CHW_WR_OVERFLOW
0AE3: 18       POP   A                  
0AE4: 60 D3    MOV   REG[0xD3],A        
                                        (0608) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0609)     REG_RESTORE IDX_PP
                                        (0610) ENDIF
0AE6: 20       POP   X                  (0611)     pop X
0AE7: 18       POP   A                  (0612)     pop A
0AE8: 7E       RETI                     (0613)    reti
                                        (0614) 
                                        (0615) STOPTRAP:
                                        (0616)     ;
                                        (0617)     ;   If interrupt on STOP condition is enabled:
                                        (0618)     ;   Add user code to process stop (not recommended becuase I2C bus is NOT stalled and ISR
                                        (0619)     ;   may block reception of ongoing transactions/addresses
                                        (0620)     ;   STOP condition is never detected when a repeat start is used by the master.
                                        (0621)     ;
0AE9: 26 02 7F AND   [0x2],0x7F         (0622)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0AEC: 18       POP   A                  
0AED: 60 D3    MOV   REG[0xD3],A        
                                        (0623) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0624)     REG_RESTORE IDX_PP
                                        (0625) ENDIF
0AEF: 20       POP   X                  (0626)     pop X
0AF0: 18       POP   A                  (0627)     pop A
0AF1: 7E       RETI                     (0628)     reti
                                        (0629) 
                                        (0630) ; end of file I2CHWINT.asm
FILE: lib\i2chwcommon.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWCommon.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ; include instance specific register definitions
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) ;-------------------------------------------------------------------
                                        (0034) ;  Declare the functions global for both assembler and C compiler.
                                        (0035) ;
                                        (0036) ;  Note that there are two names for each API. First name is
                                        (0037) ;  assembler reference. Name with underscore is name refence for
                                        (0038) ;  C compiler.  Calling function in C source code does not require
                                        (0039) ;  the underscore.
                                        (0040) ;-------------------------------------------------------------------
                                        (0041) 
                                        (0042) export    I2CHW_InitWrite
                                        (0043) export   _I2CHW_InitWrite
                                        (0044) export    I2CHW_InitRamRead
                                        (0045) export   _I2CHW_InitRamRead
                                        (0046) export    I2CHW_InitFlashRead
                                        (0047) export   _I2CHW_InitFlashRead
                                        (0048) export    I2CHW_bReadI2CStatus
                                        (0049) export   _I2CHW_bReadI2CStatus
                                        (0050) export    I2CHW_ClrRdStatus
                                        (0051) export   _I2CHW_ClrRdStatus
                                        (0052) export    I2CHW_ClrWrStatus
                                        (0053) export   _I2CHW_ClrWrStatus
                                        (0054) 
                                        (0055) 
                                        (0056) AREA UserModules (ROM, REL)
                                        (0057) 
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: I2CHW_InitWrite
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Initializes a data buffer pointer for the slave to use to deposit data, and
                                        (0065) ;     zeroes the value of a count byte for the same buffer.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  [SP-5]   -- count of bytes to write
                                        (0070) ;              [SP-4]   -- Hi order part of address Wrbuf
                                        (0071) ;              [SP-3]   -- Low order part of the address Wrbuf 
                                        (0072) ;
                                        (0073) ;  RETURNS:  none
                                        (0074) ;
                                        (0075) ;    Write Status bits are cleared
                                        (0076) ;
                                        (0077) ;  SIDE EFFECTS:
                                        (0078) ;    The A and X registers may be modified by this or future implementations
                                        (0079) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0080) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0081) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0082) ;    functions.
                                        (0083) ;          
                                        (0084) ;    Currently only the page pointer registers listed below are modified: 
                                        (0085) ;          CUR_PP
                                        (0086) ;
                                        (0087) ;    Write Status bits are cleared
                                        (0088) ;
                                        (0089) ;  THEORY of OPERATION or PROCEDURE:
                                        (0090) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0091) ;     the accumulator.  X register is the low order pointer.
                                        (0092) ;     IF a one byte buffer is established, set a flag to NAK the first written data byte.
                                        (0093) ;
                                        (0094) 
                                        (0095)  I2CHW_InitWrite:
                                        (0096) _I2CHW_InitWrite:
                                        (0097) 
                                        (0098) WrCnt:   equ -5
                                        (0099) WrBufHi: equ -4
                                        (0100) WrBufLo: equ -3
                                        (0101) 
                                        (0102) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0103)     RAM_PROLOGUE RAM_USE_CLASS_2
0AF2: 10       PUSH  X                  (0104) 	push  X
0AF3: 4F       MOV   X,SP               (0105) 	mov   X, SP
0AF4: 79       DEC   X                  (0106)     dec   X                                                          ;set up the pointer for correct param access
0AF5: 08       PUSH  A                  (0107)     push  A
0AF6: 5D DE    MOV   A,REG[0xDE]        (0108)     mov   A, reg[I2CHW_INT_REG]
0AF8: 08       PUSH  A                  (0109)     push  A                                                           ;preserve flags prior to disabling int
0AF9: 41 DE FE AND   REG[0xDE],0xFE     
0AFC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0110)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0111) 
                                        (0112)     RAM_SETPAGE_CUR >I2CHW_bStatus						                             ;Set the Page Pointer for LMM
0AFF: 26 00 FB AND   [0x0],0xFB         (0113)     and    [I2CHW_bStatus], ~fI2C_NAKnextWr                          ;reset the nak-next-written-byte flag.
                                        (0114) IF SYSTEM_LARGE_MEMORY_MODEL
0B02: 52 FC    MOV   A,[X-4]            (0115)     mov   A, [X + WrBufHi]                                           ;move wrbuf addr to A
0B04: 53 04    MOV   [0x4],A            (0116)     mov   [pI2CHW_Write_BufHI], A
                                        (0117) ENDIF
0B06: 52 FD    MOV   A,[X-3]            (0118)     mov   A, [X + WrBufLo]                                           ;move wrbuf addr to A
0B08: 53 05    MOV   [0x5],A            (0119)     mov   [pI2CHW_Write_BufLO], A
0B0A: 52 FB    MOV   A,[X-5]            (0120)     mov   A, [X + WrCnt]                                               ;move Write_count to A
0B0C: 53 03    MOV   [0x3],A            (0121)     mov   [I2CHW_Write_Count], A
0B0E: 39 01    CMP   A,0x1              (0122)     cmp   A, 01                                                        ;if data buffer is one byte long or less
0B10: A0 08    JZ    0x0B19             (0123)     jz    I2CHW_SetNak
0B12: C0 06    JC    0x0B19             (0124)     jc    I2CHW_SetNak
0B14: 26 02 8F AND   [0x2],0x8F         (0125)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the 0x10, 0x20 (Write status bits)
0B17: 80 09    JMP   0x0B21             (0126)     jmp   I2Cs_1_ResetFlgs
                                        (0127) 
                                        (0128) I2CHW_SetNak:
0B19: 2E 00 04 OR    [0x0],0x4          (0129)     or    [I2CHW_bStatus], fI2C_NAKnextWr                            ;set the nak-next-written-byte flag.
0B1C: 26 02 8F AND   [0x2],0x8F         (0130)     and   [I2CHW_RsrcStatus], ~0x70                                  ; clear the 0x10, 0x20 (Write status bits)
0B1F: 80 01    JMP   0x0B21             (0131)     jmp   I2Cs_1_ResetFlgs
                                        (0132) 
                                        (0133) I2Cs_1_ResetFlgs:
0B21: 18       POP   A                  (0134)     pop A
0B22: 21 01    AND   A,0x1              (0135)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
0B24: A0 04    JZ    0x0B29             (0136)     jz  . + 5
0B26: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0137)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0B29: 18       POP   A                  (0138)     pop A
0B2A: 20       POP   X                  (0139)     pop X
0B2B: 70 3F    AND   F,0x3F             
0B2D: 71 C0    OR    F,0xC0             
                                        (0140) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0141)     RAM_EPILOGUE RAM_USE_CLASS_2
0B2F: 7F       RET                      (0142)     ret
0B30: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0143) 
                                        (0144) .ENDSECTION
                                        (0145) 
                                        (0146) .SECTION
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;  FUNCTION NAME: I2CHW_InitRamRead
                                        (0149) ;
                                        (0150) ;  DESCRIPTION:
                                        (0151) ;     Initializes a data buffer pointer for the slave to use to retrieve data from,
                                        (0152) ;     and zeroes the value of a count byte for the same buffer.
                                        (0153) ;
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:  [SP-5]  -- count of bytes to read
                                        (0157) ;              [SP-4]  -- Hi order part of addr to ReadBuf
                                        (0158) ;              [SP-3]  -- Low order part of the address to ReadBuf
                                        (0159) ;
                                        (0160) ;  RETURNS: none
                                        (0161) ;
                                        (0162) ;  SIDE EFFECTS:
                                        (0163) ;    The A and X registers may be modified by this or future implementations
                                        (0164) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0165) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0166) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0167) ;    functions.
                                        (0168) ;          
                                        (0169) ;    Currently only the page pointer registers listed below are modified: 
                                        (0170) ;          CUR_PP
                                        (0171) ;
                                        (0172) ;     Read Status bits are cleared
                                        (0173) ;
                                        (0174) ;  THEORY of OPERATION or PROCEDURE:
                                        (0175) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0176) ;     the accumulator.  X register is the low order pointer.
                                        (0177) ;
                                        (0178) 
                                        (0179)  I2CHW_InitRamRead:
                                        (0180) _I2CHW_InitRamRead:
                                        (0181) 
                                        (0182) RdCnt:     equ   -5
                                        (0183) RdBufHi:   equ   -4
                                        (0184) RdBufLo:   equ   -3
                                        (0185) 
                                        (0186)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0187) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0188) 	RAM_SETPAGE_CUR >I2CHW_Read_Count
0B33: 10       PUSH  X                  (0189)     push  X
0B34: 4F       MOV   X,SP               (0190) 	mov   X, SP
0B35: 79       DEC   X                  (0191)     dec   X                                                          ;set up the pointer for correct param access
0B36: 08       PUSH  A                  (0192)     push  A
0B37: 5D DE    MOV   A,REG[0xDE]        (0193)     mov   A, reg[I2CHW_INT_REG]
0B39: 08       PUSH  A                  (0194)     push  A                                                            ;preserve flags prior to disabling int
0B3A: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0195)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0196) 
                                        (0197) IF SYSTEM_LARGE_MEMORY_MODEL
0B3D: 52 FC    MOV   A,[X-4]            (0198)     mov   A, [X + RdBufHi]                                           ;move wrbuf addr to A
0B3F: 53 06    MOV   [0x6],A            (0199)     mov   [pI2CHW_Read_BufHI], A
                                        (0200) ENDIF
0B41: 52 FD    MOV   A,[X-3]            (0201)     mov   A, [X + RdBufLo]                                             ; move rdbuf addr to A
0B43: 53 07    MOV   [0x7],A            (0202)     mov   [pI2CHW_Read_BufLO], A
0B45: 52 FB    MOV   A,[X-5]            (0203)     mov   A, [X + RdCnt]                                               ; move RamRead_count to A
0B47: 53 08    MOV   [0x8],A            (0204)     mov   [I2CHW_Read_Count], A
0B49: 7A 08    DEC   [0x8]              (0205)     dec   [I2CHW_Read_Count]                                         ; since we decrement through zero...
0B4B: 26 02 F0 AND   [0x2],0xF0         (0206)     and   [I2CHW_RsrcStatus], ~0x0f                                  ; clear the lower 4 (read status bits)
                                        (0207) 
0B4E: 18       POP   A                  (0208)     pop A
0B4F: 21 01    AND   A,0x1              (0209)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
0B51: A0 04    JZ    0x0B56             (0210)     jz  . + 5
0B53: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0211)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0B56: 18       POP   A                  (0212)     pop A
0B57: 20       POP   X                  (0213)     pop X
0B58: 70 3F    AND   F,0x3F             
0B5A: 71 C0    OR    F,0xC0             
                                        (0214) 
                                        (0215)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0216)     RAM_EPILOGUE RAM_USE_CLASS_2
0B5C: 7F       RET                      (0217)     ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) .SECTION
                                        (0222) ;-----------------------------------------------------------------------------
                                        (0223) ;  FUNCTION NAME: I2CHW_InitFlashRead
                                        (0224) ;
                                        (0225) ;  DESCRIPTION:
                                        (0226) ;     Initializes a flash data buffer pointer for the slave to use to retrieve
                                        (0227) ;     data from, and zeroes the value of a count byte for the same buffer.
                                        (0228) ;
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:  [SP-6]   -- Hi order part of flash Read count
                                        (0232) ;              [SP-5]   -- Low order part of flashRead counts
                                        (0233) ;              [SP-4]   -- Hi order part of the flash buf address
                                        (0234) ;              [SP-3]   -- Lo order part of flash buf address
                                        (0235) ;
                                        (0236) ;  RETURNS:
                                        (0237) ;
                                        (0238) ;  SIDE EFFECTS:
                                        (0239) ;    The A and X registers may be modified by this or future implementations
                                        (0240) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0241) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0242) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0243) ;    functions.
                                        (0244) ;          
                                        (0245) ;    Currently only the page pointer registers listed below are modified: 
                                        (0246) ;          CUR_PP
                                        (0247) ;
                                        (0248) ;    Read Status bits are cleared
                                        (0249) ;
                                        (0250) ;  THEORY of OPERATION or PROCEDURE:
                                        (0251) ;     The C compiler will place the upper order address of the buffer in Acc.
                                        (0252) ;     X register is the low order pointer.  A user module parameter is used to conserve code
                                        (0253) ;     if flash buffers are un-needed.  The API call is left defined and capable of returning in
                                        (0254) ;     either case
                                        (0255) ;
                                        (0256)  I2CHW_InitFlashRead:
                                        (0257) _I2CHW_InitFlashRead:
                                        (0258) 
                                        (0259) FlRdCntHI:     equ   -6
                                        (0260) FlRdCntLO:     equ   -5
                                        (0261) FlBufAdrHI:    equ   -4
                                        (0262) FlBufAdrLO:    equ   -3
                                        (0263) 
                                        (0264) IF I2CHW_READ_FLASH
                                        (0265)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0266)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0267)     RAM_SETPAGE_CUR >pI2CHW_Read_BufLO   
                                        (0268) 	push  X
                                        (0269) 	mov   X, SP
                                        (0270)     dec   X                                                            ;set up the pointer for correct param access
                                        (0271)     push  A
                                        (0272)     mov   A, reg[I2CHW_INT_REG]
                                        (0273)     push  A                                                            ;preserve flags prior to disabling int
                                        (0274)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0275) 
                                        (0276)     mov   A, [X + FlBufAdrLO]                                          ; move flrdbuf LOaddr to A
                                        (0277)     mov   [pI2CHW_Read_BufLO], A
                                        (0278)     mov   A, [X + FlBufAdrHI]                                          ; move flrdbuf HIaddr to A
                                        (0279)     mov   [pI2CHW_Read_BufHI], A
                                        (0280)     mov   A, [X + FlRdCntLO]                                           ; move flrdbuf LOcount to A
                                        (0281)     mov   [I2CHW_Read_Count], A
                                        (0282)     mov   A, [X + FlRdCntHI]                                           ; move flrdbuf HIcount to A
                                        (0283)     mov   [I2CHW_Read_CountHI], A
                                        (0284) 
                                        (0285)     dec   [I2CHW_Read_Count]                                         ; since this will count throu zero
                                        (0286)     jnc    . + 4                                                       ; only Read_CountHI if Read_Count rolled to 0xff
                                        (0287)     dec   [I2CHW_Read_CountHI]
                                        (0288) 
                                        (0289)     and   [I2CHW_RsrcStatus], ~0x07                                  ; clear the lower 3 (read status bits)
                                        (0290)     or    [I2CHW_RsrcStatus],I2CHW_READFLASH                         ; set the flash status bit
                                        (0291) 
                                        (0292)     pop A
                                        (0293)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
                                        (0294)     jz  . + 5
                                        (0295)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0296)     pop A
                                        (0297) 	pop X
                                        (0298)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0299) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0300) ENDIF
0B5D: 7F       RET                      (0301)     ret
0B5E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0302) 
                                        (0303) .ENDSECTION
                                        (0304) 
                                        (0305) .SECTION
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: I2CHW_bReadI2CStatus
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;     Returns the value in the the RsrcStatus variable.
                                        (0311) ;
                                        (0312) ;-----------------------------------------------------------------------------
                                        (0313) ;
                                        (0314) ;  ARGUMENTS:
                                        (0315) ;
                                        (0316) ;  RETURNS:
                                        (0317) ;     BYTE  bI2CStatus -  status data.  Use the following defined bits
                                        (0318) ;     returned in A.
                                        (0319) ;         I2CHW_RD_NOERR:                   equ 1
                                        (0320) ;         I2CHW_RD_OVERFLOW:                equ 2
                                        (0321) ;         I2CHW_RD_INCOMPLETE:              equ 4
                                        (0322) ;         I2CHW_READFLASH:                  equ 8
                                        (0323) ;         I2CHW_WR_NOERR:                   equ 10h
                                        (0324) ;         I2CHW_WR_OVERFLOW:                equ 20h
                                        (0325) ;         I2CHW_WR_COMPLETE:                equ 40h
                                        (0326) ;         I2CHW_ISR_ACTIVE:                 equ 80h
                                        (0327) ;
                                        (0328) ;  SIDE EFFECTS:
                                        (0329) ;    The A and X registers may be modified by this or future implementations
                                        (0330) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0331) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0332) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0333) ;    functions.
                                        (0334) ;          
                                        (0335) ;    Currently only the page pointer registers listed below are modified: 
                                        (0336) ;          CUR_PP
                                        (0337) ;          
                                        (0338)  I2CHW_bReadI2CStatus:
                                        (0339) _I2CHW_bReadI2CStatus:
                                        (0340)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0341) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0B61: 51 02    MOV   A,[0x2]            (0342)     mov   A, [I2CHW_RsrcStatus]                                      ;return the status in A
                                        (0343)     RAM_EPILOGUE RAM_USE_CLASS_4
0B63: 7F       RET                      (0344)     ret
0B64: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0345) 
                                        (0346) .ENDSECTION
                                        (0347) 
                                        (0348) .SECTION
                                        (0349) ;-----------------------------------------------------------------------------
                                        (0350) ;  FUNCTION NAME: I2CHW_ClrRdStatus
                                        (0351) ;
                                        (0352) ;  DESCRIPTION:
                                        (0353) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0354) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0355) ;
                                        (0356) ;-----------------------------------------------------------------------------
                                        (0357) ;
                                        (0358) ;  ARGUMENTS: none
                                        (0359) ;
                                        (0360) ;  RETURNS: none
                                        (0361) ;
                                        (0362) ;  SIDE EFFECTS:
                                        (0363) ;    The A and X registers may be modified by this or future implementations
                                        (0364) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0365) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0366) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0367) ;    functions.
                                        (0368) ;          
                                        (0369) ;    Currently only the page pointer registers listed below are modified: 
                                        (0370) ;          CUR_PP
                                        (0371) ;          
                                        (0372)  I2CHW_ClrRdStatus:
                                        (0373) _I2CHW_ClrRdStatus:
                                        (0374)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0375) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0B67: 26 02 F8 AND   [0x2],0xF8         (0376)     and   [I2CHW_RsrcStatus], ~0x07                                  ; clear the lower 3 (read status bits)
                                        (0377)     RAM_EPILOGUE RAM_USE_CLASS_4
0B6A: 7F       RET                      (0378)     ret
0B6B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0379) 
                                        (0380) .ENDSECTION
                                        (0381) 
                                        (0382) .SECTION
                                        (0383) ;-----------------------------------------------------------------------------
                                        (0384) ;  FUNCTION NAME: I2CHW_ClrWrStatus
                                        (0385) ;
                                        (0386) ;  DESCRIPTION:
                                        (0387) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0388) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0389) ;
                                        (0390) ;-----------------------------------------------------------------------------
                                        (0391) ;
                                        (0392) ;  ARGUMENTS: none
                                        (0393) ;
                                        (0394) ;  RETURNS: none
                                        (0395) ;
                                        (0396) ;  SIDE EFFECTS:
                                        (0397) ;    The A and X registers may be modified by this or future implementations
                                        (0398) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0399) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0400) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0401) ;    functions.
                                        (0402) ;          
                                        (0403) ;    Currently only the page pointer registers listed below are modified: 
                                        (0404) ;          CUR_PP
                                        (0405) ;          
                                        (0406)  I2CHW_ClrWrStatus:
                                        (0407) _I2CHW_ClrWrStatus:
                                        (0408)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0409) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0B6E: 26 02 8F AND   [0x2],0x8F         (0410)     and   [I2CHW_RsrcStatus], ~0x70                                  ; clear bits 10,20 (write status bits)
                                        (0411)     RAM_EPILOGUE RAM_USE_CLASS_4
0B71: 7F       RET                      (0412)     ret
                                        (0413) 
                                        (0414) .ENDSECTION
                                        (0415) ; End of File I2CHW.asm
FILE: lib\counter16int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Counter16.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Counter16_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter16_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter16_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0B72: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file Counter16INT.asm
FILE: lib\counter16.asm                 (0001) ;;*****************************************************************************
0B73: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter16.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter16_EnableInt
                                        (0030) export _Counter16_EnableInt
                                        (0031) export  Counter16_DisableInt
                                        (0032) export _Counter16_DisableInt
                                        (0033) export  Counter16_Start
                                        (0034) export _Counter16_Start
                                        (0035) export  Counter16_Stop
                                        (0036) export _Counter16_Stop
                                        (0037) export  Counter16_WritePeriod
                                        (0038) export _Counter16_WritePeriod
                                        (0039) export  Counter16_WriteCompareValue
                                        (0040) export _Counter16_WriteCompareValue
                                        (0041) export  Counter16_wReadCompareValue
                                        (0042) export _Counter16_wReadCompareValue
                                        (0043) export  Counter16_wReadCounter
                                        (0044) export _Counter16_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wCounter16_ReadCompareValue  ; deprecated
                                        (0049) export _wCounter16_ReadCompareValue  ; deprecated
                                        (0050) export  wCounter16_ReadCounter       ; deprecated
                                        (0051) export _wCounter16_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Counter16_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Counter16_EnableInt:
                                        (0082) _Counter16_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    Counter16_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0B76: 7F       RET                      (0086)    ret
0B77: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Counter16_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Counter16_DisableInt:
                                        (0109) _Counter16_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    Counter16_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0B7A: 7F       RET                      (0113)    ret
0B7B: 43 23 01 OR    REG[0x23],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Counter16_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Counter16_Start:
                                        (0138) _Counter16_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    Counter16_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0B7E: 7F       RET                      (0142)    ret
0B7F: 41 23 FE AND   REG[0x23],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Counter16_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register of the LSB block.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Counter16_Stop:
                                        (0166) _Counter16_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    Counter16_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0B82: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Counter16_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count registers (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Counter16_WritePeriod:
                                        (0196) _Counter16_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0B83: 60 21    MOV   REG[0x21],A        (0198)    mov   reg[Counter16_PERIOD_LSB_REG], A
0B85: 5B       MOV   A,X                (0199)    mov   A, X
0B86: 60 25    MOV   REG[0x25],A        (0200)    mov   reg[Counter16_PERIOD_MSB_REG], A
                                        (0201)    RAM_EPILOGUE RAM_USE_CLASS_1
0B88: 7F       RET                      (0202)    ret
                                        (0203) 
                                        (0204) 
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: Counter16_WriteCompareValue
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Writes compare value into the Compare register (DR2).
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;
                                        (0215) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0216) ;  RETURNS:      Nothing
                                        (0217) ;  SIDE EFFECTS: 
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;
                                        (0224)  Counter16_WriteCompareValue:
                                        (0225) _Counter16_WriteCompareValue:
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_1
0B89: 60 22    MOV   REG[0x22],A        (0227)    mov   reg[Counter16_COMPARE_LSB_REG], A
0B8B: 5B       MOV   A,X                (0228)    mov   A, X
0B8C: 60 26    MOV   REG[0x26],A        (0229)    mov   reg[Counter16_COMPARE_MSB_REG], A
                                        (0230)    RAM_EPILOGUE RAM_USE_CLASS_1
0B8E: 7F       RET                      (0231)    ret
                                        (0232) 
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) .SECTION
                                        (0237) ;-----------------------------------------------------------------------------
                                        (0238) ;  FUNCTION NAME: Counter16_wReadCompareValue
                                        (0239) ;
                                        (0240) ;  DESCRIPTION:
                                        (0241) ;     Reads the Compare registers.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS:    None
                                        (0245) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  Counter16_wReadCompareValue:
                                        (0254) _Counter16_wReadCompareValue:
                                        (0255)  wCounter16_ReadCompareValue:                    ; this name deprecated
                                        (0256) _wCounter16_ReadCompareValue:                    ; this name deprecated
                                        (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
0B8F: 5D 26    MOV   A,REG[0x26]        (0258)    mov   A, reg[Counter16_COMPARE_MSB_REG]
0B91: 5C       MOV   X,A                (0259)    mov   X, A
0B92: 5D 22    MOV   A,REG[0x22]        (0260)    mov   A, reg[Counter16_COMPARE_LSB_REG]
                                        (0261)    RAM_EPILOGUE RAM_USE_CLASS_1
0B94: 7F       RET                      (0262)    ret
                                        (0263) 
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: Counter16_wReadCounter
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0273) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0274) ;     from the Count to the Compare registers by holding the clock low in
                                        (0275) ;     the MSB PSoC block.
                                        (0276) ;-----------------------------------------------------------------------------
                                        (0277) ;
                                        (0278) ;  ARGUMENTS: None
                                        (0279) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0280) ;  SIDE EFFECTS:
                                        (0281) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0282) ;     2) The A and X registers may be modified by this or future implementations
                                        (0283) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0284) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0285) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0286) ;        functions.
                                        (0287) ;
                                        (0288)  Counter16_wReadCounter:
                                        (0289) _Counter16_wReadCounter:
                                        (0290)  wCounter16_ReadCounter:                         ; this name deprecated
                                        (0291) _wCounter16_ReadCounter:                         ; this name deprecated
                                        (0292) 
                                        (0293)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0294)    bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
                                        (0295)    bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
                                        (0296)    wCounter:               EQU   4                  ; Frame offset to temp Count   store
                                        (0297)    STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
                                        (0298) 
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
0B95: 4F       MOV   X,SP               (0300)    mov   X, SP                                      ; X <-  stack frame pointer
0B96: 5D 26    MOV   A,REG[0x26]        (0301)    mov   A, reg[Counter16_COMPARE_MSB_REG]       ; Save the Compare register on the stack
0B98: 08       PUSH  A                  (0302)    push  A                                          ;
0B99: 5D 22    MOV   A,REG[0x22]        (0303)    mov   A, reg[Counter16_COMPARE_LSB_REG]       ;
0B9B: 08       PUSH  A                  (0304)    push  A                                          ;   -stack frame now 2 bytes-
0B9C: 5D 23    MOV   A,REG[0x23]        (0305)    mov   A, reg[Counter16_CONTROL_LSB_REG]       ; Save CR0 (running or stopped state)
0B9E: 08       PUSH  A                  (0306)    push  A                                          ;   -stack frame now 3 bytes-
0B9F: 41 23 FE AND   REG[0x23],0xFE     
0BA2: 71 10    OR    F,0x10             
                                        (0307)    Counter16_Stop_M                              ; Disable (stop) the Counter if running
                                        (0308)    M8C_SetBank1                                     ;
0BA4: 5D 21    MOV   A,REG[0x21]        (0309)    mov   A, reg[Counter16_INPUT_LSB_REG]         ; save the LSB clock input setting
0BA6: 08       PUSH  A                  (0310)    push  A                                          ;   on the stack (now 4 bytes) and ...
                                        (0311)                                                     ;   hold the clock low:
0BA7: 62 21 00 MOV   REG[0x21],0x0      (0312)    mov   reg[Counter16_INPUT_LSB_REG], INPUT_REG_NULL
0BAA: 70 EF    AND   F,0xEF             
                                        (0313)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0BAC: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[Counter16_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
0BAE: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[Counter16_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
0BB0: 08       PUSH  A                  (0316)    push  A                                          ;   -stack frame is now 5 bytes
0BB1: 5D 20    MOV   A,REG[0x20]        (0317)    mov   A, reg[Counter16_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
0BB3: 5D 22    MOV   A,REG[0x22]        (0318)    mov   A, reg[Counter16_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
0BB5: 08       PUSH  A                  (0319)    push  A                                          ;   -stack frame is now 6 bytes-
0BB6: 52 00    MOV   A,[X+0]            (0320)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0BB8: 60 26    MOV   REG[0x26],A        (0321)    mov   reg[Counter16_COMPARE_MSB_REG], A       ;
0BBA: 52 01    MOV   A,[X+1]            (0322)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0BBC: 60 22    MOV   REG[0x22],A        (0323)    mov   reg[Counter16_COMPARE_LSB_REG], A       ;
0BBE: 71 10    OR    F,0x10             
                                        (0324)    M8C_SetBank1                                     ; ---Restore the counter operation
0BC0: 52 03    MOV   A,[X+3]            (0325)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0BC2: 60 21    MOV   REG[0x21],A        (0326)    mov   reg[Counter16_INPUT_LSB_REG], A         ;   and restore it
0BC4: 70 EF    AND   F,0xEF             
                                        (0327)    M8C_SetBank0                                     ; Now re-enable (start) the counter
0BC6: 52 02    MOV   A,[X+2]            (0328)    mov   A, [X+bOrigControlReg]                     ;   if it was running when
0BC8: 60 23    MOV   REG[0x23],A        (0329)    mov   reg[Counter16_CONTROL_LSB_REG], A       ;   this function was first called
0BCA: 18       POP   A                  (0330)    pop   A                                          ; Setup the return value
0BCB: 20       POP   X                  (0331)    pop   X                                          ;
0BCC: 38 FC    ADD   SP,0xFC            (0332)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0BCE: 70 3F    AND   F,0x3F             
0BD0: 71 C0    OR    F,0xC0             
                                        (0333)    RAM_EPILOGUE RAM_USE_CLASS_2
0BD2: 7F       RET                      (0334)    ret
                                        (0335) 
                                        (0336) .ENDSECTION
                                        (0337) 
                                        (0338) ; End of File Counter16.asm
FILE: C:\Users\addis\Desktop\ECE381\I2CRAM\I2CRAM\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "string.h"
(0008) #include "stdio.h"
(0009) #include "ctype.h"
(0010) 
(0011) static char rubout[4] = { 0x08, 0x20, 0x08, 0x00 }; // Rubout Sequence consists of Backspace Space Backspace. This is the null-terminated string
(0012) 
(0013) char buf[81];
(0014) 
(0015) // This function reads characters from the serial until a character is entered that is within the min & max ASCII characters.
(0016) // That character is returned
(0017) char GetNumber(char min, char max)
(0018) {
__UserModules_end|_GetNumber|__text_start|_GetNumber:
  c                    --> X+0
  max                  --> X-5
  min                  --> X-4
    0BD3: 10       PUSH  X
    0BD4: 4F       MOV   X,SP
    0BD5: 38 01    ADD   SP,0x1
    0BD7: 80 34    JMP   0x0C0C
(0019) 	char c;
(0020) 	
(0021) 	while (1)
(0022) 	{
(0023) 		c = UART_cReadChar(); // Read the character
    0BD9: 10       PUSH  X
    0BDA: 7C 06 E8 LCALL _UART_cReadChar
    0BDD: 20       POP   X
    0BDE: 62 D0 00 MOV   REG[0xD0],0x0
    0BE1: 54 00    MOV   [X+0],A
(0024) 		if (c < ('0' + min) || c > ('0' + max)) // If the character is not within min to max range, continue the loop
    0BE3: 52 FC    MOV   A,[X-4]
    0BE5: 01 30    ADD   A,0x30
    0BE7: 53 7D    MOV   [__r0],A
    0BE9: 52 00    MOV   A,[X+0]
    0BEB: 3A 7D    CMP   A,[__r0]
    0BED: C0 0C    JC    0x0BFA
    0BEF: 62 D0 00 MOV   REG[0xD0],0x0
    0BF2: 52 FB    MOV   A,[X-5]
    0BF4: 01 30    ADD   A,0x30
    0BF6: 3B 00    CMP   A,[X+0]
    0BF8: D0 03    JNC   0x0BFC
(0025) 			continue;
    0BFA: 80 11    JMP   0x0C0C
(0026) 		
(0027) 		UART_PutChar(c); // Put the character on the serial
    0BFC: 10       PUSH  X
    0BFD: 52 00    MOV   A,[X+0]
    0BFF: 7C 06 D8 LCALL _UART_PutChar
    0C02: 20       POP   X
(0028) 		return (c - '0'); // This returns the integer number entered instead of the ASCII value
    0C03: 62 D0 00 MOV   REG[0xD0],0x0
    0C06: 52 00    MOV   A,[X+0]
    0C08: 11 30    SUB   A,0x30
    0C0A: 80 03    JMP   0x0C0E
    0C0C: 8F CC    JMP   0x0BD9
    0C0E: 38 FF    ADD   SP,0xFF
    0C10: 20       POP   X
    0C11: 7F       RET   
(0029) 	}
(0030) 	
(0031) 	return 0;
(0032) }
(0033) 
(0034) // This function get's a line of text. It writes data into buffer with a maximum size of bufferLen. The function returns number of bytes written
(0035) // when enter is pressed
(0036) char GetLine(char *buffer, char bufferLen)
(0037) {
_GetLine:
  strPos               --> X+1
  c                    --> X+0
  bufferLen            --> X-6
  buffer               --> X-5
    0C12: 10       PUSH  X
    0C13: 4F       MOV   X,SP
    0C14: 38 02    ADD   SP,0x2
(0038) 	char c;
(0039) 	char strPos = 0; // Current position in the string
    0C16: 56 01 00 MOV   [X+1],0x0
(0040) 	
(0041) 	UART_PutChar('>');
    0C19: 10       PUSH  X
    0C1A: 50 3E    MOV   A,0x3E
    0C1C: 7C 06 D8 LCALL _UART_PutChar
    0C1F: 20       POP   X
    0C20: 80 94    JMP   0x0CB5
(0042) 	
(0043) 	while (1)
(0044) 	{
(0045) 		c = UART_cReadChar(); // Read the character
    0C22: 10       PUSH  X
    0C23: 7C 06 E8 LCALL _UART_cReadChar
    0C26: 20       POP   X
    0C27: 62 D0 00 MOV   REG[0xD0],0x0
    0C2A: 54 00    MOV   [X+0],A
(0046) 		
(0047) 		if (c == 0x08 || c == 0x7F) // Delete or backspace pressed
    0C2C: 3D 00 08 CMP   [X+0],0x8
    0C2F: A0 06    JZ    0x0C36
    0C31: 3D 00 7F CMP   [X+0],0x7F
    0C34: B0 17    JNZ   0x0C4C
(0048) 		{
(0049) 			if (strPos > 0) // Only delete if there are characters to delete
    0C36: 50 00    MOV   A,0x0
    0C38: 3B 01    CMP   A,[X+1]
    0C3A: D0 7A    JNC   0x0CB5
(0050) 			{
(0051) 				strPos--; // Set the position back one
    0C3C: 7B 01    DEC   [X+1]
(0052) 				UART_PutString(rubout); // Sends the rubout sequence to the serial.
    0C3E: 10       PUSH  X
    0C3F: 50 00    MOV   A,0x0
    0C41: 08       PUSH  A
    0C42: 50 7E    MOV   A,0x7E
    0C44: 5C       MOV   X,A
    0C45: 18       POP   A
    0C46: 7C 07 15 LCALL _UART_PutString
    0C49: 20       POP   X
(0053) 			}
(0054) 		}
    0C4A: 80 6A    JMP   0x0CB5
(0055) 		else if (c == 0x0D) // Newline enter is pressed
    0C4C: 3D 00 0D CMP   [X+0],0xD
    0C4F: B0 27    JNZ   0x0C77
(0056) 		{
(0057) 			buffer[strPos] = 0x00;
    0C51: 62 D0 00 MOV   REG[0xD0],0x0
    0C54: 52 01    MOV   A,[X+1]
    0C56: 53 7C    MOV   [__r1],A
    0C58: 55 7D 00 MOV   [__r0],0x0
    0C5B: 52 FC    MOV   A,[X-4]
    0C5D: 04 7C    ADD   [__r1],A
    0C5F: 52 FB    MOV   A,[X-5]
    0C61: 0C 7D    ADC   [__r0],A
    0C63: 51 7D    MOV   A,[__r0]
    0C65: 60 D5    MOV   REG[0xD5],A
    0C67: 50 00    MOV   A,0x0
    0C69: 3F 7C    MVI   [__r1],A
(0058) 			UART_PutCRLF(); // Go to another line
    0C6B: 10       PUSH  X
    0C6C: 7C 07 8D LCALL _UART_PutCRLF
    0C6F: 20       POP   X
(0059) 			return strPos;
    0C70: 52 01    MOV   A,[X+1]
    0C72: 62 D0 00 MOV   REG[0xD0],0x0
    0C75: 80 41    JMP   0x0CB7
(0060) 		}
(0061) 		else if (c >= 0x20 && c < 0x7F) // Only echo valid characters to the string. These are any alphabet, numeric, or symbols
    0C77: 3D 00 20 CMP   [X+0],0x20
    0C7A: C0 3A    JC    0x0CB5
    0C7C: 3D 00 7F CMP   [X+0],0x7F
    0C7F: D0 35    JNC   0x0CB5
(0062) 		{
(0063) 			if (strPos < bufferLen) // If there is space in the buffer
    0C81: 52 01    MOV   A,[X+1]
    0C83: 3B FA    CMP   A,[X-6]
    0C85: D0 28    JNC   0x0CAE
(0064) 			{
(0065) 				buffer[strPos++] = c; // Set the current character in buffer to c and then increment strPos
    0C87: 62 D0 00 MOV   REG[0xD0],0x0
    0C8A: 52 01    MOV   A,[X+1]
    0C8C: 53 7C    MOV   [__r1],A
    0C8E: 55 7D 00 MOV   [__r0],0x0
    0C91: 01 01    ADD   A,0x1
    0C93: 54 01    MOV   [X+1],A
    0C95: 52 FC    MOV   A,[X-4]
    0C97: 04 7C    ADD   [__r1],A
    0C99: 52 FB    MOV   A,[X-5]
    0C9B: 0C 7D    ADC   [__r0],A
    0C9D: 51 7D    MOV   A,[__r0]
    0C9F: 60 D5    MOV   REG[0xD5],A
    0CA1: 52 00    MOV   A,[X+0]
    0CA3: 3F 7C    MVI   [__r1],A
(0066) 				UART_PutChar(c); // Send the character to the computer
    0CA5: 10       PUSH  X
    0CA6: 52 00    MOV   A,[X+0]
    0CA8: 7C 06 D8 LCALL _UART_PutChar
    0CAB: 20       POP   X
(0067) 			}
    0CAC: 80 08    JMP   0x0CB5
(0068) 			else
(0069) 				UART_PutChar(0x07); // Send BEL key because there is no more space left to add to the string
    0CAE: 10       PUSH  X
    0CAF: 50 07    MOV   A,0x7
    0CB1: 7C 06 D8 LCALL _UART_PutChar
    0CB4: 20       POP   X
(0070) 		}
(0071) 	}
    0CB5: 8F 6C    JMP   0x0C22
    0CB7: 38 FE    ADD   SP,0xFE
    0CB9: 20       POP   X
    0CBA: 7F       RET   
(0072) 	
(0073) 	return 0;
(0074) }
(0075) 
(0076) // This takes a string that has hex such as 'A4 FF 01 04' and converts it into a string containing the hex files. Returns -1 if error, otherwise it returns
(0077) // the number of bytes converted
(0078) int HexConversion(char *src, char *dst)
(0079) {
_HexConversion:
  i                    --> X+4
  str                  --> X+2
  ii                   --> X+0
  dst                  --> X-7
  src                  --> X-5
    0CBB: 10       PUSH  X
    0CBC: 4F       MOV   X,SP
    0CBD: 38 06    ADD   SP,0x6
(0080) 	char *str;
(0081)     int i = 0;
    0CBF: 56 05 00 MOV   [X+5],0x0
    0CC2: 56 04 00 MOV   [X+4],0x0
(0082)     int ii = 0;
    0CC5: 56 01 00 MOV   [X+1],0x0
    0CC8: 56 00 00 MOV   [X+0],0x0
(0083) 
(0084)     str = cstrtok(src, " ");
    0CCB: 50 02    MOV   A,0x2
    0CCD: 08       PUSH  A
    0CCE: 50 BA    MOV   A,0xBA
    0CD0: 08       PUSH  A
    0CD1: 52 FB    MOV   A,[X-5]
    0CD3: 08       PUSH  A
    0CD4: 52 FC    MOV   A,[X-4]
    0CD6: 08       PUSH  A
    0CD7: 7C 2D 41 LCALL _cstrtok
    0CDA: 38 FC    ADD   SP,0xFC
    0CDC: 62 D0 00 MOV   REG[0xD0],0x0
    0CDF: 51 7C    MOV   A,[__r1]
    0CE1: 54 03    MOV   [X+3],A
    0CE3: 51 7D    MOV   A,[__r0]
    0CE5: 54 02    MOV   [X+2],A
(0085)     do
(0086)     {
(0087)         if (strlen(str) > 2)
    0CE7: 52 02    MOV   A,[X+2]
    0CE9: 08       PUSH  A
    0CEA: 52 03    MOV   A,[X+3]
    0CEC: 08       PUSH  A
    0CED: 7C 13 D6 LCALL _strlenLMM
    0CF0: 38 FE    ADD   SP,0xFE
    0CF2: 62 D0 00 MOV   REG[0xD0],0x0
    0CF5: 50 02    MOV   A,0x2
    0CF7: 12 7C    SUB   A,[__r1]
    0CF9: 50 00    MOV   A,0x0
    0CFB: 1A 7D    SBB   A,[__r0]
    0CFD: D0 0C    JNC   0x0D0A
(0088)             return -1;
    0CFF: 62 D0 00 MOV   REG[0xD0],0x0
    0D02: 55 7C FF MOV   [__r1],0xFF
    0D05: 55 7D FF MOV   [__r0],0xFF
    0D08: 80 BF    JMP   0x0DC8
(0089) 
(0090)         for (ii = 0; ii < strlen(str); ++ii)
    0D0A: 56 01 00 MOV   [X+1],0x0
    0D0D: 56 00 00 MOV   [X+0],0x0
    0D10: 80 3C    JMP   0x0D4D
(0091)             if (!isxdigit(str[ii]))
    0D12: 62 D0 00 MOV   REG[0xD0],0x0
    0D15: 52 01    MOV   A,[X+1]
    0D17: 03 03    ADD   A,[X+3]
    0D19: 53 7C    MOV   [__r1],A
    0D1B: 52 00    MOV   A,[X+0]
    0D1D: 0B 02    ADC   A,[X+2]
    0D1F: 60 D4    MOV   REG[0xD4],A
    0D21: 3E 7C    MVI   A,[__r1]
    0D23: 53 7C    MOV   [__r1],A
    0D25: 50 00    MOV   A,0x0
    0D27: 08       PUSH  A
    0D28: 51 7C    MOV   A,[__r1]
    0D2A: 08       PUSH  A
    0D2B: 7C 1F 60 LCALL _isxdigit
    0D2E: 38 FE    ADD   SP,0xFE
    0D30: 62 D0 00 MOV   REG[0xD0],0x0
    0D33: 3C 7D 00 CMP   [__r0],0x0
    0D36: B0 11    JNZ   0x0D48
    0D38: 3C 7C 00 CMP   [__r1],0x0
    0D3B: B0 0C    JNZ   0x0D48
(0092)                 return -1;
    0D3D: 62 D0 00 MOV   REG[0xD0],0x0
    0D40: 55 7C FF MOV   [__r1],0xFF
    0D43: 55 7D FF MOV   [__r0],0xFF
    0D46: 80 81    JMP   0x0DC8
    0D48: 77 01    INC   [X+1]
    0D4A: 0F 00 00 ADC   [X+0],0x0
    0D4D: 52 02    MOV   A,[X+2]
    0D4F: 08       PUSH  A
    0D50: 52 03    MOV   A,[X+3]
    0D52: 08       PUSH  A
    0D53: 7C 13 D6 LCALL _strlenLMM
    0D56: 38 FE    ADD   SP,0xFE
    0D58: 62 D0 00 MOV   REG[0xD0],0x0
    0D5B: 52 01    MOV   A,[X+1]
    0D5D: 12 7C    SUB   A,[__r1]
    0D5F: 52 00    MOV   A,[X+0]
    0D61: 1A 7D    SBB   A,[__r0]
    0D63: CF AE    JC    0x0D12
(0093) 
(0094)         csscanf(str, "%02hhx", &dst[i++]);
    0D65: 62 D0 00 MOV   REG[0xD0],0x0
    0D68: 52 05    MOV   A,[X+5]
    0D6A: 53 7C    MOV   [__r1],A
    0D6C: 52 04    MOV   A,[X+4]
    0D6E: 53 7D    MOV   [__r0],A
    0D70: 51 7C    MOV   A,[__r1]
    0D72: 01 01    ADD   A,0x1
    0D74: 54 05    MOV   [X+5],A
    0D76: 51 7D    MOV   A,[__r0]
    0D78: 09 00    ADC   A,0x0
    0D7A: 54 04    MOV   [X+4],A
    0D7C: 52 FA    MOV   A,[X-6]
    0D7E: 04 7C    ADD   [__r1],A
    0D80: 52 F9    MOV   A,[X-7]
    0D82: 0C 7D    ADC   [__r0],A
    0D84: 51 7D    MOV   A,[__r0]
    0D86: 08       PUSH  A
    0D87: 51 7C    MOV   A,[__r1]
    0D89: 08       PUSH  A
    0D8A: 50 02    MOV   A,0x2
    0D8C: 08       PUSH  A
    0D8D: 50 B3    MOV   A,0xB3
    0D8F: 08       PUSH  A
    0D90: 52 02    MOV   A,[X+2]
    0D92: 08       PUSH  A
    0D93: 52 03    MOV   A,[X+3]
    0D95: 08       PUSH  A
    0D96: 7C 20 E6 LCALL _csscanf
(0095)         str = cstrtok(0x00, " ");
    0D99: 50 02    MOV   A,0x2
    0D9B: 08       PUSH  A
    0D9C: 50 BA    MOV   A,0xBA
    0D9E: 08       PUSH  A
    0D9F: 50 00    MOV   A,0x0
    0DA1: 08       PUSH  A
    0DA2: 08       PUSH  A
    0DA3: 7C 2D 41 LCALL _cstrtok
    0DA6: 38 F6    ADD   SP,0xF6
    0DA8: 62 D0 00 MOV   REG[0xD0],0x0
    0DAB: 51 7C    MOV   A,[__r1]
    0DAD: 54 03    MOV   [X+3],A
    0DAF: 51 7D    MOV   A,[__r0]
    0DB1: 54 02    MOV   [X+2],A
(0096)     } while (str != 0x00);
    0DB3: 3D 02 00 CMP   [X+2],0x0
    0DB6: BF 30    JNZ   0x0CE7
    0DB8: 3D 03 00 CMP   [X+3],0x0
    0DBB: BF 2B    JNZ   0x0CE7
(0097) 
(0098)     return i;
    0DBD: 62 D0 00 MOV   REG[0xD0],0x0
    0DC0: 52 05    MOV   A,[X+5]
    0DC2: 53 7C    MOV   [__r1],A
    0DC4: 52 04    MOV   A,[X+4]
    0DC6: 53 7D    MOV   [__r0],A
    0DC8: 38 FA    ADD   SP,0xFA
    0DCA: 20       POP   X
    0DCB: 7F       RET   
(0099) }
(0100) 
(0101) char *Lowercase(char *str)
(0102) {
_Lowercase:
  i                    --> X+0
  str                  --> X-5
    0DCC: 10       PUSH  X
    0DCD: 4F       MOV   X,SP
    0DCE: 38 04    ADD   SP,0x4
(0103) 	int i;
(0104) 	for (i = 0; str[i] != '\0'; ++i)
    0DD0: 56 01 00 MOV   [X+1],0x0
    0DD3: 56 00 00 MOV   [X+0],0x0
    0DD6: 80 43    JMP   0x0E1A
(0105) 		str[i] = tolower(str[i]);
    0DD8: 62 D0 00 MOV   REG[0xD0],0x0
    0DDB: 52 01    MOV   A,[X+1]
    0DDD: 03 FC    ADD   A,[X-4]
    0DDF: 53 7C    MOV   [__r1],A
    0DE1: 52 00    MOV   A,[X+0]
    0DE3: 0B FB    ADC   A,[X-5]
    0DE5: 53 7D    MOV   [__r0],A
    0DE7: 51 7C    MOV   A,[__r1]
    0DE9: 54 03    MOV   [X+3],A
    0DEB: 51 7D    MOV   A,[__r0]
    0DED: 54 02    MOV   [X+2],A
    0DEF: 60 D4    MOV   REG[0xD4],A
    0DF1: 3E 7C    MVI   A,[__r1]
    0DF3: 7A 7C    DEC   [__r1]
    0DF5: 53 7A    MOV   [__r3],A
    0DF7: 50 00    MOV   A,0x0
    0DF9: 08       PUSH  A
    0DFA: 51 7A    MOV   A,[__r3]
    0DFC: 08       PUSH  A
    0DFD: 7C 1F BF LCALL _tolower
    0E00: 38 FE    ADD   SP,0xFE
    0E02: 62 D0 00 MOV   REG[0xD0],0x0
    0E05: 51 7C    MOV   A,[__r1]
    0E07: 53 7D    MOV   [__r0],A
    0E09: 52 03    MOV   A,[X+3]
    0E0B: 53 7A    MOV   [__r3],A
    0E0D: 52 02    MOV   A,[X+2]
    0E0F: 60 D5    MOV   REG[0xD5],A
    0E11: 51 7D    MOV   A,[__r0]
    0E13: 3F 7A    MVI   [__r3],A
    0E15: 77 01    INC   [X+1]
    0E17: 0F 00 00 ADC   [X+0],0x0
    0E1A: 62 D0 00 MOV   REG[0xD0],0x0
    0E1D: 52 01    MOV   A,[X+1]
    0E1F: 03 FC    ADD   A,[X-4]
    0E21: 53 7C    MOV   [__r1],A
    0E23: 52 00    MOV   A,[X+0]
    0E25: 0B FB    ADC   A,[X-5]
    0E27: 60 D4    MOV   REG[0xD4],A
    0E29: 3E 7C    MVI   A,[__r1]
    0E2B: 39 00    CMP   A,0x0
    0E2D: BF AA    JNZ   0x0DD8
(0106) 	
(0107) 	return str;
    0E2F: 52 FC    MOV   A,[X-4]
    0E31: 53 7C    MOV   [__r1],A
    0E33: 52 FB    MOV   A,[X-5]
    0E35: 53 7D    MOV   [__r0],A
    0E37: 38 FC    ADD   SP,0xFC
    0E39: 20       POP   X
    0E3A: 7F       RET   
(0108) }
(0109) 
(0110) void main(void)
(0111) {	
_main:
  memLoc               --> X+97
  groupAddress         --> X+95
  dataType             --> X+94
  hexStr               --> X+90
  data                 --> X+10
  numBytes             --> X+9
  i                    --> X+7
  bytesRead            --> X+93
  memLoc               --> X+92
  len                  --> X+90
  groupAddress         --> X+88
  dataType             --> X+87
  data                 --> X+7
  strLoc               --> X+5
  slaveAddress         --> X+4
  params               --> X+2
  cmd                  --> X+0
    0E3B: 10       PUSH  X
    0E3C: 4F       MOV   X,SP
    0E3D: 38 62    ADD   SP,0x62
(0112) 	M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
    0E3F: 71 01    OR    F,0x1
(0113) 	
(0114) 	UART_Start(UART_PARITY_NONE);
    0E41: 10       PUSH  X
    0E42: 50 00    MOV   A,0x0
    0E44: 7C 06 66 LCALL _UART_Start
(0115) 	Counter16_Start();
    0E47: 7C 0B 7B LCALL _Counter16_Start
(0116) 	
(0117) 	I2CHW_Start();
    0E4A: 7C 07 96 LCALL _I2CHW_Start
(0118) 	I2CHW_EnableMstr();
    0E4D: 7C 07 A4 LCALL _I2CHW_EnableMstr
(0119) 	I2CHW_EnableInt();
    0E50: 7C 07 99 LCALL _I2CHW_EnableInt
(0120) 
(0121) 	UART_CPutString("-------I2C External SRAM-------\r\n");
    0E53: 50 02    MOV   A,0x2
    0E55: 08       PUSH  A
    0E56: 50 91    MOV   A,0x91
    0E58: 5C       MOV   X,A
    0E59: 18       POP   A
    0E5A: 7C 07 7B LCALL _UART_CPutString
    0E5D: 20       POP   X
    0E5E: 84 60    JMP   0x12BF
(0122) 	while (1)
(0123) 	{
(0124) 		char *cmd;
(0125) 		char *params;
(0126) 		char slaveAddress = 0xA0;
    0E60: 56 04 A0 MOV   [X+4],0xA0
(0127) 		int strLoc = -1;
    0E63: 56 06 FF MOV   [X+6],0xFF
    0E66: 56 05 FF MOV   [X+5],0xFF
(0128) 		
(0129) 		GetLine(buf, 80); // Retrieves a line from UART
    0E69: 50 50    MOV   A,0x50
    0E6B: 08       PUSH  A
    0E6C: 50 00    MOV   A,0x0
    0E6E: 08       PUSH  A
    0E6F: 50 09    MOV   A,0x9
    0E71: 08       PUSH  A
    0E72: 9D 9E    CALL  _GetLine
    0E74: 62 D0 00 MOV   REG[0xD0],0x0
(0130) 		
(0131) 		cmd = Lowercase(cstrtok(buf, " "));
    0E77: 50 02    MOV   A,0x2
    0E79: 08       PUSH  A
    0E7A: 50 BA    MOV   A,0xBA
    0E7C: 08       PUSH  A
    0E7D: 50 00    MOV   A,0x0
    0E7F: 08       PUSH  A
    0E80: 50 09    MOV   A,0x9
    0E82: 08       PUSH  A
    0E83: 7C 2D 41 LCALL _cstrtok
    0E86: 38 F9    ADD   SP,0xF9
    0E88: 62 D0 00 MOV   REG[0xD0],0x0
    0E8B: 51 7D    MOV   A,[__r0]
    0E8D: 08       PUSH  A
    0E8E: 51 7C    MOV   A,[__r1]
    0E90: 08       PUSH  A
    0E91: 9F 39    CALL  _Lowercase
    0E93: 62 D0 00 MOV   REG[0xD0],0x0
    0E96: 51 7C    MOV   A,[__r1]
    0E98: 54 01    MOV   [X+1],A
    0E9A: 51 7D    MOV   A,[__r0]
    0E9C: 54 00    MOV   [X+0],A
(0132) 		if (strlen(cmd) == 1 && cmd[0] == 'w')
    0E9E: 52 00    MOV   A,[X+0]
    0EA0: 08       PUSH  A
    0EA1: 52 01    MOV   A,[X+1]
    0EA3: 08       PUSH  A
    0EA4: 7C 13 D6 LCALL _strlenLMM
    0EA7: 38 FC    ADD   SP,0xFC
    0EA9: 62 D0 00 MOV   REG[0xD0],0x0
    0EAC: 3C 7D 00 CMP   [__r0],0x0
    0EAF: B1 C8    JNZ   0x1078
    0EB1: 3C 7C 01 CMP   [__r1],0x1
    0EB4: B1 C3    JNZ   0x1078
    0EB6: 62 D0 00 MOV   REG[0xD0],0x0
    0EB9: 52 01    MOV   A,[X+1]
    0EBB: 53 7C    MOV   [__r1],A
    0EBD: 52 00    MOV   A,[X+0]
    0EBF: 60 D4    MOV   REG[0xD4],A
    0EC1: 3E 7C    MVI   A,[__r1]
    0EC3: 39 77    CMP   A,0x77
    0EC5: B1 B2    JNZ   0x1078
(0133) 		{	
(0134) 			int groupAddress;
(0135) 			unsigned char memLoc;
(0136) 			char dataType;
(0137) 			int bytesRead;
(0138) 		
(0139) 			char data[80];
(0140) 			int len;
(0141) 			
(0142) 			params = cstrtok(0x00, "\0");
    0EC7: 50 02    MOV   A,0x2
    0EC9: 08       PUSH  A
    0ECA: 50 8F    MOV   A,0x8F
    0ECC: 08       PUSH  A
    0ECD: 50 00    MOV   A,0x0
    0ECF: 08       PUSH  A
    0ED0: 08       PUSH  A
    0ED1: 7C 2D 41 LCALL _cstrtok
    0ED4: 62 D0 00 MOV   REG[0xD0],0x0
    0ED7: 51 7C    MOV   A,[__r1]
    0ED9: 54 03    MOV   [X+3],A
    0EDB: 51 7D    MOV   A,[__r0]
    0EDD: 54 02    MOV   [X+2],A
(0143) 			if (csscanf(params, "%i%*[ ]%02hhx%*[ ]%c%*[ ]%n", &groupAddress, &memLoc, &dataType, &strLoc) != 3 || strLoc == -1)
    0EDF: 5A 7C    MOV   [__r1],X
    0EE1: 06 7C 05 ADD   [__r1],0x5
    0EE4: 50 07    MOV   A,0x7
    0EE6: 08       PUSH  A
    0EE7: 51 7C    MOV   A,[__r1]
    0EE9: 08       PUSH  A
    0EEA: 5A 7C    MOV   [__r1],X
    0EEC: 06 7C 57 ADD   [__r1],0x57
    0EEF: 50 07    MOV   A,0x7
    0EF1: 08       PUSH  A
    0EF2: 51 7C    MOV   A,[__r1]
    0EF4: 08       PUSH  A
    0EF5: 5A 7C    MOV   [__r1],X
    0EF7: 06 7C 5C ADD   [__r1],0x5C
    0EFA: 50 07    MOV   A,0x7
    0EFC: 08       PUSH  A
    0EFD: 51 7C    MOV   A,[__r1]
    0EFF: 08       PUSH  A
    0F00: 5A 7C    MOV   [__r1],X
    0F02: 06 7C 58 ADD   [__r1],0x58
    0F05: 50 07    MOV   A,0x7
    0F07: 08       PUSH  A
    0F08: 51 7C    MOV   A,[__r1]
    0F0A: 08       PUSH  A
    0F0B: 50 02    MOV   A,0x2
    0F0D: 08       PUSH  A
    0F0E: 50 73    MOV   A,0x73
    0F10: 08       PUSH  A
    0F11: 52 02    MOV   A,[X+2]
    0F13: 08       PUSH  A
    0F14: 52 03    MOV   A,[X+3]
    0F16: 08       PUSH  A
    0F17: 7C 20 E6 LCALL _csscanf
    0F1A: 38 F0    ADD   SP,0xF0
    0F1C: 62 D0 00 MOV   REG[0xD0],0x0
    0F1F: 3C 7D 00 CMP   [__r0],0x0
    0F22: B0 10    JNZ   0x0F33
    0F24: 3C 7C 03 CMP   [__r1],0x3
    0F27: B0 0B    JNZ   0x0F33
    0F29: 3D 05 FF CMP   [X+5],0xFF
    0F2C: B0 08    JNZ   0x0F35
    0F2E: 3D 06 FF CMP   [X+6],0xFF
    0F31: B0 03    JNZ   0x0F35
(0144) 				goto error;
    0F33: 83 7F    JMP   0x12B3
(0145) 			
(0146) 			dataType = tolower(dataType); // Lowercase this stuff b/c case insensitive
    0F35: 62 D0 00 MOV   REG[0xD0],0x0
    0F38: 52 57    MOV   A,[X+87]
    0F3A: 53 7C    MOV   [__r1],A
    0F3C: 50 00    MOV   A,0x0
    0F3E: 08       PUSH  A
    0F3F: 51 7C    MOV   A,[__r1]
    0F41: 08       PUSH  A
    0F42: 7C 1F BF LCALL _tolower
    0F45: 38 FE    ADD   SP,0xFE
    0F47: 62 D0 00 MOV   REG[0xD0],0x0
    0F4A: 51 7C    MOV   A,[__r1]
    0F4C: 54 57    MOV   [X+87],A
(0147) 			if (groupAddress < 0 || groupAddress > 1)
    0F4E: 52 59    MOV   A,[X+89]
    0F50: 11 00    SUB   A,0x0
    0F52: 52 58    MOV   A,[X+88]
    0F54: 31 80    XOR   A,0x80
    0F56: 19 80    SBB   A,0x80
    0F58: C0 14    JC    0x0F6D
    0F5A: 50 01    MOV   A,0x1
    0F5C: 13 59    SUB   A,[X+89]
    0F5E: 52 58    MOV   A,[X+88]
    0F60: 31 80    XOR   A,0x80
    0F62: 62 D0 00 MOV   REG[0xD0],0x0
    0F65: 53 75    MOV   [__rX],A
    0F67: 50 80    MOV   A,0x80
    0F69: 1A 75    SBB   A,[__rX]
    0F6B: D0 03    JNC   0x0F6F
(0148) 				goto error;
    0F6D: 83 45    JMP   0x12B3
(0149) 			
(0150) 			data[0] = memLoc;
    0F6F: 52 5C    MOV   A,[X+92]
    0F71: 54 07    MOV   [X+7],A
(0151) 			slaveAddress |= (groupAddress << 1);
    0F73: 62 D0 00 MOV   REG[0xD0],0x0
    0F76: 52 59    MOV   A,[X+89]
    0F78: 53 7C    MOV   [__r1],A
    0F7A: 65 7C    ASL   [__r1]
    0F7C: 52 04    MOV   A,[X+4]
    0F7E: 2A 7C    OR    A,[__r1]
    0F80: 54 04    MOV   [X+4],A
(0152) 			
(0153) 			if (dataType == 'a')
    0F82: 3D 57 61 CMP   [X+87],0x61
    0F85: B0 3D    JNZ   0x0FC3
(0154) 			{
(0155) 				strcpy(data, (params + bytesRead)); // If it wants ASCII, just copy it into src buffer
    0F87: 52 5E    MOV   A,[X+94]
    0F89: 03 03    ADD   A,[X+3]
    0F8B: 53 7C    MOV   [__r1],A
    0F8D: 52 5D    MOV   A,[X+93]
    0F8F: 0B 02    ADC   A,[X+2]
    0F91: 08       PUSH  A
    0F92: 51 7C    MOV   A,[__r1]
    0F94: 08       PUSH  A
    0F95: 5A 7C    MOV   [__r1],X
    0F97: 06 7C 07 ADD   [__r1],0x7
    0F9A: 50 07    MOV   A,0x7
    0F9C: 08       PUSH  A
    0F9D: 51 7C    MOV   A,[__r1]
    0F9F: 08       PUSH  A
    0FA0: 7C 13 AD LCALL _strcpyLMM
(0156) 				len = strlen(data); // Length is the length of string
    0FA3: 62 D0 00 MOV   REG[0xD0],0x0
    0FA6: 5A 7C    MOV   [__r1],X
    0FA8: 06 7C 07 ADD   [__r1],0x7
    0FAB: 50 07    MOV   A,0x7
    0FAD: 08       PUSH  A
    0FAE: 51 7C    MOV   A,[__r1]
    0FB0: 08       PUSH  A
    0FB1: 7C 13 D6 LCALL _strlenLMM
    0FB4: 38 FA    ADD   SP,0xFA
    0FB6: 62 D0 00 MOV   REG[0xD0],0x0
    0FB9: 51 7C    MOV   A,[__r1]
    0FBB: 54 5B    MOV   [X+91],A
    0FBD: 51 7D    MOV   A,[__r0]
    0FBF: 54 5A    MOV   [X+90],A
(0157) 			}
    0FC1: 80 4C    JMP   0x100E
(0158) 			else if (dataType == 'h')
    0FC3: 3D 57 68 CMP   [X+87],0x68
    0FC6: B2 EC    JNZ   0x12B3
(0159) 			{
(0160) 				if ((len = HexConversion(data, (params + bytesRead + 1))) == -1) // Take hex data and convert to numbers into src + 1(src[0] has the memory loc)
    0FC8: 62 D0 00 MOV   REG[0xD0],0x0
    0FCB: 52 5E    MOV   A,[X+94]
    0FCD: 03 03    ADD   A,[X+3]
    0FCF: 53 7C    MOV   [__r1],A
    0FD1: 52 5D    MOV   A,[X+93]
    0FD3: 0B 02    ADC   A,[X+2]
    0FD5: 53 7D    MOV   [__r0],A
    0FD7: 06 7C 01 ADD   [__r1],0x1
    0FDA: 0E 7D 00 ADC   [__r0],0x0
    0FDD: 51 7D    MOV   A,[__r0]
    0FDF: 08       PUSH  A
    0FE0: 51 7C    MOV   A,[__r1]
    0FE2: 08       PUSH  A
    0FE3: 5A 7C    MOV   [__r1],X
    0FE5: 06 7C 07 ADD   [__r1],0x7
    0FE8: 50 07    MOV   A,0x7
    0FEA: 08       PUSH  A
    0FEB: 51 7C    MOV   A,[__r1]
    0FED: 08       PUSH  A
    0FEE: 9C CB    CALL  _HexConversion
    0FF0: 38 FC    ADD   SP,0xFC
    0FF2: 62 D0 00 MOV   REG[0xD0],0x0
    0FF5: 51 7C    MOV   A,[__r1]
    0FF7: 54 5B    MOV   [X+91],A
    0FF9: 51 7D    MOV   A,[__r0]
    0FFB: 54 5A    MOV   [X+90],A
    0FFD: 3C 7D FF CMP   [__r0],0xFF
    1000: B0 08    JNZ   0x1009
    1002: 3C 7C FF CMP   [__r1],0xFF
    1005: B0 03    JNZ   0x1009
(0161) 					goto error;
    1007: 82 AB    JMP   0x12B3
(0162) 				len++; // Add one to the length because of the memoryLocation
    1009: 77 5B    INC   [X+91]
    100B: 0F 5A 00 ADC   [X+90],0x0
(0163) 			}
(0164) 			else
(0165) 				goto error;
(0166) 			
(0167) 			I2CHW_bWriteBytes(slaveAddress, data, len, I2CHW_CompleteXfer); // Write it
    100E: 10       PUSH  X
    100F: 50 00    MOV   A,0x0
    1011: 08       PUSH  A
    1012: 62 D0 00 MOV   REG[0xD0],0x0
    1015: 52 5B    MOV   A,[X+91]
    1017: 08       PUSH  A
    1018: 5A 7C    MOV   [__r1],X
    101A: 06 7C 07 ADD   [__r1],0x7
    101D: 50 07    MOV   A,0x7
    101F: 08       PUSH  A
    1020: 51 7C    MOV   A,[__r1]
    1022: 08       PUSH  A
    1023: 52 04    MOV   A,[X+4]
    1025: 08       PUSH  A
    1026: 7C 08 00 LCALL _I2CHW_bWriteBytes
    1029: 38 FB    ADD   SP,0xFB
    102B: 20       POP   X
(0168) 			while (!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    102C: 10       PUSH  X
    102D: 7C 0B 5E LCALL _I2CHW_bReadI2CStatus
    1030: 20       POP   X
    1031: 62 D0 00 MOV   REG[0xD0],0x0
    1034: 53 7D    MOV   [__r0],A
    1036: 47 7D 40 TST   [__r0],0x40
    1039: AF F2    JZ    0x102C
(0169) 			I2CHW_ClrWrStatus();
    103B: 10       PUSH  X
    103C: 7C 0B 6B LCALL _I2CHW_ClrWrStatus
    103F: 20       POP   X
(0170) 			
(0171) 			csprintf(data, "%i bytes were written", len); // Look up sprintf on Google for information 
    1040: 52 5A    MOV   A,[X+90]
    1042: 08       PUSH  A
    1043: 52 5B    MOV   A,[X+91]
    1045: 08       PUSH  A
    1046: 50 02    MOV   A,0x2
    1048: 08       PUSH  A
    1049: 50 5D    MOV   A,0x5D
    104B: 08       PUSH  A
    104C: 62 D0 00 MOV   REG[0xD0],0x0
    104F: 5A 7C    MOV   [__r1],X
    1051: 06 7C 07 ADD   [__r1],0x7
    1054: 50 07    MOV   A,0x7
    1056: 08       PUSH  A
    1057: 51 7C    MOV   A,[__r1]
    1059: 08       PUSH  A
    105A: 7C 20 2F LCALL _csprintf
    105D: 38 FA    ADD   SP,0xFA
(0172) 			UART_PutString(data);
    105F: 62 D0 00 MOV   REG[0xD0],0x0
    1062: 5A 7C    MOV   [__r1],X
    1064: 06 7C 07 ADD   [__r1],0x7
    1067: 10       PUSH  X
    1068: 50 07    MOV   A,0x7
    106A: 08       PUSH  A
    106B: 51 7C    MOV   A,[__r1]
    106D: 5C       MOV   X,A
    106E: 18       POP   A
    106F: 7C 07 15 LCALL _UART_PutString
(0173) 			UART_PutCRLF();			
    1072: 7C 07 8D LCALL _UART_PutCRLF
    1075: 20       POP   X
(0174) 		}
    1076: 82 3C    JMP   0x12B3
(0175) 		else if (strlen(cmd) == 1 && cmd[0] == 'r')
    1078: 52 00    MOV   A,[X+0]
    107A: 08       PUSH  A
    107B: 52 01    MOV   A,[X+1]
    107D: 08       PUSH  A
    107E: 7C 13 D6 LCALL _strlenLMM
    1081: 38 FE    ADD   SP,0xFE
    1083: 62 D0 00 MOV   REG[0xD0],0x0
    1086: 3C 7D 00 CMP   [__r0],0x0
    1089: B2 29    JNZ   0x12B3
    108B: 3C 7C 01 CMP   [__r1],0x1
    108E: B2 24    JNZ   0x12B3
    1090: 62 D0 00 MOV   REG[0xD0],0x0
    1093: 52 01    MOV   A,[X+1]
    1095: 53 7C    MOV   [__r1],A
    1097: 52 00    MOV   A,[X+0]
    1099: 60 D4    MOV   REG[0xD4],A
    109B: 3E 7C    MVI   A,[__r1]
    109D: 39 72    CMP   A,0x72
    109F: B2 13    JNZ   0x12B3
(0176) 		{
(0177) 			int groupAddress;
(0178) 			unsigned char memLoc;
(0179) 			char dataType;
(0180) 			unsigned char numBytes;
(0181) 			
(0182) 			char data[80];
(0183) 			char hexStr[4];
(0184) 			int i;
(0185) 			
(0186) 			params = cstrtok(0x00, "\0");
    10A1: 50 02    MOV   A,0x2
    10A3: 08       PUSH  A
    10A4: 50 8F    MOV   A,0x8F
    10A6: 08       PUSH  A
    10A7: 50 00    MOV   A,0x0
    10A9: 08       PUSH  A
    10AA: 08       PUSH  A
    10AB: 7C 2D 41 LCALL _cstrtok
    10AE: 62 D0 00 MOV   REG[0xD0],0x0
    10B1: 51 7C    MOV   A,[__r1]
    10B3: 54 03    MOV   [X+3],A
    10B5: 51 7D    MOV   A,[__r0]
    10B7: 54 02    MOV   [X+2],A
(0187) 			if (csscanf(params, "%i%*[ ]%02hhx%*[ ]%c%*[ ]%02hhx %n", &groupAddress, &memLoc, &dataType, &numBytes, &strLoc) != 4 || strLoc == -1 || strLoc != strlen(params))
    10B9: 5A 7C    MOV   [__r1],X
    10BB: 06 7C 05 ADD   [__r1],0x5
    10BE: 50 07    MOV   A,0x7
    10C0: 08       PUSH  A
    10C1: 51 7C    MOV   A,[__r1]
    10C3: 08       PUSH  A
    10C4: 5A 7C    MOV   [__r1],X
    10C6: 06 7C 09 ADD   [__r1],0x9
    10C9: 50 07    MOV   A,0x7
    10CB: 08       PUSH  A
    10CC: 51 7C    MOV   A,[__r1]
    10CE: 08       PUSH  A
    10CF: 5A 7C    MOV   [__r1],X
    10D1: 06 7C 5E ADD   [__r1],0x5E
    10D4: 50 07    MOV   A,0x7
    10D6: 08       PUSH  A
    10D7: 51 7C    MOV   A,[__r1]
    10D9: 08       PUSH  A
    10DA: 5A 7C    MOV   [__r1],X
    10DC: 06 7C 61 ADD   [__r1],0x61
    10DF: 50 07    MOV   A,0x7
    10E1: 08       PUSH  A
    10E2: 51 7C    MOV   A,[__r1]
    10E4: 08       PUSH  A
    10E5: 5A 7C    MOV   [__r1],X
    10E7: 06 7C 5F ADD   [__r1],0x5F
    10EA: 50 07    MOV   A,0x7
    10EC: 08       PUSH  A
    10ED: 51 7C    MOV   A,[__r1]
    10EF: 08       PUSH  A
    10F0: 50 02    MOV   A,0x2
    10F2: 08       PUSH  A
    10F3: 50 3A    MOV   A,0x3A
    10F5: 08       PUSH  A
    10F6: 52 02    MOV   A,[X+2]
    10F8: 08       PUSH  A
    10F9: 52 03    MOV   A,[X+3]
    10FB: 08       PUSH  A
    10FC: 7C 20 E6 LCALL _csscanf
    10FF: 38 EE    ADD   SP,0xEE
    1101: 62 D0 00 MOV   REG[0xD0],0x0
    1104: 3C 7D 00 CMP   [__r0],0x0
    1107: B0 2A    JNZ   0x1132
    1109: 3C 7C 04 CMP   [__r1],0x4
    110C: B0 25    JNZ   0x1132
    110E: 3D 05 FF CMP   [X+5],0xFF
    1111: B0 06    JNZ   0x1118
    1113: 3D 06 FF CMP   [X+6],0xFF
    1116: A0 1B    JZ    0x1132
    1118: 52 02    MOV   A,[X+2]
    111A: 08       PUSH  A
    111B: 52 03    MOV   A,[X+3]
    111D: 08       PUSH  A
    111E: 7C 13 D6 LCALL _strlenLMM
    1121: 38 FE    ADD   SP,0xFE
    1123: 62 D0 00 MOV   REG[0xD0],0x0
    1126: 52 05    MOV   A,[X+5]
    1128: 3A 7D    CMP   A,[__r0]
    112A: B0 07    JNZ   0x1132
    112C: 52 06    MOV   A,[X+6]
    112E: 3A 7C    CMP   A,[__r1]
    1130: A0 03    JZ    0x1134
(0188) 				goto error;
    1132: 81 80    JMP   0x12B3
(0189) 			
(0190) 			dataType = tolower(dataType); // Lowercase this stuff b/c case insensitive
    1134: 62 D0 00 MOV   REG[0xD0],0x0
    1137: 52 5E    MOV   A,[X+94]
    1139: 53 7C    MOV   [__r1],A
    113B: 50 00    MOV   A,0x0
    113D: 08       PUSH  A
    113E: 51 7C    MOV   A,[__r1]
    1140: 08       PUSH  A
    1141: 7C 1F BF LCALL _tolower
    1144: 38 FE    ADD   SP,0xFE
    1146: 62 D0 00 MOV   REG[0xD0],0x0
    1149: 51 7C    MOV   A,[__r1]
    114B: 54 5E    MOV   [X+94],A
(0191) 			if (groupAddress < 0 || groupAddress > 1 || numBytes > 80)
    114D: 52 60    MOV   A,[X+96]
    114F: 11 00    SUB   A,0x0
    1151: 52 5F    MOV   A,[X+95]
    1153: 31 80    XOR   A,0x80
    1155: 19 80    SBB   A,0x80
    1157: C0 1A    JC    0x1172
    1159: 50 01    MOV   A,0x1
    115B: 13 60    SUB   A,[X+96]
    115D: 52 5F    MOV   A,[X+95]
    115F: 31 80    XOR   A,0x80
    1161: 62 D0 00 MOV   REG[0xD0],0x0
    1164: 53 75    MOV   [__rX],A
    1166: 50 80    MOV   A,0x80
    1168: 1A 75    SBB   A,[__rX]
    116A: C0 07    JC    0x1172
    116C: 50 50    MOV   A,0x50
    116E: 3B 09    CMP   A,[X+9]
    1170: D0 03    JNC   0x1174
(0192) 				goto error;
    1172: 81 40    JMP   0x12B3
(0193) 			
(0194) 			data[0] = memLoc;
    1174: 52 61    MOV   A,[X+97]
    1176: 54 0A    MOV   [X+10],A
(0195) 			slaveAddress |= (groupAddress << 1);
    1178: 62 D0 00 MOV   REG[0xD0],0x0
    117B: 52 60    MOV   A,[X+96]
    117D: 53 7C    MOV   [__r1],A
    117F: 65 7C    ASL   [__r1]
    1181: 52 04    MOV   A,[X+4]
    1183: 2A 7C    OR    A,[__r1]
    1185: 54 04    MOV   [X+4],A
(0196) 			
(0197) 			I2CHW_bWriteBytes(slaveAddress, data, 1, I2CHW_NoStop);
    1187: 10       PUSH  X
    1188: 50 02    MOV   A,0x2
    118A: 08       PUSH  A
    118B: 50 01    MOV   A,0x1
    118D: 08       PUSH  A
    118E: 5A 7C    MOV   [__r1],X
    1190: 06 7C 0A ADD   [__r1],0xA
    1193: 50 07    MOV   A,0x7
    1195: 08       PUSH  A
    1196: 51 7C    MOV   A,[__r1]
    1198: 08       PUSH  A
    1199: 52 04    MOV   A,[X+4]
    119B: 08       PUSH  A
    119C: 7C 08 00 LCALL _I2CHW_bWriteBytes
    119F: 38 FB    ADD   SP,0xFB
    11A1: 20       POP   X
(0198) 			while (!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    11A2: 10       PUSH  X
    11A3: 7C 0B 5E LCALL _I2CHW_bReadI2CStatus
    11A6: 20       POP   X
    11A7: 62 D0 00 MOV   REG[0xD0],0x0
    11AA: 53 7D    MOV   [__r0],A
    11AC: 47 7D 40 TST   [__r0],0x40
    11AF: AF F2    JZ    0x11A2
(0199) 			I2CHW_ClrWrStatus();
    11B1: 10       PUSH  X
    11B2: 7C 0B 6B LCALL _I2CHW_ClrWrStatus
    11B5: 20       POP   X
(0200) 			
(0201) 			I2CHW_fReadBytes(slaveAddress, data, numBytes, I2CHW_RepStart);
    11B6: 10       PUSH  X
    11B7: 50 01    MOV   A,0x1
    11B9: 08       PUSH  A
    11BA: 52 09    MOV   A,[X+9]
    11BC: 08       PUSH  A
    11BD: 62 D0 00 MOV   REG[0xD0],0x0
    11C0: 5A 7C    MOV   [__r1],X
    11C2: 06 7C 0A ADD   [__r1],0xA
    11C5: 50 07    MOV   A,0x7
    11C7: 08       PUSH  A
    11C8: 51 7C    MOV   A,[__r1]
    11CA: 08       PUSH  A
    11CB: 52 04    MOV   A,[X+4]
    11CD: 08       PUSH  A
    11CE: 7C 07 BC LCALL _I2CHW_fReadBytes
    11D1: 38 FB    ADD   SP,0xFB
    11D3: 20       POP   X
(0202) 			while(!(I2CHW_bReadI2CStatus() & I2CHW_RD_COMPLETE));
    11D4: 10       PUSH  X
    11D5: 7C 0B 5E LCALL _I2CHW_bReadI2CStatus
    11D8: 20       POP   X
    11D9: 62 D0 00 MOV   REG[0xD0],0x0
    11DC: 53 7D    MOV   [__r0],A
    11DE: 47 7D 04 TST   [__r0],0x4
    11E1: AF F2    JZ    0x11D4
(0203) 			I2CHW_ClrRdStatus();
    11E3: 10       PUSH  X
    11E4: 7C 0B 64 LCALL _I2CHW_ClrRdStatus
    11E7: 20       POP   X
(0204) 			
(0205) 			if (dataType == 'a')
    11E8: 3D 5E 61 CMP   [X+94],0x61
    11EB: B0 4C    JNZ   0x1238
(0206) 			{
(0207) 				for (i = 0; i < numBytes; ++i)
    11ED: 56 08 00 MOV   [X+8],0x0
    11F0: 56 07 00 MOV   [X+7],0x0
    11F3: 80 24    JMP   0x1218
(0208) 					UART_PutChar(data[i]);
    11F5: 62 D0 00 MOV   REG[0xD0],0x0
    11F8: 55 7D 07 MOV   [__r0],0x7
    11FB: 5A 7C    MOV   [__r1],X
    11FD: 06 7C 0A ADD   [__r1],0xA
    1200: 52 08    MOV   A,[X+8]
    1202: 02 7C    ADD   A,[__r1]
    1204: 53 7C    MOV   [__r1],A
    1206: 52 07    MOV   A,[X+7]
    1208: 0A 7D    ADC   A,[__r0]
    120A: 60 D4    MOV   REG[0xD4],A
    120C: 3E 7C    MVI   A,[__r1]
    120E: 10       PUSH  X
    120F: 7C 06 D8 LCALL _UART_PutChar
    1212: 20       POP   X
    1213: 77 08    INC   [X+8]
    1215: 0F 07 00 ADC   [X+7],0x0
    1218: 62 D0 00 MOV   REG[0xD0],0x0
    121B: 52 09    MOV   A,[X+9]
    121D: 53 7C    MOV   [__r1],A
    121F: 52 08    MOV   A,[X+8]
    1221: 12 7C    SUB   A,[__r1]
    1223: 50 00    MOV   A,0x0
    1225: 31 80    XOR   A,0x80
    1227: 53 75    MOV   [__rX],A
    1229: 52 07    MOV   A,[X+7]
    122B: 31 80    XOR   A,0x80
    122D: 1A 75    SBB   A,[__rX]
    122F: CF C5    JC    0x11F5
(0209) 				UART_PutCRLF();
    1231: 10       PUSH  X
    1232: 7C 07 8D LCALL _UART_PutCRLF
    1235: 20       POP   X
(0210) 			}
    1236: 80 7C    JMP   0x12B3
(0211) 			else if (dataType == 'h')
    1238: 3D 5E 68 CMP   [X+94],0x68
    123B: B0 77    JNZ   0x12B3
(0212) 			{
(0213) 				for (i = 0; i < numBytes; ++i)
    123D: 56 08 00 MOV   [X+8],0x0
    1240: 56 07 00 MOV   [X+7],0x0
    1243: 80 51    JMP   0x1295
(0214) 				{
(0215) 					csprintf(hexStr, "%hhX ", data[i]);
    1245: 62 D0 00 MOV   REG[0xD0],0x0
    1248: 55 7D 07 MOV   [__r0],0x7
    124B: 5A 7C    MOV   [__r1],X
    124D: 06 7C 0A ADD   [__r1],0xA
    1250: 52 08    MOV   A,[X+8]
    1252: 02 7C    ADD   A,[__r1]
    1254: 53 7C    MOV   [__r1],A
    1256: 52 07    MOV   A,[X+7]
    1258: 0A 7D    ADC   A,[__r0]
    125A: 60 D4    MOV   REG[0xD4],A
    125C: 3E 7C    MVI   A,[__r1]
    125E: 53 7C    MOV   [__r1],A
    1260: 50 00    MOV   A,0x0
    1262: 08       PUSH  A
    1263: 51 7C    MOV   A,[__r1]
    1265: 08       PUSH  A
    1266: 50 02    MOV   A,0x2
    1268: 08       PUSH  A
    1269: 50 34    MOV   A,0x34
    126B: 08       PUSH  A
    126C: 5A 7C    MOV   [__r1],X
    126E: 06 7C 5A ADD   [__r1],0x5A
    1271: 50 07    MOV   A,0x7
    1273: 08       PUSH  A
    1274: 51 7C    MOV   A,[__r1]
    1276: 08       PUSH  A
    1277: 7C 20 2F LCALL _csprintf
    127A: 38 FA    ADD   SP,0xFA
(0216) 					UART_PutString(hexStr);
    127C: 62 D0 00 MOV   REG[0xD0],0x0
    127F: 5A 7C    MOV   [__r1],X
    1281: 06 7C 5A ADD   [__r1],0x5A
    1284: 10       PUSH  X
    1285: 50 07    MOV   A,0x7
    1287: 08       PUSH  A
    1288: 51 7C    MOV   A,[__r1]
    128A: 5C       MOV   X,A
    128B: 18       POP   A
    128C: 7C 07 15 LCALL _UART_PutString
    128F: 20       POP   X
(0217) 				}
    1290: 77 08    INC   [X+8]
    1292: 0F 07 00 ADC   [X+7],0x0
    1295: 62 D0 00 MOV   REG[0xD0],0x0
    1298: 52 09    MOV   A,[X+9]
    129A: 53 7C    MOV   [__r1],A
    129C: 52 08    MOV   A,[X+8]
    129E: 12 7C    SUB   A,[__r1]
    12A0: 50 00    MOV   A,0x0
    12A2: 31 80    XOR   A,0x80
    12A4: 53 75    MOV   [__rX],A
    12A6: 52 07    MOV   A,[X+7]
    12A8: 31 80    XOR   A,0x80
    12AA: 1A 75    SBB   A,[__rX]
    12AC: CF 98    JC    0x1245
(0218) 				UART_PutCRLF();
    12AE: 10       PUSH  X
    12AF: 7C 07 8D LCALL _UART_PutCRLF
    12B2: 20       POP   X
(0219) 			}
(0220) 			else
(0221) 				goto error;
(0222) 		}
(0223) 		else 
(0224) 			goto error;
(0225) 		
(0226) 		error:
(0227) 			UART_CPutString("Invalid format entered. Valid formats are:\r\n\tW [GroupAddress] [MemoryLocation] [h|a] Hex/ASCII\r\n\tR [GroupAddress] [MemoryLocation] [h|a] [NumBytes]");
    12B3: 10       PUSH  X
    12B4: 50 01    MOV   A,0x1
    12B6: 08       PUSH  A
    12B7: 50 A0    MOV   A,0xA0
    12B9: 5C       MOV   X,A
    12BA: 18       POP   A
    12BB: 7C 07 7B LCALL _UART_CPutString
    12BE: 20       POP   X
(0228) 	}
    12BF: 8B A0    JMP   0x0E60
(0229) }
    12C1: 38 9E    ADD   SP,0x9E
    12C3: 20       POP   X
    12C4: 8F FF    JMP   0x12C4
_strcpyLMM:
    13AD: 62 D0 00 MOV   REG[0xD0],0x0
    13B0: 10       PUSH  X
    13B1: 4F       MOV   X,SP
    13B2: 52 FB    MOV   A,[X-5]
    13B4: 60 D5    MOV   REG[0xD5],A
    13B6: 52 F9    MOV   A,[X-7]
    13B8: 60 D4    MOV   REG[0xD4],A
    13BA: 80 03    JMP   0x13BE
_strcpy:
    13BC: 10       PUSH  X
    13BD: 4F       MOV   X,SP
    13BE: 52 FC    MOV   A,[X-4]
    13C0: 53 7C    MOV   [__r1],A
    13C2: 53 7B    MOV   [__r2],A
    13C4: 52 FB    MOV   A,[X-5]
    13C6: 53 7D    MOV   [__r0],A
    13C8: 52 FA    MOV   A,[X-6]
    13CA: 53 7A    MOV   [__r3],A
    13CC: 3E 7A    MVI   A,[__r3]
    13CE: 3F 7B    MVI   [__r2],A
    13D0: 39 00    CMP   A,0x0
    13D2: BF F9    JNZ   0x13CC
    13D4: 20       POP   X
    13D5: 7F       RET   
_strlenLMM:
    13D6: 62 D0 00 MOV   REG[0xD0],0x0
    13D9: 10       PUSH  X
    13DA: 4F       MOV   X,SP
    13DB: 52 FB    MOV   A,[X-5]
    13DD: 60 D4    MOV   REG[0xD4],A
    13DF: 80 03    JMP   0x13E3
_strlen:
    13E1: 10       PUSH  X
    13E2: 4F       MOV   X,SP
    13E3: 55 7C 00 MOV   [__r1],0x0
    13E6: 55 7D 00 MOV   [__r0],0x0
    13E9: 52 FC    MOV   A,[X-4]
    13EB: 53 7B    MOV   [__r2],A
    13ED: 3E 7B    MVI   A,[__r2]
    13EF: 39 00    CMP   A,0x0
    13F1: A0 08    JZ    0x13FA
    13F3: 76 7C    INC   [__r1]
    13F5: 0E 7D 00 ADC   [__r0],0x0
    13F8: 8F F4    JMP   0x13ED
    13FA: 20       POP   X
    13FB: 7F       RET   
__plcall:
    13FC: 53 75    MOV   [__rX],A
    13FE: 28       ROMX  
    13FF: 08       PUSH  A
    1400: 51 75    MOV   A,[__rX]
    1402: 75       INC   X
    1403: 09 00    ADC   A,0x0
    1405: 28       ROMX  
    1406: 08       PUSH  A
    1407: 7F       RET   
_itoa:
    1408: 10       PUSH  X
    1409: 4F       MOV   X,SP
    140A: 38 09    ADD   SP,0x9
    140C: 52 FA    MOV   A,[X-6]
    140E: 54 03    MOV   [X+3],A
    1410: 52 F9    MOV   A,[X-7]
    1412: 54 02    MOV   [X+2],A
    1414: 3D F9 00 CMP   [X-7],0x0
    1417: B0 2F    JNZ   0x1447
    1419: 3D FA 00 CMP   [X-6],0x0
    141C: B0 2A    JNZ   0x1447
    141E: 62 D0 00 MOV   REG[0xD0],0x0
    1421: 52 FC    MOV   A,[X-4]
    1423: 53 7C    MOV   [__r1],A
    1425: 52 FB    MOV   A,[X-5]
    1427: 60 D5    MOV   REG[0xD5],A
    1429: 50 30    MOV   A,0x30
    142B: 3F 7C    MVI   [__r1],A
    142D: 52 FC    MOV   A,[X-4]
    142F: 01 01    ADD   A,0x1
    1431: 53 7C    MOV   [__r1],A
    1433: 52 FB    MOV   A,[X-5]
    1435: 09 00    ADC   A,0x0
    1437: 60 D5    MOV   REG[0xD5],A
    1439: 50 00    MOV   A,0x0
    143B: 3F 7C    MVI   [__r1],A
    143D: 52 FC    MOV   A,[X-4]
    143F: 53 7C    MOV   [__r1],A
    1441: 52 FB    MOV   A,[X-5]
    1443: 53 7D    MOV   [__r0],A
    1445: 81 97    JMP   0x15DD
    1447: 52 FA    MOV   A,[X-6]
    1449: 11 00    SUB   A,0x0
    144B: 52 F9    MOV   A,[X-7]
    144D: 31 80    XOR   A,0x80
    144F: 19 80    SBB   A,0x80
    1451: D0 29    JNC   0x147B
    1453: 3D F7 00 CMP   [X-9],0x0
    1456: B0 24    JNZ   0x147B
    1458: 3D F8 0A CMP   [X-8],0xA
    145B: B0 1F    JNZ   0x147B
    145D: 56 06 01 MOV   [X+6],0x1
    1460: 62 D0 00 MOV   REG[0xD0],0x0
    1463: 52 03    MOV   A,[X+3]
    1465: 73       CPL   A
    1466: 53 7C    MOV   [__r1],A
    1468: 52 02    MOV   A,[X+2]
    146A: 73       CPL   A
    146B: 53 7D    MOV   [__r0],A
    146D: 51 7C    MOV   A,[__r1]
    146F: 01 01    ADD   A,0x1
    1471: 54 03    MOV   [X+3],A
    1473: 51 7D    MOV   A,[__r0]
    1475: 09 00    ADC   A,0x0
    1477: 54 02    MOV   [X+2],A
    1479: 80 04    JMP   0x147E
    147B: 56 06 00 MOV   [X+6],0x0
    147E: 52 FC    MOV   A,[X-4]
    1480: 54 01    MOV   [X+1],A
    1482: 52 FB    MOV   A,[X-5]
    1484: 54 00    MOV   [X+0],A
    1486: 62 D0 00 MOV   REG[0xD0],0x0
    1489: 52 F7    MOV   A,[X-9]
    148B: 08       PUSH  A
    148C: 52 F8    MOV   A,[X-8]
    148E: 08       PUSH  A
    148F: 52 02    MOV   A,[X+2]
    1491: 08       PUSH  A
    1492: 52 03    MOV   A,[X+3]
    1494: 08       PUSH  A
    1495: 7C 12 C6 LCALL 0x12C6
    1498: 38 FE    ADD   SP,0xFE
    149A: 18       POP   A
    149B: 53 7C    MOV   [__r1],A
    149D: 18       POP   A
    149E: 53 7D    MOV   [__r0],A
    14A0: 51 7C    MOV   A,[__r1]
    14A2: 54 08    MOV   [X+8],A
    14A4: 51 7D    MOV   A,[__r0]
    14A6: 54 07    MOV   [X+7],A
    14A8: 50 09    MOV   A,0x9
    14AA: 13 08    SUB   A,[X+8]
    14AC: 52 07    MOV   A,[X+7]
    14AE: 31 80    XOR   A,0x80
    14B0: 53 75    MOV   [__rX],A
    14B2: 50 80    MOV   A,0x80
    14B4: 1A 75    SBB   A,[__rX]
    14B6: C0 28    JC    0x14DF
    14B8: 62 D0 00 MOV   REG[0xD0],0x0
    14BB: 52 01    MOV   A,[X+1]
    14BD: 53 7C    MOV   [__r1],A
    14BF: 52 00    MOV   A,[X+0]
    14C1: 53 7D    MOV   [__r0],A
    14C3: 51 7C    MOV   A,[__r1]
    14C5: 01 01    ADD   A,0x1
    14C7: 54 01    MOV   [X+1],A
    14C9: 51 7D    MOV   A,[__r0]
    14CB: 09 00    ADC   A,0x0
    14CD: 54 00    MOV   [X+0],A
    14CF: 52 08    MOV   A,[X+8]
    14D1: 01 30    ADD   A,0x30
    14D3: 53 7B    MOV   [__r2],A
    14D5: 51 7D    MOV   A,[__r0]
    14D7: 60 D5    MOV   REG[0xD5],A
    14D9: 51 7B    MOV   A,[__r2]
    14DB: 3F 7C    MVI   [__r1],A
    14DD: 80 26    JMP   0x1504
    14DF: 62 D0 00 MOV   REG[0xD0],0x0
    14E2: 52 01    MOV   A,[X+1]
    14E4: 53 7C    MOV   [__r1],A
    14E6: 52 00    MOV   A,[X+0]
    14E8: 53 7D    MOV   [__r0],A
    14EA: 51 7C    MOV   A,[__r1]
    14EC: 01 01    ADD   A,0x1
    14EE: 54 01    MOV   [X+1],A
    14F0: 51 7D    MOV   A,[__r0]
    14F2: 09 00    ADC   A,0x0
    14F4: 54 00    MOV   [X+0],A
    14F6: 52 08    MOV   A,[X+8]
    14F8: 01 57    ADD   A,0x57
    14FA: 53 7B    MOV   [__r2],A
    14FC: 51 7D    MOV   A,[__r0]
    14FE: 60 D5    MOV   REG[0xD5],A
    1500: 51 7B    MOV   A,[__r2]
    1502: 3F 7C    MVI   [__r1],A
    1504: 52 F7    MOV   A,[X-9]
    1506: 08       PUSH  A
    1507: 52 F8    MOV   A,[X-8]
    1509: 08       PUSH  A
    150A: 52 02    MOV   A,[X+2]
    150C: 08       PUSH  A
    150D: 52 03    MOV   A,[X+3]
    150F: 08       PUSH  A
    1510: 62 D0 00 MOV   REG[0xD0],0x0
    1513: 7C 12 C6 LCALL 0x12C6
    1516: 18       POP   A
    1517: 54 03    MOV   [X+3],A
    1519: 18       POP   A
    151A: 54 02    MOV   [X+2],A
    151C: 38 FE    ADD   SP,0xFE
    151E: 3D 02 00 CMP   [X+2],0x0
    1521: BF 64    JNZ   0x1486
    1523: 3D 03 00 CMP   [X+3],0x0
    1526: BF 5F    JNZ   0x1486
    1528: 3D 06 00 CMP   [X+6],0x0
    152B: A0 20    JZ    0x154C
    152D: 62 D0 00 MOV   REG[0xD0],0x0
    1530: 52 01    MOV   A,[X+1]
    1532: 53 7C    MOV   [__r1],A
    1534: 52 00    MOV   A,[X+0]
    1536: 53 7D    MOV   [__r0],A
    1538: 51 7C    MOV   A,[__r1]
    153A: 01 01    ADD   A,0x1
    153C: 54 01    MOV   [X+1],A
    153E: 51 7D    MOV   A,[__r0]
    1540: 09 00    ADC   A,0x0
    1542: 54 00    MOV   [X+0],A
    1544: 51 7D    MOV   A,[__r0]
    1546: 60 D5    MOV   REG[0xD5],A
    1548: 50 2D    MOV   A,0x2D
    154A: 3F 7C    MVI   [__r1],A
    154C: 62 D0 00 MOV   REG[0xD0],0x0
    154F: 52 01    MOV   A,[X+1]
    1551: 53 7C    MOV   [__r1],A
    1553: 52 00    MOV   A,[X+0]
    1555: 53 7D    MOV   [__r0],A
    1557: 51 7C    MOV   A,[__r1]
    1559: 01 FF    ADD   A,0xFF
    155B: 54 01    MOV   [X+1],A
    155D: 51 7D    MOV   A,[__r0]
    155F: 09 FF    ADC   A,0xFF
    1561: 54 00    MOV   [X+0],A
    1563: 51 7D    MOV   A,[__r0]
    1565: 60 D5    MOV   REG[0xD5],A
    1567: 50 00    MOV   A,0x0
    1569: 3F 7C    MVI   [__r1],A
    156B: 52 FC    MOV   A,[X-4]
    156D: 54 05    MOV   [X+5],A
    156F: 52 FB    MOV   A,[X-5]
    1571: 54 04    MOV   [X+4],A
    1573: 80 54    JMP   0x15C8
    1575: 62 D0 00 MOV   REG[0xD0],0x0
    1578: 52 05    MOV   A,[X+5]
    157A: 53 7C    MOV   [__r1],A
    157C: 52 04    MOV   A,[X+4]
    157E: 60 D4    MOV   REG[0xD4],A
    1580: 3E 7C    MVI   A,[__r1]
    1582: 54 06    MOV   [X+6],A
    1584: 52 05    MOV   A,[X+5]
    1586: 53 7C    MOV   [__r1],A
    1588: 52 04    MOV   A,[X+4]
    158A: 53 7D    MOV   [__r0],A
    158C: 51 7C    MOV   A,[__r1]
    158E: 01 01    ADD   A,0x1
    1590: 54 05    MOV   [X+5],A
    1592: 51 7D    MOV   A,[__r0]
    1594: 09 00    ADC   A,0x0
    1596: 54 04    MOV   [X+4],A
    1598: 52 01    MOV   A,[X+1]
    159A: 53 7A    MOV   [__r3],A
    159C: 52 00    MOV   A,[X+0]
    159E: 60 D4    MOV   REG[0xD4],A
    15A0: 3E 7A    MVI   A,[__r3]
    15A2: 53 7B    MOV   [__r2],A
    15A4: 51 7D    MOV   A,[__r0]
    15A6: 60 D5    MOV   REG[0xD5],A
    15A8: 51 7B    MOV   A,[__r2]
    15AA: 3F 7C    MVI   [__r1],A
    15AC: 52 01    MOV   A,[X+1]
    15AE: 53 7C    MOV   [__r1],A
    15B0: 52 00    MOV   A,[X+0]
    15B2: 53 7D    MOV   [__r0],A
    15B4: 51 7C    MOV   A,[__r1]
    15B6: 01 FF    ADD   A,0xFF
    15B8: 54 01    MOV   [X+1],A
    15BA: 51 7D    MOV   A,[__r0]
    15BC: 09 FF    ADC   A,0xFF
    15BE: 54 00    MOV   [X+0],A
    15C0: 51 7D    MOV   A,[__r0]
    15C2: 60 D5    MOV   REG[0xD5],A
    15C4: 52 06    MOV   A,[X+6]
    15C6: 3F 7C    MVI   [__r1],A
    15C8: 52 05    MOV   A,[X+5]
    15CA: 13 01    SUB   A,[X+1]
    15CC: 52 04    MOV   A,[X+4]
    15CE: 1B 00    SBB   A,[X+0]
    15D0: CF A4    JC    0x1575
    15D2: 62 D0 00 MOV   REG[0xD0],0x0
    15D5: 52 FC    MOV   A,[X-4]
    15D7: 53 7C    MOV   [__r1],A
    15D9: 52 FB    MOV   A,[X-5]
    15DB: 53 7D    MOV   [__r0],A
    15DD: 38 F7    ADD   SP,0xF7
    15DF: 20       POP   X
    15E0: 7F       RET   
_strtol:
    15E1: 10       PUSH  X
    15E2: 4F       MOV   X,SP
    15E3: 38 18    ADD   SP,0x18
    15E5: 56 00 00 MOV   [X+0],0x0
    15E8: 56 01 00 MOV   [X+1],0x0
    15EB: 56 02 00 MOV   [X+2],0x0
    15EE: 56 03 00 MOV   [X+3],0x0
    15F1: 80 06    JMP   0x15F8
    15F3: 77 FC    INC   [X-4]
    15F5: 0F FB 00 ADC   [X-5],0x0
    15F8: 62 D0 00 MOV   REG[0xD0],0x0
    15FB: 52 FC    MOV   A,[X-4]
    15FD: 53 7C    MOV   [__r1],A
    15FF: 52 FB    MOV   A,[X-5]
    1601: 60 D4    MOV   REG[0xD4],A
    1603: 3E 7C    MVI   A,[__r1]
    1605: 53 7C    MOV   [__r1],A
    1607: 50 00    MOV   A,0x0
    1609: 08       PUSH  A
    160A: 51 7C    MOV   A,[__r1]
    160C: 08       PUSH  A
    160D: 7C 1F 1E LCALL _isspace
    1610: 38 FE    ADD   SP,0xFE
    1612: 62 D0 00 MOV   REG[0xD0],0x0
    1615: 3C 7D 00 CMP   [__r0],0x0
    1618: BF DA    JNZ   0x15F3
    161A: 3C 7C 00 CMP   [__r1],0x0
    161D: BF D5    JNZ   0x15F3
    161F: 62 D0 00 MOV   REG[0xD0],0x0
    1622: 52 FC    MOV   A,[X-4]
    1624: 53 7C    MOV   [__r1],A
    1626: 52 FB    MOV   A,[X-5]
    1628: 60 D4    MOV   REG[0xD4],A
    162A: 3E 7C    MVI   A,[__r1]
    162C: 39 00    CMP   A,0x0
    162E: A0 31    JZ    0x1660
    1630: 3D F7 00 CMP   [X-9],0x0
    1633: B0 06    JNZ   0x163A
    1635: 3D F8 00 CMP   [X-8],0x0
    1638: A0 55    JZ    0x168E
    163A: 50 01    MOV   A,0x1
    163C: 13 F8    SUB   A,[X-8]
    163E: 52 F7    MOV   A,[X-9]
    1640: 31 80    XOR   A,0x80
    1642: 62 D0 00 MOV   REG[0xD0],0x0
    1645: 53 75    MOV   [__rX],A
    1647: 50 80    MOV   A,0x80
    1649: 1A 75    SBB   A,[__rX]
    164B: D0 14    JNC   0x1660
    164D: 50 24    MOV   A,0x24
    164F: 13 F8    SUB   A,[X-8]
    1651: 52 F7    MOV   A,[X-9]
    1653: 31 80    XOR   A,0x80
    1655: 62 D0 00 MOV   REG[0xD0],0x0
    1658: 53 75    MOV   [__rX],A
    165A: 50 80    MOV   A,0x80
    165C: 1A 75    SBB   A,[__rX]
    165E: D0 2F    JNC   0x168E
    1660: 3D F9 00 CMP   [X-7],0x0
    1663: B0 06    JNZ   0x166A
    1665: 3D FA 00 CMP   [X-6],0x0
    1668: A0 14    JZ    0x167D
    166A: 62 D0 00 MOV   REG[0xD0],0x0
    166D: 52 FA    MOV   A,[X-6]
    166F: 53 7C    MOV   [__r1],A
    1671: 52 F9    MOV   A,[X-7]
    1673: 60 D5    MOV   REG[0xD5],A
    1675: 52 FB    MOV   A,[X-5]
    1677: 3F 7C    MVI   [__r1],A
    1679: 52 FC    MOV   A,[X-4]
    167B: 3F 7C    MVI   [__r1],A
    167D: 62 D0 00 MOV   REG[0xD0],0x0
    1680: 55 7D 00 MOV   [__r0],0x0
    1683: 55 7C 00 MOV   [__r1],0x0
    1686: 55 7B 00 MOV   [__r2],0x0
    1689: 55 7A 00 MOV   [__r3],0x0
    168C: 83 72    JMP   0x19FF
    168E: 56 0B 00 MOV   [X+11],0x0
    1691: 56 0A 00 MOV   [X+10],0x0
    1694: 62 D0 00 MOV   REG[0xD0],0x0
    1697: 52 FC    MOV   A,[X-4]
    1699: 53 7C    MOV   [__r1],A
    169B: 52 FB    MOV   A,[X-5]
    169D: 60 D4    MOV   REG[0xD4],A
    169F: 3E 7C    MVI   A,[__r1]
    16A1: 39 2D    CMP   A,0x2D
    16A3: B0 0E    JNZ   0x16B2
    16A5: 77 FC    INC   [X-4]
    16A7: 0F FB 00 ADC   [X-5],0x0
    16AA: 56 0B 01 MOV   [X+11],0x1
    16AD: 56 0A 00 MOV   [X+10],0x0
    16B0: 80 17    JMP   0x16C8
    16B2: 62 D0 00 MOV   REG[0xD0],0x0
    16B5: 52 FC    MOV   A,[X-4]
    16B7: 53 7C    MOV   [__r1],A
    16B9: 52 FB    MOV   A,[X-5]
    16BB: 60 D4    MOV   REG[0xD4],A
    16BD: 3E 7C    MVI   A,[__r1]
    16BF: 39 2B    CMP   A,0x2B
    16C1: B0 06    JNZ   0x16C8
    16C3: 77 FC    INC   [X-4]
    16C5: 0F FB 00 ADC   [X-5],0x0
    16C8: 62 D0 00 MOV   REG[0xD0],0x0
    16CB: 52 FC    MOV   A,[X-4]
    16CD: 53 7C    MOV   [__r1],A
    16CF: 52 FB    MOV   A,[X-5]
    16D1: 60 D4    MOV   REG[0xD4],A
    16D3: 3E 7C    MVI   A,[__r1]
    16D5: 39 30    CMP   A,0x30
    16D7: B0 4A    JNZ   0x1722
    16D9: 52 FC    MOV   A,[X-4]
    16DB: 01 01    ADD   A,0x1
    16DD: 53 7C    MOV   [__r1],A
    16DF: 52 FB    MOV   A,[X-5]
    16E1: 09 00    ADC   A,0x0
    16E3: 60 D4    MOV   REG[0xD4],A
    16E5: 3E 7C    MVI   A,[__r1]
    16E7: 53 7C    MOV   [__r1],A
    16E9: 55 7D 00 MOV   [__r0],0x0
    16EC: 3C 7D 00 CMP   [__r0],0x0
    16EF: B0 05    JNZ   0x16F5
    16F1: 39 58    CMP   A,0x58
    16F3: A0 0E    JZ    0x1702
    16F5: 62 D0 00 MOV   REG[0xD0],0x0
    16F8: 3C 7D 00 CMP   [__r0],0x0
    16FB: B0 26    JNZ   0x1722
    16FD: 3C 7C 78 CMP   [__r1],0x78
    1700: B0 21    JNZ   0x1722
    1702: 3D F7 00 CMP   [X-9],0x0
    1705: B0 06    JNZ   0x170C
    1707: 3D F8 10 CMP   [X-8],0x10
    170A: A0 0B    JZ    0x1716
    170C: 3D F7 00 CMP   [X-9],0x0
    170F: B0 12    JNZ   0x1722
    1711: 3D F8 00 CMP   [X-8],0x0
    1714: B0 0D    JNZ   0x1722
    1716: 56 F8 10 MOV   [X-8],0x10
    1719: 56 F7 00 MOV   [X-9],0x0
    171C: 07 FC 02 ADD   [X-4],0x2
    171F: 0F FB 00 ADC   [X-5],0x0
    1722: 3D F7 00 CMP   [X-9],0x0
    1725: B0 2D    JNZ   0x1753
    1727: 3D F8 00 CMP   [X-8],0x0
    172A: B0 28    JNZ   0x1753
    172C: 62 D0 00 MOV   REG[0xD0],0x0
    172F: 52 FC    MOV   A,[X-4]
    1731: 53 7C    MOV   [__r1],A
    1733: 52 FB    MOV   A,[X-5]
    1735: 60 D4    MOV   REG[0xD4],A
    1737: 3E 7C    MVI   A,[__r1]
    1739: 39 30    CMP   A,0x30
    173B: B0 09    JNZ   0x1745
    173D: 56 0F 08 MOV   [X+15],0x8
    1740: 56 0E 00 MOV   [X+14],0x0
    1743: 80 07    JMP   0x174B
    1745: 56 0F 0A MOV   [X+15],0xA
    1748: 56 0E 00 MOV   [X+14],0x0
    174B: 52 0F    MOV   A,[X+15]
    174D: 54 F8    MOV   [X-8],A
    174F: 52 0E    MOV   A,[X+14]
    1751: 54 F7    MOV   [X-9],A
    1753: 52 F8    MOV   A,[X-8]
    1755: 11 0A    SUB   A,0xA
    1757: 52 F7    MOV   A,[X-9]
    1759: 31 80    XOR   A,0x80
    175B: 19 80    SBB   A,0x80
    175D: C0 09    JC    0x1767
    175F: 56 11 39 MOV   [X+17],0x39
    1762: 56 10 00 MOV   [X+16],0x0
    1765: 80 1C    JMP   0x1782
    1767: 62 D0 00 MOV   REG[0xD0],0x0
    176A: 52 F8    MOV   A,[X-8]
    176C: 11 01    SUB   A,0x1
    176E: 53 7C    MOV   [__r1],A
    1770: 52 F7    MOV   A,[X-9]
    1772: 19 00    SBB   A,0x0
    1774: 53 7D    MOV   [__r0],A
    1776: 51 7C    MOV   A,[__r1]
    1778: 01 30    ADD   A,0x30
    177A: 54 11    MOV   [X+17],A
    177C: 51 7D    MOV   A,[__r0]
    177E: 09 00    ADC   A,0x0
    1780: 54 10    MOV   [X+16],A
    1782: 52 11    MOV   A,[X+17]
    1784: 54 09    MOV   [X+9],A
    1786: 52 10    MOV   A,[X+16]
    1788: 54 08    MOV   [X+8],A
    178A: 50 0A    MOV   A,0xA
    178C: 13 F8    SUB   A,[X-8]
    178E: 52 F7    MOV   A,[X-9]
    1790: 31 80    XOR   A,0x80
    1792: 62 D0 00 MOV   REG[0xD0],0x0
    1795: 53 75    MOV   [__rX],A
    1797: 50 80    MOV   A,0x80
    1799: 1A 75    SBB   A,[__rX]
    179B: D1 EA    JNC   0x1986
    179D: 62 D0 00 MOV   REG[0xD0],0x0
    17A0: 52 F8    MOV   A,[X-8]
    17A2: 11 0B    SUB   A,0xB
    17A4: 53 7C    MOV   [__r1],A
    17A6: 52 F7    MOV   A,[X-9]
    17A8: 19 00    SBB   A,0x0
    17AA: 53 7D    MOV   [__r0],A
    17AC: 51 7C    MOV   A,[__r1]
    17AE: 01 61    ADD   A,0x61
    17B0: 54 0D    MOV   [X+13],A
    17B2: 51 7D    MOV   A,[__r0]
    17B4: 09 00    ADC   A,0x0
    17B6: 54 0C    MOV   [X+12],A
    17B8: 81 CD    JMP   0x1986
    17BA: 62 D0 00 MOV   REG[0xD0],0x0
    17BD: 52 FC    MOV   A,[X-4]
    17BF: 53 7C    MOV   [__r1],A
    17C1: 52 FB    MOV   A,[X-5]
    17C3: 60 D4    MOV   REG[0xD4],A
    17C5: 3E 7C    MVI   A,[__r1]
    17C7: 53 7C    MOV   [__r1],A
    17C9: 50 00    MOV   A,0x0
    17CB: 08       PUSH  A
    17CC: 51 7C    MOV   A,[__r1]
    17CE: 08       PUSH  A
    17CF: 7C 1E DC LCALL _isdigit
    17D2: 38 FE    ADD   SP,0xFE
    17D4: 62 D0 00 MOV   REG[0xD0],0x0
    17D7: 3C 7D 00 CMP   [__r0],0x0
    17DA: B0 06    JNZ   0x17E1
    17DC: 3C 7C 00 CMP   [__r1],0x0
    17DF: A0 3B    JZ    0x181B
    17E1: 62 D0 00 MOV   REG[0xD0],0x0
    17E4: 52 FC    MOV   A,[X-4]
    17E6: 53 7C    MOV   [__r1],A
    17E8: 52 FB    MOV   A,[X-5]
    17EA: 60 D4    MOV   REG[0xD4],A
    17EC: 3E 7C    MVI   A,[__r1]
    17EE: 53 7C    MOV   [__r1],A
    17F0: 52 09    MOV   A,[X+9]
    17F2: 12 7C    SUB   A,[__r1]
    17F4: 50 00    MOV   A,0x0
    17F6: 31 80    XOR   A,0x80
    17F8: 53 75    MOV   [__rX],A
    17FA: 52 08    MOV   A,[X+8]
    17FC: 31 80    XOR   A,0x80
    17FE: 1A 75    SBB   A,[__rX]
    1800: C0 1A    JC    0x181B
    1802: 62 D0 00 MOV   REG[0xD0],0x0
    1805: 52 FC    MOV   A,[X-4]
    1807: 53 7C    MOV   [__r1],A
    1809: 52 FB    MOV   A,[X-5]
    180B: 60 D4    MOV   REG[0xD4],A
    180D: 3E 7C    MVI   A,[__r1]
    180F: 11 30    SUB   A,0x30
    1811: 54 13    MOV   [X+19],A
    1813: 50 00    MOV   A,0x0
    1815: 19 00    SBB   A,0x0
    1817: 54 12    MOV   [X+18],A
    1819: 80 75    JMP   0x188F
    181B: 50 0A    MOV   A,0xA
    181D: 13 F8    SUB   A,[X-8]
    181F: 52 F7    MOV   A,[X-9]
    1821: 31 80    XOR   A,0x80
    1823: 62 D0 00 MOV   REG[0xD0],0x0
    1826: 53 75    MOV   [__rX],A
    1828: 50 80    MOV   A,0x80
    182A: 1A 75    SBB   A,[__rX]
    182C: D1 6A    JNC   0x1997
    182E: 62 D0 00 MOV   REG[0xD0],0x0
    1831: 52 FC    MOV   A,[X-4]
    1833: 53 7C    MOV   [__r1],A
    1835: 52 FB    MOV   A,[X-5]
    1837: 60 D4    MOV   REG[0xD4],A
    1839: 3E 7C    MVI   A,[__r1]
    183B: 53 7C    MOV   [__r1],A
    183D: 50 00    MOV   A,0x0
    183F: 08       PUSH  A
    1840: 51 7C    MOV   A,[__r1]
    1842: 08       PUSH  A
    1843: 7C 1F BF LCALL _tolower
    1846: 38 FE    ADD   SP,0xFE
    1848: 62 D0 00 MOV   REG[0xD0],0x0
    184B: 51 7C    MOV   A,[__r1]
    184D: 54 13    MOV   [X+19],A
    184F: 51 7D    MOV   A,[__r0]
    1851: 54 12    MOV   [X+18],A
    1853: 51 7C    MOV   A,[__r1]
    1855: 11 61    SUB   A,0x61
    1857: 51 7D    MOV   A,[__r0]
    1859: 31 80    XOR   A,0x80
    185B: 19 80    SBB   A,0x80
    185D: C1 39    JC    0x1997
    185F: 52 0D    MOV   A,[X+13]
    1861: 13 13    SUB   A,[X+19]
    1863: 52 12    MOV   A,[X+18]
    1865: 31 80    XOR   A,0x80
    1867: 62 D0 00 MOV   REG[0xD0],0x0
    186A: 53 75    MOV   [__rX],A
    186C: 52 0C    MOV   A,[X+12]
    186E: 31 80    XOR   A,0x80
    1870: 1A 75    SBB   A,[__rX]
    1872: C1 24    JC    0x1997
    1874: 62 D0 00 MOV   REG[0xD0],0x0
    1877: 52 13    MOV   A,[X+19]
    1879: 11 61    SUB   A,0x61
    187B: 53 7C    MOV   [__r1],A
    187D: 52 12    MOV   A,[X+18]
    187F: 19 00    SBB   A,0x0
    1881: 53 7D    MOV   [__r0],A
    1883: 51 7C    MOV   A,[__r1]
    1885: 01 0A    ADD   A,0xA
    1887: 54 13    MOV   [X+19],A
    1889: 51 7D    MOV   A,[__r0]
    188B: 09 00    ADC   A,0x0
    188D: 54 12    MOV   [X+18],A
    188F: 52 00    MOV   A,[X+0]
    1891: 54 04    MOV   [X+4],A
    1893: 52 01    MOV   A,[X+1]
    1895: 54 05    MOV   [X+5],A
    1897: 52 02    MOV   A,[X+2]
    1899: 54 06    MOV   [X+6],A
    189B: 52 03    MOV   A,[X+3]
    189D: 54 07    MOV   [X+7],A
    189F: 62 D0 00 MOV   REG[0xD0],0x0
    18A2: 52 13    MOV   A,[X+19]
    18A4: 53 7A    MOV   [__r3],A
    18A6: 52 12    MOV   A,[X+18]
    18A8: 53 7B    MOV   [__r2],A
    18AA: 47 7B 80 TST   [__r2],0x80
    18AD: A0 09    JZ    0x18B7
    18AF: 55 7C FF MOV   [__r1],0xFF
    18B2: 55 7D FF MOV   [__r0],0xFF
    18B5: 80 0A    JMP   0x18C0
    18B7: 62 D0 00 MOV   REG[0xD0],0x0
    18BA: 55 7C 00 MOV   [__r1],0x0
    18BD: 55 7D 00 MOV   [__r0],0x0
    18C0: 62 D0 00 MOV   REG[0xD0],0x0
    18C3: 52 F8    MOV   A,[X-8]
    18C5: 53 76    MOV   [__r7],A
    18C7: 52 F7    MOV   A,[X-9]
    18C9: 53 77    MOV   [__r6],A
    18CB: 47 77 80 TST   [__r6],0x80
    18CE: A0 09    JZ    0x18D8
    18D0: 55 78 FF MOV   [__r5],0xFF
    18D3: 55 79 FF MOV   [__r4],0xFF
    18D6: 80 0A    JMP   0x18E1
    18D8: 62 D0 00 MOV   REG[0xD0],0x0
    18DB: 55 78 00 MOV   [__r5],0x0
    18DE: 55 79 00 MOV   [__r4],0x0
    18E1: 62 D0 00 MOV   REG[0xD0],0x0
    18E4: 51 79    MOV   A,[__r4]
    18E6: 08       PUSH  A
    18E7: 51 78    MOV   A,[__r5]
    18E9: 08       PUSH  A
    18EA: 51 77    MOV   A,[__r6]
    18EC: 08       PUSH  A
    18ED: 51 76    MOV   A,[__r7]
    18EF: 08       PUSH  A
    18F0: 52 00    MOV   A,[X+0]
    18F2: 08       PUSH  A
    18F3: 52 01    MOV   A,[X+1]
    18F5: 08       PUSH  A
    18F6: 52 02    MOV   A,[X+2]
    18F8: 08       PUSH  A
    18F9: 52 03    MOV   A,[X+3]
    18FB: 08       PUSH  A
    18FC: 7C 13 27 LCALL 0x1327
    18FF: 38 FC    ADD   SP,0xFC
    1901: 18       POP   A
    1902: 53 76    MOV   [__r7],A
    1904: 18       POP   A
    1905: 53 77    MOV   [__r6],A
    1907: 18       POP   A
    1908: 53 78    MOV   [__r5],A
    190A: 18       POP   A
    190B: 53 79    MOV   [__r4],A
    190D: 51 76    MOV   A,[__r7]
    190F: 02 7A    ADD   A,[__r3]
    1911: 54 03    MOV   [X+3],A
    1913: 51 77    MOV   A,[__r6]
    1915: 0A 7B    ADC   A,[__r2]
    1917: 54 02    MOV   [X+2],A
    1919: 51 78    MOV   A,[__r5]
    191B: 0A 7C    ADC   A,[__r1]
    191D: 54 01    MOV   [X+1],A
    191F: 51 79    MOV   A,[__r4]
    1921: 0A 7D    ADC   A,[__r0]
    1923: 54 00    MOV   [X+0],A
    1925: 52 03    MOV   A,[X+3]
    1927: 13 07    SUB   A,[X+7]
    1929: 52 02    MOV   A,[X+2]
    192B: 1B 06    SBB   A,[X+6]
    192D: 52 01    MOV   A,[X+1]
    192F: 1B 05    SBB   A,[X+5]
    1931: 52 04    MOV   A,[X+4]
    1933: 31 80    XOR   A,0x80
    1935: 53 75    MOV   [__rX],A
    1937: 52 00    MOV   A,[X+0]
    1939: 31 80    XOR   A,0x80
    193B: 1A 75    SBB   A,[__rX]
    193D: D0 43    JNC   0x1981
    193F: 62 D0 00 MOV   REG[0xD0],0x0
    1942: 55 85 02 MOV   [errno+1],0x2
    1945: 55 84 00 MOV   [errno],0x0
    1948: 3D 0A 00 CMP   [X+10],0x0
    194B: B0 06    JNZ   0x1952
    194D: 3D 0B 00 CMP   [X+11],0x0
    1950: A0 0F    JZ    0x1960
    1952: 56 14 80 MOV   [X+20],0x80
    1955: 56 15 00 MOV   [X+21],0x0
    1958: 56 16 00 MOV   [X+22],0x0
    195B: 56 17 00 MOV   [X+23],0x0
    195E: 80 0D    JMP   0x196C
    1960: 56 14 7F MOV   [X+20],0x7F
    1963: 56 15 FF MOV   [X+21],0xFF
    1966: 56 16 FF MOV   [X+22],0xFF
    1969: 56 17 FF MOV   [X+23],0xFF
    196C: 62 D0 00 MOV   REG[0xD0],0x0
    196F: 52 14    MOV   A,[X+20]
    1971: 53 7D    MOV   [__r0],A
    1973: 52 15    MOV   A,[X+21]
    1975: 53 7C    MOV   [__r1],A
    1977: 52 16    MOV   A,[X+22]
    1979: 53 7B    MOV   [__r2],A
    197B: 52 17    MOV   A,[X+23]
    197D: 53 7A    MOV   [__r3],A
    197F: 80 7F    JMP   0x19FF
    1981: 77 FC    INC   [X-4]
    1983: 0F FB 00 ADC   [X-5],0x0
    1986: 62 D0 00 MOV   REG[0xD0],0x0
    1989: 52 FC    MOV   A,[X-4]
    198B: 53 7C    MOV   [__r1],A
    198D: 52 FB    MOV   A,[X-5]
    198F: 60 D4    MOV   REG[0xD4],A
    1991: 3E 7C    MVI   A,[__r1]
    1993: 39 00    CMP   A,0x0
    1995: BE 24    JNZ   0x17BA
    1997: 3D F9 00 CMP   [X-7],0x0
    199A: B0 06    JNZ   0x19A1
    199C: 3D FA 00 CMP   [X-6],0x0
    199F: A0 14    JZ    0x19B4
    19A1: 62 D0 00 MOV   REG[0xD0],0x0
    19A4: 52 FA    MOV   A,[X-6]
    19A6: 53 7C    MOV   [__r1],A
    19A8: 52 F9    MOV   A,[X-7]
    19AA: 60 D5    MOV   REG[0xD5],A
    19AC: 52 FB    MOV   A,[X-5]
    19AE: 3F 7C    MVI   [__r1],A
    19B0: 52 FC    MOV   A,[X-4]
    19B2: 3F 7C    MVI   [__r1],A
    19B4: 3D 0A 00 CMP   [X+10],0x0
    19B7: B0 06    JNZ   0x19BE
    19B9: 3D 0B 00 CMP   [X+11],0x0
    19BC: A0 1F    JZ    0x19DC
    19BE: 52 03    MOV   A,[X+3]
    19C0: 73       CPL   A
    19C1: 11 FF    SUB   A,0xFF
    19C3: 54 15    MOV   [X+21],A
    19C5: 52 02    MOV   A,[X+2]
    19C7: 73       CPL   A
    19C8: 19 FF    SBB   A,0xFF
    19CA: 54 14    MOV   [X+20],A
    19CC: 52 01    MOV   A,[X+1]
    19CE: 73       CPL   A
    19CF: 19 FF    SBB   A,0xFF
    19D1: 54 13    MOV   [X+19],A
    19D3: 52 00    MOV   A,[X+0]
    19D5: 73       CPL   A
    19D6: 19 FF    SBB   A,0xFF
    19D8: 54 12    MOV   [X+18],A
    19DA: 80 11    JMP   0x19EC
    19DC: 52 00    MOV   A,[X+0]
    19DE: 54 12    MOV   [X+18],A
    19E0: 52 01    MOV   A,[X+1]
    19E2: 54 13    MOV   [X+19],A
    19E4: 52 02    MOV   A,[X+2]
    19E6: 54 14    MOV   [X+20],A
    19E8: 52 03    MOV   A,[X+3]
    19EA: 54 15    MOV   [X+21],A
    19EC: 62 D0 00 MOV   REG[0xD0],0x0
    19EF: 52 12    MOV   A,[X+18]
    19F1: 53 7D    MOV   [__r0],A
    19F3: 52 13    MOV   A,[X+19]
    19F5: 53 7C    MOV   [__r1],A
    19F7: 52 14    MOV   A,[X+20]
    19F9: 53 7B    MOV   [__r2],A
    19FB: 52 15    MOV   A,[X+21]
    19FD: 53 7A    MOV   [__r3],A
    19FF: 38 E8    ADD   SP,0xE8
    1A01: 20       POP   X
    1A02: 7F       RET   
_strtoul:
    1A03: 10       PUSH  X
    1A04: 4F       MOV   X,SP
    1A05: 38 12    ADD   SP,0x12
    1A07: 56 00 00 MOV   [X+0],0x0
    1A0A: 56 01 00 MOV   [X+1],0x0
    1A0D: 56 02 00 MOV   [X+2],0x0
    1A10: 56 03 00 MOV   [X+3],0x0
    1A13: 80 06    JMP   0x1A1A
    1A15: 77 FC    INC   [X-4]
    1A17: 0F FB 00 ADC   [X-5],0x0
    1A1A: 62 D0 00 MOV   REG[0xD0],0x0
    1A1D: 52 FC    MOV   A,[X-4]
    1A1F: 53 7C    MOV   [__r1],A
    1A21: 52 FB    MOV   A,[X-5]
    1A23: 60 D4    MOV   REG[0xD4],A
    1A25: 3E 7C    MVI   A,[__r1]
    1A27: 53 7C    MOV   [__r1],A
    1A29: 50 00    MOV   A,0x0
    1A2B: 08       PUSH  A
    1A2C: 51 7C    MOV   A,[__r1]
    1A2E: 08       PUSH  A
    1A2F: 7C 1F 1E LCALL _isspace
    1A32: 38 FE    ADD   SP,0xFE
    1A34: 62 D0 00 MOV   REG[0xD0],0x0
    1A37: 3C 7D 00 CMP   [__r0],0x0
    1A3A: BF DA    JNZ   0x1A15
    1A3C: 3C 7C 00 CMP   [__r1],0x0
    1A3F: BF D5    JNZ   0x1A15
    1A41: 62 D0 00 MOV   REG[0xD0],0x0
    1A44: 52 FC    MOV   A,[X-4]
    1A46: 53 7C    MOV   [__r1],A
    1A48: 52 FB    MOV   A,[X-5]
    1A4A: 60 D4    MOV   REG[0xD4],A
    1A4C: 3E 7C    MVI   A,[__r1]
    1A4E: 39 00    CMP   A,0x0
    1A50: A0 31    JZ    0x1A82
    1A52: 3D F7 00 CMP   [X-9],0x0
    1A55: B0 06    JNZ   0x1A5C
    1A57: 3D F8 00 CMP   [X-8],0x0
    1A5A: A0 55    JZ    0x1AB0
    1A5C: 50 01    MOV   A,0x1
    1A5E: 13 F8    SUB   A,[X-8]
    1A60: 52 F7    MOV   A,[X-9]
    1A62: 31 80    XOR   A,0x80
    1A64: 62 D0 00 MOV   REG[0xD0],0x0
    1A67: 53 75    MOV   [__rX],A
    1A69: 50 80    MOV   A,0x80
    1A6B: 1A 75    SBB   A,[__rX]
    1A6D: D0 14    JNC   0x1A82
    1A6F: 50 24    MOV   A,0x24
    1A71: 13 F8    SUB   A,[X-8]
    1A73: 52 F7    MOV   A,[X-9]
    1A75: 31 80    XOR   A,0x80
    1A77: 62 D0 00 MOV   REG[0xD0],0x0
    1A7A: 53 75    MOV   [__rX],A
    1A7C: 50 80    MOV   A,0x80
    1A7E: 1A 75    SBB   A,[__rX]
    1A80: D0 2F    JNC   0x1AB0
    1A82: 3D F9 00 CMP   [X-7],0x0
    1A85: B0 06    JNZ   0x1A8C
    1A87: 3D FA 00 CMP   [X-6],0x0
    1A8A: A0 14    JZ    0x1A9F
    1A8C: 62 D0 00 MOV   REG[0xD0],0x0
    1A8F: 52 FA    MOV   A,[X-6]
    1A91: 53 7C    MOV   [__r1],A
    1A93: 52 F9    MOV   A,[X-7]
    1A95: 60 D5    MOV   REG[0xD5],A
    1A97: 52 FB    MOV   A,[X-5]
    1A99: 3F 7C    MVI   [__r1],A
    1A9B: 52 FC    MOV   A,[X-4]
    1A9D: 3F 7C    MVI   [__r1],A
    1A9F: 62 D0 00 MOV   REG[0xD0],0x0
    1AA2: 55 7D 00 MOV   [__r0],0x0
    1AA5: 55 7C 00 MOV   [__r1],0x0
    1AA8: 55 7B 00 MOV   [__r2],0x0
    1AAB: 55 7A 00 MOV   [__r3],0x0
    1AAE: 82 E6    JMP   0x1D95
    1AB0: 62 D0 00 MOV   REG[0xD0],0x0
    1AB3: 52 FC    MOV   A,[X-4]
    1AB5: 53 7C    MOV   [__r1],A
    1AB7: 52 FB    MOV   A,[X-5]
    1AB9: 60 D4    MOV   REG[0xD4],A
    1ABB: 3E 7C    MVI   A,[__r1]
    1ABD: 39 2B    CMP   A,0x2B
    1ABF: B0 06    JNZ   0x1AC6
    1AC1: 77 FC    INC   [X-4]
    1AC3: 0F FB 00 ADC   [X-5],0x0
    1AC6: 62 D0 00 MOV   REG[0xD0],0x0
    1AC9: 52 FC    MOV   A,[X-4]
    1ACB: 53 7C    MOV   [__r1],A
    1ACD: 52 FB    MOV   A,[X-5]
    1ACF: 60 D4    MOV   REG[0xD4],A
    1AD1: 3E 7C    MVI   A,[__r1]
    1AD3: 39 30    CMP   A,0x30
    1AD5: B0 4A    JNZ   0x1B20
    1AD7: 52 FC    MOV   A,[X-4]
    1AD9: 01 01    ADD   A,0x1
    1ADB: 53 7C    MOV   [__r1],A
    1ADD: 52 FB    MOV   A,[X-5]
    1ADF: 09 00    ADC   A,0x0
    1AE1: 60 D4    MOV   REG[0xD4],A
    1AE3: 3E 7C    MVI   A,[__r1]
    1AE5: 53 7C    MOV   [__r1],A
    1AE7: 55 7D 00 MOV   [__r0],0x0
    1AEA: 3C 7D 00 CMP   [__r0],0x0
    1AED: B0 05    JNZ   0x1AF3
    1AEF: 39 58    CMP   A,0x58
    1AF1: A0 0E    JZ    0x1B00
    1AF3: 62 D0 00 MOV   REG[0xD0],0x0
    1AF6: 3C 7D 00 CMP   [__r0],0x0
    1AF9: B0 26    JNZ   0x1B20
    1AFB: 3C 7C 78 CMP   [__r1],0x78
    1AFE: B0 21    JNZ   0x1B20
    1B00: 3D F7 00 CMP   [X-9],0x0
    1B03: B0 06    JNZ   0x1B0A
    1B05: 3D F8 10 CMP   [X-8],0x10
    1B08: A0 0B    JZ    0x1B14
    1B0A: 3D F7 00 CMP   [X-9],0x0
    1B0D: B0 12    JNZ   0x1B20
    1B0F: 3D F8 00 CMP   [X-8],0x0
    1B12: B0 0D    JNZ   0x1B20
    1B14: 56 F8 10 MOV   [X-8],0x10
    1B17: 56 F7 00 MOV   [X-9],0x0
    1B1A: 07 FC 02 ADD   [X-4],0x2
    1B1D: 0F FB 00 ADC   [X-5],0x0
    1B20: 3D F7 00 CMP   [X-9],0x0
    1B23: B0 2D    JNZ   0x1B51
    1B25: 3D F8 00 CMP   [X-8],0x0
    1B28: B0 28    JNZ   0x1B51
    1B2A: 62 D0 00 MOV   REG[0xD0],0x0
    1B2D: 52 FC    MOV   A,[X-4]
    1B2F: 53 7C    MOV   [__r1],A
    1B31: 52 FB    MOV   A,[X-5]
    1B33: 60 D4    MOV   REG[0xD4],A
    1B35: 3E 7C    MVI   A,[__r1]
    1B37: 39 30    CMP   A,0x30
    1B39: B0 09    JNZ   0x1B43
    1B3B: 56 0D 08 MOV   [X+13],0x8
    1B3E: 56 0C 00 MOV   [X+12],0x0
    1B41: 80 07    JMP   0x1B49
    1B43: 56 0D 0A MOV   [X+13],0xA
    1B46: 56 0C 00 MOV   [X+12],0x0
    1B49: 52 0D    MOV   A,[X+13]
    1B4B: 54 F8    MOV   [X-8],A
    1B4D: 52 0C    MOV   A,[X+12]
    1B4F: 54 F7    MOV   [X-9],A
    1B51: 52 F8    MOV   A,[X-8]
    1B53: 11 0A    SUB   A,0xA
    1B55: 52 F7    MOV   A,[X-9]
    1B57: 31 80    XOR   A,0x80
    1B59: 19 80    SBB   A,0x80
    1B5B: C0 09    JC    0x1B65
    1B5D: 56 0F 39 MOV   [X+15],0x39
    1B60: 56 0E 00 MOV   [X+14],0x0
    1B63: 80 1C    JMP   0x1B80
    1B65: 62 D0 00 MOV   REG[0xD0],0x0
    1B68: 52 F8    MOV   A,[X-8]
    1B6A: 11 01    SUB   A,0x1
    1B6C: 53 7C    MOV   [__r1],A
    1B6E: 52 F7    MOV   A,[X-9]
    1B70: 19 00    SBB   A,0x0
    1B72: 53 7D    MOV   [__r0],A
    1B74: 51 7C    MOV   A,[__r1]
    1B76: 01 30    ADD   A,0x30
    1B78: 54 0F    MOV   [X+15],A
    1B7A: 51 7D    MOV   A,[__r0]
    1B7C: 09 00    ADC   A,0x0
    1B7E: 54 0E    MOV   [X+14],A
    1B80: 52 0F    MOV   A,[X+15]
    1B82: 54 09    MOV   [X+9],A
    1B84: 52 0E    MOV   A,[X+14]
    1B86: 54 08    MOV   [X+8],A
    1B88: 50 0A    MOV   A,0xA
    1B8A: 13 F8    SUB   A,[X-8]
    1B8C: 52 F7    MOV   A,[X-9]
    1B8E: 31 80    XOR   A,0x80
    1B90: 62 D0 00 MOV   REG[0xD0],0x0
    1B93: 53 75    MOV   [__rX],A
    1B95: 50 80    MOV   A,0x80
    1B97: 1A 75    SBB   A,[__rX]
    1B99: D1 BA    JNC   0x1D54
    1B9B: 62 D0 00 MOV   REG[0xD0],0x0
    1B9E: 52 F8    MOV   A,[X-8]
    1BA0: 11 0B    SUB   A,0xB
    1BA2: 53 7C    MOV   [__r1],A
    1BA4: 52 F7    MOV   A,[X-9]
    1BA6: 19 00    SBB   A,0x0
    1BA8: 53 7D    MOV   [__r0],A
    1BAA: 51 7C    MOV   A,[__r1]
    1BAC: 01 61    ADD   A,0x61
    1BAE: 54 0B    MOV   [X+11],A
    1BB0: 51 7D    MOV   A,[__r0]
    1BB2: 09 00    ADC   A,0x0
    1BB4: 54 0A    MOV   [X+10],A
    1BB6: 81 9D    JMP   0x1D54
    1BB8: 62 D0 00 MOV   REG[0xD0],0x0
    1BBB: 52 FC    MOV   A,[X-4]
    1BBD: 53 7C    MOV   [__r1],A
    1BBF: 52 FB    MOV   A,[X-5]
    1BC1: 60 D4    MOV   REG[0xD4],A
    1BC3: 3E 7C    MVI   A,[__r1]
    1BC5: 53 7C    MOV   [__r1],A
    1BC7: 50 00    MOV   A,0x0
    1BC9: 08       PUSH  A
    1BCA: 51 7C    MOV   A,[__r1]
    1BCC: 08       PUSH  A
    1BCD: 7C 1E DC LCALL _isdigit
    1BD0: 38 FE    ADD   SP,0xFE
    1BD2: 62 D0 00 MOV   REG[0xD0],0x0
    1BD5: 3C 7D 00 CMP   [__r0],0x0
    1BD8: B0 06    JNZ   0x1BDF
    1BDA: 3C 7C 00 CMP   [__r1],0x0
    1BDD: A0 3B    JZ    0x1C19
    1BDF: 62 D0 00 MOV   REG[0xD0],0x0
    1BE2: 52 FC    MOV   A,[X-4]
    1BE4: 53 7C    MOV   [__r1],A
    1BE6: 52 FB    MOV   A,[X-5]
    1BE8: 60 D4    MOV   REG[0xD4],A
    1BEA: 3E 7C    MVI   A,[__r1]
    1BEC: 53 7C    MOV   [__r1],A
    1BEE: 52 09    MOV   A,[X+9]
    1BF0: 12 7C    SUB   A,[__r1]
    1BF2: 50 00    MOV   A,0x0
    1BF4: 31 80    XOR   A,0x80
    1BF6: 53 75    MOV   [__rX],A
    1BF8: 52 08    MOV   A,[X+8]
    1BFA: 31 80    XOR   A,0x80
    1BFC: 1A 75    SBB   A,[__rX]
    1BFE: C0 1A    JC    0x1C19
    1C00: 62 D0 00 MOV   REG[0xD0],0x0
    1C03: 52 FC    MOV   A,[X-4]
    1C05: 53 7C    MOV   [__r1],A
    1C07: 52 FB    MOV   A,[X-5]
    1C09: 60 D4    MOV   REG[0xD4],A
    1C0B: 3E 7C    MVI   A,[__r1]
    1C0D: 11 30    SUB   A,0x30
    1C0F: 54 11    MOV   [X+17],A
    1C11: 50 00    MOV   A,0x0
    1C13: 19 00    SBB   A,0x0
    1C15: 54 10    MOV   [X+16],A
    1C17: 80 75    JMP   0x1C8D
    1C19: 50 0A    MOV   A,0xA
    1C1B: 13 F8    SUB   A,[X-8]
    1C1D: 52 F7    MOV   A,[X-9]
    1C1F: 31 80    XOR   A,0x80
    1C21: 62 D0 00 MOV   REG[0xD0],0x0
    1C24: 53 75    MOV   [__rX],A
    1C26: 50 80    MOV   A,0x80
    1C28: 1A 75    SBB   A,[__rX]
    1C2A: D1 3A    JNC   0x1D65
    1C2C: 62 D0 00 MOV   REG[0xD0],0x0
    1C2F: 52 FC    MOV   A,[X-4]
    1C31: 53 7C    MOV   [__r1],A
    1C33: 52 FB    MOV   A,[X-5]
    1C35: 60 D4    MOV   REG[0xD4],A
    1C37: 3E 7C    MVI   A,[__r1]
    1C39: 53 7C    MOV   [__r1],A
    1C3B: 50 00    MOV   A,0x0
    1C3D: 08       PUSH  A
    1C3E: 51 7C    MOV   A,[__r1]
    1C40: 08       PUSH  A
    1C41: 7C 1F BF LCALL _tolower
    1C44: 38 FE    ADD   SP,0xFE
    1C46: 62 D0 00 MOV   REG[0xD0],0x0
    1C49: 51 7C    MOV   A,[__r1]
    1C4B: 54 11    MOV   [X+17],A
    1C4D: 51 7D    MOV   A,[__r0]
    1C4F: 54 10    MOV   [X+16],A
    1C51: 51 7C    MOV   A,[__r1]
    1C53: 11 61    SUB   A,0x61
    1C55: 51 7D    MOV   A,[__r0]
    1C57: 31 80    XOR   A,0x80
    1C59: 19 80    SBB   A,0x80
    1C5B: C1 09    JC    0x1D65
    1C5D: 52 0B    MOV   A,[X+11]
    1C5F: 13 11    SUB   A,[X+17]
    1C61: 52 10    MOV   A,[X+16]
    1C63: 31 80    XOR   A,0x80
    1C65: 62 D0 00 MOV   REG[0xD0],0x0
    1C68: 53 75    MOV   [__rX],A
    1C6A: 52 0A    MOV   A,[X+10]
    1C6C: 31 80    XOR   A,0x80
    1C6E: 1A 75    SBB   A,[__rX]
    1C70: C0 F4    JC    0x1D65
    1C72: 62 D0 00 MOV   REG[0xD0],0x0
    1C75: 52 11    MOV   A,[X+17]
    1C77: 11 61    SUB   A,0x61
    1C79: 53 7C    MOV   [__r1],A
    1C7B: 52 10    MOV   A,[X+16]
    1C7D: 19 00    SBB   A,0x0
    1C7F: 53 7D    MOV   [__r0],A
    1C81: 51 7C    MOV   A,[__r1]
    1C83: 01 0A    ADD   A,0xA
    1C85: 54 11    MOV   [X+17],A
    1C87: 51 7D    MOV   A,[__r0]
    1C89: 09 00    ADC   A,0x0
    1C8B: 54 10    MOV   [X+16],A
    1C8D: 52 00    MOV   A,[X+0]
    1C8F: 54 04    MOV   [X+4],A
    1C91: 52 01    MOV   A,[X+1]
    1C93: 54 05    MOV   [X+5],A
    1C95: 52 02    MOV   A,[X+2]
    1C97: 54 06    MOV   [X+6],A
    1C99: 52 03    MOV   A,[X+3]
    1C9B: 54 07    MOV   [X+7],A
    1C9D: 62 D0 00 MOV   REG[0xD0],0x0
    1CA0: 52 11    MOV   A,[X+17]
    1CA2: 53 7A    MOV   [__r3],A
    1CA4: 52 10    MOV   A,[X+16]
    1CA6: 53 7B    MOV   [__r2],A
    1CA8: 47 7B 80 TST   [__r2],0x80
    1CAB: A0 09    JZ    0x1CB5
    1CAD: 55 7C FF MOV   [__r1],0xFF
    1CB0: 55 7D FF MOV   [__r0],0xFF
    1CB3: 80 0A    JMP   0x1CBE
    1CB5: 62 D0 00 MOV   REG[0xD0],0x0
    1CB8: 55 7C 00 MOV   [__r1],0x0
    1CBB: 55 7D 00 MOV   [__r0],0x0
    1CBE: 62 D0 00 MOV   REG[0xD0],0x0
    1CC1: 52 F8    MOV   A,[X-8]
    1CC3: 53 76    MOV   [__r7],A
    1CC5: 52 F7    MOV   A,[X-9]
    1CC7: 53 77    MOV   [__r6],A
    1CC9: 47 77 80 TST   [__r6],0x80
    1CCC: A0 09    JZ    0x1CD6
    1CCE: 55 78 FF MOV   [__r5],0xFF
    1CD1: 55 79 FF MOV   [__r4],0xFF
    1CD4: 80 0A    JMP   0x1CDF
    1CD6: 62 D0 00 MOV   REG[0xD0],0x0
    1CD9: 55 78 00 MOV   [__r5],0x0
    1CDC: 55 79 00 MOV   [__r4],0x0
    1CDF: 62 D0 00 MOV   REG[0xD0],0x0
    1CE2: 51 79    MOV   A,[__r4]
    1CE4: 08       PUSH  A
    1CE5: 51 78    MOV   A,[__r5]
    1CE7: 08       PUSH  A
    1CE8: 51 77    MOV   A,[__r6]
    1CEA: 08       PUSH  A
    1CEB: 51 76    MOV   A,[__r7]
    1CED: 08       PUSH  A
    1CEE: 52 00    MOV   A,[X+0]
    1CF0: 08       PUSH  A
    1CF1: 52 01    MOV   A,[X+1]
    1CF3: 08       PUSH  A
    1CF4: 52 02    MOV   A,[X+2]
    1CF6: 08       PUSH  A
    1CF7: 52 03    MOV   A,[X+3]
    1CF9: 08       PUSH  A
    1CFA: 7C 13 27 LCALL 0x1327
    1CFD: 38 FC    ADD   SP,0xFC
    1CFF: 18       POP   A
    1D00: 53 76    MOV   [__r7],A
    1D02: 18       POP   A
    1D03: 53 77    MOV   [__r6],A
    1D05: 18       POP   A
    1D06: 53 78    MOV   [__r5],A
    1D08: 18       POP   A
    1D09: 53 79    MOV   [__r4],A
    1D0B: 51 76    MOV   A,[__r7]
    1D0D: 02 7A    ADD   A,[__r3]
    1D0F: 54 03    MOV   [X+3],A
    1D11: 51 77    MOV   A,[__r6]
    1D13: 0A 7B    ADC   A,[__r2]
    1D15: 54 02    MOV   [X+2],A
    1D17: 51 78    MOV   A,[__r5]
    1D19: 0A 7C    ADC   A,[__r1]
    1D1B: 54 01    MOV   [X+1],A
    1D1D: 51 79    MOV   A,[__r4]
    1D1F: 0A 7D    ADC   A,[__r0]
    1D21: 54 00    MOV   [X+0],A
    1D23: 52 03    MOV   A,[X+3]
    1D25: 13 07    SUB   A,[X+7]
    1D27: 52 02    MOV   A,[X+2]
    1D29: 1B 06    SBB   A,[X+6]
    1D2B: 52 01    MOV   A,[X+1]
    1D2D: 1B 05    SBB   A,[X+5]
    1D2F: 52 00    MOV   A,[X+0]
    1D31: 1B 04    SBB   A,[X+4]
    1D33: D0 1B    JNC   0x1D4F
    1D35: 62 D0 00 MOV   REG[0xD0],0x0
    1D38: 55 85 02 MOV   [errno+1],0x2
    1D3B: 55 84 00 MOV   [errno],0x0
    1D3E: 62 D0 00 MOV   REG[0xD0],0x0
    1D41: 55 7D FF MOV   [__r0],0xFF
    1D44: 55 7C FF MOV   [__r1],0xFF
    1D47: 55 7B FF MOV   [__r2],0xFF
    1D4A: 55 7A FF MOV   [__r3],0xFF
    1D4D: 80 47    JMP   0x1D95
    1D4F: 77 FC    INC   [X-4]
    1D51: 0F FB 00 ADC   [X-5],0x0
    1D54: 62 D0 00 MOV   REG[0xD0],0x0
    1D57: 52 FC    MOV   A,[X-4]
    1D59: 53 7C    MOV   [__r1],A
    1D5B: 52 FB    MOV   A,[X-5]
    1D5D: 60 D4    MOV   REG[0xD4],A
    1D5F: 3E 7C    MVI   A,[__r1]
    1D61: 39 00    CMP   A,0x0
    1D63: BE 54    JNZ   0x1BB8
    1D65: 3D F9 00 CMP   [X-7],0x0
    1D68: B0 06    JNZ   0x1D6F
    1D6A: 3D FA 00 CMP   [X-6],0x0
    1D6D: A0 14    JZ    0x1D82
    1D6F: 62 D0 00 MOV   REG[0xD0],0x0
    1D72: 52 FA    MOV   A,[X-6]
    1D74: 53 7C    MOV   [__r1],A
    1D76: 52 F9    MOV   A,[X-7]
    1D78: 60 D5    MOV   REG[0xD5],A
    1D7A: 52 FB    MOV   A,[X-5]
    1D7C: 3F 7C    MVI   [__r1],A
    1D7E: 52 FC    MOV   A,[X-4]
    1D80: 3F 7C    MVI   [__r1],A
    1D82: 62 D0 00 MOV   REG[0xD0],0x0
    1D85: 52 00    MOV   A,[X+0]
    1D87: 53 7D    MOV   [__r0],A
    1D89: 52 01    MOV   A,[X+1]
    1D8B: 53 7C    MOV   [__r1],A
    1D8D: 52 02    MOV   A,[X+2]
    1D8F: 53 7B    MOV   [__r2],A
    1D91: 52 03    MOV   A,[X+3]
    1D93: 53 7A    MOV   [__r3],A
    1D95: 38 EE    ADD   SP,0xEE
    1D97: 20       POP   X
    1D98: 7F       RET   
_utoa:
    1D99: 10       PUSH  X
    1D9A: 4F       MOV   X,SP
    1D9B: 38 07    ADD   SP,0x7
    1D9D: 52 FC    MOV   A,[X-4]
    1D9F: 54 01    MOV   [X+1],A
    1DA1: 52 FB    MOV   A,[X-5]
    1DA3: 54 00    MOV   [X+0],A
    1DA5: 62 D0 00 MOV   REG[0xD0],0x0
    1DA8: 52 F7    MOV   A,[X-9]
    1DAA: 08       PUSH  A
    1DAB: 52 F8    MOV   A,[X-8]
    1DAD: 08       PUSH  A
    1DAE: 52 F9    MOV   A,[X-7]
    1DB0: 08       PUSH  A
    1DB1: 52 FA    MOV   A,[X-6]
    1DB3: 08       PUSH  A
    1DB4: 7C 12 C6 LCALL 0x12C6
    1DB7: 38 FE    ADD   SP,0xFE
    1DB9: 18       POP   A
    1DBA: 53 7C    MOV   [__r1],A
    1DBC: 18       POP   A
    1DBD: 53 7D    MOV   [__r0],A
    1DBF: 51 7C    MOV   A,[__r1]
    1DC1: 54 06    MOV   [X+6],A
    1DC3: 51 7D    MOV   A,[__r0]
    1DC5: 54 05    MOV   [X+5],A
    1DC7: 50 09    MOV   A,0x9
    1DC9: 13 06    SUB   A,[X+6]
    1DCB: 52 05    MOV   A,[X+5]
    1DCD: 31 80    XOR   A,0x80
    1DCF: 53 75    MOV   [__rX],A
    1DD1: 50 80    MOV   A,0x80
    1DD3: 1A 75    SBB   A,[__rX]
    1DD5: C0 28    JC    0x1DFE
    1DD7: 62 D0 00 MOV   REG[0xD0],0x0
    1DDA: 52 01    MOV   A,[X+1]
    1DDC: 53 7C    MOV   [__r1],A
    1DDE: 52 00    MOV   A,[X+0]
    1DE0: 53 7D    MOV   [__r0],A
    1DE2: 51 7C    MOV   A,[__r1]
    1DE4: 01 01    ADD   A,0x1
    1DE6: 54 01    MOV   [X+1],A
    1DE8: 51 7D    MOV   A,[__r0]
    1DEA: 09 00    ADC   A,0x0
    1DEC: 54 00    MOV   [X+0],A
    1DEE: 52 06    MOV   A,[X+6]
    1DF0: 01 30    ADD   A,0x30
    1DF2: 53 7B    MOV   [__r2],A
    1DF4: 51 7D    MOV   A,[__r0]
    1DF6: 60 D5    MOV   REG[0xD5],A
    1DF8: 51 7B    MOV   A,[__r2]
    1DFA: 3F 7C    MVI   [__r1],A
    1DFC: 80 26    JMP   0x1E23
    1DFE: 62 D0 00 MOV   REG[0xD0],0x0
    1E01: 52 01    MOV   A,[X+1]
    1E03: 53 7C    MOV   [__r1],A
    1E05: 52 00    MOV   A,[X+0]
    1E07: 53 7D    MOV   [__r0],A
    1E09: 51 7C    MOV   A,[__r1]
    1E0B: 01 01    ADD   A,0x1
    1E0D: 54 01    MOV   [X+1],A
    1E0F: 51 7D    MOV   A,[__r0]
    1E11: 09 00    ADC   A,0x0
    1E13: 54 00    MOV   [X+0],A
    1E15: 52 06    MOV   A,[X+6]
    1E17: 01 57    ADD   A,0x57
    1E19: 53 7B    MOV   [__r2],A
    1E1B: 51 7D    MOV   A,[__r0]
    1E1D: 60 D5    MOV   REG[0xD5],A
    1E1F: 51 7B    MOV   A,[__r2]
    1E21: 3F 7C    MVI   [__r1],A
    1E23: 52 F7    MOV   A,[X-9]
    1E25: 08       PUSH  A
    1E26: 52 F8    MOV   A,[X-8]
    1E28: 08       PUSH  A
    1E29: 52 F9    MOV   A,[X-7]
    1E2B: 08       PUSH  A
    1E2C: 52 FA    MOV   A,[X-6]
    1E2E: 08       PUSH  A
    1E2F: 62 D0 00 MOV   REG[0xD0],0x0
    1E32: 7C 12 C6 LCALL 0x12C6
    1E35: 18       POP   A
    1E36: 54 FA    MOV   [X-6],A
    1E38: 18       POP   A
    1E39: 54 F9    MOV   [X-7],A
    1E3B: 38 FE    ADD   SP,0xFE
    1E3D: 3D F9 00 CMP   [X-7],0x0
    1E40: BF 64    JNZ   0x1DA5
    1E42: 3D FA 00 CMP   [X-6],0x0
    1E45: BF 5F    JNZ   0x1DA5
    1E47: 62 D0 00 MOV   REG[0xD0],0x0
    1E4A: 52 01    MOV   A,[X+1]
    1E4C: 53 7C    MOV   [__r1],A
    1E4E: 52 00    MOV   A,[X+0]
    1E50: 53 7D    MOV   [__r0],A
    1E52: 51 7C    MOV   A,[__r1]
    1E54: 01 FF    ADD   A,0xFF
    1E56: 54 01    MOV   [X+1],A
    1E58: 51 7D    MOV   A,[__r0]
    1E5A: 09 FF    ADC   A,0xFF
    1E5C: 54 00    MOV   [X+0],A
    1E5E: 51 7D    MOV   A,[__r0]
    1E60: 60 D5    MOV   REG[0xD5],A
    1E62: 50 00    MOV   A,0x0
    1E64: 3F 7C    MVI   [__r1],A
    1E66: 52 FC    MOV   A,[X-4]
    1E68: 54 03    MOV   [X+3],A
    1E6A: 52 FB    MOV   A,[X-5]
    1E6C: 54 02    MOV   [X+2],A
    1E6E: 80 54    JMP   0x1EC3
    1E70: 62 D0 00 MOV   REG[0xD0],0x0
    1E73: 52 03    MOV   A,[X+3]
    1E75: 53 7C    MOV   [__r1],A
    1E77: 52 02    MOV   A,[X+2]
    1E79: 60 D4    MOV   REG[0xD4],A
    1E7B: 3E 7C    MVI   A,[__r1]
    1E7D: 54 04    MOV   [X+4],A
    1E7F: 52 03    MOV   A,[X+3]
    1E81: 53 7C    MOV   [__r1],A
    1E83: 52 02    MOV   A,[X+2]
    1E85: 53 7D    MOV   [__r0],A
    1E87: 51 7C    MOV   A,[__r1]
    1E89: 01 01    ADD   A,0x1
    1E8B: 54 03    MOV   [X+3],A
    1E8D: 51 7D    MOV   A,[__r0]
    1E8F: 09 00    ADC   A,0x0
    1E91: 54 02    MOV   [X+2],A
    1E93: 52 01    MOV   A,[X+1]
    1E95: 53 7A    MOV   [__r3],A
    1E97: 52 00    MOV   A,[X+0]
    1E99: 60 D4    MOV   REG[0xD4],A
    1E9B: 3E 7A    MVI   A,[__r3]
    1E9D: 53 7B    MOV   [__r2],A
    1E9F: 51 7D    MOV   A,[__r0]
    1EA1: 60 D5    MOV   REG[0xD5],A
    1EA3: 51 7B    MOV   A,[__r2]
    1EA5: 3F 7C    MVI   [__r1],A
    1EA7: 52 01    MOV   A,[X+1]
    1EA9: 53 7C    MOV   [__r1],A
    1EAB: 52 00    MOV   A,[X+0]
    1EAD: 53 7D    MOV   [__r0],A
    1EAF: 51 7C    MOV   A,[__r1]
    1EB1: 01 FF    ADD   A,0xFF
    1EB3: 54 01    MOV   [X+1],A
    1EB5: 51 7D    MOV   A,[__r0]
    1EB7: 09 FF    ADC   A,0xFF
    1EB9: 54 00    MOV   [X+0],A
    1EBB: 51 7D    MOV   A,[__r0]
    1EBD: 60 D5    MOV   REG[0xD5],A
    1EBF: 52 04    MOV   A,[X+4]
    1EC1: 3F 7C    MVI   [__r1],A
    1EC3: 52 03    MOV   A,[X+3]
    1EC5: 13 01    SUB   A,[X+1]
    1EC7: 52 02    MOV   A,[X+2]
    1EC9: 1B 00    SBB   A,[X+0]
    1ECB: CF A4    JC    0x1E70
    1ECD: 62 D0 00 MOV   REG[0xD0],0x0
    1ED0: 52 FC    MOV   A,[X-4]
    1ED2: 53 7C    MOV   [__r1],A
    1ED4: 52 FB    MOV   A,[X-5]
    1ED6: 53 7D    MOV   [__r0],A
    1ED8: 38 F9    ADD   SP,0xF9
    1EDA: 20       POP   X
    1EDB: 7F       RET   
_isdigit:
    1EDC: 10       PUSH  X
    1EDD: 4F       MOV   X,SP
    1EDE: 62 D0 00 MOV   REG[0xD0],0x0
    1EE1: 52 FC    MOV   A,[X-4]
    1EE3: 01 61    ADD   A,0x61
    1EE5: 53 7C    MOV   [__r1],A
    1EE7: 52 FB    MOV   A,[X-5]
    1EE9: 09 03    ADC   A,0x3
    1EEB: 10       PUSH  X
    1EEC: 58 7C    MOV   X,[__r1]
    1EEE: 28       ROMX  
    1EEF: 20       POP   X
    1EF0: 53 7C    MOV   [__r1],A
    1EF2: 55 7D 00 MOV   [__r0],0x0
    1EF5: 26 7C 04 AND   [__r1],0x4
    1EF8: 26 7D 00 AND   [__r0],0x0
    1EFB: 20       POP   X
    1EFC: 7F       RET   
_islower:
    1EFD: 10       PUSH  X
    1EFE: 4F       MOV   X,SP
    1EFF: 62 D0 00 MOV   REG[0xD0],0x0
    1F02: 52 FC    MOV   A,[X-4]
    1F04: 01 61    ADD   A,0x61
    1F06: 53 7C    MOV   [__r1],A
    1F08: 52 FB    MOV   A,[X-5]
    1F0A: 09 03    ADC   A,0x3
    1F0C: 10       PUSH  X
    1F0D: 58 7C    MOV   X,[__r1]
    1F0F: 28       ROMX  
    1F10: 20       POP   X
    1F11: 53 7C    MOV   [__r1],A
    1F13: 55 7D 00 MOV   [__r0],0x0
    1F16: 26 7C 02 AND   [__r1],0x2
    1F19: 26 7D 00 AND   [__r0],0x0
    1F1C: 20       POP   X
    1F1D: 7F       RET   
_isspace:
    1F1E: 10       PUSH  X
    1F1F: 4F       MOV   X,SP
    1F20: 62 D0 00 MOV   REG[0xD0],0x0
    1F23: 52 FC    MOV   A,[X-4]
    1F25: 01 61    ADD   A,0x61
    1F27: 53 7C    MOV   [__r1],A
    1F29: 52 FB    MOV   A,[X-5]
    1F2B: 09 03    ADC   A,0x3
    1F2D: 10       PUSH  X
    1F2E: 58 7C    MOV   X,[__r1]
    1F30: 28       ROMX  
    1F31: 20       POP   X
    1F32: 53 7C    MOV   [__r1],A
    1F34: 55 7D 00 MOV   [__r0],0x0
    1F37: 26 7C 10 AND   [__r1],0x10
    1F3A: 26 7D 00 AND   [__r0],0x0
    1F3D: 20       POP   X
    1F3E: 7F       RET   
_isupper:
    1F3F: 10       PUSH  X
    1F40: 4F       MOV   X,SP
    1F41: 62 D0 00 MOV   REG[0xD0],0x0
    1F44: 52 FC    MOV   A,[X-4]
    1F46: 01 61    ADD   A,0x61
    1F48: 53 7C    MOV   [__r1],A
    1F4A: 52 FB    MOV   A,[X-5]
    1F4C: 09 03    ADC   A,0x3
    1F4E: 10       PUSH  X
    1F4F: 58 7C    MOV   X,[__r1]
    1F51: 28       ROMX  
    1F52: 20       POP   X
    1F53: 53 7C    MOV   [__r1],A
    1F55: 55 7D 00 MOV   [__r0],0x0
    1F58: 26 7C 01 AND   [__r1],0x1
    1F5B: 26 7D 00 AND   [__r0],0x0
    1F5E: 20       POP   X
    1F5F: 7F       RET   
_isxdigit:
    1F60: 10       PUSH  X
    1F61: 4F       MOV   X,SP
    1F62: 62 D0 00 MOV   REG[0xD0],0x0
    1F65: 52 FC    MOV   A,[X-4]
    1F67: 01 61    ADD   A,0x61
    1F69: 53 7C    MOV   [__r1],A
    1F6B: 52 FB    MOV   A,[X-5]
    1F6D: 09 03    ADC   A,0x3
    1F6F: 10       PUSH  X
    1F70: 58 7C    MOV   X,[__r1]
    1F72: 28       ROMX  
    1F73: 20       POP   X
    1F74: 53 7C    MOV   [__r1],A
    1F76: 55 7D 00 MOV   [__r0],0x0
    1F79: 26 7C 08 AND   [__r1],0x8
    1F7C: 26 7D 00 AND   [__r0],0x0
    1F7F: 20       POP   X
    1F80: 7F       RET   
_toupper:
    1F81: 10       PUSH  X
    1F82: 4F       MOV   X,SP
    1F83: 52 FB    MOV   A,[X-5]
    1F85: 08       PUSH  A
    1F86: 52 FC    MOV   A,[X-4]
    1F88: 08       PUSH  A
    1F89: 7C 1E FD LCALL _islower
    1F8C: 38 FE    ADD   SP,0xFE
    1F8E: 62 D0 00 MOV   REG[0xD0],0x0
    1F91: 3C 7D 00 CMP   [__r0],0x0
    1F94: B0 06    JNZ   0x1F9B
    1F96: 3C 7C 00 CMP   [__r1],0x0
    1F99: A0 18    JZ    0x1FB2
    1F9B: 62 D0 00 MOV   REG[0xD0],0x0
    1F9E: 52 FC    MOV   A,[X-4]
    1FA0: 11 61    SUB   A,0x61
    1FA2: 53 7C    MOV   [__r1],A
    1FA4: 52 FB    MOV   A,[X-5]
    1FA6: 19 00    SBB   A,0x0
    1FA8: 53 7D    MOV   [__r0],A
    1FAA: 06 7C 41 ADD   [__r1],0x41
    1FAD: 0E 7D 00 ADC   [__r0],0x0
    1FB0: 80 0C    JMP   0x1FBD
    1FB2: 62 D0 00 MOV   REG[0xD0],0x0
    1FB5: 52 FC    MOV   A,[X-4]
    1FB7: 53 7C    MOV   [__r1],A
    1FB9: 52 FB    MOV   A,[X-5]
    1FBB: 53 7D    MOV   [__r0],A
    1FBD: 20       POP   X
    1FBE: 7F       RET   
_tolower:
    1FBF: 10       PUSH  X
    1FC0: 4F       MOV   X,SP
    1FC1: 52 FB    MOV   A,[X-5]
    1FC3: 08       PUSH  A
    1FC4: 52 FC    MOV   A,[X-4]
    1FC6: 08       PUSH  A
    1FC7: 7C 1F 3F LCALL _isupper
    1FCA: 38 FE    ADD   SP,0xFE
    1FCC: 62 D0 00 MOV   REG[0xD0],0x0
    1FCF: 3C 7D 00 CMP   [__r0],0x0
    1FD2: B0 06    JNZ   0x1FD9
    1FD4: 3C 7C 00 CMP   [__r1],0x0
    1FD7: A0 18    JZ    0x1FF0
    1FD9: 62 D0 00 MOV   REG[0xD0],0x0
    1FDC: 52 FC    MOV   A,[X-4]
    1FDE: 11 41    SUB   A,0x41
    1FE0: 53 7C    MOV   [__r1],A
    1FE2: 52 FB    MOV   A,[X-5]
    1FE4: 19 00    SBB   A,0x0
    1FE6: 53 7D    MOV   [__r0],A
    1FE8: 06 7C 61 ADD   [__r1],0x61
    1FEB: 0E 7D 00 ADC   [__r0],0x0
    1FEE: 80 0C    JMP   0x1FFB
    1FF0: 62 D0 00 MOV   REG[0xD0],0x0
    1FF3: 52 FC    MOV   A,[X-4]
    1FF5: 53 7C    MOV   [__r1],A
    1FF7: 52 FB    MOV   A,[X-5]
    1FF9: 53 7D    MOV   [__r0],A
    1FFB: 20       POP   X
    1FFC: 7F       RET   
__csdepi:
    1FFD: 10       PUSH  X
    1FFE: 4F       MOV   X,SP
    1FFF: 62 D0 00 MOV   REG[0xD0],0x0
    2002: 51 87    MOV   A,[errno+3]
    2004: 08       PUSH  A
    2005: 51 86    MOV   A,[errno+2]
    2007: 62 D0 00 MOV   REG[0xD0],0x0
    200A: 53 7D    MOV   [__r0],A
    200C: 18       POP   A
    200D: 53 7C    MOV   [__r1],A
    200F: 01 01    ADD   A,0x1
    2011: 62 D0 00 MOV   REG[0xD0],0x0
    2014: 53 87    MOV   [errno+3],A
    2016: 62 D0 00 MOV   REG[0xD0],0x0
    2019: 51 7D    MOV   A,[__r0]
    201B: 09 00    ADC   A,0x0
    201D: 62 D0 00 MOV   REG[0xD0],0x0
    2020: 53 86    MOV   [errno+2],A
    2022: 62 D0 00 MOV   REG[0xD0],0x0
    2025: 51 7D    MOV   A,[__r0]
    2027: 60 D5    MOV   REG[0xD5],A
    2029: 52 FC    MOV   A,[X-4]
    202B: 3F 7C    MVI   [__r1],A
    202D: 20       POP   X
    202E: 7F       RET   
_csprintf:
    202F: 10       PUSH  X
    2030: 4F       MOV   X,SP
    2031: 38 02    ADD   SP,0x2
    2033: 62 D0 00 MOV   REG[0xD0],0x0
    2036: 52 FC    MOV   A,[X-4]
    2038: 53 87    MOV   [errno+3],A
    203A: 52 FB    MOV   A,[X-5]
    203C: 53 86    MOV   [errno+2],A
    203E: 62 D0 00 MOV   REG[0xD0],0x0
    2041: 5A 7C    MOV   [__r1],X
    2043: 16 7C 07 SUB   [__r1],0x7
    2046: 51 7C    MOV   A,[__r1]
    2048: 54 01    MOV   [X+1],A
    204A: 56 00 07 MOV   [X+0],0x7
    204D: 52 00    MOV   A,[X+0]
    204F: 08       PUSH  A
    2050: 52 01    MOV   A,[X+1]
    2052: 08       PUSH  A
    2053: 52 F9    MOV   A,[X-7]
    2055: 08       PUSH  A
    2056: 52 FA    MOV   A,[X-6]
    2058: 08       PUSH  A
    2059: 50 04    MOV   A,0x4
    205B: 08       PUSH  A
    205C: 50 D7    MOV   A,0xD7
    205E: 08       PUSH  A
    205F: 7C 21 52 LCALL __cprint
    2062: 38 FA    ADD   SP,0xFA
    2064: 62 D0 00 MOV   REG[0xD0],0x0
    2067: 51 87    MOV   A,[errno+3]
    2069: 08       PUSH  A
    206A: 51 86    MOV   A,[errno+2]
    206C: 62 D0 00 MOV   REG[0xD0],0x0
    206F: 53 7D    MOV   [__r0],A
    2071: 18       POP   A
    2072: 53 7C    MOV   [__r1],A
    2074: 51 7D    MOV   A,[__r0]
    2076: 60 D5    MOV   REG[0xD5],A
    2078: 50 00    MOV   A,0x0
    207A: 3F 7C    MVI   [__r1],A
    207C: 62 D0 00 MOV   REG[0xD0],0x0
    207F: 51 87    MOV   A,[errno+3]
    2081: 13 FC    SUB   A,[X-4]
    2083: 62 D0 00 MOV   REG[0xD0],0x0
    2086: 53 7C    MOV   [__r1],A
    2088: 62 D0 00 MOV   REG[0xD0],0x0
    208B: 51 86    MOV   A,[errno+2]
    208D: 1B FB    SBB   A,[X-5]
    208F: 62 D0 00 MOV   REG[0xD0],0x0
    2092: 53 7D    MOV   [__r0],A
    2094: 38 FE    ADD   SP,0xFE
    2096: 20       POP   X
    2097: 7F       RET   
    2098: 10       PUSH  X
    2099: 4F       MOV   X,SP
    209A: 38 01    ADD   SP,0x1
    209C: 62 D0 00 MOV   REG[0xD0],0x0
    209F: 3C 8C 00 CMP   [errno+8],0x0
    20A2: A0 0A    JZ    0x20AD
    20A4: 51 8C    MOV   A,[errno+8]
    20A6: 54 00    MOV   [X+0],A
    20A8: 55 8C 00 MOV   [errno+8],0x0
    20AB: 80 26    JMP   0x20D2
    20AD: 62 D0 00 MOV   REG[0xD0],0x0
    20B0: 51 83    MOV   A,[main.c:rubout+5]
    20B2: 08       PUSH  A
    20B3: 51 82    MOV   A,[main.c:rubout+4]
    20B5: 62 D0 00 MOV   REG[0xD0],0x0
    20B8: 53 7D    MOV   [__r0],A
    20BA: 18       POP   A
    20BB: 53 7C    MOV   [__r1],A
    20BD: 51 7D    MOV   A,[__r0]
    20BF: 60 D4    MOV   REG[0xD4],A
    20C1: 3E 7C    MVI   A,[__r1]
    20C3: 54 00    MOV   [X+0],A
    20C5: 3D 00 00 CMP   [X+0],0x0
    20C8: A0 09    JZ    0x20D2
    20CA: 62 D0 00 MOV   REG[0xD0],0x0
    20CD: 76 83    INC   [main.c:rubout+5]
    20CF: 0E 82 00 ADC   [main.c:rubout+4],0x0
    20D2: 52 00    MOV   A,[X+0]
    20D4: 62 D0 00 MOV   REG[0xD0],0x0
    20D7: 38 FF    ADD   SP,0xFF
    20D9: 20       POP   X
    20DA: 7F       RET   
    20DB: 10       PUSH  X
    20DC: 4F       MOV   X,SP
    20DD: 52 FC    MOV   A,[X-4]
    20DF: 62 D0 00 MOV   REG[0xD0],0x0
    20E2: 53 8C    MOV   [errno+8],A
    20E4: 20       POP   X
    20E5: 7F       RET   
_csscanf:
    20E6: 10       PUSH  X
    20E7: 4F       MOV   X,SP
    20E8: 38 04    ADD   SP,0x4
    20EA: 62 D0 00 MOV   REG[0xD0],0x0
    20ED: 55 8C 00 MOV   [errno+8],0x0
    20F0: 62 D0 00 MOV   REG[0xD0],0x0
    20F3: 52 FC    MOV   A,[X-4]
    20F5: 53 83    MOV   [main.c:rubout+5],A
    20F7: 52 FB    MOV   A,[X-5]
    20F9: 53 82    MOV   [main.c:rubout+4],A
    20FB: 62 D0 00 MOV   REG[0xD0],0x0
    20FE: 5A 7C    MOV   [__r1],X
    2100: 16 7C 07 SUB   [__r1],0x7
    2103: 51 7C    MOV   A,[__r1]
    2105: 54 01    MOV   [X+1],A
    2107: 56 00 07 MOV   [X+0],0x7
    210A: 52 00    MOV   A,[X+0]
    210C: 08       PUSH  A
    210D: 52 01    MOV   A,[X+1]
    210F: 08       PUSH  A
    2110: 52 F9    MOV   A,[X-7]
    2112: 08       PUSH  A
    2113: 52 FA    MOV   A,[X-6]
    2115: 08       PUSH  A
    2116: 50 04    MOV   A,0x4
    2118: 08       PUSH  A
    2119: 50 DB    MOV   A,0xDB
    211B: 08       PUSH  A
    211C: 50 04    MOV   A,0x4
    211E: 08       PUSH  A
    211F: 50 D9    MOV   A,0xD9
    2121: 08       PUSH  A
    2122: 7C 28 60 LCALL __cscanf
    2125: 38 F8    ADD   SP,0xF8
    2127: 62 D0 00 MOV   REG[0xD0],0x0
    212A: 51 7C    MOV   A,[__r1]
    212C: 54 03    MOV   [X+3],A
    212E: 51 7D    MOV   A,[__r0]
    2130: 54 02    MOV   [X+2],A
    2132: 62 D0 00 MOV   REG[0xD0],0x0
    2135: 3C 8C 00 CMP   [errno+8],0x0
    2138: A0 0A    JZ    0x2143
    213A: 62 D0 00 MOV   REG[0xD0],0x0
    213D: 06 83 FF ADD   [main.c:rubout+5],0xFF
    2140: 0E 82 FF ADC   [main.c:rubout+4],0xFF
    2143: 62 D0 00 MOV   REG[0xD0],0x0
    2146: 52 03    MOV   A,[X+3]
    2148: 53 7C    MOV   [__r1],A
    214A: 52 02    MOV   A,[X+2]
    214C: 53 7D    MOV   [__r0],A
    214E: 38 FC    ADD   SP,0xFC
    2150: 20       POP   X
    2151: 7F       RET   
__cprint:
    2152: 10       PUSH  X
    2153: 4F       MOV   X,SP
    2154: 38 11    ADD   SP,0x11
    2156: 56 05 00 MOV   [X+5],0x0
    2159: 56 04 00 MOV   [X+4],0x0
    215C: 83 C7    JMP   0x2524
    215E: 62 D0 00 MOV   REG[0xD0],0x0
    2161: 52 FA    MOV   A,[X-6]
    2163: 53 7C    MOV   [__r1],A
    2165: 52 F9    MOV   A,[X-7]
    2167: 10       PUSH  X
    2168: 58 7C    MOV   X,[__r1]
    216A: 28       ROMX  
    216B: 20       POP   X
    216C: 39 25    CMP   A,0x25
    216E: A0 23    JZ    0x2192
    2170: 52 FA    MOV   A,[X-6]
    2172: 53 7C    MOV   [__r1],A
    2174: 52 F9    MOV   A,[X-7]
    2176: 10       PUSH  X
    2177: 58 7C    MOV   X,[__r1]
    2179: 28       ROMX  
    217A: 20       POP   X
    217B: 10       PUSH  X
    217C: 08       PUSH  A
    217D: 52 FC    MOV   A,[X-4]
    217F: 53 7C    MOV   [__r1],A
    2181: 52 FB    MOV   A,[X-5]
    2183: 58 7C    MOV   X,[__r1]
    2185: 7C 13 FC LCALL __plcall
    2188: 38 FF    ADD   SP,0xFF
    218A: 20       POP   X
    218B: 77 05    INC   [X+5]
    218D: 0F 04 00 ADC   [X+4],0x0
    2190: 83 8E    JMP   0x251F
    2192: 56 0A 00 MOV   [X+10],0x0
    2195: 56 09 00 MOV   [X+9],0x0
    2198: 56 07 5A MOV   [X+7],0x5A
    219B: 56 06 00 MOV   [X+6],0x0
    219E: 56 08 20 MOV   [X+8],0x20
    21A1: 77 FA    INC   [X-6]
    21A3: 0F F9 00 ADC   [X-7],0x0
    21A6: 62 D0 00 MOV   REG[0xD0],0x0
    21A9: 52 FA    MOV   A,[X-6]
    21AB: 53 7C    MOV   [__r1],A
    21AD: 52 F9    MOV   A,[X-7]
    21AF: 10       PUSH  X
    21B0: 58 7C    MOV   X,[__r1]
    21B2: 28       ROMX  
    21B3: 20       POP   X
    21B4: 54 10    MOV   [X+16],A
    21B6: 56 0F 00 MOV   [X+15],0x0
    21B9: 52 10    MOV   A,[X+16]
    21BB: 11 58    SUB   A,0x58
    21BD: 53 74    MOV   [__rY],A
    21BF: 52 0F    MOV   A,[X+15]
    21C1: 31 80    XOR   A,0x80
    21C3: 19 80    SBB   A,0x80
    21C5: 2A 74    OR    A,[__rY]
    21C7: A0 ED    JZ    0x22B5
    21C9: D0 22    JNC   0x21EC
    21CB: 52 10    MOV   A,[X+16]
    21CD: 11 45    SUB   A,0x45
    21CF: 62 D0 00 MOV   REG[0xD0],0x0
    21D2: 53 74    MOV   [__rY],A
    21D4: 52 0F    MOV   A,[X+15]
    21D6: 31 80    XOR   A,0x80
    21D8: 19 80    SBB   A,0x80
    21DA: C0 83    JC    0x225E
    21DC: 2A 74    OR    A,[__rY]
    21DE: A3 38    JZ    0x2517
    21E0: 3D 0F 00 CMP   [X+15],0x0
    21E3: B0 06    JNZ   0x21EA
    21E5: 3D 10 53 CMP   [X+16],0x53
    21E8: A2 32    JZ    0x241B
    21EA: 80 73    JMP   0x225E
    21EC: 3D 0F 00 CMP   [X+15],0x0
    21EF: B0 06    JNZ   0x21F6
    21F1: 3D 10 63 CMP   [X+16],0x63
    21F4: A1 F6    JZ    0x23EB
    21F6: 3D 0F 00 CMP   [X+15],0x0
    21F9: B0 06    JNZ   0x2200
    21FB: 3D 10 64 CMP   [X+16],0x64
    21FE: A0 84    JZ    0x2283
    2200: 3D 0F 00 CMP   [X+15],0x0
    2203: B0 06    JNZ   0x220A
    2205: 3D 10 65 CMP   [X+16],0x65
    2208: A3 0E    JZ    0x2517
    220A: 3D 0F 00 CMP   [X+15],0x0
    220D: B0 06    JNZ   0x2214
    220F: 3D 10 66 CMP   [X+16],0x66
    2212: A3 04    JZ    0x2517
    2214: 3D 0F 00 CMP   [X+15],0x0
    2217: B0 06    JNZ   0x221E
    2219: 3D 10 69 CMP   [X+16],0x69
    221C: A0 66    JZ    0x2283
    221E: 3D 0F 00 CMP   [X+15],0x0
    2221: B0 06    JNZ   0x2228
    2223: 3D 10 6F CMP   [X+16],0x6F
    2226: A0 8E    JZ    0x22B5
    2228: 3D 0F 00 CMP   [X+15],0x0
    222B: B0 06    JNZ   0x2232
    222D: 3D 10 70 CMP   [X+16],0x70
    2230: A0 84    JZ    0x22B5
    2232: 52 10    MOV   A,[X+16]
    2234: 11 63    SUB   A,0x63
    2236: 52 0F    MOV   A,[X+15]
    2238: 31 80    XOR   A,0x80
    223A: 19 80    SBB   A,0x80
    223C: C0 21    JC    0x225E
    223E: 3D 0F 00 CMP   [X+15],0x0
    2241: B0 06    JNZ   0x2248
    2243: 3D 10 73 CMP   [X+16],0x73
    2246: A2 4A    JZ    0x2491
    2248: 3D 0F 00 CMP   [X+15],0x0
    224B: B0 06    JNZ   0x2252
    224D: 3D 10 75 CMP   [X+16],0x75
    2250: A0 64    JZ    0x22B5
    2252: 3D 0F 00 CMP   [X+15],0x0
    2255: B0 06    JNZ   0x225C
    2257: 3D 10 78 CMP   [X+16],0x78
    225A: A0 5A    JZ    0x22B5
    225C: 80 01    JMP   0x225E
    225E: 62 D0 00 MOV   REG[0xD0],0x0
    2261: 52 FA    MOV   A,[X-6]
    2263: 53 7C    MOV   [__r1],A
    2265: 52 F9    MOV   A,[X-7]
    2267: 10       PUSH  X
    2268: 58 7C    MOV   X,[__r1]
    226A: 28       ROMX  
    226B: 20       POP   X
    226C: 10       PUSH  X
    226D: 08       PUSH  A
    226E: 52 FC    MOV   A,[X-4]
    2270: 53 7C    MOV   [__r1],A
    2272: 52 FB    MOV   A,[X-5]
    2274: 58 7C    MOV   X,[__r1]
    2276: 7C 13 FC LCALL __plcall
    2279: 38 FF    ADD   SP,0xFF
    227B: 20       POP   X
    227C: 77 05    INC   [X+5]
    227E: 0F 04 00 ADC   [X+4],0x0
    2281: 82 9D    JMP   0x251F
    2283: 07 F8 FE ADD   [X-8],0xFE
    2286: 0F F7 FF ADC   [X-9],0xFF
    2289: 62 D0 00 MOV   REG[0xD0],0x0
    228C: 52 F8    MOV   A,[X-8]
    228E: 53 7C    MOV   [__r1],A
    2290: 52 F7    MOV   A,[X-9]
    2292: 60 D4    MOV   REG[0xD4],A
    2294: 3E 7C    MVI   A,[__r1]
    2296: 54 0B    MOV   [X+11],A
    2298: 3E 7C    MVI   A,[__r1]
    229A: 54 0C    MOV   [X+12],A
    229C: 50 00    MOV   A,0x0
    229E: 08       PUSH  A
    229F: 50 0A    MOV   A,0xA
    22A1: 08       PUSH  A
    22A2: 52 0B    MOV   A,[X+11]
    22A4: 08       PUSH  A
    22A5: 52 0C    MOV   A,[X+12]
    22A7: 08       PUSH  A
    22A8: 52 06    MOV   A,[X+6]
    22AA: 08       PUSH  A
    22AB: 52 07    MOV   A,[X+7]
    22AD: 08       PUSH  A
    22AE: 7C 14 08 LCALL _itoa
    22B1: 38 FA    ADD   SP,0xFA
    22B3: 81 2F    JMP   0x23E3
    22B5: 07 F8 FE ADD   [X-8],0xFE
    22B8: 0F F7 FF ADC   [X-9],0xFF
    22BB: 62 D0 00 MOV   REG[0xD0],0x0
    22BE: 52 F8    MOV   A,[X-8]
    22C0: 53 7C    MOV   [__r1],A
    22C2: 52 F7    MOV   A,[X-9]
    22C4: 60 D4    MOV   REG[0xD4],A
    22C6: 3E 7C    MVI   A,[__r1]
    22C8: 53 7D    MOV   [__r0],A
    22CA: 3E 7C    MVI   A,[__r1]
    22CC: 54 0C    MOV   [X+12],A
    22CE: 51 7D    MOV   A,[__r0]
    22D0: 54 0B    MOV   [X+11],A
    22D2: 52 FA    MOV   A,[X-6]
    22D4: 53 7C    MOV   [__r1],A
    22D6: 52 F9    MOV   A,[X-7]
    22D8: 10       PUSH  X
    22D9: 58 7C    MOV   X,[__r1]
    22DB: 28       ROMX  
    22DC: 20       POP   X
    22DD: 39 75    CMP   A,0x75
    22DF: B0 1A    JNZ   0x22FA
    22E1: 50 00    MOV   A,0x0
    22E3: 08       PUSH  A
    22E4: 50 0A    MOV   A,0xA
    22E6: 08       PUSH  A
    22E7: 52 0B    MOV   A,[X+11]
    22E9: 08       PUSH  A
    22EA: 52 0C    MOV   A,[X+12]
    22EC: 08       PUSH  A
    22ED: 52 06    MOV   A,[X+6]
    22EF: 08       PUSH  A
    22F0: 52 07    MOV   A,[X+7]
    22F2: 08       PUSH  A
    22F3: 7C 1D 99 LCALL _utoa
    22F6: 38 FA    ADD   SP,0xFA
    22F8: 80 EA    JMP   0x23E3
    22FA: 62 D0 00 MOV   REG[0xD0],0x0
    22FD: 52 FA    MOV   A,[X-6]
    22FF: 53 7C    MOV   [__r1],A
    2301: 52 F9    MOV   A,[X-7]
    2303: 10       PUSH  X
    2304: 58 7C    MOV   X,[__r1]
    2306: 28       ROMX  
    2307: 20       POP   X
    2308: 39 6F    CMP   A,0x6F
    230A: B0 1A    JNZ   0x2325
    230C: 50 00    MOV   A,0x0
    230E: 08       PUSH  A
    230F: 50 08    MOV   A,0x8
    2311: 08       PUSH  A
    2312: 52 0B    MOV   A,[X+11]
    2314: 08       PUSH  A
    2315: 52 0C    MOV   A,[X+12]
    2317: 08       PUSH  A
    2318: 52 06    MOV   A,[X+6]
    231A: 08       PUSH  A
    231B: 52 07    MOV   A,[X+7]
    231D: 08       PUSH  A
    231E: 7C 1D 99 LCALL _utoa
    2321: 38 FA    ADD   SP,0xFA
    2323: 80 BF    JMP   0x23E3
    2325: 62 D0 00 MOV   REG[0xD0],0x0
    2328: 52 FA    MOV   A,[X-6]
    232A: 53 7C    MOV   [__r1],A
    232C: 52 F9    MOV   A,[X-7]
    232E: 10       PUSH  X
    232F: 58 7C    MOV   X,[__r1]
    2331: 28       ROMX  
    2332: 20       POP   X
    2333: 39 70    CMP   A,0x70
    2335: B0 39    JNZ   0x236F
    2337: 52 07    MOV   A,[X+7]
    2339: 53 7C    MOV   [__r1],A
    233B: 52 06    MOV   A,[X+6]
    233D: 53 7D    MOV   [__r0],A
    233F: 51 7C    MOV   A,[__r1]
    2341: 01 01    ADD   A,0x1
    2343: 54 07    MOV   [X+7],A
    2345: 51 7D    MOV   A,[__r0]
    2347: 09 00    ADC   A,0x0
    2349: 54 06    MOV   [X+6],A
    234B: 51 7D    MOV   A,[__r0]
    234D: 60 D5    MOV   REG[0xD5],A
    234F: 50 30    MOV   A,0x30
    2351: 3F 7C    MVI   [__r1],A
    2353: 52 07    MOV   A,[X+7]
    2355: 53 7C    MOV   [__r1],A
    2357: 52 06    MOV   A,[X+6]
    2359: 53 7D    MOV   [__r0],A
    235B: 51 7C    MOV   A,[__r1]
    235D: 01 01    ADD   A,0x1
    235F: 54 07    MOV   [X+7],A
    2361: 51 7D    MOV   A,[__r0]
    2363: 09 00    ADC   A,0x0
    2365: 54 06    MOV   [X+6],A
    2367: 51 7D    MOV   A,[__r0]
    2369: 60 D5    MOV   REG[0xD5],A
    236B: 50 78    MOV   A,0x78
    236D: 3F 7C    MVI   [__r1],A
    236F: 50 00    MOV   A,0x0
    2371: 08       PUSH  A
    2372: 50 10    MOV   A,0x10
    2374: 08       PUSH  A
    2375: 52 0B    MOV   A,[X+11]
    2377: 08       PUSH  A
    2378: 52 0C    MOV   A,[X+12]
    237A: 08       PUSH  A
    237B: 52 06    MOV   A,[X+6]
    237D: 08       PUSH  A
    237E: 52 07    MOV   A,[X+7]
    2380: 08       PUSH  A
    2381: 7C 1D 99 LCALL _utoa
    2384: 38 FA    ADD   SP,0xFA
    2386: 62 D0 00 MOV   REG[0xD0],0x0
    2389: 52 FA    MOV   A,[X-6]
    238B: 53 7C    MOV   [__r1],A
    238D: 52 F9    MOV   A,[X-7]
    238F: 10       PUSH  X
    2390: 58 7C    MOV   X,[__r1]
    2392: 28       ROMX  
    2393: 20       POP   X
    2394: 39 58    CMP   A,0x58
    2396: B0 4C    JNZ   0x23E3
    2398: 56 01 5A MOV   [X+1],0x5A
    239B: 56 00 00 MOV   [X+0],0x0
    239E: 80 33    JMP   0x23D2
    23A0: 62 D0 00 MOV   REG[0xD0],0x0
    23A3: 52 01    MOV   A,[X+1]
    23A5: 53 7C    MOV   [__r1],A
    23A7: 52 00    MOV   A,[X+0]
    23A9: 60 D4    MOV   REG[0xD4],A
    23AB: 3E 7C    MVI   A,[__r1]
    23AD: 53 7C    MOV   [__r1],A
    23AF: 50 00    MOV   A,0x0
    23B1: 08       PUSH  A
    23B2: 51 7C    MOV   A,[__r1]
    23B4: 08       PUSH  A
    23B5: 7C 1F 81 LCALL _toupper
    23B8: 38 FE    ADD   SP,0xFE
    23BA: 62 D0 00 MOV   REG[0xD0],0x0
    23BD: 51 7C    MOV   A,[__r1]
    23BF: 53 7D    MOV   [__r0],A
    23C1: 52 01    MOV   A,[X+1]
    23C3: 53 7A    MOV   [__r3],A
    23C5: 52 00    MOV   A,[X+0]
    23C7: 60 D5    MOV   REG[0xD5],A
    23C9: 51 7D    MOV   A,[__r0]
    23CB: 3F 7A    MVI   [__r3],A
    23CD: 77 01    INC   [X+1]
    23CF: 0F 00 00 ADC   [X+0],0x0
    23D2: 62 D0 00 MOV   REG[0xD0],0x0
    23D5: 52 01    MOV   A,[X+1]
    23D7: 53 7C    MOV   [__r1],A
    23D9: 52 00    MOV   A,[X+0]
    23DB: 60 D4    MOV   REG[0xD4],A
    23DD: 3E 7C    MVI   A,[__r1]
    23DF: 39 00    CMP   A,0x0
    23E1: BF BE    JNZ   0x23A0
    23E3: 56 01 5A MOV   [X+1],0x5A
    23E6: 56 00 00 MOV   [X+0],0x0
    23E9: 80 D2    JMP   0x24BC
    23EB: 07 F8 FE ADD   [X-8],0xFE
    23EE: 0F F7 FF ADC   [X-9],0xFF
    23F1: 62 D0 00 MOV   REG[0xD0],0x0
    23F4: 52 F8    MOV   A,[X-8]
    23F6: 53 7C    MOV   [__r1],A
    23F8: 52 F7    MOV   A,[X-9]
    23FA: 60 D4    MOV   REG[0xD4],A
    23FC: 3E 7C    MVI   A,[__r1]
    23FE: 3E 7C    MVI   A,[__r1]
    2400: 54 0D    MOV   [X+13],A
    2402: 10       PUSH  X
    2403: 52 0D    MOV   A,[X+13]
    2405: 08       PUSH  A
    2406: 52 FC    MOV   A,[X-4]
    2408: 53 7C    MOV   [__r1],A
    240A: 52 FB    MOV   A,[X-5]
    240C: 58 7C    MOV   X,[__r1]
    240E: 7C 13 FC LCALL __plcall
    2411: 38 FF    ADD   SP,0xFF
    2413: 20       POP   X
    2414: 77 05    INC   [X+5]
    2416: 0F 04 00 ADC   [X+4],0x0
    2419: 81 05    JMP   0x251F
    241B: 07 F8 FE ADD   [X-8],0xFE
    241E: 0F F7 FF ADC   [X-9],0xFF
    2421: 62 D0 00 MOV   REG[0xD0],0x0
    2424: 52 F8    MOV   A,[X-8]
    2426: 53 7C    MOV   [__r1],A
    2428: 52 F7    MOV   A,[X-9]
    242A: 60 D4    MOV   REG[0xD4],A
    242C: 3E 7C    MVI   A,[__r1]
    242E: 54 02    MOV   [X+2],A
    2430: 3E 7C    MVI   A,[__r1]
    2432: 54 03    MOV   [X+3],A
    2434: 3D 08 2D CMP   [X+8],0x2D
    2437: B0 45    JNZ   0x247D
    2439: 10       PUSH  X
    243A: 50 2D    MOV   A,0x2D
    243C: 08       PUSH  A
    243D: 62 D0 00 MOV   REG[0xD0],0x0
    2440: 52 FC    MOV   A,[X-4]
    2442: 53 7C    MOV   [__r1],A
    2444: 52 FB    MOV   A,[X-5]
    2446: 58 7C    MOV   X,[__r1]
    2448: 7C 13 FC LCALL __plcall
    244B: 38 FF    ADD   SP,0xFF
    244D: 20       POP   X
    244E: 77 05    INC   [X+5]
    2450: 0F 04 00 ADC   [X+4],0x0
    2453: 80 29    JMP   0x247D
    2455: 62 D0 00 MOV   REG[0xD0],0x0
    2458: 52 03    MOV   A,[X+3]
    245A: 53 7C    MOV   [__r1],A
    245C: 52 02    MOV   A,[X+2]
    245E: 10       PUSH  X
    245F: 58 7C    MOV   X,[__r1]
    2461: 28       ROMX  
    2462: 20       POP   X
    2463: 10       PUSH  X
    2464: 08       PUSH  A
    2465: 52 FC    MOV   A,[X-4]
    2467: 53 7C    MOV   [__r1],A
    2469: 52 FB    MOV   A,[X-5]
    246B: 58 7C    MOV   X,[__r1]
    246D: 7C 13 FC LCALL __plcall
    2470: 38 FF    ADD   SP,0xFF
    2472: 20       POP   X
    2473: 77 05    INC   [X+5]
    2475: 0F 04 00 ADC   [X+4],0x0
    2478: 77 03    INC   [X+3]
    247A: 0F 02 00 ADC   [X+2],0x0
    247D: 62 D0 00 MOV   REG[0xD0],0x0
    2480: 52 03    MOV   A,[X+3]
    2482: 53 7C    MOV   [__r1],A
    2484: 52 02    MOV   A,[X+2]
    2486: 10       PUSH  X
    2487: 58 7C    MOV   X,[__r1]
    2489: 28       ROMX  
    248A: 20       POP   X
    248B: 39 00    CMP   A,0x0
    248D: BF C7    JNZ   0x2455
    248F: 80 8F    JMP   0x251F
    2491: 07 F8 FE ADD   [X-8],0xFE
    2494: 0F F7 FF ADC   [X-9],0xFF
    2497: 62 D0 00 MOV   REG[0xD0],0x0
    249A: 52 F8    MOV   A,[X-8]
    249C: 53 7C    MOV   [__r1],A
    249E: 52 F7    MOV   A,[X-9]
    24A0: 60 D4    MOV   REG[0xD4],A
    24A2: 3E 7C    MVI   A,[__r1]
    24A4: 54 00    MOV   [X+0],A
    24A6: 3E 7C    MVI   A,[__r1]
    24A8: 54 01    MOV   [X+1],A
    24AA: 3D 00 00 CMP   [X+0],0x0
    24AD: B0 0E    JNZ   0x24BC
    24AF: 3D 01 00 CMP   [X+1],0x0
    24B2: B0 09    JNZ   0x24BC
    24B4: 56 03 61 MOV   [X+3],0x61
    24B7: 56 02 04 MOV   [X+2],0x4
    24BA: 8F 79    JMP   0x2434
    24BC: 3D 08 2D CMP   [X+8],0x2D
    24BF: B0 44    JNZ   0x2504
    24C1: 10       PUSH  X
    24C2: 50 2D    MOV   A,0x2D
    24C4: 08       PUSH  A
    24C5: 62 D0 00 MOV   REG[0xD0],0x0
    24C8: 52 FC    MOV   A,[X-4]
    24CA: 53 7C    MOV   [__r1],A
    24CC: 52 FB    MOV   A,[X-5]
    24CE: 58 7C    MOV   X,[__r1]
    24D0: 7C 13 FC LCALL __plcall
    24D3: 38 FF    ADD   SP,0xFF
    24D5: 20       POP   X
    24D6: 77 05    INC   [X+5]
    24D8: 0F 04 00 ADC   [X+4],0x0
    24DB: 80 28    JMP   0x2504
    24DD: 62 D0 00 MOV   REG[0xD0],0x0
    24E0: 52 01    MOV   A,[X+1]
    24E2: 53 7C    MOV   [__r1],A
    24E4: 52 00    MOV   A,[X+0]
    24E6: 60 D4    MOV   REG[0xD4],A
    24E8: 3E 7C    MVI   A,[__r1]
    24EA: 10       PUSH  X
    24EB: 08       PUSH  A
    24EC: 52 FC    MOV   A,[X-4]
    24EE: 53 7C    MOV   [__r1],A
    24F0: 52 FB    MOV   A,[X-5]
    24F2: 58 7C    MOV   X,[__r1]
    24F4: 7C 13 FC LCALL __plcall
    24F7: 38 FF    ADD   SP,0xFF
    24F9: 20       POP   X
    24FA: 77 05    INC   [X+5]
    24FC: 0F 04 00 ADC   [X+4],0x0
    24FF: 77 01    INC   [X+1]
    2501: 0F 00 00 ADC   [X+0],0x0
    2504: 62 D0 00 MOV   REG[0xD0],0x0
    2507: 52 01    MOV   A,[X+1]
    2509: 53 7C    MOV   [__r1],A
    250B: 52 00    MOV   A,[X+0]
    250D: 60 D4    MOV   REG[0xD4],A
    250F: 3E 7C    MVI   A,[__r1]
    2511: 39 00    CMP   A,0x0
    2513: BF C9    JNZ   0x24DD
    2515: 80 09    JMP   0x251F
    2517: 56 03 73 MOV   [X+3],0x73
    251A: 56 02 04 MOV   [X+2],0x4
    251D: 8F 16    JMP   0x2434
    251F: 77 FA    INC   [X-6]
    2521: 0F F9 00 ADC   [X-7],0x0
    2524: 62 D0 00 MOV   REG[0xD0],0x0
    2527: 52 FA    MOV   A,[X-6]
    2529: 53 7C    MOV   [__r1],A
    252B: 52 F9    MOV   A,[X-7]
    252D: 10       PUSH  X
    252E: 58 7C    MOV   X,[__r1]
    2530: 28       ROMX  
    2531: 20       POP   X
    2532: 39 00    CMP   A,0x0
    2534: BC 29    JNZ   0x215E
    2536: 52 05    MOV   A,[X+5]
    2538: 53 7C    MOV   [__r1],A
    253A: 52 04    MOV   A,[X+4]
    253C: 53 7D    MOV   [__r0],A
    253E: 38 EF    ADD   SP,0xEF
    2540: 20       POP   X
    2541: 7F       RET   
    2542: 10       PUSH  X
    2543: 4F       MOV   X,SP
    2544: 38 04    ADD   SP,0x4
    2546: 80 06    JMP   0x254D
    2548: 77 FC    INC   [X-4]
    254A: 0F FB 00 ADC   [X-5],0x0
    254D: 62 D0 00 MOV   REG[0xD0],0x0
    2550: 52 FC    MOV   A,[X-4]
    2552: 53 7C    MOV   [__r1],A
    2554: 52 FB    MOV   A,[X-5]
    2556: 10       PUSH  X
    2557: 58 7C    MOV   X,[__r1]
    2559: 28       ROMX  
    255A: 20       POP   X
    255B: 53 7C    MOV   [__r1],A
    255D: 50 00    MOV   A,0x0
    255F: 08       PUSH  A
    2560: 51 7C    MOV   A,[__r1]
    2562: 08       PUSH  A
    2563: 7C 1F 1E LCALL _isspace
    2566: 38 FE    ADD   SP,0xFE
    2568: 62 D0 00 MOV   REG[0xD0],0x0
    256B: 3C 7D 00 CMP   [__r0],0x0
    256E: BF D9    JNZ   0x2548
    2570: 3C 7C 00 CMP   [__r1],0x0
    2573: BF D4    JNZ   0x2548
    2575: 56 03 00 MOV   [X+3],0x0
    2578: 56 02 00 MOV   [X+2],0x0
    257B: 62 D0 00 MOV   REG[0xD0],0x0
    257E: 52 FC    MOV   A,[X-4]
    2580: 53 7C    MOV   [__r1],A
    2582: 52 FB    MOV   A,[X-5]
    2584: 10       PUSH  X
    2585: 58 7C    MOV   X,[__r1]
    2587: 28       ROMX  
    2588: 20       POP   X
    2589: 39 2D    CMP   A,0x2D
    258B: B0 0E    JNZ   0x259A
    258D: 56 03 01 MOV   [X+3],0x1
    2590: 56 02 00 MOV   [X+2],0x0
    2593: 77 FC    INC   [X-4]
    2595: 0F FB 00 ADC   [X-5],0x0
    2598: 80 18    JMP   0x25B1
    259A: 62 D0 00 MOV   REG[0xD0],0x0
    259D: 52 FC    MOV   A,[X-4]
    259F: 53 7C    MOV   [__r1],A
    25A1: 52 FB    MOV   A,[X-5]
    25A3: 10       PUSH  X
    25A4: 58 7C    MOV   X,[__r1]
    25A6: 28       ROMX  
    25A7: 20       POP   X
    25A8: 39 2B    CMP   A,0x2B
    25AA: B0 06    JNZ   0x25B1
    25AC: 77 FC    INC   [X-4]
    25AE: 0F FB 00 ADC   [X-5],0x0
    25B1: 56 01 00 MOV   [X+1],0x0
    25B4: 56 00 00 MOV   [X+0],0x0
    25B7: 80 7C    JMP   0x2634
    25B9: 62 D0 00 MOV   REG[0xD0],0x0
    25BC: 52 FC    MOV   A,[X-4]
    25BE: 53 7C    MOV   [__r1],A
    25C0: 52 FB    MOV   A,[X-5]
    25C2: 53 7D    MOV   [__r0],A
    25C4: 51 7C    MOV   A,[__r1]
    25C6: 01 01    ADD   A,0x1
    25C8: 54 FC    MOV   [X-4],A
    25CA: 51 7D    MOV   A,[__r0]
    25CC: 09 00    ADC   A,0x0
    25CE: 54 FB    MOV   [X-5],A
    25D0: 52 01    MOV   A,[X+1]
    25D2: 53 7A    MOV   [__r3],A
    25D4: 52 00    MOV   A,[X+0]
    25D6: 53 7B    MOV   [__r2],A
    25D8: 55 78 0A MOV   [__r5],0xA
    25DB: 55 79 00 MOV   [__r4],0x0
    25DE: 55 75 00 MOV   [__rX],0x0
    25E1: 55 74 00 MOV   [__rY],0x0
    25E4: 3C 79 00 CMP   [__r4],0x0
    25E7: B0 06    JNZ   0x25EE
    25E9: 3C 78 00 CMP   [__r5],0x0
    25EC: A0 1A    JZ    0x2607
    25EE: 70 FB    AND   F,0xFB
    25F0: 6E 79    RRC   [__r4]
    25F2: 6E 78    RRC   [__r5]
    25F4: D0 0C    JNC   0x2601
    25F6: 62 D0 00 MOV   REG[0xD0],0x0
    25F9: 51 7A    MOV   A,[__r3]
    25FB: 04 75    ADD   [__rX],A
    25FD: 51 7B    MOV   A,[__r2]
    25FF: 0C 74    ADC   [__rY],A
    2601: 65 7A    ASL   [__r3]
    2603: 6B 7B    RLC   [__r2]
    2605: 8F DE    JMP   0x25E4
    2607: 5F 7A 75 MOV   [__r3],[__rX]
    260A: 5F 7B 74 MOV   [__r2],[__rY]
    260D: 62 D0 00 MOV   REG[0xD0],0x0
    2610: 51 7D    MOV   A,[__r0]
    2612: 10       PUSH  X
    2613: 58 7C    MOV   X,[__r1]
    2615: 28       ROMX  
    2616: 20       POP   X
    2617: 53 7C    MOV   [__r1],A
    2619: 55 7D 00 MOV   [__r0],0x0
    261C: 51 7A    MOV   A,[__r3]
    261E: 02 7C    ADD   A,[__r1]
    2620: 53 7C    MOV   [__r1],A
    2622: 51 7B    MOV   A,[__r2]
    2624: 0A 7D    ADC   A,[__r0]
    2626: 53 7D    MOV   [__r0],A
    2628: 51 7C    MOV   A,[__r1]
    262A: 11 30    SUB   A,0x30
    262C: 54 01    MOV   [X+1],A
    262E: 51 7D    MOV   A,[__r0]
    2630: 19 00    SBB   A,0x0
    2632: 54 00    MOV   [X+0],A
    2634: 62 D0 00 MOV   REG[0xD0],0x0
    2637: 52 FC    MOV   A,[X-4]
    2639: 53 7C    MOV   [__r1],A
    263B: 52 FB    MOV   A,[X-5]
    263D: 10       PUSH  X
    263E: 58 7C    MOV   X,[__r1]
    2640: 28       ROMX  
    2641: 20       POP   X
    2642: 53 7C    MOV   [__r1],A
    2644: 50 00    MOV   A,0x0
    2646: 08       PUSH  A
    2647: 51 7C    MOV   A,[__r1]
    2649: 08       PUSH  A
    264A: 7C 1E DC LCALL _isdigit
    264D: 38 FE    ADD   SP,0xFE
    264F: 62 D0 00 MOV   REG[0xD0],0x0
    2652: 3C 7D 00 CMP   [__r0],0x0
    2655: BF 63    JNZ   0x25B9
    2657: 3C 7C 00 CMP   [__r1],0x0
    265A: BF 5E    JNZ   0x25B9
    265C: 3D 02 00 CMP   [X+2],0x0
    265F: B0 06    JNZ   0x2666
    2661: 3D 03 00 CMP   [X+3],0x0
    2664: A0 14    JZ    0x2679
    2666: 62 D0 00 MOV   REG[0xD0],0x0
    2669: 52 01    MOV   A,[X+1]
    266B: 73       CPL   A
    266C: 11 FF    SUB   A,0xFF
    266E: 53 7C    MOV   [__r1],A
    2670: 52 00    MOV   A,[X+0]
    2672: 73       CPL   A
    2673: 19 FF    SBB   A,0xFF
    2675: 53 7D    MOV   [__r0],A
    2677: 80 0C    JMP   0x2684
    2679: 62 D0 00 MOV   REG[0xD0],0x0
    267C: 52 01    MOV   A,[X+1]
    267E: 53 7C    MOV   [__r1],A
    2680: 52 00    MOV   A,[X+0]
    2682: 53 7D    MOV   [__r0],A
    2684: 38 FC    ADD   SP,0xFC
    2686: 20       POP   X
    2687: 7F       RET   
    2688: 10       PUSH  X
    2689: 4F       MOV   X,SP
    268A: 38 04    ADD   SP,0x4
    268C: 56 03 00 MOV   [X+3],0x0
    268F: 56 02 00 MOV   [X+2],0x0
    2692: 80 59    JMP   0x26EC
    2694: 52 00    MOV   A,[X+0]
    2696: 08       PUSH  A
    2697: 52 01    MOV   A,[X+1]
    2699: 08       PUSH  A
    269A: 7C 1F 1E LCALL _isspace
    269D: 38 FE    ADD   SP,0xFE
    269F: 62 D0 00 MOV   REG[0xD0],0x0
    26A2: 3C 7D 00 CMP   [__r0],0x0
    26A5: B0 06    JNZ   0x26AC
    26A7: 3C 7C 00 CMP   [__r1],0x0
    26AA: A0 18    JZ    0x26C3
    26AC: 62 D0 00 MOV   REG[0xD0],0x0
    26AF: 52 01    MOV   A,[X+1]
    26B1: 10       PUSH  X
    26B2: 08       PUSH  A
    26B3: 52 F8    MOV   A,[X-8]
    26B5: 53 7C    MOV   [__r1],A
    26B7: 52 F7    MOV   A,[X-9]
    26B9: 58 7C    MOV   X,[__r1]
    26BB: 7C 13 FC LCALL __plcall
    26BE: 38 FF    ADD   SP,0xFF
    26C0: 20       POP   X
    26C1: 80 50    JMP   0x2712
    26C3: 62 D0 00 MOV   REG[0xD0],0x0
    26C6: 52 FC    MOV   A,[X-4]
    26C8: 53 7C    MOV   [__r1],A
    26CA: 52 FB    MOV   A,[X-5]
    26CC: 53 7D    MOV   [__r0],A
    26CE: 51 7C    MOV   A,[__r1]
    26D0: 01 01    ADD   A,0x1
    26D2: 54 FC    MOV   [X-4],A
    26D4: 51 7D    MOV   A,[__r0]
    26D6: 09 00    ADC   A,0x0
    26D8: 54 FB    MOV   [X-5],A
    26DA: 52 01    MOV   A,[X+1]
    26DC: 53 7B    MOV   [__r2],A
    26DE: 51 7D    MOV   A,[__r0]
    26E0: 60 D5    MOV   REG[0xD5],A
    26E2: 51 7B    MOV   A,[__r2]
    26E4: 3F 7C    MVI   [__r1],A
    26E6: 56 03 01 MOV   [X+3],0x1
    26E9: 56 02 00 MOV   [X+2],0x0
    26EC: 62 D0 00 MOV   REG[0xD0],0x0
    26EF: 52 FA    MOV   A,[X-6]
    26F1: 53 7C    MOV   [__r1],A
    26F3: 52 F9    MOV   A,[X-7]
    26F5: 10       PUSH  X
    26F6: 58 7C    MOV   X,[__r1]
    26F8: 7C 13 FC LCALL __plcall
    26FB: 62 D0 00 MOV   REG[0xD0],0x0
    26FE: 20       POP   X
    26FF: 53 7C    MOV   [__r1],A
    2701: 55 7D 00 MOV   [__r0],0x0
    2704: 54 01    MOV   [X+1],A
    2706: 56 00 00 MOV   [X+0],0x0
    2709: 3C 7D 00 CMP   [__r0],0x0
    270C: BF 87    JNZ   0x2694
    270E: 39 00    CMP   A,0x0
    2710: BF 83    JNZ   0x2694
    2712: 62 D0 00 MOV   REG[0xD0],0x0
    2715: 52 FC    MOV   A,[X-4]
    2717: 53 7C    MOV   [__r1],A
    2719: 52 FB    MOV   A,[X-5]
    271B: 60 D5    MOV   REG[0xD5],A
    271D: 50 00    MOV   A,0x0
    271F: 3F 7C    MVI   [__r1],A
    2721: 62 D0 00 MOV   REG[0xD0],0x0
    2724: 52 03    MOV   A,[X+3]
    2726: 04 89    ADD   [errno+5],A
    2728: 52 02    MOV   A,[X+2]
    272A: 0C 88    ADC   [errno+4],A
    272C: 38 FC    ADD   SP,0xFC
    272E: 20       POP   X
    272F: 7F       RET   
    2730: 10       PUSH  X
    2731: 4F       MOV   X,SP
    2732: 38 04    ADD   SP,0x4
    2734: 56 03 00 MOV   [X+3],0x0
    2737: 56 02 00 MOV   [X+2],0x0
    273A: 80 E1    JMP   0x281C
    273C: 3D F5 00 CMP   [X-11],0x0
    273F: B0 35    JNZ   0x2775
    2741: 3D F6 10 CMP   [X-10],0x10
    2744: B0 30    JNZ   0x2775
    2746: 52 00    MOV   A,[X+0]
    2748: 08       PUSH  A
    2749: 52 01    MOV   A,[X+1]
    274B: 08       PUSH  A
    274C: 7C 1F 60 LCALL _isxdigit
    274F: 38 FE    ADD   SP,0xFE
    2751: 62 D0 00 MOV   REG[0xD0],0x0
    2754: 3C 7D 00 CMP   [__r0],0x0
    2757: B0 9B    JNZ   0x27F3
    2759: 3C 7C 00 CMP   [__r1],0x0
    275C: B0 96    JNZ   0x27F3
    275E: 62 D0 00 MOV   REG[0xD0],0x0
    2761: 52 01    MOV   A,[X+1]
    2763: 10       PUSH  X
    2764: 08       PUSH  A
    2765: 52 F8    MOV   A,[X-8]
    2767: 53 7C    MOV   [__r1],A
    2769: 52 F7    MOV   A,[X-9]
    276B: 58 7C    MOV   X,[__r1]
    276D: 7C 13 FC LCALL __plcall
    2770: 38 FF    ADD   SP,0xFF
    2772: 20       POP   X
    2773: 80 CE    JMP   0x2842
    2775: 3D F5 00 CMP   [X-11],0x0
    2778: B0 41    JNZ   0x27BA
    277A: 3D F6 08 CMP   [X-10],0x8
    277D: B0 3C    JNZ   0x27BA
    277F: 52 00    MOV   A,[X+0]
    2781: 08       PUSH  A
    2782: 52 01    MOV   A,[X+1]
    2784: 08       PUSH  A
    2785: 7C 1E DC LCALL _isdigit
    2788: 38 FE    ADD   SP,0xFE
    278A: 62 D0 00 MOV   REG[0xD0],0x0
    278D: 3C 7D 00 CMP   [__r0],0x0
    2790: B0 06    JNZ   0x2797
    2792: 3C 7C 00 CMP   [__r1],0x0
    2795: A0 0D    JZ    0x27A3
    2797: 52 01    MOV   A,[X+1]
    2799: 11 38    SUB   A,0x38
    279B: 52 00    MOV   A,[X+0]
    279D: 31 80    XOR   A,0x80
    279F: 19 80    SBB   A,0x80
    27A1: C0 51    JC    0x27F3
    27A3: 62 D0 00 MOV   REG[0xD0],0x0
    27A6: 52 01    MOV   A,[X+1]
    27A8: 10       PUSH  X
    27A9: 08       PUSH  A
    27AA: 52 F8    MOV   A,[X-8]
    27AC: 53 7C    MOV   [__r1],A
    27AE: 52 F7    MOV   A,[X-9]
    27B0: 58 7C    MOV   X,[__r1]
    27B2: 7C 13 FC LCALL __plcall
    27B5: 38 FF    ADD   SP,0xFF
    27B7: 20       POP   X
    27B8: 80 89    JMP   0x2842
    27BA: 52 00    MOV   A,[X+0]
    27BC: 08       PUSH  A
    27BD: 52 01    MOV   A,[X+1]
    27BF: 08       PUSH  A
    27C0: 7C 1E DC LCALL _isdigit
    27C3: 38 FE    ADD   SP,0xFE
    27C5: 62 D0 00 MOV   REG[0xD0],0x0
    27C8: 3C 7D 00 CMP   [__r0],0x0
    27CB: B0 27    JNZ   0x27F3
    27CD: 3C 7C 00 CMP   [__r1],0x0
    27D0: B0 22    JNZ   0x27F3
    27D2: 3D 00 00 CMP   [X+0],0x0
    27D5: B0 06    JNZ   0x27DC
    27D7: 3D 01 2D CMP   [X+1],0x2D
    27DA: A0 18    JZ    0x27F3
    27DC: 62 D0 00 MOV   REG[0xD0],0x0
    27DF: 52 01    MOV   A,[X+1]
    27E1: 10       PUSH  X
    27E2: 08       PUSH  A
    27E3: 52 F8    MOV   A,[X-8]
    27E5: 53 7C    MOV   [__r1],A
    27E7: 52 F7    MOV   A,[X-9]
    27E9: 58 7C    MOV   X,[__r1]
    27EB: 7C 13 FC LCALL __plcall
    27EE: 38 FF    ADD   SP,0xFF
    27F0: 20       POP   X
    27F1: 80 50    JMP   0x2842
    27F3: 62 D0 00 MOV   REG[0xD0],0x0
    27F6: 52 FC    MOV   A,[X-4]
    27F8: 53 7C    MOV   [__r1],A
    27FA: 52 FB    MOV   A,[X-5]
    27FC: 53 7D    MOV   [__r0],A
    27FE: 51 7C    MOV   A,[__r1]
    2800: 01 01    ADD   A,0x1
    2802: 54 FC    MOV   [X-4],A
    2804: 51 7D    MOV   A,[__r0]
    2806: 09 00    ADC   A,0x0
    2808: 54 FB    MOV   [X-5],A
    280A: 52 01    MOV   A,[X+1]
    280C: 53 7B    MOV   [__r2],A
    280E: 51 7D    MOV   A,[__r0]
    2810: 60 D5    MOV   REG[0xD5],A
    2812: 51 7B    MOV   A,[__r2]
    2814: 3F 7C    MVI   [__r1],A
    2816: 56 03 01 MOV   [X+3],0x1
    2819: 56 02 00 MOV   [X+2],0x0
    281C: 62 D0 00 MOV   REG[0xD0],0x0
    281F: 52 FA    MOV   A,[X-6]
    2821: 53 7C    MOV   [__r1],A
    2823: 52 F9    MOV   A,[X-7]
    2825: 10       PUSH  X
    2826: 58 7C    MOV   X,[__r1]
    2828: 7C 13 FC LCALL __plcall
    282B: 62 D0 00 MOV   REG[0xD0],0x0
    282E: 20       POP   X
    282F: 53 7C    MOV   [__r1],A
    2831: 55 7D 00 MOV   [__r0],0x0
    2834: 54 01    MOV   [X+1],A
    2836: 56 00 00 MOV   [X+0],0x0
    2839: 3C 7D 00 CMP   [__r0],0x0
    283C: BE FF    JNZ   0x273C
    283E: 39 00    CMP   A,0x0
    2840: BE FB    JNZ   0x273C
    2842: 62 D0 00 MOV   REG[0xD0],0x0
    2845: 52 FC    MOV   A,[X-4]
    2847: 53 7C    MOV   [__r1],A
    2849: 52 FB    MOV   A,[X-5]
    284B: 60 D5    MOV   REG[0xD5],A
    284D: 50 00    MOV   A,0x0
    284F: 3F 7C    MVI   [__r1],A
    2851: 62 D0 00 MOV   REG[0xD0],0x0
    2854: 52 03    MOV   A,[X+3]
    2856: 04 89    ADD   [errno+5],A
    2858: 52 02    MOV   A,[X+2]
    285A: 0C 88    ADC   [errno+4],A
    285C: 38 FC    ADD   SP,0xFC
    285E: 20       POP   X
    285F: 7F       RET   
__cscanf:
    2860: 10       PUSH  X
    2861: 4F       MOV   X,SP
    2862: 38 15    ADD   SP,0x15
    2864: 62 D0 00 MOV   REG[0xD0],0x0
    2867: 55 89 00 MOV   [errno+5],0x0
    286A: 55 88 00 MOV   [errno+4],0x0
    286D: 83 12    JMP   0x2B80
    286F: 3D 00 00 CMP   [X+0],0x0
    2872: B2 7D    JNZ   0x2AF0
    2874: 3D 01 25 CMP   [X+1],0x25
    2877: B2 78    JNZ   0x2AF0
    2879: 62 D0 00 MOV   REG[0xD0],0x0
    287C: 52 F8    MOV   A,[X-8]
    287E: 53 7C    MOV   [__r1],A
    2880: 52 F7    MOV   A,[X-9]
    2882: 10       PUSH  X
    2883: 58 7C    MOV   X,[__r1]
    2885: 28       ROMX  
    2886: 20       POP   X
    2887: 39 6C    CMP   A,0x6C
    2889: B0 0E    JNZ   0x2898
    288B: 56 05 01 MOV   [X+5],0x1
    288E: 56 04 00 MOV   [X+4],0x0
    2891: 77 F8    INC   [X-8]
    2893: 0F F7 00 ADC   [X-9],0x0
    2896: 80 07    JMP   0x289E
    2898: 56 05 00 MOV   [X+5],0x0
    289B: 56 04 00 MOV   [X+4],0x0
    289E: 07 F6 FE ADD   [X-10],0xFE
    28A1: 0F F5 FF ADC   [X-11],0xFF
    28A4: 62 D0 00 MOV   REG[0xD0],0x0
    28A7: 52 F6    MOV   A,[X-10]
    28A9: 53 7C    MOV   [__r1],A
    28AB: 52 F5    MOV   A,[X-11]
    28AD: 60 D4    MOV   REG[0xD4],A
    28AF: 3E 7C    MVI   A,[__r1]
    28B1: 54 02    MOV   [X+2],A
    28B3: 3E 7C    MVI   A,[__r1]
    28B5: 54 03    MOV   [X+3],A
    28B7: 52 F8    MOV   A,[X-8]
    28B9: 53 7C    MOV   [__r1],A
    28BB: 52 F7    MOV   A,[X-9]
    28BD: 10       PUSH  X
    28BE: 58 7C    MOV   X,[__r1]
    28C0: 28       ROMX  
    28C1: 20       POP   X
    28C2: 54 14    MOV   [X+20],A
    28C4: 56 13 00 MOV   [X+19],0x0
    28C7: 3D 13 00 CMP   [X+19],0x0
    28CA: B0 06    JNZ   0x28D1
    28CC: 3D 14 63 CMP   [X+20],0x63
    28CF: A0 56    JZ    0x2926
    28D1: 52 14    MOV   A,[X+20]
    28D3: 11 64    SUB   A,0x64
    28D5: 62 D0 00 MOV   REG[0xD0],0x0
    28D8: 53 74    MOV   [__rY],A
    28DA: 52 13    MOV   A,[X+19]
    28DC: 31 80    XOR   A,0x80
    28DE: 19 80    SBB   A,0x80
    28E0: 2A 74    OR    A,[__rY]
    28E2: A1 2E    JZ    0x2A11
    28E4: D0 0D    JNC   0x28F2
    28E6: 3D 13 00 CMP   [X+19],0x0
    28E9: B0 06    JNZ   0x28F0
    28EB: 3D 14 58 CMP   [X+20],0x58
    28EE: A0 72    JZ    0x2961
    28F0: 81 ED    JMP   0x2ADE
    28F2: 3D 13 00 CMP   [X+19],0x0
    28F5: B0 06    JNZ   0x28FC
    28F7: 3D 14 6F CMP   [X+20],0x6F
    28FA: A0 56    JZ    0x2951
    28FC: 3D 13 00 CMP   [X+19],0x0
    28FF: B0 06    JNZ   0x2906
    2901: 3D 14 70 CMP   [X+20],0x70
    2904: A0 5C    JZ    0x2961
    2906: 3D 13 00 CMP   [X+19],0x0
    2909: B0 06    JNZ   0x2910
    290B: 3D 14 73 CMP   [X+20],0x73
    290E: A1 AC    JZ    0x2ABB
    2910: 3D 13 00 CMP   [X+19],0x0
    2913: B0 06    JNZ   0x291A
    2915: 3D 14 75 CMP   [X+20],0x75
    2918: A0 40    JZ    0x2959
    291A: 3D 13 00 CMP   [X+19],0x0
    291D: B0 06    JNZ   0x2924
    291F: 3D 14 78 CMP   [X+20],0x78
    2922: A0 3E    JZ    0x2961
    2924: 81 B9    JMP   0x2ADE
    2926: 62 D0 00 MOV   REG[0xD0],0x0
    2929: 52 FC    MOV   A,[X-4]
    292B: 53 7C    MOV   [__r1],A
    292D: 52 FB    MOV   A,[X-5]
    292F: 10       PUSH  X
    2930: 58 7C    MOV   X,[__r1]
    2932: 7C 13 FC LCALL __plcall
    2935: 62 D0 00 MOV   REG[0xD0],0x0
    2938: 53 7D    MOV   [__r0],A
    293A: 20       POP   X
    293B: 52 03    MOV   A,[X+3]
    293D: 53 7A    MOV   [__r3],A
    293F: 52 02    MOV   A,[X+2]
    2941: 60 D5    MOV   REG[0xD5],A
    2943: 51 7D    MOV   A,[__r0]
    2945: 3F 7A    MVI   [__r3],A
    2947: 62 D0 00 MOV   REG[0xD0],0x0
    294A: 76 89    INC   [errno+5]
    294C: 0E 88 00 ADC   [errno+4],0x0
    294F: 81 99    JMP   0x2AE9
    2951: 56 07 08 MOV   [X+7],0x8
    2954: 56 06 00 MOV   [X+6],0x0
    2957: 80 0F    JMP   0x2967
    2959: 56 07 0A MOV   [X+7],0xA
    295C: 56 06 00 MOV   [X+6],0x0
    295F: 80 07    JMP   0x2967
    2961: 56 07 10 MOV   [X+7],0x10
    2964: 56 06 00 MOV   [X+6],0x0
    2967: 52 06    MOV   A,[X+6]
    2969: 08       PUSH  A
    296A: 52 07    MOV   A,[X+7]
    296C: 08       PUSH  A
    296D: 62 D0 00 MOV   REG[0xD0],0x0
    2970: 52 FA    MOV   A,[X-6]
    2972: 53 7C    MOV   [__r1],A
    2974: 52 F9    MOV   A,[X-7]
    2976: 08       PUSH  A
    2977: 51 7C    MOV   A,[__r1]
    2979: 08       PUSH  A
    297A: 52 FC    MOV   A,[X-4]
    297C: 53 7C    MOV   [__r1],A
    297E: 52 FB    MOV   A,[X-5]
    2980: 08       PUSH  A
    2981: 51 7C    MOV   A,[__r1]
    2983: 08       PUSH  A
    2984: 5A 7C    MOV   [__r1],X
    2986: 06 7C 08 ADD   [__r1],0x8
    2989: 50 07    MOV   A,0x7
    298B: 08       PUSH  A
    298C: 51 7C    MOV   A,[__r1]
    298E: 08       PUSH  A
    298F: 9D 9F    CALL  0x2730
    2991: 38 F8    ADD   SP,0xF8
    2993: 3D 04 00 CMP   [X+4],0x0
    2996: B0 06    JNZ   0x299D
    2998: 3D 05 00 CMP   [X+5],0x0
    299B: A0 3B    JZ    0x29D7
    299D: 52 06    MOV   A,[X+6]
    299F: 08       PUSH  A
    29A0: 52 07    MOV   A,[X+7]
    29A2: 08       PUSH  A
    29A3: 50 00    MOV   A,0x0
    29A5: 08       PUSH  A
    29A6: 08       PUSH  A
    29A7: 62 D0 00 MOV   REG[0xD0],0x0
    29AA: 5A 7C    MOV   [__r1],X
    29AC: 06 7C 08 ADD   [__r1],0x8
    29AF: 50 07    MOV   A,0x7
    29B1: 08       PUSH  A
    29B2: 51 7C    MOV   A,[__r1]
    29B4: 08       PUSH  A
    29B5: 7C 1A 03 LCALL _strtoul
    29B8: 38 FA    ADD   SP,0xFA
    29BA: 62 D0 00 MOV   REG[0xD0],0x0
    29BD: 52 03    MOV   A,[X+3]
    29BF: 53 78    MOV   [__r5],A
    29C1: 52 02    MOV   A,[X+2]
    29C3: 60 D5    MOV   REG[0xD5],A
    29C5: 51 7D    MOV   A,[__r0]
    29C7: 3F 78    MVI   [__r5],A
    29C9: 51 7C    MOV   A,[__r1]
    29CB: 3F 78    MVI   [__r5],A
    29CD: 51 7B    MOV   A,[__r2]
    29CF: 3F 78    MVI   [__r5],A
    29D1: 51 7A    MOV   A,[__r3]
    29D3: 3F 78    MVI   [__r5],A
    29D5: 81 13    JMP   0x2AE9
    29D7: 52 06    MOV   A,[X+6]
    29D9: 08       PUSH  A
    29DA: 52 07    MOV   A,[X+7]
    29DC: 08       PUSH  A
    29DD: 50 00    MOV   A,0x0
    29DF: 08       PUSH  A
    29E0: 08       PUSH  A
    29E1: 62 D0 00 MOV   REG[0xD0],0x0
    29E4: 5A 7C    MOV   [__r1],X
    29E6: 06 7C 08 ADD   [__r1],0x8
    29E9: 50 07    MOV   A,0x7
    29EB: 08       PUSH  A
    29EC: 51 7C    MOV   A,[__r1]
    29EE: 08       PUSH  A
    29EF: 7C 1A 03 LCALL _strtoul
    29F2: 38 FA    ADD   SP,0xFA
    29F4: 62 D0 00 MOV   REG[0xD0],0x0
    29F7: 51 7A    MOV   A,[__r3]
    29F9: 53 7C    MOV   [__r1],A
    29FB: 51 7B    MOV   A,[__r2]
    29FD: 53 7D    MOV   [__r0],A
    29FF: 52 03    MOV   A,[X+3]
    2A01: 53 7A    MOV   [__r3],A
    2A03: 52 02    MOV   A,[X+2]
    2A05: 60 D5    MOV   REG[0xD5],A
    2A07: 51 7D    MOV   A,[__r0]
    2A09: 3F 7A    MVI   [__r3],A
    2A0B: 51 7C    MOV   A,[__r1]
    2A0D: 3F 7A    MVI   [__r3],A
    2A0F: 80 D9    JMP   0x2AE9
    2A11: 50 00    MOV   A,0x0
    2A13: 08       PUSH  A
    2A14: 50 0A    MOV   A,0xA
    2A16: 08       PUSH  A
    2A17: 62 D0 00 MOV   REG[0xD0],0x0
    2A1A: 52 FA    MOV   A,[X-6]
    2A1C: 53 7C    MOV   [__r1],A
    2A1E: 52 F9    MOV   A,[X-7]
    2A20: 08       PUSH  A
    2A21: 51 7C    MOV   A,[__r1]
    2A23: 08       PUSH  A
    2A24: 52 FC    MOV   A,[X-4]
    2A26: 53 7C    MOV   [__r1],A
    2A28: 52 FB    MOV   A,[X-5]
    2A2A: 08       PUSH  A
    2A2B: 51 7C    MOV   A,[__r1]
    2A2D: 08       PUSH  A
    2A2E: 5A 7C    MOV   [__r1],X
    2A30: 06 7C 08 ADD   [__r1],0x8
    2A33: 50 07    MOV   A,0x7
    2A35: 08       PUSH  A
    2A36: 51 7C    MOV   A,[__r1]
    2A38: 08       PUSH  A
    2A39: 9C F5    CALL  0x2730
    2A3B: 38 F8    ADD   SP,0xF8
    2A3D: 3D 04 00 CMP   [X+4],0x0
    2A40: B0 06    JNZ   0x2A47
    2A42: 3D 05 00 CMP   [X+5],0x0
    2A45: A0 3B    JZ    0x2A81
    2A47: 50 00    MOV   A,0x0
    2A49: 08       PUSH  A
    2A4A: 50 0A    MOV   A,0xA
    2A4C: 08       PUSH  A
    2A4D: 50 00    MOV   A,0x0
    2A4F: 08       PUSH  A
    2A50: 08       PUSH  A
    2A51: 62 D0 00 MOV   REG[0xD0],0x0
    2A54: 5A 7C    MOV   [__r1],X
    2A56: 06 7C 08 ADD   [__r1],0x8
    2A59: 50 07    MOV   A,0x7
    2A5B: 08       PUSH  A
    2A5C: 51 7C    MOV   A,[__r1]
    2A5E: 08       PUSH  A
    2A5F: 7C 15 E1 LCALL _strtol
    2A62: 38 FA    ADD   SP,0xFA
    2A64: 62 D0 00 MOV   REG[0xD0],0x0
    2A67: 52 03    MOV   A,[X+3]
    2A69: 53 78    MOV   [__r5],A
    2A6B: 52 02    MOV   A,[X+2]
    2A6D: 60 D5    MOV   REG[0xD5],A
    2A6F: 51 7D    MOV   A,[__r0]
    2A71: 3F 78    MVI   [__r5],A
    2A73: 51 7C    MOV   A,[__r1]
    2A75: 3F 78    MVI   [__r5],A
    2A77: 51 7B    MOV   A,[__r2]
    2A79: 3F 78    MVI   [__r5],A
    2A7B: 51 7A    MOV   A,[__r3]
    2A7D: 3F 78    MVI   [__r5],A
    2A7F: 80 69    JMP   0x2AE9
    2A81: 50 00    MOV   A,0x0
    2A83: 08       PUSH  A
    2A84: 50 0A    MOV   A,0xA
    2A86: 08       PUSH  A
    2A87: 50 00    MOV   A,0x0
    2A89: 08       PUSH  A
    2A8A: 08       PUSH  A
    2A8B: 62 D0 00 MOV   REG[0xD0],0x0
    2A8E: 5A 7C    MOV   [__r1],X
    2A90: 06 7C 08 ADD   [__r1],0x8
    2A93: 50 07    MOV   A,0x7
    2A95: 08       PUSH  A
    2A96: 51 7C    MOV   A,[__r1]
    2A98: 08       PUSH  A
    2A99: 7C 15 E1 LCALL _strtol
    2A9C: 38 FA    ADD   SP,0xFA
    2A9E: 62 D0 00 MOV   REG[0xD0],0x0
    2AA1: 51 7A    MOV   A,[__r3]
    2AA3: 53 7C    MOV   [__r1],A
    2AA5: 51 7B    MOV   A,[__r2]
    2AA7: 53 7D    MOV   [__r0],A
    2AA9: 52 03    MOV   A,[X+3]
    2AAB: 53 7A    MOV   [__r3],A
    2AAD: 52 02    MOV   A,[X+2]
    2AAF: 60 D5    MOV   REG[0xD5],A
    2AB1: 51 7D    MOV   A,[__r0]
    2AB3: 3F 7A    MVI   [__r3],A
    2AB5: 51 7C    MOV   A,[__r1]
    2AB7: 3F 7A    MVI   [__r3],A
    2AB9: 80 2F    JMP   0x2AE9
    2ABB: 62 D0 00 MOV   REG[0xD0],0x0
    2ABE: 52 FA    MOV   A,[X-6]
    2AC0: 53 7C    MOV   [__r1],A
    2AC2: 52 F9    MOV   A,[X-7]
    2AC4: 08       PUSH  A
    2AC5: 51 7C    MOV   A,[__r1]
    2AC7: 08       PUSH  A
    2AC8: 52 FC    MOV   A,[X-4]
    2ACA: 53 7C    MOV   [__r1],A
    2ACC: 52 FB    MOV   A,[X-5]
    2ACE: 08       PUSH  A
    2ACF: 51 7C    MOV   A,[__r1]
    2AD1: 08       PUSH  A
    2AD2: 52 02    MOV   A,[X+2]
    2AD4: 08       PUSH  A
    2AD5: 52 03    MOV   A,[X+3]
    2AD7: 08       PUSH  A
    2AD8: 9B AE    CALL  0x2688
    2ADA: 38 FA    ADD   SP,0xFA
    2ADC: 80 0C    JMP   0x2AE9
    2ADE: 62 D0 00 MOV   REG[0xD0],0x0
    2AE1: 55 7C 00 MOV   [__r1],0x0
    2AE4: 55 7D 00 MOV   [__r0],0x0
    2AE7: 80 D9    JMP   0x2BC1
    2AE9: 77 F8    INC   [X-8]
    2AEB: 0F F7 00 ADC   [X-9],0x0
    2AEE: 80 91    JMP   0x2B80
    2AF0: 52 00    MOV   A,[X+0]
    2AF2: 08       PUSH  A
    2AF3: 52 01    MOV   A,[X+1]
    2AF5: 08       PUSH  A
    2AF6: 7C 1F 1E LCALL _isspace
    2AF9: 38 FE    ADD   SP,0xFE
    2AFB: 62 D0 00 MOV   REG[0xD0],0x0
    2AFE: 3C 7D 00 CMP   [__r0],0x0
    2B01: B0 06    JNZ   0x2B08
    2B03: 3C 7C 00 CMP   [__r1],0x0
    2B06: A0 56    JZ    0x2B5D
    2B08: 62 D0 00 MOV   REG[0xD0],0x0
    2B0B: 52 FC    MOV   A,[X-4]
    2B0D: 53 7C    MOV   [__r1],A
    2B0F: 52 FB    MOV   A,[X-5]
    2B11: 10       PUSH  X
    2B12: 58 7C    MOV   X,[__r1]
    2B14: 7C 13 FC LCALL __plcall
    2B17: 62 D0 00 MOV   REG[0xD0],0x0
    2B1A: 20       POP   X
    2B1B: 53 7C    MOV   [__r1],A
    2B1D: 55 7D 00 MOV   [__r0],0x0
    2B20: 54 01    MOV   [X+1],A
    2B22: 56 00 00 MOV   [X+0],0x0
    2B25: 3C 7D 00 CMP   [__r0],0x0
    2B28: B0 05    JNZ   0x2B2E
    2B2A: 39 00    CMP   A,0x0
    2B2C: A0 19    JZ    0x2B46
    2B2E: 52 00    MOV   A,[X+0]
    2B30: 08       PUSH  A
    2B31: 52 01    MOV   A,[X+1]
    2B33: 08       PUSH  A
    2B34: 7C 1F 1E LCALL _isspace
    2B37: 38 FE    ADD   SP,0xFE
    2B39: 62 D0 00 MOV   REG[0xD0],0x0
    2B3C: 3C 7D 00 CMP   [__r0],0x0
    2B3F: BF C8    JNZ   0x2B08
    2B41: 3C 7C 00 CMP   [__r1],0x0
    2B44: BF C3    JNZ   0x2B08
    2B46: 62 D0 00 MOV   REG[0xD0],0x0
    2B49: 52 01    MOV   A,[X+1]
    2B4B: 10       PUSH  X
    2B4C: 08       PUSH  A
    2B4D: 52 FA    MOV   A,[X-6]
    2B4F: 53 7C    MOV   [__r1],A
    2B51: 52 F9    MOV   A,[X-7]
    2B53: 58 7C    MOV   X,[__r1]
    2B55: 7C 13 FC LCALL __plcall
    2B58: 38 FF    ADD   SP,0xFF
    2B5A: 20       POP   X
    2B5B: 80 24    JMP   0x2B80
    2B5D: 62 D0 00 MOV   REG[0xD0],0x0
    2B60: 52 FC    MOV   A,[X-4]
    2B62: 53 7C    MOV   [__r1],A
    2B64: 52 FB    MOV   A,[X-5]
    2B66: 10       PUSH  X
    2B67: 58 7C    MOV   X,[__r1]
    2B69: 7C 13 FC LCALL __plcall
    2B6C: 62 D0 00 MOV   REG[0xD0],0x0
    2B6F: 20       POP   X
    2B70: 53 7C    MOV   [__r1],A
    2B72: 50 00    MOV   A,0x0
    2B74: 3B 00    CMP   A,[X+0]
    2B76: B0 07    JNZ   0x2B7E
    2B78: 51 7C    MOV   A,[__r1]
    2B7A: 3B 01    CMP   A,[X+1]
    2B7C: A0 03    JZ    0x2B80
    2B7E: 80 32    JMP   0x2BB1
    2B80: 62 D0 00 MOV   REG[0xD0],0x0
    2B83: 52 F8    MOV   A,[X-8]
    2B85: 53 7C    MOV   [__r1],A
    2B87: 52 F7    MOV   A,[X-9]
    2B89: 53 7D    MOV   [__r0],A
    2B8B: 51 7C    MOV   A,[__r1]
    2B8D: 01 01    ADD   A,0x1
    2B8F: 54 F8    MOV   [X-8],A
    2B91: 51 7D    MOV   A,[__r0]
    2B93: 09 00    ADC   A,0x0
    2B95: 54 F7    MOV   [X-9],A
    2B97: 51 7D    MOV   A,[__r0]
    2B99: 10       PUSH  X
    2B9A: 58 7C    MOV   X,[__r1]
    2B9C: 28       ROMX  
    2B9D: 20       POP   X
    2B9E: 53 7C    MOV   [__r1],A
    2BA0: 55 7D 00 MOV   [__r0],0x0
    2BA3: 54 01    MOV   [X+1],A
    2BA5: 56 00 00 MOV   [X+0],0x0
    2BA8: 3C 7D 00 CMP   [__r0],0x0
    2BAB: BC C3    JNZ   0x286F
    2BAD: 39 00    CMP   A,0x0
    2BAF: BC BF    JNZ   0x286F
    2BB1: 62 D0 00 MOV   REG[0xD0],0x0
    2BB4: 51 89    MOV   A,[errno+5]
    2BB6: 08       PUSH  A
    2BB7: 51 88    MOV   A,[errno+4]
    2BB9: 62 D0 00 MOV   REG[0xD0],0x0
    2BBC: 53 7D    MOV   [__r0],A
    2BBE: 18       POP   A
    2BBF: 53 7C    MOV   [__r1],A
    2BC1: 38 EB    ADD   SP,0xEB
    2BC3: 20       POP   X
    2BC4: 7F       RET   
_cstrcspn:
    2BC5: 10       PUSH  X
    2BC6: 4F       MOV   X,SP
    2BC7: 38 04    ADD   SP,0x4
    2BC9: 56 03 00 MOV   [X+3],0x0
    2BCC: 56 02 00 MOV   [X+2],0x0
    2BCF: 80 5A    JMP   0x2C2A
    2BD1: 56 01 00 MOV   [X+1],0x0
    2BD4: 56 00 00 MOV   [X+0],0x0
    2BD7: 80 32    JMP   0x2C0A
    2BD9: 62 D0 00 MOV   REG[0xD0],0x0
    2BDC: 52 01    MOV   A,[X+1]
    2BDE: 03 FA    ADD   A,[X-6]
    2BE0: 53 7C    MOV   [__r1],A
    2BE2: 52 00    MOV   A,[X+0]
    2BE4: 0B F9    ADC   A,[X-7]
    2BE6: 10       PUSH  X
    2BE7: 58 7C    MOV   X,[__r1]
    2BE9: 28       ROMX  
    2BEA: 20       POP   X
    2BEB: 53 7D    MOV   [__r0],A
    2BED: 52 FC    MOV   A,[X-4]
    2BEF: 53 7A    MOV   [__r3],A
    2BF1: 52 FB    MOV   A,[X-5]
    2BF3: 60 D4    MOV   REG[0xD4],A
    2BF5: 3E 7A    MVI   A,[__r3]
    2BF7: 3A 7D    CMP   A,[__r0]
    2BF9: B0 0B    JNZ   0x2C05
    2BFB: 52 03    MOV   A,[X+3]
    2BFD: 53 7C    MOV   [__r1],A
    2BFF: 52 02    MOV   A,[X+2]
    2C01: 53 7D    MOV   [__r0],A
    2C03: 80 3F    JMP   0x2C43
    2C05: 77 01    INC   [X+1]
    2C07: 0F 00 00 ADC   [X+0],0x0
    2C0A: 62 D0 00 MOV   REG[0xD0],0x0
    2C0D: 52 01    MOV   A,[X+1]
    2C0F: 03 FA    ADD   A,[X-6]
    2C11: 53 7C    MOV   [__r1],A
    2C13: 52 00    MOV   A,[X+0]
    2C15: 0B F9    ADC   A,[X-7]
    2C17: 10       PUSH  X
    2C18: 58 7C    MOV   X,[__r1]
    2C1A: 28       ROMX  
    2C1B: 20       POP   X
    2C1C: 39 00    CMP   A,0x0
    2C1E: BF BA    JNZ   0x2BD9
    2C20: 77 FC    INC   [X-4]
    2C22: 0F FB 00 ADC   [X-5],0x0
    2C25: 77 03    INC   [X+3]
    2C27: 0F 02 00 ADC   [X+2],0x0
    2C2A: 62 D0 00 MOV   REG[0xD0],0x0
    2C2D: 52 FC    MOV   A,[X-4]
    2C2F: 53 7C    MOV   [__r1],A
    2C31: 52 FB    MOV   A,[X-5]
    2C33: 60 D4    MOV   REG[0xD4],A
    2C35: 3E 7C    MVI   A,[__r1]
    2C37: 39 00    CMP   A,0x0
    2C39: BF 97    JNZ   0x2BD1
    2C3B: 52 03    MOV   A,[X+3]
    2C3D: 53 7C    MOV   [__r1],A
    2C3F: 52 02    MOV   A,[X+2]
    2C41: 53 7D    MOV   [__r0],A
    2C43: 38 FC    ADD   SP,0xFC
    2C45: 20       POP   X
    2C46: 7F       RET   
_cstrpbrk:
    2C47: 10       PUSH  X
    2C48: 4F       MOV   X,SP
    2C49: 38 02    ADD   SP,0x2
    2C4B: 52 F9    MOV   A,[X-7]
    2C4D: 08       PUSH  A
    2C4E: 52 FA    MOV   A,[X-6]
    2C50: 08       PUSH  A
    2C51: 52 FB    MOV   A,[X-5]
    2C53: 08       PUSH  A
    2C54: 52 FC    MOV   A,[X-4]
    2C56: 08       PUSH  A
    2C57: 7C 2B C5 LCALL _cstrcspn
    2C5A: 38 FC    ADD   SP,0xFC
    2C5C: 62 D0 00 MOV   REG[0xD0],0x0
    2C5F: 51 7C    MOV   A,[__r1]
    2C61: 54 01    MOV   [X+1],A
    2C63: 51 7D    MOV   A,[__r0]
    2C65: 54 00    MOV   [X+0],A
    2C67: 52 01    MOV   A,[X+1]
    2C69: 03 FC    ADD   A,[X-4]
    2C6B: 53 7C    MOV   [__r1],A
    2C6D: 52 00    MOV   A,[X+0]
    2C6F: 0B FB    ADC   A,[X-5]
    2C71: 60 D4    MOV   REG[0xD4],A
    2C73: 3E 7C    MVI   A,[__r1]
    2C75: 39 00    CMP   A,0x0
    2C77: A0 0F    JZ    0x2C87
    2C79: 52 01    MOV   A,[X+1]
    2C7B: 03 FC    ADD   A,[X-4]
    2C7D: 53 7C    MOV   [__r1],A
    2C7F: 52 00    MOV   A,[X+0]
    2C81: 0B FB    ADC   A,[X-5]
    2C83: 53 7D    MOV   [__r0],A
    2C85: 80 0A    JMP   0x2C90
    2C87: 62 D0 00 MOV   REG[0xD0],0x0
    2C8A: 55 7C 00 MOV   [__r1],0x0
    2C8D: 55 7D 00 MOV   [__r0],0x0
    2C90: 38 FE    ADD   SP,0xFE
    2C92: 20       POP   X
    2C93: 7F       RET   
_cstrspn:
    2C94: 10       PUSH  X
    2C95: 4F       MOV   X,SP
    2C96: 38 04    ADD   SP,0x4
    2C98: 56 03 00 MOV   [X+3],0x0
    2C9B: 56 02 00 MOV   [X+2],0x0
    2C9E: 80 81    JMP   0x2D20
    2CA0: 56 01 00 MOV   [X+1],0x0
    2CA3: 56 00 00 MOV   [X+0],0x0
    2CA6: 80 2E    JMP   0x2CD5
    2CA8: 62 D0 00 MOV   REG[0xD0],0x0
    2CAB: 52 01    MOV   A,[X+1]
    2CAD: 03 FA    ADD   A,[X-6]
    2CAF: 53 7C    MOV   [__r1],A
    2CB1: 52 00    MOV   A,[X+0]
    2CB3: 0B F9    ADC   A,[X-7]
    2CB5: 10       PUSH  X
    2CB6: 58 7C    MOV   X,[__r1]
    2CB8: 28       ROMX  
    2CB9: 20       POP   X
    2CBA: 53 7D    MOV   [__r0],A
    2CBC: 52 03    MOV   A,[X+3]
    2CBE: 03 FC    ADD   A,[X-4]
    2CC0: 53 7A    MOV   [__r3],A
    2CC2: 52 02    MOV   A,[X+2]
    2CC4: 0B FB    ADC   A,[X-5]
    2CC6: 60 D4    MOV   REG[0xD4],A
    2CC8: 3E 7A    MVI   A,[__r3]
    2CCA: 3A 7D    CMP   A,[__r0]
    2CCC: B0 03    JNZ   0x2CD0
    2CCE: 80 1C    JMP   0x2CEB
    2CD0: 77 01    INC   [X+1]
    2CD2: 0F 00 00 ADC   [X+0],0x0
    2CD5: 62 D0 00 MOV   REG[0xD0],0x0
    2CD8: 52 01    MOV   A,[X+1]
    2CDA: 03 FA    ADD   A,[X-6]
    2CDC: 53 7C    MOV   [__r1],A
    2CDE: 52 00    MOV   A,[X+0]
    2CE0: 0B F9    ADC   A,[X-7]
    2CE2: 10       PUSH  X
    2CE3: 58 7C    MOV   X,[__r1]
    2CE5: 28       ROMX  
    2CE6: 20       POP   X
    2CE7: 39 00    CMP   A,0x0
    2CE9: BF BE    JNZ   0x2CA8
    2CEB: 62 D0 00 MOV   REG[0xD0],0x0
    2CEE: 52 01    MOV   A,[X+1]
    2CF0: 03 FA    ADD   A,[X-6]
    2CF2: 53 7C    MOV   [__r1],A
    2CF4: 52 00    MOV   A,[X+0]
    2CF6: 0B F9    ADC   A,[X-7]
    2CF8: 10       PUSH  X
    2CF9: 58 7C    MOV   X,[__r1]
    2CFB: 28       ROMX  
    2CFC: 20       POP   X
    2CFD: 53 7D    MOV   [__r0],A
    2CFF: 52 03    MOV   A,[X+3]
    2D01: 03 FC    ADD   A,[X-4]
    2D03: 53 7A    MOV   [__r3],A
    2D05: 52 02    MOV   A,[X+2]
    2D07: 0B FB    ADC   A,[X-5]
    2D09: 60 D4    MOV   REG[0xD4],A
    2D0B: 3E 7A    MVI   A,[__r3]
    2D0D: 3A 7D    CMP   A,[__r0]
    2D0F: A0 0B    JZ    0x2D1B
    2D11: 52 03    MOV   A,[X+3]
    2D13: 53 7C    MOV   [__r1],A
    2D15: 52 02    MOV   A,[X+2]
    2D17: 53 7D    MOV   [__r0],A
    2D19: 80 23    JMP   0x2D3D
    2D1B: 77 03    INC   [X+3]
    2D1D: 0F 02 00 ADC   [X+2],0x0
    2D20: 62 D0 00 MOV   REG[0xD0],0x0
    2D23: 52 03    MOV   A,[X+3]
    2D25: 03 FC    ADD   A,[X-4]
    2D27: 53 7C    MOV   [__r1],A
    2D29: 52 02    MOV   A,[X+2]
    2D2B: 0B FB    ADC   A,[X-5]
    2D2D: 60 D4    MOV   REG[0xD4],A
    2D2F: 3E 7C    MVI   A,[__r1]
    2D31: 39 00    CMP   A,0x0
    2D33: BF 6C    JNZ   0x2CA0
    2D35: 52 03    MOV   A,[X+3]
    2D37: 53 7C    MOV   [__r1],A
    2D39: 52 02    MOV   A,[X+2]
    2D3B: 53 7D    MOV   [__r0],A
    2D3D: 38 FC    ADD   SP,0xFC
    2D3F: 20       POP   X
    2D40: 7F       RET   
_cstrtok:
    2D41: 10       PUSH  X
    2D42: 4F       MOV   X,SP
    2D43: 38 06    ADD   SP,0x6
    2D45: 3D FB 00 CMP   [X-5],0x0
    2D48: B0 06    JNZ   0x2D4F
    2D4A: 3D FC 00 CMP   [X-4],0x0
    2D4D: A0 0B    JZ    0x2D59
    2D4F: 52 FC    MOV   A,[X-4]
    2D51: 54 05    MOV   [X+5],A
    2D53: 52 FB    MOV   A,[X-5]
    2D55: 54 04    MOV   [X+4],A
    2D57: 80 0C    JMP   0x2D64
    2D59: 62 D0 00 MOV   REG[0xD0],0x0
    2D5C: 51 8B    MOV   A,[errno+7]
    2D5E: 54 05    MOV   [X+5],A
    2D60: 51 8A    MOV   A,[errno+6]
    2D62: 54 04    MOV   [X+4],A
    2D64: 52 05    MOV   A,[X+5]
    2D66: 54 01    MOV   [X+1],A
    2D68: 52 04    MOV   A,[X+4]
    2D6A: 54 00    MOV   [X+0],A
    2D6C: 3D 00 00 CMP   [X+0],0x0
    2D6F: B0 11    JNZ   0x2D81
    2D71: 3D 01 00 CMP   [X+1],0x0
    2D74: B0 0C    JNZ   0x2D81
    2D76: 62 D0 00 MOV   REG[0xD0],0x0
    2D79: 55 7C 00 MOV   [__r1],0x0
    2D7C: 55 7D 00 MOV   [__r0],0x0
    2D7F: 80 A0    JMP   0x2E20
    2D81: 52 F9    MOV   A,[X-7]
    2D83: 08       PUSH  A
    2D84: 52 FA    MOV   A,[X-6]
    2D86: 08       PUSH  A
    2D87: 52 00    MOV   A,[X+0]
    2D89: 08       PUSH  A
    2D8A: 52 01    MOV   A,[X+1]
    2D8C: 08       PUSH  A
    2D8D: 7C 2C 94 LCALL _cstrspn
    2D90: 38 FC    ADD   SP,0xFC
    2D92: 62 D0 00 MOV   REG[0xD0],0x0
    2D95: 51 7C    MOV   A,[__r1]
    2D97: 03 01    ADD   A,[X+1]
    2D99: 54 01    MOV   [X+1],A
    2D9B: 51 7D    MOV   A,[__r0]
    2D9D: 0B 00    ADC   A,[X+0]
    2D9F: 54 00    MOV   [X+0],A
    2DA1: 52 01    MOV   A,[X+1]
    2DA3: 53 7C    MOV   [__r1],A
    2DA5: 52 00    MOV   A,[X+0]
    2DA7: 60 D4    MOV   REG[0xD4],A
    2DA9: 3E 7C    MVI   A,[__r1]
    2DAB: 39 00    CMP   A,0x0
    2DAD: B0 09    JNZ   0x2DB7
    2DAF: 55 7C 00 MOV   [__r1],0x0
    2DB2: 55 7D 00 MOV   [__r0],0x0
    2DB5: 80 6A    JMP   0x2E20
    2DB7: 52 F9    MOV   A,[X-7]
    2DB9: 08       PUSH  A
    2DBA: 52 FA    MOV   A,[X-6]
    2DBC: 08       PUSH  A
    2DBD: 52 00    MOV   A,[X+0]
    2DBF: 08       PUSH  A
    2DC0: 52 01    MOV   A,[X+1]
    2DC2: 08       PUSH  A
    2DC3: 7C 2C 47 LCALL _cstrpbrk
    2DC6: 38 FC    ADD   SP,0xFC
    2DC8: 62 D0 00 MOV   REG[0xD0],0x0
    2DCB: 51 7C    MOV   A,[__r1]
    2DCD: 54 03    MOV   [X+3],A
    2DCF: 51 7D    MOV   A,[__r0]
    2DD1: 54 02    MOV   [X+2],A
    2DD3: 3D 02 00 CMP   [X+2],0x0
    2DD6: B0 06    JNZ   0x2DDD
    2DD8: 3D 03 00 CMP   [X+3],0x0
    2DDB: A0 2E    JZ    0x2E0A
    2DDD: 62 D0 00 MOV   REG[0xD0],0x0
    2DE0: 52 03    MOV   A,[X+3]
    2DE2: 53 7C    MOV   [__r1],A
    2DE4: 52 02    MOV   A,[X+2]
    2DE6: 60 D4    MOV   REG[0xD4],A
    2DE8: 3E 7C    MVI   A,[__r1]
    2DEA: 39 00    CMP   A,0x0
    2DEC: A0 1D    JZ    0x2E0A
    2DEE: 52 03    MOV   A,[X+3]
    2DF0: 53 7C    MOV   [__r1],A
    2DF2: 52 02    MOV   A,[X+2]
    2DF4: 53 7D    MOV   [__r0],A
    2DF6: 51 7C    MOV   A,[__r1]
    2DF8: 01 01    ADD   A,0x1
    2DFA: 54 03    MOV   [X+3],A
    2DFC: 51 7D    MOV   A,[__r0]
    2DFE: 09 00    ADC   A,0x0
    2E00: 54 02    MOV   [X+2],A
    2E02: 51 7D    MOV   A,[__r0]
    2E04: 60 D5    MOV   REG[0xD5],A
    2E06: 50 00    MOV   A,0x0
    2E08: 3F 7C    MVI   [__r1],A
    2E0A: 62 D0 00 MOV   REG[0xD0],0x0
    2E0D: 52 03    MOV   A,[X+3]
    2E0F: 53 8B    MOV   [errno+7],A
    2E11: 52 02    MOV   A,[X+2]
    2E13: 53 8A    MOV   [errno+6],A
    2E15: 62 D0 00 MOV   REG[0xD0],0x0
    2E18: 52 01    MOV   A,[X+1]
    2E1A: 53 7C    MOV   [__r1],A
    2E1C: 52 00    MOV   A,[X+0]
    2E1E: 53 7D    MOV   [__r0],A
    2E20: 38 FA    ADD   SP,0xFA
    2E22: 20       POP   X
    2E23: 7F       RET   
