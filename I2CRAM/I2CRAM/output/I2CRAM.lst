FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 0F 7C LJMP  _Counter16_ISR     (0153)     ljmp	_Counter16_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 08 97 LJMP  _UART_TX_ISR       (0157)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 08 98 LJMP  _UART_RX_ISR       (0161)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 0D BF LJMP  _I2CHW_ISR         (0213)     ljmp	_I2CHW_ISR
0063: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [errno+108],0x0    (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [errno+109],0x0    (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 08 2C LCALL 0x082C             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 07    MOV   A,0x7              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 1F    MOV   X,0x1F             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 7F    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 7F    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 7F    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 7E    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 7F    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 7F FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 7E    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 7E    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 7F    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 7F FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 7E    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 12 59 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0727: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_i2cram_Bank1
                                        (0019) export LoadConfigTBL_i2cram_Bank0
                                        (0020) export LoadConfigTBL_i2cram_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_i2cram_Bank0:
                                        (0023) ;  Instance name Counter16, User Module Counter16
                                        (0024) ;       Instance name Counter16, Block Name CNTR16_LSB(DBB00)
                                        (0025) 	db		23h, 00h		;Counter16_CONTROL_LSB_REG(DBB00CR0)
                                        (0026) 	db		21h, 9eh		;Counter16_PERIOD_LSB_REG(DBB00DR1)
                                        (0027) 	db		22h, 4fh		;Counter16_COMPARE_LSB_REG(DBB00DR2)
                                        (0028) ;       Instance name Counter16, Block Name CNTR16_MSB(DBB01)
                                        (0029) 	db		27h, 00h		;Counter16_CONTROL_MSB_REG(DBB01CR0)
                                        (0030) 	db		25h, 00h		;Counter16_PERIOD_MSB_REG(DBB01DR1)
                                        (0031) 	db		26h, 00h		;Counter16_COMPARE_MSB_REG(DBB01DR2)
                                        (0032) ;  Instance name I2CHW, User Module I2CHW
                                        (0033) ;  Instance name LCD, User Module LCD
                                        (0034) ;  Instance name UART, User Module UART
                                        (0035) ;       Instance name UART, Block Name RX(DCB03)
                                        (0036) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0037) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0038) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0039) ;       Instance name UART, Block Name TX(DCB02)
                                        (0040) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0041) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0042) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0043) ;  Global Register values Bank 0
                                        (0044) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0045) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0046) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0047) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0048) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0049) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0050) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0051) 	db		b0h, 30h		; Row_0_InputMux register (RDI0RI)
                                        (0052) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0053) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0054) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0055) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0056) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0057) 	db		b6h, 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0058) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0059) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0060) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0061) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0062) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0063) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0064) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0065) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0066) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0067) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0068) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0069) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0070) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0071) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0072) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0073) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0074) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0075) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0076) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0077) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0078) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0079) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0080) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0081) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0082) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0083) 	db		ffh
                                        (0084) LoadConfigTBL_i2cram_Bank1:
                                        (0085) ;  Instance name Counter16, User Module Counter16
                                        (0086) ;       Instance name Counter16, Block Name CNTR16_LSB(DBB00)
                                        (0087) 	db		20h, 11h		;Counter16_FUNC_LSB_REG(DBB00FN)
                                        (0088) 	db		21h, 15h		;Counter16_INPUT_LSB_REG(DBB00IN)
                                        (0089) 	db		22h, 40h		;Counter16_OUTPUT_LSB_REG(DBB00OU)
                                        (0090) ;       Instance name Counter16, Block Name CNTR16_MSB(DBB01)
                                        (0091) 	db		24h, 31h		;Counter16_FUNC_MSB_REG(DBB01FN)
                                        (0092) 	db		25h, 35h		;Counter16_INPUT_MSB_REG(DBB01IN)
                                        (0093) 	db		26h, 44h		;Counter16_OUTPUT_MSB_REG(DBB01OU)
                                        (0094) ;  Instance name I2CHW, User Module I2CHW
                                        (0095) ;  Instance name LCD, User Module LCD
                                        (0096) ;  Instance name UART, User Module UART
                                        (0097) ;       Instance name UART, Block Name RX(DCB03)
                                        (0098) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0099) 	db		2dh, e8h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0100) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0101) ;       Instance name UART, Block Name TX(DCB02)
                                        (0102) 	db		28h, 0dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0103) 	db		29h, 08h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0104) 	db		2ah, 47h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0105) ;  Global Register values Bank 1
                                        (0106) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0107) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0108) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0109) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0110) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0111) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0112) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0113) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0114) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0115) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0116) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0117) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0118) 	db		e1h, 1fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0119) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0120) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0121) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0122) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0123) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0124) 	db		ffh
                                        (0125) AREA psoc_config(rom, rel)
                                        (0126) LoadConfigTBL_i2cram_Ordered:
                                        (0127) ;  Ordered Global Register values
                                        (0128) 	M8C_SetBank0
0729: 62 00 00 MOV   REG[0x0],0x0       (0129) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
072C: 71 10    OR    F,0x10             
                                        (0130) 	M8C_SetBank1
072E: 62 00 00 MOV   REG[0x0],0x0       (0131) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0731: 62 01 FF MOV   REG[0x1],0xFF      (0132) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0734: 70 EF    AND   F,0xEF             
                                        (0133) 	M8C_SetBank0
0736: 62 03 FF MOV   REG[0x3],0xFF      (0134) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0739: 62 02 00 MOV   REG[0x2],0x0       (0135) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
073C: 71 10    OR    F,0x10             
                                        (0136) 	M8C_SetBank1
073E: 62 02 00 MOV   REG[0x2],0x0       (0137) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0741: 62 03 00 MOV   REG[0x3],0x0       (0138) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0744: 70 EF    AND   F,0xEF             
                                        (0139) 	M8C_SetBank0
0746: 62 01 00 MOV   REG[0x1],0x0       (0140) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0749: 62 04 A0 MOV   REG[0x4],0xA0      (0141) 	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
074C: 71 10    OR    F,0x10             
                                        (0142) 	M8C_SetBank1
074E: 62 04 A0 MOV   REG[0x4],0xA0      (0143) 	mov	reg[04h], a0h		; Port_1_DriveMode_0 register (PRT1DM0)
0751: 62 05 FF MOV   REG[0x5],0xFF      (0144) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0754: 70 EF    AND   F,0xEF             
                                        (0145) 	M8C_SetBank0
0756: 62 07 BF MOV   REG[0x7],0xBF      (0146) 	mov	reg[07h], bfh		; Port_1_DriveMode_2 register (PRT1DM2)
0759: 62 06 40 MOV   REG[0x6],0x40      (0147) 	mov	reg[06h], 40h		; Port_1_GlobalSelect register (PRT1GS)
075C: 71 10    OR    F,0x10             
                                        (0148) 	M8C_SetBank1
075E: 62 06 00 MOV   REG[0x6],0x0       (0149) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0761: 62 07 00 MOV   REG[0x7],0x0       (0150) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0764: 70 EF    AND   F,0xEF             
                                        (0151) 	M8C_SetBank0
0766: 62 05 00 MOV   REG[0x5],0x0       (0152) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0769: 62 08 00 MOV   REG[0x8],0x0       (0153) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
076C: 71 10    OR    F,0x10             
                                        (0154) 	M8C_SetBank1
076E: 62 08 FF MOV   REG[0x8],0xFF      (0155) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
0771: 62 09 00 MOV   REG[0x9],0x0       (0156) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
0774: 70 EF    AND   F,0xEF             
                                        (0157) 	M8C_SetBank0
0776: 62 0B 00 MOV   REG[0xB],0x0       (0158) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
0779: 62 0A 80 MOV   REG[0xA],0x80      (0159) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
077C: 71 10    OR    F,0x10             
                                        (0160) 	M8C_SetBank1
077E: 62 0A 00 MOV   REG[0xA],0x0       (0161) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0781: 62 0B 00 MOV   REG[0xB],0x0       (0162) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0784: 70 EF    AND   F,0xEF             
                                        (0163) 	M8C_SetBank0
0786: 62 09 00 MOV   REG[0x9],0x0       (0164) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0789: 62 0C 00 MOV   REG[0xC],0x0       (0165) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
078C: 71 10    OR    F,0x10             
                                        (0166) 	M8C_SetBank1
078E: 62 0C 00 MOV   REG[0xC],0x0       (0167) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0791: 62 0D 00 MOV   REG[0xD],0x0       (0168) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0794: 70 EF    AND   F,0xEF             
                                        (0169) 	M8C_SetBank0
0796: 62 0F 00 MOV   REG[0xF],0x0       (0170) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0799: 62 0E 00 MOV   REG[0xE],0x0       (0171) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
079C: 71 10    OR    F,0x10             
                                        (0172) 	M8C_SetBank1
079E: 62 0E 00 MOV   REG[0xE],0x0       (0173) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
07A1: 62 0F 00 MOV   REG[0xF],0x0       (0174) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
07A4: 70 EF    AND   F,0xEF             
                                        (0175) 	M8C_SetBank0
07A6: 62 0D 00 MOV   REG[0xD],0x0       (0176) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
07A9: 62 10 00 MOV   REG[0x10],0x0      (0177) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
07AC: 71 10    OR    F,0x10             
                                        (0178) 	M8C_SetBank1
07AE: 62 10 00 MOV   REG[0x10],0x0      (0179) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
07B1: 62 11 00 MOV   REG[0x11],0x0      (0180) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
07B4: 70 EF    AND   F,0xEF             
                                        (0181) 	M8C_SetBank0
07B6: 62 13 00 MOV   REG[0x13],0x0      (0182) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
07B9: 62 12 00 MOV   REG[0x12],0x0      (0183) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
07BC: 71 10    OR    F,0x10             
                                        (0184) 	M8C_SetBank1
07BE: 62 12 00 MOV   REG[0x12],0x0      (0185) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
07C1: 62 13 00 MOV   REG[0x13],0x0      (0186) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
07C4: 70 EF    AND   F,0xEF             
                                        (0187) 	M8C_SetBank0
07C6: 62 11 00 MOV   REG[0x11],0x0      (0188) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
07C9: 62 14 00 MOV   REG[0x14],0x0      (0189) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
07CC: 71 10    OR    F,0x10             
                                        (0190) 	M8C_SetBank1
07CE: 62 14 00 MOV   REG[0x14],0x0      (0191) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
07D1: 62 15 00 MOV   REG[0x15],0x0      (0192) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
07D4: 70 EF    AND   F,0xEF             
                                        (0193) 	M8C_SetBank0
07D6: 62 17 00 MOV   REG[0x17],0x0      (0194) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
07D9: 62 16 00 MOV   REG[0x16],0x0      (0195) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
07DC: 71 10    OR    F,0x10             
                                        (0196) 	M8C_SetBank1
07DE: 62 16 00 MOV   REG[0x16],0x0      (0197) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
07E1: 62 17 00 MOV   REG[0x17],0x0      (0198) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
07E4: 70 EF    AND   F,0xEF             
                                        (0199) 	M8C_SetBank0
07E6: 62 15 00 MOV   REG[0x15],0x0      (0200) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
07E9: 62 18 00 MOV   REG[0x18],0x0      (0201) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
07EC: 71 10    OR    F,0x10             
                                        (0202) 	M8C_SetBank1
07EE: 62 18 00 MOV   REG[0x18],0x0      (0203) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
07F1: 62 19 00 MOV   REG[0x19],0x0      (0204) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
07F4: 70 EF    AND   F,0xEF             
                                        (0205) 	M8C_SetBank0
07F6: 62 1B 00 MOV   REG[0x1B],0x0      (0206) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
07F9: 62 1A 00 MOV   REG[0x1A],0x0      (0207) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
07FC: 71 10    OR    F,0x10             
                                        (0208) 	M8C_SetBank1
07FE: 62 1A 00 MOV   REG[0x1A],0x0      (0209) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0801: 62 1B 00 MOV   REG[0x1B],0x0      (0210) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0804: 70 EF    AND   F,0xEF             
                                        (0211) 	M8C_SetBank0
0806: 62 19 00 MOV   REG[0x19],0x0      (0212) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0809: 62 1C 00 MOV   REG[0x1C],0x0      (0213) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
080C: 71 10    OR    F,0x10             
                                        (0214) 	M8C_SetBank1
080E: 62 1C 00 MOV   REG[0x1C],0x0      (0215) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0811: 62 1D 00 MOV   REG[0x1D],0x0      (0216) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0814: 70 EF    AND   F,0xEF             
                                        (0217) 	M8C_SetBank0
0816: 62 1F 00 MOV   REG[0x1F],0x0      (0218) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0819: 62 1E 00 MOV   REG[0x1E],0x0      (0219) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
081C: 71 10    OR    F,0x10             
                                        (0220) 	M8C_SetBank1
081E: 62 1E 00 MOV   REG[0x1E],0x0      (0221) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0821: 62 1F 00 MOV   REG[0x1F],0x0      (0222) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0824: 70 EF    AND   F,0xEF             
                                        (0223) 	M8C_SetBank0
0826: 62 1D 00 MOV   REG[0x1D],0x0      (0224) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0829: 70 EF    AND   F,0xEF             
                                        (0225) 	M8C_SetBank0
082B: 7F       RET                      (0226) 	ret
                                        (0227) 
                                        (0228) 
                                        (0229) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_i2cram
                                        (0026) export _LoadConfig_i2cram
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
082C: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
082F: 55 01 FF MOV   [0x1],0xFF         (0066) 	mov		[Port_2_DriveMode_0_SHADE], ffh
0832: 55 02 00 MOV   [0x2],0x0          (0067) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0068) 
0835: 7C 08 3C LCALL 0x083C             (0069) 	lcall	LoadConfig_i2cram
0838: 7C 07 27 LCALL 0x0727             (0070) 	lcall	LoadConfigTBL_i2cram_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
083B: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration i2cram
                                        (0078) ;
                                        (0079) ;    Load configuration registers for i2cram.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_i2cram:
                                        (0096)  LoadConfig_i2cram:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
083C: 10       PUSH  X                  (0099) 	push	x
083D: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
083F: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
0841: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
0842: 50 05    MOV   A,0x5              (0104)     mov     A, >LoadConfigTBL_i2cram_Bank0
0844: 57 06    MOV   X,0x6              (0105)     mov     X, <LoadConfigTBL_i2cram_Bank0
0846: 7C 08 57 LCALL 0x0857             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
0849: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
084B: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
084C: 50 05    MOV   A,0x5              (0111)     mov     A, >LoadConfigTBL_i2cram_Bank1
084E: 57 6D    MOV   X,0x6D             (0112)     mov     X, <LoadConfigTBL_i2cram_Bank1
0850: 7C 08 57 LCALL 0x0857             (0113)     lcall   LoadConfig              ; Load the bank 1 values
0853: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
0855: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
0856: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
0857: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
0859: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
085A: 08       PUSH  A                  (0143)     push    A
085B: 4F       MOV   X,SP               (0144)     mov     X, SP
085C: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
085F: D0 04    JNC   0x0864             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0861: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
0864: 18       POP   A                  (0149)     pop     A
0865: 20       POP   X                  (0150)     pop     X
0866: 70 EF    AND   F,0xEF             
0868: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
086B: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
086C: 08       PUSH  A                  (0156)     push    A
086D: 28       ROMX                     (0157)     romx                            ; Load register address from table
086E: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
0870: A0 1F    JZ    0x0890             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
0872: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
0873: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
0876: A0 03    JZ    0x087A             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0878: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
087A: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
087C: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
087D: 20       POP   X                  (0167)     pop     X
087E: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
087F: 09 00    ADC   A,0x0              (0169)     adc     A, 0
0881: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
0882: 08       PUSH  A                  (0171)     push    A
0883: 28       ROMX                     (0172)     romx                            ; load config data from the table
0884: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
0885: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
0887: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
0889: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
088A: 20       POP   X                  (0177)     pop     X
088B: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
088C: 09 00    ADC   A,0x0              (0179)     adc     A, 0
088E: 8F D7    JMP   0x0866             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0890: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
0892: 70 3F    AND   F,0x3F             
0894: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
0896: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
0897: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
0898: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
0899: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
089C: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
089F: 7F       RET                      (0182)    ret
08A0: 41 E1 FB AND   REG[0xE1],0xFB     
08A3: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
08A6: 7F       RET                      (0214)    ret
08A7: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
08A9: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
08AB: A0 07    JZ    0x08B3             (0249)    jz    .SetModeRegEmpty
08AD: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
08B0: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
08B2: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
08B3: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
08B6: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
08B8: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
08B9: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
08BB: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
08BD: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
08BF: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
08C0: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
08C3: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
08C6: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
08C7: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
08C9: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
08CA: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
08CC: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
08CD: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
08CF: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
08D0: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
08D2: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
08D3: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
08D5: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
08D7: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
08D9: A0 06    JZ    0x08E0             (0492)    jz   .SetTxCmpMode
                                        (0493) 
08DB: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
08DE: 80 04    JMP   0x08E3             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
08E0: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
08E3: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
08E5: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
08E6: 08       PUSH  A                  (0536)    push A
08E7: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
08E9: A0 06    JZ    0x08F0             (0538)    jz   .DisRxInt
08EB: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
08EE: 80 04    JMP   0x08F3             (0541)    jmp  .CheckTxInt
08F0: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
08F3: 18       POP   A                  (0547)    pop  A
08F4: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
08F6: A0 06    JZ    0x08FD             (0549)    jz   .DisTxInt
08F8: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
08FB: 80 04    JMP   0x0900             (0552)    jmp  .End_IntCntl
08FD: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0900: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0911: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0912: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0913: 67       ASR   A                  (0603)    asr   A
0914: 67       ASR   A                  (0604)    asr   A
0915: 67       ASR   A                  (0605)    asr   A
0916: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0918: FF E7    INDEX 0x0901             (0607)    index UART_HEX_STR                  ; Get Hex value
091A: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
091C: 18       POP   A                  (0609)    pop   A                             ; Restore value
091D: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
091F: FF E0    INDEX 0x0901             (0611)    index UART_HEX_STR                  ; Get Hex value
0921: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0923: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0924: 4B       SWAP  A,X                (0645)    swap  A,X
0925: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
0927: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
0928: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
092A: 7F       RET                      (0650)    ret
092B: 49 2B 10 TST   REG[0x2B],0x10     
092E: AF FC    JZ    _UART_PutChar      
0930: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0932: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0933: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
0936: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
0938: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
093A: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
093B: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
093D: 08       PUSH  A                  (0756)    push A
093E: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0940: B0 04    JNZ   0x0945             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0942: 18       POP   A                  (0759)    pop  A
0943: 80 0B    JMP   0x094F             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0945: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0947: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0948: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0949: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
094B: B0 03    JNZ   0x094F             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
094D: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
094E: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
094F: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0951: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0952: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0954: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0956: 08       PUSH  A                  (0819)    push A
0957: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0959: B0 07    JNZ   0x0961             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
095B: 18       POP   A                  (0822)    pop  A
095C: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
095E: 4B       SWAP  A,X                (0824)    swap A,X
095F: 80 07    JMP   0x0967             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0961: 18       POP   A                  (0828)    pop  A
0962: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0964: 4B       SWAP  A,X                (0830)    swap A,X
0965: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0967: 7F       RET                      (0836)    ret
0968: 70 BF    AND   F,0xBF             
096A: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
096C: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
096E: A0 06    JZ    0x0975             (0872)    jz    End_PutString                           ; Check for end of string
0970: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0972: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0973: 8F F8    JMP   0x096C             (0875)    jmp   .PutStringLoop                          ; Get next character
0975: 70 3F    AND   F,0x3F             
0977: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0979: 7F       RET                      (0879)    ret
097A: 70 BF    AND   F,0xBF             
097C: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
097F: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0980: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0982: A0 1A    JZ    0x099D             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0984: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
0986: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0988: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
098A: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
098C: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
098E: 49 2B 10 TST   REG[0x2B],0x10     
0991: AF FC    JZ    0x098E             
0993: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0995: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
0996: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0999: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
099B: 8F E4    JMP   0x0980             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
099D: 70 3F    AND   F,0x3F             
099F: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
09A1: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
09A2: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
09A3: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
09A6: B0 06    JNZ   0x09AD             (0980)    jnz   .CW_WRITEIT
09A8: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
09AB: A0 1D    JZ    0x09C9             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
09AD: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
09AE: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
09B0: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
09B2: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
09B3: 49 2B 10 TST   REG[0x2B],0x10     
09B6: AF FC    JZ    0x09B3             
09B8: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
09BA: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
09BB: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
09BE: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
09C1: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
09C4: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
09C7: 8F DB    JMP   0x09A3             (0995)    jmp   .CW_Loop
09C9: 70 3F    AND   F,0x3F             
09CB: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
09CD: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
09CE: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
09CF: 10       PUSH  X                  (1030)    push  X
09D0: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
09D1: A0 0B    JZ    0x09DD             (1032)    jz    .End_CPutString
09D3: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
09D5: 20       POP   X                  (1034)    pop   X
09D6: 18       POP   A                  (1035)    pop   A
09D7: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
09D8: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
09DA: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
09DB: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
09DD: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
09DF: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
09E0: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
09E2: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
09E4: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
09E6: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
09E8: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
09E9: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
09EA: 10       PUSH  X                  (0209)     push  X
09EB: 28       ROMX                     (0210)     romx                               ; Get character from ROM
09EC: B0 04    JNZ   0x09F1             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
09EE: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
09EF: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
09F0: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
09F1: 90 44    CALL  LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
09F3: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
09F4: 18       POP   A                  (0220)     pop   A
09F5: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
09F6: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
09F8: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
09F9: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0A0B: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0A0C: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0A0D: 67       ASR   A                  (0262)     asr   A
0A0E: 67       ASR   A                  (0263)     asr   A
0A0F: 67       ASR   A                  (0264)     asr   A
0A10: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0A12: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0A14: 90 21    CALL  LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
0A16: 18       POP   A                  (0268)     pop   A                            ; Restore value
0A17: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0A19: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0A1B: 90 1A    CALL  LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0A1D: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0A1E: 4B       SWAP  A,X                (0305)     swap  A,X
0A1F: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0A21: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0A22: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0A24: 7F       RET                      (0310)     ret
0A25: 70 BF    AND   F,0xBF             
0A27: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0A29: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0A2B: A0 06    JZ    0x0A32             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0A2D: 90 08    CALL  LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
0A2F: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0A30: 8F F8    JMP   0x0A29             (0351)     jmp   .Loop_PrString               ; Go get next character
0A32: 70 3F    AND   F,0x3F             
0A34: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0A36: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0A37: 90 65    CALL  0x0A9E             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0A39: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0A3A: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0A3B: 67       ASR   A                  (0390)     asr   A
0A3C: 67       ASR   A                  (0391)     asr   A
0A3D: 67       ASR   A                  (0392)     asr   A
0A3E: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0A40: 90 3B    CALL  0x0A7D             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0A42: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0A43: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0A45: 40       NOP                      (0397)     nop
0A46: 40       NOP                      (0398)     nop
0A47: 40       NOP                      (0399)     nop
0A48: 90 33    CALL  0x0A7D             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0A4A: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0A4B: 90 51    CALL  0x0A9E             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0A4D: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0A4E: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0A4F: 67       ASR   A                  (0436)     asr   A
0A50: 67       ASR   A                  (0437)     asr   A
0A51: 67       ASR   A                  (0438)     asr   A
0A52: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0A54: 90 09    CALL  0x0A5F             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0A56: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0A57: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0A59: 40       NOP                      (0443)     nop
0A5A: 40       NOP                      (0444)     nop
0A5B: 40       NOP                      (0445)     nop
0A5C: 90 01    CALL  0x0A5F             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0A5E: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0A5F: 08       PUSH  A                  (0477)     push  A
0A60: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0A63: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0A66: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
0A68: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0A6A: 18       POP   A                  (0483)     pop   A
0A6B: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0A6D: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0A6F: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0A71: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0A73: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0A75: 40       NOP                      (0489)     nop
0A76: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0A78: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0A7A: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0A7C: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0A7D: 08       PUSH  A                  (0523)     push  A
0A7E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0A81: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0A84: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0A87: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
0A89: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0A8B: 18       POP   A                  (0530)     pop   A
0A8C: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0A8E: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0A90: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0A92: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0A94: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0A96: 40       NOP                      (0536)     NOP
0A97: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0A99: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0A9B: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0A9D: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0A9E: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0A9F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0AA2: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0AA5: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
0AA7: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0AA9: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0AAC: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0AAE: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0AB0: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0AB2: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0AB4: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0AB7: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
0AB9: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0ABB: 40       NOP                      (0586)     NOP
                                        (0587) 
0ABC: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0ABD: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0ABF: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0AC2: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
0AC4: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0AC6: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0AC7: 40       NOP                      (0597)     nop
0AC8: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0ACA: 08       PUSH  A                  (0610)     push  A
0ACB: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0ACE: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
0AD0: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0AD2: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0AD3: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0AD4: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0AD5: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0AD8: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
0ADA: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0ADC: 40       NOP                      (0623)     nop
0ADD: 40       NOP                      (0624)     nop
                                        (0625) 
0ADE: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0AE1: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
0AE3: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0AE5: 18       POP   A                  (0630)     pop   A
0AE6: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0AE8: A0 04    JZ    0x0AED             (0633)     jz    .UNLOCK
0AEA: 79       DEC   X                  (0634)     dec   X
0AEB: BF D3    JNZ   0x0ABF             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0AED: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0AEE: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0AF1: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0AF3: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0AF5: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0AF7: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0AF9: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0AFA: 7F       RET                      (0646)     ret
0AFB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0AFE: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0B01: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0B04: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
0B07: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0B09: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0B0B: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0B0D: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0B0F: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0B11: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0B13: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0B15: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
0B17: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0B19: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0B1B: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0B1D: 9F 40    CALL  0x0A5F             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0B1F: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0B21: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0B23: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0B25: 9F 38    CALL  0x0A5F             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0B27: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0B29: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0B2B: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0B2D: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0B2F: 9F 2E    CALL  0x0A5F             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0B31: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0B33: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0B35: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0B37: 9F 26    CALL  0x0A5F             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0B39: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0B3B: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0B3D: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0B3F: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0B41: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0B43: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0B45: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0B47: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
0B49: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0B4B: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0B4D: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0B4F: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0B51: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0B53: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0B55: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0B57: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0B59: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0B5B: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0B5D: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0B5F: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0B61: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0B63: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0B65: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0B67: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0B69: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0B6E: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0B70: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0B71: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0B73: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0B74: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0B76: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0B77: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0B79: 70 3F    AND   F,0x3F             
0B7B: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0B7D: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0B7E: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0B80: 78       DEC   A                  (0828)     dec   A
0B81: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0B83: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0B8C: 08       PUSH  A                  (0871)     push  A
0B8D: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0B8F: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0B91: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0B93: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0B95: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0B97: D0 06    JNC   0x0B9E             (0877)     jnc   .Delay50u_End
0B99: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0B9B: 78       DEC   A                  (0880)     dec   A                              ; [4]
0B9C: BF FE    JNZ   0x0B9B             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0B9E: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0B9F: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\i2chwrsrcinits.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHW.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) include "PSoCGPIOINT.inc"
                                        (0026) include "PSoCAPI.inc"
                                        (0027) 
                                        (0028) ;-----------------------------------------------
                                        (0029) ; include instance specific register definitions
                                        (0030) ;-----------------------------------------------
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ;  Global Symbols
                                        (0034) ;-----------------------------------------------
                                        (0035) ;-------------------------------------------------------------------
                                        (0036) ;  Declare the functions global for both assembler and C compiler.
                                        (0037) ;
                                        (0038) ;  Note that there are two names for each API. First name is
                                        (0039) ;  assembler reference. Name with underscore is name refence for
                                        (0040) ;  C compiler.  Calling function in C source code does not require
                                        (0041) ;  the underscore.
                                        (0042) ;-------------------------------------------------------------------
                                        (0043) 
                                        (0044) export    I2CHW_ResumeInt
                                        (0045) export   _I2CHW_ResumeInt
                                        (0046) export    I2CHW_EnableInt
                                        (0047) export   _I2CHW_EnableInt
                                        (0048) export    I2CHW_ClearInt
                                        (0049) export   _I2CHW_ClearInt
                                        (0050) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0051) export    I2CHW_EnableSlave
                                        (0052) export   _I2CHW_EnableSlave
                                        (0053) ENDIF
                                        (0054) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0055) export    I2CHW_EnableMstr
                                        (0056) export   _I2CHW_EnableMstr
                                        (0057) ENDIF
                                        (0058) export    I2CHW_Start
                                        (0059) export   _I2CHW_Start
                                        (0060) export    I2CHW_DisableInt
                                        (0061) export   _I2CHW_DisableInt
                                        (0062) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0063) export    I2CHW_DisableSlave
                                        (0064) export   _I2CHW_DisableSlave
                                        (0065) ENDIF
                                        (0066) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0067) export    I2CHW_DisableMstr
                                        (0068) export   _I2CHW_DisableMstr
                                        (0069) ENDIF
                                        (0070) export    I2CHW_Stop
                                        (0071) export   _I2CHW_Stop
                                        (0072) 
                                        (0073) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0074)  IF (I2CHW_CY8C22x45)
                                        (0075) export    I2CHW_EnableHWAddrCheck
                                        (0076) export   _I2CHW_EnableHWAddrCheck
                                        (0077) export    I2CHW_DisableHWAddrCheck
                                        (0078) export   _I2CHW_DisableHWAddrCheck
                                        (0079)  ENDIF
                                        (0080) ENDIF
                                        (0081) 
                                        (0082) AREA UserModules (ROM, REL)
                                        (0083) 
                                        (0084) .SECTION
                                        (0085) 
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;  FUNCTION NAME: I2CHW_Start
                                        (0088) ;
                                        (0089) ;  DESCRIPTION:
                                        (0090) ;   Initialize the I2CHW I2C bus interface.
                                        (0091) ;
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;
                                        (0094) ;  ARGUMENTS:
                                        (0095) ;
                                        (0096) ;  RETURNS: none
                                        (0097) ;
                                        (0098) ;  SIDE EFFECTS:
                                        (0099) ;    The A and X registers may be modified by this or future implementations
                                        (0100) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0101) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0102) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0103) ;    functions.
                                        (0104) ;          
                                        (0105)  I2CHW_Start:
                                        (0106) _I2CHW_Start:
                                        (0107)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0108) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0109)  IF (I2CHW_CY8C22x45)
                                        (0110)    M8C_SetBank1
                                        (0111)    mov   reg[I2CHW_ADDR], I2CHW_SLAVE_ADDR;I2CHW_HW_ADDR_EN
                                        (0112)    M8C_SetBank0
                                        (0113)  ENDIF
                                        (0114) ENDIF
                                        (0115)     RAM_EPILOGUE RAM_USE_CLASS_1
0BA0: 7F       RET                      (0116)     ret
                                        (0117) .ENDSECTION
                                        (0118) 
                                        (0119) .SECTION
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;  FUNCTION NAME: I2CHW_ResumeInt
                                        (0122) ;
                                        (0123) ;  DESCRIPTION:
                                        (0124) ;     reEnables SDA interrupt allowing start condition detection. 
                                        (0125) ;     Skips clearing INT_CLR3 by entering the EnableInt at ResumeIntEntry:.
                                        (0126) ;     Remember to call the global interrupt enable function by using
                                        (0127) ;     the macro: M8C_EnableGInt.
                                        (0128) ;-----------------------------------------------------------------------------
                                        (0129) ;  ARGUMENTS: none
                                        (0130) ;
                                        (0131) ;  RETURNS: none
                                        (0132) ;
                                        (0133) ;  SIDE EFFECTS:
                                        (0134) ;    The A and X registers may be modified by this or future implementations
                                        (0135) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0136) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0137) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0138) ;    functions.
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140)  I2CHW_ResumeInt:
                                        (0141) _I2CHW_ResumeInt:
                                        (0142)     RAM_PROLOGUE RAM_USE_CLASS_1
0BA1: 80 04    JMP   0x0BA6             (0143)     jmp ResumeIntEntry
0BA3: 62 DD FE MOV   REG[0xDD],0xFE     
0BA6: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0144)     
                                        (0145) ;-----------------------------------------------------------------------------
                                        (0146) ;  FUNCTION NAME: I2CHW_EnableInt
                                        (0147) ;
                                        (0148) ;  DESCRIPTION:
                                        (0149) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0150) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0151) ;
                                        (0152) ;-----------------------------------------------------------------------------
                                        (0153) ;
                                        (0154) ;  ARGUMENTS: none
                                        (0155) ;
                                        (0156) ;  RETURNS: none
                                        (0157) ;
                                        (0158) ;  SIDE EFFECTS:
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165)  I2CHW_EnableInt:
                                        (0166) _I2CHW_EnableInt:
                                        (0167)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)     ;first clear any pending interrupts
                                        (0169)     M8C_ClearIntFlag INT_CLR3, I2CHW_INT_MASK
                                        (0170) ResumeIntEntry:
                                        (0171)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_1
0BA9: 7F       RET                      (0173)     ret
0BAA: 62 DD FE MOV   REG[0xDD],0xFE     
                                        (0174) 
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: I2CHW_ClearInt
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;     Clears only the I2C interrupt in the INT_CLR3 register.
                                        (0183) ;
                                        (0184) ;-----------------------------------------------------------------------------
                                        (0185) ;
                                        (0186) ;  ARGUMENTS: none
                                        (0187) ;
                                        (0188) ;  RETURNS: none
                                        (0189) ;
                                        (0190) ;  SIDE EFFECTS:
                                        (0191) ;    The A and X registers may be modified by this or future implementations
                                        (0192) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0193) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0194) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0195) ;    functions.
                                        (0196) ;          
                                        (0197)  I2CHW_ClearInt:
                                        (0198) _I2CHW_ClearInt:
                                        (0199)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0200)     M8C_ClearIntFlag INT_CLR3, I2CHW_INT_MASK
                                        (0201)     RAM_EPILOGUE RAM_USE_CLASS_1
0BAD: 7F       RET                      (0202)     ret
0BAE: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0203)     
                                        (0204) .ENDSECTION
                                        (0205) 
                                        (0206) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))	
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: I2CHW_EnableMstr
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0213) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0214) ;
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS: none
                                        (0218) ;
                                        (0219) ;  RETURNS: none
                                        (0220) ;
                                        (0221) ;  SIDE EFFECTS:
                                        (0222) ;    The A and X registers may be modified by this or future implementations
                                        (0223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0225) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0226) ;    functions.
                                        (0227) ;          
                                        (0228)  I2CHW_EnableMstr:
                                        (0229) _I2CHW_EnableMstr:
                                        (0230)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231) 	;;CDT 28399
                                        (0232) 	RAM_SETPAGE_CUR >I2CHW_bStatus
0BB1: 26 03 7F AND   [0x3],0x7F         (0233) 	and [I2CHW_bStatus], ~0x80 ;; ~I2CHW_ISR_ACTIVE
0BB4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0234) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0BB7: 26 05 7F AND   [0x5],0x7F         (0235)     and    [I2CHW_RsrcStatus], ~0x80;;~I2CHW_ISR_ACTIVE        ; Make sure internal control variables weren't corrupted previous to start.
0BBA: 43 D6 02 OR    REG[0xD6],0x2      
                                        (0236)     BitSetI2CHW_CFG I2C_M_EN                                         ;Enable SDA interupt
                                        (0237)     RAM_EPILOGUE RAM_USE_CLASS_1
0BBD: 7F       RET                      (0238)     ret
0BBE: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) ENDIF
                                        (0242) 
                                        (0243) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0244) .SECTION
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  FUNCTION NAME: I2CHW_EnableSlave
                                        (0247) ;
                                        (0248) ;  DESCRIPTION:
                                        (0249) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0250) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0251) ;
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS: none
                                        (0255) ;
                                        (0256) ;  RETURNS: none
                                        (0257) ;
                                        (0258) ;  SIDE EFFECTS:
                                        (0259) ;    The A and X registers may be modified by this or future implementations
                                        (0260) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0261) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0262) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0263) ;    functions.
                                        (0264) ;          
                                        (0265)  I2CHW_EnableSlave:
                                        (0266) _I2CHW_EnableSlave:
                                        (0267)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0268)     
                                        (0269)     M8C_SetBank1 ;The SDA and SCL pins are setting to Hi-z drive mode
                                        (0270)     and reg[I2CHWSDA_DriveMode_0_ADDR],~(I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0271)     or  reg[I2CHWSDA_DriveMode_1_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0272)     M8C_SetBank0
                                        (0273)     or  reg[I2CHWSDA_DriveMode_2_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0274)    
                                        (0275)     BitSetI2CHW_CFG I2C_S_EN                                         ;Enable SDA interrupt
                                        (0276)     nop
                                        (0277)     nop
                                        (0278)     nop
                                        (0279)     nop
                                        (0280)     nop
                                        (0281)    
                                        (0282)     M8C_SetBank1 ;The SDA and SCL pins are restored to Open Drain Low drive mode
                                        (0283)     or reg[I2CHWSDA_DriveMode_0_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0284)     or reg[I2CHWSDA_DriveMode_1_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0285)     M8C_SetBank0
                                        (0286)     or reg[I2CHWSDA_DriveMode_2_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0287)     
                                        (0288)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0289)     ret
                                        (0290) 
                                        (0291) .ENDSECTION
                                        (0292) ENDIF
                                        (0293) 
                                        (0294) .SECTION
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;  FUNCTION NAME: I2CHW_DisableInt
                                        (0297) ;  FUNCTION NAME: I2CHW_Stop
                                        (0298) ;
                                        (0299) ;  DESCRIPTION:
                                        (0300) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: none
                                        (0305) ;
                                        (0306) ;  RETURNS: none
                                        (0307) ;
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315)  I2CHW_DisableInt:
                                        (0316) _I2CHW_DisableInt:
                                        (0317)  I2CHW_Stop:
                                        (0318) _I2CHW_Stop:
                                        (0319)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0320)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0321)     RAM_EPILOGUE RAM_USE_CLASS_1
0BC1: 7F       RET                      (0322)     ret
0BC2: 41 D6 FD AND   REG[0xD6],0xFD     
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME: I2CHW_DisableSlave
                                        (0330) ;
                                        (0331) ;  DESCRIPTION:
                                        (0332) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0333) ;
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;
                                        (0336) ;  ARGUMENTS: none
                                        (0337) ;
                                        (0338) ;  RETURNS: none
                                        (0339) ;
                                        (0340) ;  SIDE EFFECTS:
                                        (0341) ;    The A and X registers may be modified by this or future implementations
                                        (0342) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0343) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0344) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0345) ;    functions.
                                        (0346) ;          
                                        (0347)  I2CHW_DisableSlave:
                                        (0348) _I2CHW_DisableSlave:
                                        (0349)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0350)     BitClrI2CHW_CFG I2C_S_EN                                         ;Disable the Slave
                                        (0351)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0352)     ret
                                        (0353) 
                                        (0354) .ENDSECTION
                                        (0355) ENDIF
                                        (0356) 
                                        (0357) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0358) .SECTION
                                        (0359) ;-----------------------------------------------------------------------------
                                        (0360) ;  FUNCTION NAME: I2CHW_DisableMstr
                                        (0361) ;
                                        (0362) ;  DESCRIPTION:
                                        (0363) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0364) ;
                                        (0365) ;-----------------------------------------------------------------------------
                                        (0366) ;
                                        (0367) ;  ARGUMENTS: none
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378)  I2CHW_DisableMstr:
                                        (0379) _I2CHW_DisableMstr:
                                        (0380)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0381)     BitClrI2CHW_CFG I2C_M_EN                                         ;Disable the Master
                                        (0382)     RAM_EPILOGUE RAM_USE_CLASS_1
0BC5: 7F       RET                      (0383)    ret
                                        (0384) 
                                        (0385) .ENDSECTION
                                        (0386) ENDIF
                                        (0387) 
                                        (0388) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0389)  IF (I2CHW_CY8C22x45)
                                        (0390)  .SECTION
                                        (0391) ;-----------------------------------------------------------------------------
                                        (0392) ;  FUNCTION NAME: void  I2CHW_EnableHWAddrCheck(void)
                                        (0393) ;
                                        (0394) ;  DESCRIPTION:
                                        (0395) ;   Set respective bit to engage the HardWare Address Recognition 
                                        (0396) ;   feature in I2C slave block.
                                        (0397) ;
                                        (0398) ;-----------------------------------------------------------------------------
                                        (0399) ;
                                        (0400) ;  ARGUMENTS: none
                                        (0401) ;
                                        (0402) ;  RETURNS: none
                                        (0403) ;
                                        (0404) ;  SIDE EFFECTS:
                                        (0405) ;    If the HardWare Address Recognition feature is enabled, the ROM registers reading does not work.
                                        (0406) ;    The HardWare Address Recognition feature should be disabled for using ROM registers.
                                        (0407) ;
                                        (0408) ;    The A and X registers may be modified by this or future implementations
                                        (0409) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0410) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0411) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0412) ;    functions.
                                        (0413) ;
                                        (0414)  I2CHW_EnableHWAddrCheck:
                                        (0415) _I2CHW_EnableHWAddrCheck:
                                        (0416)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0417)    M8C_SetBank1
                                        (0418)    or    reg[I2CHW_ADDR], I2CHW_HW_ADDR_EN
                                        (0419)    M8C_SetBank0
                                        (0420)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0421)    ret
                                        (0422) .ENDSECTION
                                        (0423) 
                                        (0424) .SECTION
                                        (0425) ;-----------------------------------------------------------------------------
                                        (0426) ;  FUNCTION NAME: void  I2CHW_DisableHWAddrCheck(void)
                                        (0427) ;
                                        (0428) ;  DESCRIPTION:
                                        (0429) ;   Clear respective bit to disengage the HardWare Address Recognition 
                                        (0430) ;   feature in I2C slave block.
                                        (0431) ;
                                        (0432) ;-----------------------------------------------------------------------------
                                        (0433) ;
                                        (0434) ;  ARGUMENTS: none
                                        (0435) ;
                                        (0436) ;  RETURNS: none
                                        (0437) ;
                                        (0438) ;  SIDE EFFECTS:
                                        (0439) ;    The A and X registers may be modified by this or future implementations
                                        (0440) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0441) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0442) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0443) ;    functions.
                                        (0444) ;
                                        (0445)  I2CHW_DisableHWAddrCheck:
                                        (0446) _I2CHW_DisableHWAddrCheck:
                                        (0447)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0448)    M8C_SetBank1
                                        (0449)    and   reg[I2CHW_ADDR], ~I2CHW_HW_ADDR_EN
                                        (0450)    M8C_SetBank0
                                        (0451)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0452)    ret
                                        (0453) .ENDSECTION
                                        (0454)  ENDIF
                                        (0455) ENDIF
                                        (0456) 
                                        (0457) ; End of File I2CHW.asm
FILE: lib\i2chwmstr.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0BC6: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: I2CHWMSTR.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: <UMName> User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) include "I2CHWMstr.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) 
                                        (0031) export   I2CHW_fSendRepeatStart
                                        (0032) export  _I2CHW_fSendRepeatStart
                                        (0033) export   I2CHW_fSendStart
                                        (0034) export  _I2CHW_fSendStart
                                        (0035) export   I2CHW_SendStop
                                        (0036) export  _I2CHW_SendStop
                                        (0037) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0038) export  _I2CHW_fReadBytes
                                        (0039) export  _I2CHW_bWriteBytes
                                        (0040) export  _I2CHW_bWriteCBytes
                                        (0041) 
                                        (0042) export   I2CHW_fWrite
                                        (0043) export  _I2CHW_fWrite
                                        (0044) 
                                        (0045) export   I2CHW_bRead
                                        (0046) export  _I2CHW_bRead
                                        (0047) 
                                        (0048) export    I2CHW_bReadBusStatus
                                        (0049) export   _I2CHW_bReadBusStatus
                                        (0050) 
                                        (0051) 
                                        (0052) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0053) 
                                        (0054) export   I2CHW_fReadBytes
                                        (0055) export   I2CHW_bWriteBytes
                                        (0056) export   I2CHW_bWriteCBytes
                                        (0057) 
                                        (0058) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0059) 
                                        (0060) ;-------------------------------------------------------------------
                                        (0061) ;  Declare the varables for both the assembler and C compiler.
                                        (0062) ;
                                        (0063) ;-------------------------------------------------------------------
                                        (0064) export  I2CHW_bStatus
                                        (0065) export _I2CHW_bStatus
                                        (0066) 
                                        (0067) ;-----------------------------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;-----------------------------------------------
                                        (0070) area InterruptRAM(RAM, REL, CON)
                                        (0071) 
                                        (0072) _I2CHW_bStatus:
                                        (0073)  I2CHW_bStatus:                        blk   1  ; Status during transfers
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) ;-----------------------------------------------
                                        (0077) ;  EQUATES
                                        (0078) ;-----------------------------------------------
                                        (0079) I2CHW_SLAVE_ACKed:                     equ 0x01 ; This bit set if Slave ACKed Master
                                        (0080) I2CHW_SEND_ACK:                        equ 0x10 ; If this flag set, Master should send ACK
                                        (0081) 
                                        (0082) 
                                        (0083) .SECTION
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;  FUNCTION NAME: I2CHW_fReadBytes
                                        (0086) ;
                                        (0087) ;  DESCRIPTION:
                                        (0088) ;       Read Multiple bytes from a slave.  Use the ISR to perform operation.
                                        (0089) ;-----------------------------------------------------------------------------
                                        (0090) ;
                                        (0091) ;  ARGUMENTS:
                                        (0092) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0093) ;           to determine if:
                                        (0094) ;             0x01 => Use RepeatStart instead of Start
                                        (0095) ;             0x02 => Don't send Stop
                                        (0096) ;  [SP-6]=> Count of bytes to read.
                                        (0097) ;  [SP-5]=> MSB of Array address to put data in (ignorned for small mem model)
                                        (0098) ;  [SP-4]=> LSB of Array address to put data in 
                                        (0099) ;  [SP-3]=> Address of slave
                                        (0100) ;
                                        (0101) ;  RETURNS:       None
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;          
                                        (0110) ;    Currently only the page pointer registers listed below are modified: 
                                        (0111) ;          CUR_PP
                                        (0112) ;
                                        (0113) ;  THEORY of OPERATION or PROCEDURE:
                                        (0114) ;    I2C and block must be operational.
                                        (0115) ;    This routine will enable the I2C interrupt!
                                        (0116) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (0117) ;    pend on the ISR_ACTIVE bit until it can run
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) IF	(TOOLCHAIN & HITECH)
                                        (0121) RxMode:         set  -7
                                        (0122) RxCnt:          set  -6
                                        (0123) RxArrayHI:      set  -5
                                        (0124) RxArrayLO:      set  -4
                                        (0125) RxSlaveAddr:    set  -3
                                        (0126) ELSE
                                        (0127) RxMode:         equ  -7
                                        (0128) RxCnt:          equ  -6
                                        (0129) RxArrayHI:      equ  -5
                                        (0130) RxArrayLO:      equ  -4
                                        (0131) RxSlaveAddr:    equ  -3
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) _I2CHW_fReadBytes:			      
                                        (0135)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0136)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0137) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0BC9: 4F       MOV   X,SP               (0138) 	mov   X, SP
                                        (0139) I2CMSCR_NotReady1:
0BCA: 51 05    MOV   A,[0x5]            (0140)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0BCC: 47 05 80 TST   [0x5],0x80         (0141)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0142)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0143)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0144)           ;For multi master operations, a pening start or restart
                                        (0145)           ;request might be OK, the master might be waiting to
                                        (0146)           ;acquire the bus from another master
0BCF: BF FA    JNZ   0x0BCA             (0147)     jnz   I2CMSCR_NotReady1
0BD1: 2E 05 80 OR    [0x5],0x80         (0148)     or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared by ISR
                                        (0149)     ;get the address from the parameters on the stack
0BD4: 52 FD    MOV   A,[X-3]            (0150)     mov   A, [X + RxSlaveAddr]
0BD6: 64       ASL   A                  (0151)     asl   A                                                ; Shift address to the left to make
                                        (0152)                                                            ; a complete byte with the R/W bit.
0BD7: 29 01    OR    A,0x1              (0153)     or    A,0x01                                           ; OR the address with the Read bit.
0BD9: 53 04    MOV   [0x4],A            (0154)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0BDB: 60 D8    MOV   REG[0xD8],A        (0155)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0BDD: 55 03 00 MOV   [0x3],0x0          (0156)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0BE0: 52 F9    MOV   A,[X-7]            (0157)     mov   A, [X+RxMode]                                    ; place the RxMode in status so ISR can access it
0BE2: 53 03    MOV   [0x3],A            (0158)     mov   [I2CHW_bStatus],A
                                        (0159)     ;
                                        (0160)     ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0161)     ;
0BE4: 10       PUSH  X                  (0162)     push   X                                               ;preserve since it's used later
0BE5: 52 FA    MOV   A,[X-6]            (0163)     mov    A, [X+RxCnt]                                    ;get the write buf size
0BE7: 08       PUSH  A                  (0164)     push   A
0BE8: 52 FB    MOV   A,[X-5]            (0165)     mov    A, [X+RxArrayHI]                                ;get the write addrHI
0BEA: 08       PUSH  A                  (0166)     push   A										   
0BEB: 52 FC    MOV   A,[X-4]            (0167)     mov    A, [X+RxArrayLO]							                         ;get the write addrLO
0BED: 08       PUSH  A                  (0168)     push   A                                               ;this will be ignored
0BEE: 93 0C    CALL  _I2CHW_InitWrite   (0169)     call  I2CHW_InitWrite                                  ;sets the addr and byte count to write to
0BF0: 38 FD    ADD   SP,0xFD            (0170)     add    SP, -3
0BF2: 20       POP   X                  (0171)     pop    X                                               ;restore X to be used for the rest of this routine
                                        (0172)     
0BF3: 51 04    MOV   A,[0x4]            (0173)     mov   A,[I2CHW_SlaveAddr]
0BF5: 48 F9 01 TST   [X-7],0x1          (0174)     tst   [x+RxMode],I2CHW_RepStart
0BF8: B0 0A    JNZ   0x0C03             (0175)     jnz   DoRestartRx
0BFA: 49 D7 01 TST   REG[0xD7],0x1      (0176)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0BFD: B0 05    JNZ   0x0C03             (0177)     jnz   DoRestartRx
0BFF: 91 2E    CALL  0x0D2F             (0178)     call  I2C_DoStart                                      ; Send a start and address.
0C01: 80 03    JMP   0x0C05             (0179)     jmp   CheckRxAck
                                        (0180) DoRestartRx:
0C03: 90 93    CALL  0x0C98             (0181)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0C05: 70 3F    AND   F,0x3F             
0C07: 71 C0    OR    F,0xC0             
                                        (0182)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (0183)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (0184)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (0185) 
                                        (0186) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0187)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (0188)         ;is finished.
                                        (0189) End_RD:
                                        (0190)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0191)     RAM_EPILOGUE RAM_USE_CLASS_4
0C09: 7F       RET                      (0192)     ret
0C0A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0193) 
                                        (0194) .ENDSECTION
                                        (0195) 
                                        (0196) .SECTION
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;  FUNCTION NAME: I2CHW_bWriteBytes
                                        (0199) ;
                                        (0200) ;  DESCRIPTION:
                                        (0201) ;    Write multiple data bits to slave device.
                                        (0202) ;
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;
                                        (0205) ;  ARGUMENTS:
                                        (0206) ; [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0207) ;          to determine if:
                                        (0208) ;              0x01 => Use RePeatStart instead of Start
                                        (0209) ;              0x02 => Don't send Stop
                                        (0210) ; [SP-6]=> Count of bytes to write.
                                        (0211) ; [SP-5]=> MSB of Array address to put data in (ignored small mem model).
                                        (0212) ; [SP-4]=> LSB of Array address to put data in.
                                        (0213) ; [SP-3]=> Address of slave
                                        (0214) ;
                                        (0215) ;
                                        (0216) ;  RETURNS:     None
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS:
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;          
                                        (0225) ;    Currently only the page pointer registers listed below are modified: 
                                        (0226) ;          CUR_PP
                                        (0227) ;
                                        (0228) ;  THEORY of OPERATION or PROCEDURE:
                                        (0229) ;
                                        (0230) ;-----------------------------------------------------------------------------
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232) TxMode:       set  -7
                                        (0233) TxByteCount:  set  -6
                                        (0234) TxArrayHI:    set  -5
                                        (0235) TxArrayLO:    set  -4
                                        (0236) TxSlaveAddr:  set  -3
                                        (0237) ELSE
                                        (0238) TxMode:       equ  -7
                                        (0239) TxByteCount:  equ  -6
                                        (0240) TxArrayHI:    equ  -5
                                        (0241) TxArrayLO:    equ  -4
                                        (0242) TxSlaveAddr:  equ  -3
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) _I2CHW_bWriteBytes:
                                        (0246)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0247)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0248) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
                                        (0249) 
0C0D: 4F       MOV   X,SP               (0250) 	mov   X, SP
                                        (0251) I2CMSCR_NotReady2:
0C0E: 51 05    MOV   A,[0x5]            (0252)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0C10: 47 05 80 TST   [0x5],0x80         (0253)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0254)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0255)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0256)           ;For multi master operations, a pening start or restart
                                        (0257)           ;request might be OK, the master might be waiting to
                                        (0258)           ;acquire the bus from another master
0C13: BF FA    JNZ   0x0C0E             (0259)     jnz   I2CMSCR_NotReady2
0C15: 2E 05 80 OR    [0x5],0x80         (0260)     or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared at end of ISR
0C18: 52 FD    MOV   A,[X-3]            (0261)     mov   A, [X + TxSlaveAddr]
0C1A: 64       ASL   A                  (0262)     asl   A                                                ; Shift address to the left to make
                                        (0263)                                                            ; a complete byte with the R/W bit.
                                        (0264)                                                            ; The ASL takes care of clearing bit 0.
0C1B: 55 03 00 MOV   [0x3],0x0          (0265)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0C1E: 53 04    MOV   [0x4],A            (0266)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0C20: 60 D8    MOV   REG[0xD8],A        (0267)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0C22: 52 F9    MOV   A,[X-7]            (0268)     mov   A, [X+TxMode]                                    ; place the TxMode in status so ISR can access it
0C24: 53 03    MOV   [0x3],A            (0269)     mov   [I2CHW_bStatus],A
                                        (0270)     ;
                                        (0271)     ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0272)     ;
0C26: 10       PUSH  X                  (0273)         push   X                                                ;preserve since it's used later
0C27: 77 FA    INC   [X-6]              (0274)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (0275) 
0C29: 52 FA    MOV   A,[X-6]            (0276)         mov    A, [X+TxByteCount]                               ;get the write buf size
0C2B: 08       PUSH  A                  (0277)         push   A
0C2C: 52 FB    MOV   A,[X-5]            (0278)         mov    A, [X+TxArrayHI]                                 ;get the write buf addr
0C2E: 08       PUSH  A                  (0279)         push   A                                                                                            ;this will be ignored
0C2F: 52 FC    MOV   A,[X-4]            (0280)         mov    A, [X+TxArrayLO]                                 ;get the write buf addr
0C31: 08       PUSH  A                  (0281)         push   A
0C32: 93 06    CALL  _I2CHW_InitRamRead (0282)         call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
0C34: 38 FD    ADD   SP,0xFD            (0283)         add SP, -3
0C36: 20       POP   X                  (0284)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0285)     ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (0286) 
                                        (0287) 
0C37: 51 04    MOV   A,[0x4]            (0288)     mov   A,[I2CHW_SlaveAddr]
0C39: 48 F9 01 TST   [X-7],0x1          (0289)     tst   [x+TxMode],I2CHW_RepStart
0C3C: B0 0A    JNZ   0x0C47             (0290)     jnz   DoRestartTx
0C3E: 49 D7 01 TST   REG[0xD7],0x1      (0291)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0C41: BF C1    JNZ   0x0C03             (0292)     jnz   DoRestartRx
0C43: 90 EA    CALL  0x0D2F             (0293)     call  I2C_DoStart                                      ; Send a start and address.
0C45: 80 03    JMP   0x0C49             (0294)     jmp   DoTxAck
                                        (0295) DoRestartTx:
0C47: 90 4F    CALL  0x0C98             (0296)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0C49: 70 3F    AND   F,0x3F             
0C4B: 71 C0    OR    F,0xC0             
                                        (0297) DoTxAck:
                                        (0298) 
                                        (0299) 
                                        (0300) WriteSlaveAck:
                                        (0301)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0302) 	RAM_EPILOGUE RAM_USE_CLASS_4
0C4D: 7F       RET                      (0303)     ret
0C4E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0304) 
                                        (0305) .ENDSECTION
                                        (0306) 
                                        (0307) .SECTION
                                        (0308) ;-----------------------------------------------------------------------------
                                        (0309) ;  FUNCTION NAME: I2CHW_bWriteCBytes
                                        (0310) ;
                                        (0311) ;  DESCRIPTION:
                                        (0312) ;    Write multiple data bits to slave device from ROM
                                        (0313) ;
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;
                                        (0316) ;  ARGUMENTS:
                                        (0317) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0318) ;            to determine if:
                                        (0319) ;               0x01 => Use RepeatStart instead of Start
                                        (0320) ;               0x02 => Don't send Stop
                                        (0321) ;  [SP-6]=> Count of bytes to write.
                                        (0322) ;  [SP-5]=> MSB of ROM Array address to get data from
                                        (0323) ;  [SP-4]=> LSB of ROM Array address to get data from.
                                        (0324) ;  [SP-3]=> Address of slave
                                        (0325) ;
                                        (0326) ;  RETURNS:
                                        (0327) ;    None
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;
                                        (0339) ;  THEORY of OPERATION or PROCEDURE:
                                        (0340) ;
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) IF	(TOOLCHAIN & HITECH)
                                        (0343) TxCMode:       set  -7
                                        (0344) TxCByteCount:  set  -6
                                        (0345) TxCArrayMSB:   set  -5
                                        (0346) TxCArrayLSB:   set  -4
                                        (0347) ;TxSlaveAddr:  set  -3	  ;defined above this line if for reference only
                                        (0348) ELSE
                                        (0349) TxCMode:       equ  -7
                                        (0350) TxCByteCount:  equ  -6
                                        (0351) TxCArrayMSB:   equ  -5
                                        (0352) TxCArrayLSB:   equ  -4
                                        (0353) ;TxSlaveAddr:  equ  -3	  ;defined above this line if for reference only
                                        (0354) ENDIF
                                        (0355) 
                                        (0356) _I2CHW_bWriteCBytes:
                                        (0357)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0358) 	RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0359) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0C51: 4F       MOV   X,SP               (0360) 	mov   X, SP
                                        (0361) I2CMSCR_NotReady3:
0C52: 51 05    MOV   A,[0x5]            (0362)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
0C54: 47 05 80 TST   [0x5],0x80         (0363)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0364)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0365)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0366)           ;For multi master operations, a pening start or restart
                                        (0367)           ;request might be OK, the master might be waiting to
                                        (0368)           ;acquire the bus from another master
0C57: BF FA    JNZ   0x0C52             (0369)         jnz   I2CMSCR_NotReady3
0C59: 2E 05 80 OR    [0x5],0x80         (0370)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
0C5C: 52 FD    MOV   A,[X-3]            (0371)     mov   A, [X + TxSlaveAddr]
0C5E: 64       ASL   A                  (0372)     asl   A                                                ; Shift address to the left to make
                                        (0373)                                                            ; a complete byte with the R/W bit.
                                        (0374)                                                            ; The ASL takes care of clearing bit 0.
0C5F: 55 03 00 MOV   [0x3],0x0          (0375)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0C62: 53 04    MOV   [0x4],A            (0376)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0C64: 60 D8    MOV   REG[0xD8],A        (0377)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0C66: 52 F9    MOV   A,[X-7]            (0378)     mov   A, [X+TxCMode]                                                             ; place the RxMode in status so ISR can access it
0C68: 53 03    MOV   [0x3],A            (0379)     mov   [I2CHW_bStatus],A
                                        (0380)     ;
                                        (0381)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0382)         ;
0C6A: 10       PUSH  X                  (0383)         push   X                                                ;preserve X since it's used later
                                        (0384) 
0C6B: 50 00    MOV   A,0x0              (0385)          mov    A, 0                                             ;get the write buf size (this is the hi order part)
0C6D: 77 FA    INC   [X-6]              (0386)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
0C6F: D0 02    JNC   0x0C72             (0387)         jnc    . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
0C71: 74       INC   A                  (0388)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
0C72: 08       PUSH  A                  (0389)         push   A
0C73: 52 FA    MOV   A,[X-6]            (0390)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
0C75: 08       PUSH  A                  (0391)         push   A
0C76: 52 FB    MOV   A,[X-5]            (0392)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
0C78: 08       PUSH  A                  (0393)         push   A                                                                                        ;this will be ignored
0C79: 52 FC    MOV   A,[X-4]            (0394)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
0C7B: 08       PUSH  A                  (0395)         push   A
                                        (0396) 
0C7C: 92 E9    CALL  _I2CHW_InitFlashRead(0397)         call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
0C7E: 38 FC    ADD   SP,0xFC            (0398)         add SP, -4
0C80: 20       POP   X                  (0399)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0400) 
                                        (0401)     ;or  [I2CHW_RsrcStatus],I2C_READFLASH
0C81: 51 04    MOV   A,[0x4]            (0402)     mov   A,[I2CHW_SlaveAddr]
0C83: 48 F9 01 TST   [X-7],0x1          (0403)     tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
0C86: B0 0A    JNZ   0x0C91             (0404)     jnz   DoCRestartTx                                     ; should executed.
0C88: 49 D7 01 TST   REG[0xD7],0x1      (0405)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0C8B: BF 77    JNZ   0x0C03             (0406)     jnz   DoRestartRx
0C8D: 90 A0    CALL  0x0D2F             (0407)     call  I2C_DoStart                                      ; Send a start and address.
0C8F: 80 03    JMP   0x0C93             (0408)     jmp   DoCTxAck
                                        (0409) DoCRestartTx:
0C91: 90 05    CALL  0x0C98             (0410)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0C93: 70 3F    AND   F,0x3F             
0C95: 71 C0    OR    F,0xC0             
                                        (0411) 
                                        (0412) DoCTxAck:                                                  ; Test to see if Slave is ACKed
                                        (0413) 
                                        (0414) CWriteSlaveAck:
                                        (0415)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0416)     RAM_EPILOGUE RAM_USE_CLASS_4
0C97: 7F       RET                      (0417)     ret
0C98: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0418) 
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: I2CHW_DoBufferRepeatStart
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;    Send repeated start condition and send slave address for buffered transfers.
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     This routine is called internally only.  It is not exported or intended as an API
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;    None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS:
                                        (0437) ;    The A and X registers may be modified by this or future implementations
                                        (0438) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0439) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0440) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0441) ;    functions.
                                        (0442) ;          
                                        (0443) ;  THEORY of OPERATION or PROCEDURE:
                                        (0444) ;    This is similar to the I2C_DoRepeatStart entry point but this function does not
                                        (0445) ;    wait for the byte_complete flag.  That is this is not polled and is therefore compatible
                                        (0446) ;    with the buffered read and write functions (above).
                                        (0447) ;
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) 
                                        (0450) I2CHW_DoBufferRepeatStart:
                                        (0451)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0452) 	RAM_SETPAGE_CUR >I2CHW_SlaveAddr
                                        (0453)     ;here the path through the routine is dependent on the previous transmission.
                                        (0454)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0455)         ; I2C interrupt
                                        (0456)         ; 2a. the master must NAK the byte if he is reading from the slave.
                                        (0457)         ; We do have to look at the status of the I2C block to see what is going on because if there was a
                                        (0458)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0459)         ; by setting the master restart bit and clearing to I2C_SCR (I2C_TX)
                                        (0460)         ; 2b. if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0461)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0462)         ; 3. once the ISR starts it will figure out which direction we are going with data (sending/receiving)
                                        (0463)         ;
0C9B: 60 D8    MOV   REG[0xD8],A        (0464)     mov   reg[I2CHW_DR], A
0C9D: 53 04    MOV   [0x4],A            (0465)         mov   [I2CHW_SlaveAddr], A
                                        (0466)         ;tst      reg[I2CHW_MSCR], I2CM_MASTEROP           ;do we even have control of the bus?
                                        (0467)         ;jz    notBusMasterErr
0C9F: 5D D9    MOV   A,REG[0xD9]        (0468)     mov   A, reg[I2CHW_MSCR]                               ;read the mscr register to look for pending master operations
0CA1: 21 0F    AND   A,0xF              (0469)     and   A, 0x0f                                          ;only look at the lower bits
0CA3: A0 11    JZ    0x0CB5             (0470)         jz    BusIdleSendStart
0CA5: 62 D9 02 MOV   REG[0xD9],0x2      
                                        (0471)         ; for a single master system this should not be an issue,
                                        (0472)         ; so we'll go ahead and request the restart.  If a stop condition was already generated
                                        (0473)         ; the state machine will automatically generate a start instead.
                                        (0474) 
                                        (0475)         ;SetI2CHW_SCR I2CM_RESTRT
                                        (0476)     ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0477)         ;SetI2CHW_SCR          I2C_TX                                ;even though the restart has been requested the state
                                        (0478)         ;mov      reg[I2CHW_SCR], I2C_TX                   ;even though the restart has been requested the state
                                        (0479) 
                                        (0480) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0481)         SetI2CHW_MSCR I2CM_RESTRT
                                        (0482) ;ELSE
                                        (0483) ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0484) ;ENDIF
0CA8: 49 D7 04 TST   REG[0xD7],0x4      (0485)     tst   reg[I2CHW_SCR], I2C_TX
0CAB: B0 05    JNZ   0x0CB1             (0486)     jnz   I2C_RestartRecieve
0CAD: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0487) 
                                        (0488) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0489)     SetI2CHW_SCR I2C_TX                                    ;even though the restart has been requested the state
                                        (0490) ;ELSE
                                        (0491) ;    mov   reg[I2CHW_SCR], I2C_TX                          ;send Ack
                                        (0492) ;ENDIF
                                        (0493) 
                                        (0494)     RAM_EPILOGUE RAM_USE_CLASS_4
0CB0: 7F       RET                      (0495)     ret
0CB1: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0496) I2C_RestartRecieve:
                                        (0497) 
                                        (0498) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0499)     SetI2CHW_SCR 0                                         ;even though the restart has been requested the state
                                        (0500) ;ELSE
                                        (0501) ;    mov   reg[I2CHW_SCR], 0                               ;send Ack
                                        (0502) ;ENDIF
                                        (0503) 
                                        (0504)    RAM_EPILOGUE RAM_USE_CLASS_4
0CB4: 7F       RET                      (0505)    ret
                                        (0506) 
                                        (0507) BusIdleSendStart:
0CB5: 51 04    MOV   A,[0x4]            (0508)    mov    A, [I2CHW_SlaveAddr]
0CB7: 90 76    CALL  0x0D2F             (0509)    call   I2C_DoStart
                                        (0510)    ;Since something appears to be messed up do the next best thing to a repeat start, send a start.
                                        (0511)    RAM_EPILOGUE RAM_USE_CLASS_4
0CB9: 7F       RET                      (0512)    ret
0CBA: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0513) 
                                        (0514) .ENDSECTION
                                        (0515) 
                                        (0516) .SECTION
                                        (0517) 
                                        (0518) ;-----------------------------------------------------------------------------
                                        (0519) ;  FUNCTION NAME: I2CHW_fSendRepeatStart
                                        (0520) ;
                                        (0521) ;  DESCRIPTION:
                                        (0522) ;    Send repeated start condition and send slave address.
                                        (0523) ;
                                        (0524) ;-----------------------------------------------------------------------------
                                        (0525) ;
                                        (0526) ;  ARGUMENTS:
                                        (0527) ;    I2CHW_bAddr - Contains the slave address and transfer direction.
                                        (0528) ;
                                        (0529) ;  RETURNS:
                                        (0530) ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0531) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0532) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0533) ;
                                        (0534) ;  SIDE EFFECTS:
                                        (0535) ;    The A and X registers may be modified by this or future implementations
                                        (0536) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0537) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0538) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0539) ;    functions.
                                        (0540) ;          
                                        (0541) ;    Currently only the page pointer registers listed below are modified: 
                                        (0542) ;          CUR_PP
                                        (0543) ;
                                        (0544) ;  THEORY of OPERATION or PROCEDURE:
                                        (0545) ;    Prepare to send start by setting SCl and SDA high.
                                        (0546) ;    must be followed directly by I2CHW_start.
                                        (0547) ;
                                        (0548) ;-----------------------------------------------------------------------------
                                        (0549)  I2CHW_fSendRepeatStart:
                                        (0550) _I2CHW_fSendRepeatStart:
                                        (0551)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0552) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0553)     ;wait if the bus is already busy...
0CBD: 08       PUSH  A                  (0554)     push  A
0CBE: 55 03 00 MOV   [0x3],0x0          (0555)     mov   [I2CHW_bStatus], 0x00
                                        (0556) I2CMSCR_NotReady4:
0CC1: 51 05    MOV   A,[0x5]            (0557)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0CC3: 47 05 80 TST   [0x5],0x80         (0558)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0559)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0560)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0561)           ;For multi master operations, a pening start or restart
                                        (0562)           ;request might be OK, the master might be waiting to
                                        (0563)           ;acquire the bus from another master
0CC6: BF FA    JNZ   0x0CC1             (0564)     jnz   I2CMSCR_NotReady4
0CC8: 18       POP   A                  (0565)     pop   A
                                        (0566) 
                                        (0567) 
0CC9: 64       ASL   A                  (0568)     asl   a                                                ; Shift address to the left
0CCA: 79       DEC   X                  (0569)     dec   x                                                ; If zero, C flag will be set
0CCB: C0 03    JC    0x0CCF             (0570)     jc    I2C_DoRepeatStart                                ; Do a write if zero
0CCD: 29 01    OR    A,0x1              (0571)     or    a,0x01                                           ; Set Read flag
                                        (0572) 
                                        (0573) I2C_DoRepeatStart:
                                        (0574)     ;here the path through the routine is dependent on the previous transmission.
                                        (0575)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0576)         ; I2C interrupt
                                        (0577)         ; 2. the master must NAK the byte if he is reading from the slave.
                                        (0578)         ; We don't have to look at the status of the I2C block to see what is going on because if there was a
                                        (0579)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0580)         ; by setting the master restart bit and writing to I2C_SCR (I2C_TX)
                                        (0581)         ; if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0582)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0583)         ;
0CCF: 60 D8    MOV   REG[0xD8],A        (0584)     mov   reg[I2CHW_DR], A
0CD1: 53 04    MOV   [0x4],A            (0585)     mov   [I2CHW_SlaveAddr], A
0CD3: 49 D9 04 TST   REG[0xD9],0x4      (0586)     tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
0CD6: A0 1C    JZ    0x0CF3             (0587)     jz    notBusMaster1
0CD8: 62 D9 02 MOV   REG[0xD9],0x2      
0CDB: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0588)     ;SetI2CHW_MSCR  I2CM_RESTRT
                                        (0589)     ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0590)     ;SetI2CHW_SCR         I2C_TX                           ;even though the restart has been requested the state
                                        (0591)     ;mov      reg[I2CHW_SCR], I2C_TX                       ;even though the restart has been requested the state
                                        (0592)                                                                 ; machine is stalling the SCL and has to be 'released'
                                        (0593) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0594)     SetI2CHW_MSCR I2CM_RESTRT
                                        (0595)     SetI2CHW_SCR  0                                        ;getting a restart out requires a 0 into the SCR reg
                                        (0596) ;ELSE
                                        (0597) ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0598) ;    mov   reg[I2CHW_SCR], 0                               ;getting a restart out requires a 0 into the SCR reg
                                        (0599) ;ENDIF
                                        (0600) 
                                        (0601) WaitRepStrtCompl:
0CDE: 5D D7    MOV   A,REG[0xD7]        (0602)     mov   A,  reg[I2CHW_SCR]
0CE0: 49 D7 01 TST   REG[0xD7],0x1      (0603)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0CE3: AF FA    JZ    0x0CDE             (0604)     jz    WaitRepStrtCompl
0CE5: 49 D7 02 TST   REG[0xD7],0x2      (0605)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0CE8: B0 07    JNZ   0x0CF0             (0606)     jnz   Err_Exit_RepStart
0CEA: 55 03 01 MOV   [0x3],0x1          (0607)     mov   [I2CHW_bStatus], 0x01
0CED: 50 01    MOV   A,0x1              (0608)     mov   A, 01
                                        (0609)     RAM_EPILOGUE RAM_USE_CLASS_4
0CEF: 7F       RET                      (0610)     ret
                                        (0611) 
                                        (0612) Err_Exit_RepStart:
0CF0: 50 00    MOV   A,0x0              (0613)     mov   A, 0
                                        (0614)     RAM_EPILOGUE RAM_USE_CLASS_4
0CF2: 7F       RET                      (0615)     ret
                                        (0616) 
                                        (0617)  notBusMaster1:
                                        (0618)     ;SetI2CHW_MSCR 0
                                        (0619)     ;mov reg[I2CHW_MSCR], 0                                ;we certainly cant restart if we've not Master
                                        (0620)     ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
0CF3: 50 00    MOV   A,0x0              (0621)     mov   A, 0
                                        (0622)     RAM_EPILOGUE RAM_USE_CLASS_4
0CF5: 7F       RET                      (0623)     ret
0CF6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0624) 
                                        (0625) .ENDSECTION
                                        (0626) 
                                        (0627) .SECTION
                                        (0628) ;-----------------------------------------------------------------------------
                                        (0629) ;  FUNCTION NAME: I2CHW_fSendStart
                                        (0630) ;
                                        (0631) ;  DESCRIPTION:
                                        (0632) ;    Generates start condition and sends slave address.
                                        (0633) ;
                                        (0634) ;-----------------------------------------------------------------------------
                                        (0635) ;
                                        (0636) ;  ARGUMENTS:
                                        (0637) ;    A => Contains the slave address.
                                        (0638) ;
                                        (0639) ;  RETURNS:
                                        (0640) ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0641) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0642) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0643) ;
                                        (0644) ;  SIDE EFFECTS:
                                        (0645) ;    The A and X registers may be modified by this or future implementations
                                        (0646) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0647) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0648) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0649) ;    functions.
                                        (0650) ;          
                                        (0651) ;    Currently only the page pointer registers listed below are modified: 
                                        (0652) ;          CUR_PP
                                        (0653) ;
                                        (0654) ;  THEORY of OPERATION or PROCEDURE:
                                        (0655) ;   Send start by setting SDA low while SCL is high. Set
                                        (0656) ;   SCL low in preparation to send address. 
                                        (0657) ;   Sends address, waits for byte complete
                                        (0658) ;   An address must be followed by a read or write of data if it was acked by a slave
                                        (0659) ;
                                        (0660) ;  WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0661) ;   flag is set to return.
                                        (0662) ;
                                        (0663) ;
                                        (0664) ;-----------------------------------------------------------------------------
                                        (0665)  I2CHW_fSendStart:
                                        (0666) _I2CHW_fSendStart:
                                        (0667)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0668) 	RAM_SETPAGE_CUR >I2CHW_bStatus 
                                        (0669)     ;wait if the bus is already busy...
0CF9: 08       PUSH  A                  (0670)     push  A
0CFA: 55 03 00 MOV   [0x3],0x0          (0671)     mov   [I2CHW_bStatus], 0x00
                                        (0672) I2CMSCR_NotReady5:
0CFD: 51 05    MOV   A,[0x5]            (0673)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0CFF: 47 05 80 TST   [0x5],0x80         (0674)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0675)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0676)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0677)           ;For multi master operations, a pening start or restart
                                        (0678)           ;request might be OK, the master might be waiting to
                                        (0679)           ;acquire the bus from another master
0D02: BF FA    JNZ   0x0CFD             (0680)     jnz   I2CMSCR_NotReady5
0D04: 18       POP   A                  (0681)     pop   A
0D05: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0682) 
                                        (0683) 
                                        (0684)     ; disable the interrupt
                                        (0685)         ; *** NOT REENABLED ***
                                        (0686)         ;
                                        (0687)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0D08: 49 D7 01 TST   REG[0xD7],0x1      (0688)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ;If there is a pending BYTE_COMPL here
                                        (0689)                                                                 ;it is highly probable that a start is not the
                                        (0690)                                                                                                                     ;correct thing to do.
                                        (0691)                                                                                                                     ;leaving
0D0B: B0 20    JNZ   0x0D2C             (0692)     jnz   Err_Exit_Start
                                        (0693) 
0D0D: 64       ASL   A                  (0694)     asl   a                                                ; Shift address to the left
0D0E: 79       DEC   X                  (0695)     dec   x                                                ; If zero, C flag will be set
0D0F: C0 03    JC    0x0D13             (0696)     jc    I2C_SndWRStart                                   ; Do a write if zero
0D11: 29 01    OR    A,0x1              (0697)     or    a,0x01                                           ; Set Read flag
                                        (0698) I2C_SndWRStart:
0D13: 60 D8    MOV   REG[0xD8],A        (0699)     mov   reg[I2CHW_DR], A
0D15: 53 04    MOV   [0x4],A            (0700)     mov   [I2CHW_SlaveAddr], A
0D17: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0701)     ;SetI2CHW_MSCR, I2CM_SNDSTRT
                                        (0702)     ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0703) 
                                        (0704) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0705)     SetI2CHW_MSCR I2CM_SNDSTRT
                                        (0706) ;ELSE
                                        (0707) ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0708) ;ENDIF
                                        (0709) 
                                        (0710) 
                                        (0711) WaitStrtByteCompl:
0D1A: 5D D7    MOV   A,REG[0xD7]        (0712)     mov   A,  reg[I2CHW_SCR]
0D1C: 49 D7 01 TST   REG[0xD7],0x1      (0713)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0D1F: AF FA    JZ    0x0D1A             (0714)     jz    WaitStrtByteCompl
0D21: 49 D7 02 TST   REG[0xD7],0x2      (0715)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0D24: B0 07    JNZ   0x0D2C             (0716)     jnz   Err_Exit_Start
0D26: 55 03 01 MOV   [0x3],0x1          (0717)     mov   [I2CHW_bStatus], 0x01
0D29: 50 01    MOV   A,0x1              (0718)     mov   A, 01
                                        (0719)     RAM_EPILOGUE RAM_USE_CLASS_4
0D2B: 7F       RET                      (0720)     ret
                                        (0721) Err_Exit_Start:
0D2C: 50 00    MOV   A,0x0              (0722)     mov   A, 0
                                        (0723)     RAM_EPILOGUE RAM_USE_CLASS_4
0D2E: 7F       RET                      (0724)     ret
0D2F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0725) 
                                        (0726) I2C_DoStart:
                                        (0727)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0728)     RAM_SETPAGE_CUR >I2CHW_SlaveAddr
                                        (0729)     ;here we are not required to test for master operation since we are only attempting to gain control of the bus
                                        (0730)     ; by attempting to assert a Start
                                        (0731)     
0D32: 60 D8    MOV   REG[0xD8],A        (0732)     mov   reg[I2CHW_DR], A
0D34: 53 04    MOV   [0x4],A            (0733)     mov   [I2CHW_SlaveAddr], A
0D36: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0734)     ;SetI2CHW_MSCR  I2CM_SNDSTRT
                                        (0735)     ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0736) 
                                        (0737) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0738)     SetI2CHW_MSCR I2CM_SNDSTRT
                                        (0739) ;ELSE
                                        (0740) ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0741) ;ENDIF
                                        (0742)     RAM_EPILOGUE RAM_USE_CLASS_4
0D39: 7F       RET                      (0743)     ret
0D3A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0744) ;
                                        (0745) ;   DO NOT PLACE
                                        (0746) ;   .SECTION
                                        (0747) ;   .ENDSECTION
                                        (0748) ;   _fSendStart USES CODE BELOW
                                        (0749) ;
                                        (0750) ;-----------------------------------------------------------------------------
                                        (0751) ;  FUNCTION NAME: I2CHW_fWrite
                                        (0752) ;
                                        (0753) ;  DESCRIPTION:
                                        (0754) ;    Writes a byte to the I2C master bus.
                                        (0755) ;
                                        (0756) ;-----------------------------------------------------------------------------
                                        (0757) ;
                                        (0758) ;  ARGUMENTS:
                                        (0759) ;    A contains Data to be written to I2C slave.
                                        (0760) ;
                                        (0761) ;  RETURNS:
                                        (0762) ;    1 If ACKed, else 0
                                        (0763) ;
                                        (0764) ;  SIDE EFFECTS:
                                        (0765) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0766) ;
                                        (0767) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0768) ;
                                        (0769) ;  FUNCTION NAME: I2CHW_fWrite
                                        (0770) ;
                                        (0771) ;  DESCRIPTION:
                                        (0772) ;    Writes a data byte to the I2C master bus. 
                                        (0773) ;
                                        (0774) ;  ARGUMENTS:
                                        (0775) ;    Reg A contains slave address.
                                        (0776) ;    I2CHW_bData - Contains data to be transmitted.
                                        (0777) ;
                                        (0778) ;  RETURNS:
                                        (0779) ;    I2CHW_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0780) ;
                                        (0781) ;  SIDE EFFECTS:
                                        (0782) ;    The A and X registers may be modified by this or future implementations
                                        (0783) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0784) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0785) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0786) ;    functions.
                                        (0787) ;          
                                        (0788) ;    Currently only the page pointer registers listed below are modified: 
                                        (0789) ;          CUR_PP
                                        (0790) ;
                                        (0791) ;    Send data byte to slave. .
                                        (0792) ;
                                        (0793) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0794) ;    flag is set to return.
                                        (0795) ;
                                        (0796)  I2CHW_fWrite:
                                        (0797) _I2CHW_fWrite:
                                        (0798)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0799) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0800)     ; disable the interrupt
                                        (0801)         ; *** NOT REENABLED ***
                                        (0802)         ;
0D3D: 60 D8    MOV   REG[0xD8],A        (0803)     mov   reg[I2CHW_DR],A                                  ; Put data in Data Reg
0D3F: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0804)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0D42: 5D D9    MOV   A,REG[0xD9]        (0805)     mov   A,  reg[I2CHW_MSCR]                              ;MSCR into A incase there is an error here
0D44: 49 D9 04 TST   REG[0xD9],0x4      (0806)     tst   reg[I2CHW_MSCR],I2CM_MASTEROP                    ;Do we have control of the bus?
0D47: A0 19    JZ    0x0D61             (0807)     jz    Err_Exit_fWrite
                                        (0808) 
0D49: 55 03 00 MOV   [0x3],0x0          (0809)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
0D4C: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0810)     ;SetI2CHW_SCR I2C_TX
                                        (0811)     ;mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                                        (0812) 
                                        (0813) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0814)         SetI2CHW_SCR I2C_TX                                ; Put data in Data Reg
                                        (0815) ;ELSE
                                        (0816) ;    mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                                        (0817) ;ENDIF
                                        (0818) 
                                        (0819) 
                                        (0820) I2CHW_write:
                                        (0821) _I2CHW_write:
                                        (0822) ;    mov   reg[I2CHW_SCR],A                                ; Put data in bData
                                        (0823) ;   jmp   I2CHW_get_ack                                    ; This jump is not required since it falls
                                        (0824) 
                                        (0825) WaitTXByteCompl:
0D4F: 5D D7    MOV   A,REG[0xD7]        (0826)     mov   A, reg[I2CHW_SCR]
0D51: 49 D7 01 TST   REG[0xD7],0x1      (0827)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0D54: AF FA    JZ    0x0D4F             (0828)     jz    WaitTXByteCompl
0D56: 49 D7 02 TST   REG[0xD7],0x2      (0829)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0D59: B0 07    JNZ   0x0D61             (0830)     jnz   Err_Exit_fWrite
0D5B: 55 03 FF MOV   [0x3],0xFF         (0831)     mov   [I2CHW_bStatus], 0xff
0D5E: 50 01    MOV   A,0x1              (0832)     mov   A, 01
                                        (0833)     RAM_EPILOGUE RAM_USE_CLASS_4
0D60: 7F       RET                      (0834)     ret
                                        (0835) 
                                        (0836) Err_Exit_fWrite:
0D61: 50 00    MOV   A,0x0              (0837)     mov   A, 0
0D63: 53 03    MOV   [0x3],A            (0838)     mov   [I2CHW_bStatus], A
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
0D65: 7F       RET                      (0840)     ret
0D66: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0841) 
                                        (0842) .ENDSECTION
                                        (0843) 
                                        (0844) .SECTION
                                        (0845) ;-----------------------------------------------------------------------------
                                        (0846) ;  FUNCTION NAME: I2CHW_get_ack
                                        (0847) ;
                                        (0848) ;  DESCRIPTION:
                                        (0849) ;    Get slave acknowledge response. Used to poll for I2C_BYTE_COMPL and then test Ack (I2C_LST_BIT)
                                        (0850) ;
                                        (0851) ;-----------------------------------------------------------------------------
                                        (0852) ;
                                        (0853) ;  ARGUMENTS:
                                        (0854) ;
                                        (0855) ;  RETURNS:
                                        (0856) ;    Sets flag in I2CHW_bStatus if ACKed by Slave.  !!!
                                        (0857) ;
                                        (0858) ;  SIDE EFFECTS:
                                        (0859) ;    The A and X registers may be modified by this or future implementations
                                        (0860) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0861) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0862) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0863) ;    functions.
                                        (0864) ;          
                                        (0865) ;    Currently only the page pointer registers listed below are modified: 
                                        (0866) ;          CUR_PP
                                        (0867) ;
                                        (0868) ;    Do the ack clock and check for Slave ACK
                                        (0869) ;
                                        (0870) I2CHW_get_ack:
                                        (0871) _I2CHW_get_ack:
                                        (0872)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0873) 	RAM_SETPAGE_CUR >I2CHW_bStatus
0D69: 26 03 FE AND   [0x3],0xFE         (0874)     and [I2CHW_bStatus], ~I2CHW_SLAVE_ACKed
0D6C: 49 D7 01 TST   REG[0xD7],0x1      (0875)     tst reg[I2CHW_SCR], I2C_BYTE_COMPL
0D6F: BF F6    JNZ   0x0D66             (0876)     jnz I2CHW_get_ack
0D71: 49 D7 02 TST   REG[0xD7],0x2      (0877)     tst reg[I2CHW_SCR], I2C_LST_BIT
0D74: B0 04    JNZ   0x0D79             (0878)     jnz notAcked
0D76: 2E 03 01 OR    [0x3],0x1          (0879)     or [I2CHW_bStatus], I2CHW_SLAVE_ACKed
                                        (0880) notAcked:
                                        (0881)     RAM_EPILOGUE RAM_USE_CLASS_4
0D79: 7F       RET                      (0882)     ret
0D7A: 62 D0 00 MOV   REG[0xD0],0x0      
0D7D: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0883) 
                                        (0884) .ENDSECTION
                                        (0885) 
                                        (0886) .SECTION
                                        (0887) 
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;  FUNCTION NAME: I2CHW_bRead
                                        (0890) ;
                                        (0891) ;  DESCRIPTION:
                                        (0892) ;    Reads 1 data byte from the I2C master bus.
                                        (0893) ;
                                        (0894) ;-----------------------------------------------------------------------------
                                        (0895) ;
                                        (0896) ;  ARGUMENTS:
                                        (0897) ;    Reg A Contains the Slave Address.
                                        (0898) ;    I2CHW_bStatus - Set for no ack to be followed by stop.
                                        (0899) ;    Clear for ack to indicate more data to follow.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2CHW_bData - Contains received data.
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Must be followed by I2CHW_put_ack.
                                        (0915) ;    The I2CHW interrupt should be disabled since this routine will poll the
                                        (0916) ;    reg[I2CHW_SCR] to determine when a byte is available
                                        (0917) ;
                                        (0918) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0919) ;    flag is set to return.
                                        (0920) ;
                                        (0921) I2CHW_bRead:
                                        (0922) _I2CHW_bRead:
                                        (0923)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0924) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0925)     ; disable the interrupt
                                        (0926)     ; *** NOT REENABLED ***
                                        (0927)     ;
                                        (0928)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0D80: 49 D9 04 TST   REG[0xD9],0x4      (0929)     tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
0D83: A0 28    JZ    0x0DAC             (0930)     jz    notBusMaster2
                                        (0931) 
0D85: 55 03 00 MOV   [0x3],0x0          (0932)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                                        (0933)     ;or    I2CHW_SEND_ACK                                  ; Set ACK flag
                                        (0934) ;
                                        (0935) ; Check for the special case of the first read after and address is sent
                                        (0936) ;
                                        (0937) 
0D88: 08       PUSH  A                  (0938)     push  A                                                ;preserve the information about wether to ACK or NAK this byte
0D89: 5D D7    MOV   A,REG[0xD7]        (0939)     mov   A, reg[I2CHW_SCR]
0D8B: 49 D7 08 TST   REG[0xD7],0x8      (0940)     tst   reg[I2CHW_SCR], I2C_ADDRIN
0D8E: A0 04    JZ    0x0D93             (0941)     jz    WaitRXByteCompl                                  ;addr bit not set then this is a normal read
0D90: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0942)     ;SetI2CHW_SCR 0
                                        (0943)     ;mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0944) 
                                        (0945) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0946)     SetI2CHW_SCR 0                                         ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0947) ;ELSE
                                        (0948) ;    mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0949) ;ENDIF
                                        (0950)                                                            ; through to I2CHW_put_ack.
                                        (0951) 
                                        (0952)     ;must DROP through to send an Ack and another byte,
                                        (0953)     ;to stop reading we NAK the slave
                                        (0954) WaitRXByteCompl:
0D93: 49 D7 01 TST   REG[0xD7],0x1      (0955)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0D96: AF FC    JZ    0x0D93             (0956)     jz    WaitRXByteCompl
                                        (0957) 
0D98: 18       POP   A                  (0958)     pop   A                                                ;recover the saved ACK/NAK flag
0D99: 21 FF    AND   A,0xFF             (0959)     and   A,0xFF                                           ; Is Ack flag set"
0D9B: A0 0A    JZ    0x0DA6             (0960)     jz    exit_bRead_NOACK                                 ; Don't ACK
                                        (0961) 
                                        (0962)         ;now if the ACK flag was set, Ack the data which will release the bus and start the next byte in
                                        (0963)         ;otherwise do NOTHING to the SCR reg.  This will allow the calling routine to generate a repeat start
                                        (0964)         ;or a stop depending on it's preference.
                                        (0965) 
                                        (0966) 
0D9D: 5D D8    MOV   A,REG[0xD8]        (0967)     mov   A, reg[I2CHW_DR]                                 ; Record data received
0D9F: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0968)     ;SetI2CHW_SCR I2C_ACKOUT
                                        (0969)     ;mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                                        (0970) 
                                        (0971) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0972)     SetI2CHW_SCR I2C_ACKOUT                                ; Record data received
                                        (0973) ;ELSE
                                        (0974) ;    mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                                        (0975) ;ENDIF
                                        (0976) 
0DA2: 55 03 01 MOV   [0x3],0x1          (0977)     mov   [I2CHW_bStatus],0x01                             ; Clear ACK flag
                                        (0978)     RAM_EPILOGUE RAM_USE_CLASS_4
0DA5: 7F       RET                      (0979)     ret
                                        (0980) 
                                        (0981) exit_bRead_NOACK:
0DA6: 5D D8    MOV   A,REG[0xD8]        (0982)     mov   A, reg[I2CHW_DR]                                 ; Record data received
                                        (0983)     ; send no Ack or Nak, the calling routine will have to decide to NAK or execute a repeat start.
                                        (0984)     ; sending nothing leaves the bus held in wait until a decision is made.
0DA8: 55 03 00 MOV   [0x3],0x0          (0985)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                                        (0986)     RAM_EPILOGUE RAM_USE_CLASS_4
0DAB: 7F       RET                      (0987)     ret
                                        (0988) 
                                        (0989) notBusMaster2:
0DAC: 55 03 FF MOV   [0x3],0xFF         (0990)    mov   [I2CHW_bStatus], 0xff
                                        (0991)    ;SetI2CHW_SCR 0
                                        (0992)    ;mov          reg[I2CHW_MSCR], 0                        ;we certainly cant restart if we've not Master
                                        (0993)    ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
                                        (0994)    RAM_EPILOGUE RAM_USE_CLASS_4
0DAF: 7F       RET                      (0995)    ret
                                        (0996) 
                                        (0997) .ENDSECTION
                                        (0998) 
                                        (0999) 
                                        (1000) .SECTION
                                        (1001) ;-----------------------------------------------------------------------------
                                        (1002) ;  FUNCTION NAME: I2CHW_SendStop
                                        (1003) ;
                                        (1004) ;  DESCRIPTION:
                                        (1005) ;    Assert stop condition.
                                        (1006) ;
                                        (1007) ;-----------------------------------------------------------------------------
                                        (1008) ;
                                        (1009) ;  ARGUMENTS: none
                                        (1010) ;
                                        (1011) ;  RETURNS: none
                                        (1012) ;
                                        (1013) ;  SIDE EFFECTS:
                                        (1014) ;    The A and X registers may be modified by this or future implementations
                                        (1015) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1016) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1017) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1018) ;    functions.
                                        (1019) ;
                                        (1020) ;  THEORY of OPERATION or PROCEDURE:
                                        (1021) ;     Send stop by releasing SDA high while SCL high. When in Master Read Mode, this
                                        (1022) ;     is done by nak'ing a read from the slave, in Master Write Mode this is done by clearing
                                        (1023) ;     the I2C_TX bit in  reg[I2CHW_SCR].  In either case this is a zero written to
                                        (1024) ;     reg[I2CHW_SCR].
                                        (1025) ;
                                        (1026)  I2CHW_SendStop:
                                        (1027) _I2CHW_SendStop:
                                        (1028)     RAM_PROLOGUE RAM_USE_CLASS_1
0DB0: 49 D9 04 TST   REG[0xD9],0x4      (1029)     tst   reg[I2CHW_MSCR], I2CM_MASTEROP                   ;do we even have control of the bus?
0DB3: A0 04    JZ    0x0DB8             (1030)     jz    notBusMaster3
0DB5: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (1031)     ;SetI2CHW_SCR 0
                                        (1032)     ;mov  reg[I2CHW_SCR], 0
                                        (1033) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (1034)     SetI2CHW_SCR 0                                         ; Put data in Data Reg
                                        (1035) ;ELSE
                                        (1036) ;    mov   reg[I2CHW_SCR], 0                               ; Put data in Data Reg
                                        (1037) ;ENDIF
                                        (1038) 
                                        (1039) notBusMaster3:
                                        (1040)     RAM_EPILOGUE RAM_USE_CLASS_1
0DB8: 7F       RET                      (1041)     ret
0DB9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1042) .ENDSECTION
                                        (1043) 
                                        (1044) .SECTION
                                        (1045) ;-----------------------------------------------------------------------------
                                        (1046) ;  FUNCTION NAME: I2CHW_bReadBusStatus
                                        (1047) ;
                                        (1048) ;  DESCRIPTION:
                                        (1049) ;     Returns the Status bits in the bStatus Register
                                        (1050) ;
                                        (1051) ;-----------------------------------------------------------------------------
                                        (1052) ;
                                        (1053) ;  ARGUMENTS:
                                        (1054) ;
                                        (1055) ;  RETURNS:
                                        (1056) ;     BYTE  bStatus -  Bus status data.  Use the following defined bits
                                        (1057) ;     returned in A.
                                        (1058) ;       I2CHW_RepStart:                     equ  0x01
                                        (1059) ;       I2CHW_NoStop:                       equ  0x02
                                        (1060) ;       I2CHW_NAKnextWr:                    equ  0x04
                                        (1061) ;
                                        (1062) ;  SIDE EFFECTS:
                                        (1063) ;    The A and X registers may be modified by this or future implementations
                                        (1064) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1065) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1066) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1067) ;    functions.
                                        (1068) ;          
                                        (1069) ;  THEORY of OPERATION or PROCEDURE:
                                        (1070) ;     Read the Bus Status register.
                                        (1071) ;
                                        (1072) 
                                        (1073)  I2CHW_bReadBusStatus:
                                        (1074) _I2CHW_bReadBusStatus:
                                        (1075)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1076)    RAM_SETPAGE_CUR >I2CHW_bStatus				                      ;Set the Page Pointer for LMM
0DBC: 51 03    MOV   A,[0x3]            (1077)    mov   A, [I2CHW_bStatus]                      ;return the status in A
                                        (1078)    RAM_EPILOGUE RAM_USE_CLASS_4
0DBE: 7F       RET                      (1079)    ret
                                        (1080) 
                                        (1081) .ENDSECTION
                                        (1082) 
                                        (1083) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1084) .SECTION
                                        (1085) ;-----------------------------------------------------------------------------
                                        (1086) ;  FUNCTION NAME: I2CHW_fReadBytes
                                        (1087) ;
                                        (1088) ;  DESCRIPTION:
                                        (1089) ;
                                        (1090) ;-----------------------------------------------------------------------------
                                        (1091) ;
                                        (1092) ;  ARGUMENTS:
                                        (1093) ;      A => Address of slave
                                        (1094) ;      X => Pointer to other arguments.
                                        (1095) ;    [x] => LSB of Array address to put data in.
                                        (1096) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (1097) ;  [X-2] => Count of bytes to read.
                                        (1098) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (1099) ;           to determine if:
                                        (1100) ;             0x01 => Use RepeatStart instead of Start
                                        (1101) ;             0x02 => Don't send Stop
                                        (1102) ;
                                        (1103) ;  RETURNS:       None
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;    I2C and block must be operational.
                                        (1117) ;    This routine will enable the I2C interrupt!
                                        (1118) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (1119) ;    pend on the ISR_ACTIVE bit until it can run
                                        (1120) ;
                                        (1121) IF	(TOOLCHAIN & HITECH)
                                        (1122) RxArray:      set   0
                                        (1123) RxByteCount:  set  -2
                                        (1124) RxMode:       set  -3
                                        (1125) ELSE
                                        (1126) RxArray:      equ   0
                                        (1127) RxByteCount:  equ  -2
                                        (1128) RxMode:       equ  -3
                                        (1129) ENDIF
                                        (1130) 
                                        (1131) 
                                        (1132)  I2CHW_fReadBytes:
                                        (1133)     push  A
                                        (1134) I2CMSCR_NotReady1Smm:
                                        (1135)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1136)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1137)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1138)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1139)           ;For multi master operations, a pening start or restart
                                        (1140)           ;request might be OK, the master might be waiting to
                                        (1141)           ;acquire the bus from another master
                                        (1142)         jnz   I2CMSCR_NotReady1Smm
                                        (1143)     pop   A
                                        (1144)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared by ISR
                                        (1145)     asl   A                                                ; Shift address to the left to make
                                        (1146)                                                            ; a complete byte with the R/W bit.
                                        (1147)     or    A,0x01                                           ; OR the address with the Read bit.
                                        (1148)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1149)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1150)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1151)     mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1152)     mov   [I2CHW_bStatus],A
                                        (1153)     ;
                                        (1154)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1155)         ;
                                        (1156)         push   X                                                ;preserve since it's used later
                                        (1157)         mov    A, [X+RxByteCount]                               ;get the write buf size
                                        (1158)         push   A
                                        (1159)         push   A                                                                                            ;this will be ignored
                                        (1160)         mov    A, [X+RxArray]                                   ;get the write buf addr
                                        (1161)         push   A
                                        (1162)         mov    X, sp
                                        (1163)         dec    X
                                        (1164)         call  I2CHW_InitWrite                              ;sets the addr and byte count to write to
                                        (1165)         add SP, -3
                                        (1166)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1167) 
                                        (1168)     mov   A,[I2CHW_SlaveAddr]
                                        (1169)     tst   [x+RxMode],I2CHW_RepStart
                                        (1170)     jnz   DoRestartRxSmm
                                        (1171)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1172)     jnz   DoRestartRxSmm
                                        (1173)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1174)     jmp   CheckRxAckSmm
                                        (1175) DoRestartRxSmm:
                                        (1176)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1177)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (1178)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (1179)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (1180) 
                                        (1181) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
                                        (1182)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (1183)         ;is finished.
                                        (1184) ;End_RD:
                                        (1185)     ret
                                        (1186) 
                                        (1187) .ENDSECTION
                                        (1188) 
                                        (1189) .SECTION
                                        (1190) ;-----------------------------------------------------------------------------
                                        (1191) ;  FUNCTION NAME: I2CHW_bWriteBytes
                                        (1192) ;
                                        (1193) ;  DESCRIPTION:
                                        (1194) ;    Write multiple data bits to slave device.
                                        (1195) ;
                                        (1196) ;-----------------------------------------------------------------------------
                                        (1197) ;
                                        (1198) ;  ARGUMENTS:
                                        (1199) ;     A => Address of slave
                                        (1200) ;     X => Pointer to other arguments.
                                        (1201) ;   [x] => LSB of Array address to put data in.
                                        (1202) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (1203) ; [X-2] => Count of bytes to write.
                                        (1204) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (1205) ;          to determine if:
                                        (1206) ;              0x01 => Use RePeatStart instead of Start
                                        (1207) ;              0x02 => Don't send Stop
                                        (1208) ;
                                        (1209) ;
                                        (1210) ;  RETURNS:     None
                                        (1211) ;
                                        (1212) ;  SIDE EFFECTS:
                                        (1213) ;    The A and X registers may be modified by this or future implementations
                                        (1214) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1215) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1216) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1217) ;    functions.
                                        (1218) ;          
                                        (1219) IF	(TOOLCHAIN & HITECH)
                                        (1220) TxArray:      set   0
                                        (1221) TxByteCount:  set  -2
                                        (1222) TxMode:       set  -3
                                        (1223) ELSE
                                        (1224) TxArray:      equ   0
                                        (1225) TxByteCount:  equ  -2
                                        (1226) TxMode:       equ  -3
                                        (1227) ENDIF
                                        (1228) 
                                        (1229)  I2CHW_bWriteBytes:
                                        (1230)     push  A
                                        (1231) I2CMSCR_NotReady2Smm:
                                        (1232)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1233)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1234)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1235)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1236)           ;For multi master operations, a pening start or restart
                                        (1237)           ;request might be OK, the master might be waiting to
                                        (1238)           ;acquire the bus from another master
                                        (1239)         jnz   I2CMSCR_NotReady2Smm
                                        (1240)     pop   A
                                        (1241)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared at end of ISR
                                        (1242)     asl   A                                                ; Shift address to the left to make
                                        (1243)                                                            ; a complete byte with the R/W bit.
                                        (1244)                                                            ; The ASL takes care of clearing bit 0.
                                        (1245)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1246)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1247)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1248)     mov   A, [X+TxMode]                                                             ; place the TxMode in status so ISR can access it
                                        (1249)     mov   [I2CHW_bStatus],A
                                        (1250)     ;
                                        (1251)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1252)         ;
                                        (1253)         push   X                                                ;preserve since it's used later
                                        (1254)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1255)                                                                 ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1256)         mov    A, [X+TxByteCount]                               ;get the write buf size
                                        (1257)         push   A
                                        (1258)         push   A                                                                                            ;this will be ignored
                                        (1259)         mov    A, [X+TxArray]                                   ;get the write buf addr
                                        (1260)         push   A
                                        (1261)         mov    X, sp
                                        (1262)         dec    X
                                        (1263)         call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
                                        (1264)         add    SP, -3
                                        (1265)         pop    X                                                ;restore X to be used for the rest of this routine
                                        (1266)     ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (1267) 
                                        (1268) 
                                        (1269)     mov   A,[I2CHW_SlaveAddr]
                                        (1270)     tst   [x+TxMode],I2CHW_RepStart
                                        (1271)     jnz   DoRestartTxSmm
                                        (1272)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1273)     jnz   DoRestartRxSmm
                                        (1274)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1275)     jmp   DoTxAckSmm
                                        (1276) DoRestartTxSmm:
                                        (1277)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1278) DoTxAckSmm:
                                        (1279) 
                                        (1280) 
                                        (1281) ;WriteSlaveAck:
                                        (1282)     ret
                                        (1283) 
                                        (1284) .ENDSECTION
                                        (1285) 
                                        (1286) .SECTION
                                        (1287) ;-----------------------------------------------------------------------------
                                        (1288) ;  FUNCTION NAME: I2CHW_bWriteCBytes
                                        (1289) ;
                                        (1290) ;  DESCRIPTION:
                                        (1291) ;    Write multiple data bits to slave device from ROM
                                        (1292) ;
                                        (1293) ;-----------------------------------------------------------------------------
                                        (1294) ;
                                        (1295) ;  ARGUMENTS:
                                        (1296) ;      A => Address of slave
                                        (1297) ;      X => Pointer to other arguments.
                                        (1298) ;     [x] => LSB of ROM Array address to put data in.
                                        (1299) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (1300) ;   [X-2] => Count of bytes to write.
                                        (1301) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (1302) ;            to determine if:
                                        (1303) ;               0x01 => Use RepeatStart instead of Start
                                        (1304) ;               0x02 => Don't send Stop
                                        (1305) ;
                                        (1306) ;  RETURNS:
                                        (1307) ;    None
                                        (1308) ;
                                        (1309) ;  SIDE EFFECTS:
                                        (1310) ;    The A and X registers may be modified by this or future implementations
                                        (1311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1314) ;    functions.
                                        (1315) ;          
                                        (1316) IF	(TOOLCHAIN & HITECH)
                                        (1317) TxCArrayLSB:   set   0
                                        (1318) TxCArrayMSB:   set  -1
                                        (1319) TxCByteCount:  set  -2
                                        (1320) TxCMode:       set  -3
                                        (1321) ELSE
                                        (1322) TxCArrayLSB:   equ   0
                                        (1323) TxCArrayMSB:   equ  -1
                                        (1324) TxCByteCount:  equ  -2
                                        (1325) TxCMode:       equ  -3
                                        (1326) ENDIF
                                        (1327) 
                                        (1328)  I2CHW_bWriteCBytes:
                                        (1329)     push  A
                                        (1330) I2CMSCR_NotReady3Smm:
                                        (1331)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1332)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1333)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1334)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1335)           ;For multi master operations, a pening start or restart
                                        (1336)           ;request might be OK, the master might be waiting to
                                        (1337)           ;acquire the bus from another master
                                        (1338)         jnz   I2CMSCR_NotReady3Smm
                                        (1339)     pop   A
                                        (1340)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
                                        (1341)         asl   A                                                 ; Shift address to the left to make
                                        (1342)                                                            ; a complete byte with the R/W bit.
                                        (1343)                                                            ; The ASL takes care of clearing bit 0.
                                        (1344)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1345)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1346)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1347)         mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1348)     mov   [I2CHW_bStatus],A
                                        (1349)     ;
                                        (1350)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1351)         ;
                                        (1352)         push   X                                                ;preserve X since it's used later
                                        (1353)         mov    A, 0                                             ;get the write buf size (this is the hi order part)
                                        (1354)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1355)         jnc     . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1356)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
                                        (1357)         push   A
                                        (1358)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
                                        (1359)         push   A
                                        (1360)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
                                        (1361)         push   A                                                                                        ;this will be ignored
                                        (1362)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
                                        (1363)         push   A
                                        (1364)         mov    X, sp
                                        (1365)         dec    X
                                        (1366)         call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
                                        (1367)         add SP, -4
                                        (1368)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1369)     ;or  [I2CHW_RsrcStatus],I2C_READFLASH
                                        (1370)     mov   A,[I2CHW_SlaveAddr]
                                        (1371)     tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
                                        (1372)     jnz   DoCRestartTxSmm                                      ; should executed.
                                        (1373)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1374)     jnz   DoRestartRxSmm
                                        (1375)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1376)     jmp   DoCTxAckSmm
                                        (1377) DoCRestartTxSmm:
                                        (1378)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1379) 
                                        (1380) DoCTxAckSmm:                                                   ; Test to see if Slave is ACKed
                                        (1381) 
                                        (1382) ;CWriteSlaveAck:
                                        (1383)         ret
                                        (1384) 
                                        (1385) .ENDSECTION
                                        (1386) 
                                        (1387) 
                                        (1388) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (1389) 
                                        (1390) ; End of File I2CHW.asm
                                        (1391) 
                                        (1392) 
FILE: lib\i2chwint.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWINT.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CHW Master Interrupt Service Routine
                                        (0008) ;;  This is the interrupt service routine for the Single Master I2C function.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "I2CHWCommon.inc"
                                        (0017) include "I2CHWMstr.inc"
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export     I2CHW_Read_Count
                                        (0024) export    _I2CHW_Read_Count
                                        (0025) export     I2CHW_Write_Count
                                        (0026) export    _I2CHW_Write_Count
                                        (0027) 
                                        (0028) export    pI2CHW_Read_BufLO
                                        (0029) export   _pI2CHW_Read_BufLO
                                        (0030) export    pI2CHW_Write_BufLO
                                        (0031) export   _pI2CHW_Write_BufLO
                                        (0032) export    I2CHW_RsrcStatus
                                        (0033) export   _I2CHW_RsrcStatus
                                        (0034) export    I2CHW_SlaveAddr
                                        (0035) export   _I2CHW_SlaveAddr
                                        (0036) 
                                        (0037) ;-----------------------------------------------
                                        (0038) ; WARNING: The variables below are deprecated
                                        (0039) ; and have been replaced with Read_BufLO
                                        (0040) ; and Write_BufLO
                                        (0041) ;-----------------------------------------------
                                        (0042) export    pI2CHW_Read_Buf
                                        (0043) export   _pI2CHW_Read_Buf
                                        (0044) export    pI2CHW_Write_Buf
                                        (0045) export   _pI2CHW_Write_Buf
                                        (0046) ;-----------------------------------------------
                                        (0047) ; END WARNING
                                        (0048) ;-----------------------------------------------
                                        (0049)  
                                        (0050) area InterruptRAM(RAM, REL, CON)
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ; Variable Allocation
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056)   I2CHW_SlaveAddr:
                                        (0057)  _I2CHW_SlaveAddr:                           blk      1
                                        (0058)   I2CHW_RsrcStatus:
                                        (0059)  _I2CHW_RsrcStatus:                          blk     1
                                        (0060)   I2CHW_Write_Count:
                                        (0061)  _I2CHW_Write_Count:                         blk    1
                                        (0062) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0063) export    pI2CHW_Write_BufHI
                                        (0064) export   _pI2CHW_Write_BufHI
                                        (0065) 
                                        (0066)  pI2CHW_Write_BufHI:
                                        (0067) _pI2CHW_Write_BufHI:                         blk     1
                                        (0068) ENDIF
                                        (0069) ;-----------------------------------------------
                                        (0070) ; WARNING: The variable below is deprecated
                                        (0071) ; and has been replaced Write_BufLO
                                        (0072) ;-----------------------------------------------
                                        (0073)  pI2CHW_Write_Buf:
                                        (0074) _pI2CHW_Write_Buf:
                                        (0075) ;-----------------------------------------------
                                        (0076) ; END WARNING
                                        (0077) ;-----------------------------------------------
                                        (0078)  pI2CHW_Write_BufLO:
                                        (0079) _pI2CHW_Write_BufLO:                         blk      1
                                        (0080) 
                                        (0081) IF I2CHW_READ_FLASH
                                        (0082) export    pI2CHW_Read_BufHI
                                        (0083) export   _pI2CHW_Read_BufHI
                                        (0084) 
                                        (0085)  pI2CHW_Read_BufHI:
                                        (0086) _pI2CHW_Read_BufHI:                          blk     1
                                        (0087) ELSE
                                        (0088) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0089) export    pI2CHW_Read_BufHI
                                        (0090) export   _pI2CHW_Read_BufHI
                                        (0091) 
                                        (0092)  pI2CHW_Read_BufHI:
                                        (0093) _pI2CHW_Read_BufHI:                          blk     1
                                        (0094) ENDIF
                                        (0095) ENDIF
                                        (0096) 
                                        (0097) ;-----------------------------------------------
                                        (0098) ; WARNING: The variable below is deprecated
                                        (0099) ; and has been replaced Read_BufLO
                                        (0100) ;-----------------------------------------------
                                        (0101)  pI2CHW_Read_Buf:
                                        (0102) _pI2CHW_Read_Buf:
                                        (0103) ;-----------------------------------------------
                                        (0104) ; END WARNING
                                        (0105) ;-----------------------------------------------
                                        (0106)  pI2CHW_Read_BufLO:
                                        (0107) _pI2CHW_Read_BufLO:                          blk       1
                                        (0108) 
                                        (0109) IF I2CHW_READ_FLASH
                                        (0110) export    I2CHW_Read_CountHI
                                        (0111) export   _I2CHW_Read_CountHI
                                        (0112) 
                                        (0113)  I2CHW_Read_CountHI:
                                        (0114) _I2CHW_Read_CountHI:                         blk    1
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)  I2CHW_Read_Count:
                                        (0118) _I2CHW_Read_Count:                           blk      1
                                        (0119) 
                                        (0120) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0121) ;---------------------------------------------------
                                        (0122) ; Insert your custom declarations below this banner
                                        (0123) ;---------------------------------------------------
                                        (0124) 
                                        (0125) ;------------------------
                                        (0126) ; Includes
                                        (0127) ;------------------------
                                        (0128) 
                                        (0129) 	
                                        (0130) ;------------------------
                                        (0131) ;  Constant Definitions
                                        (0132) ;------------------------
                                        (0133) 
                                        (0134) 
                                        (0135) ;------------------------
                                        (0136) ; Variable Allocation
                                        (0137) ;------------------------
                                        (0138) 
                                        (0139) 
                                        (0140) ;---------------------------------------------------
                                        (0141) ; Insert your custom declarations above this banner
                                        (0142) ;---------------------------------------------------
                                        (0143) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0144) 
                                        (0145) 
                                        (0146) 
                                        (0147) AREA UserModules (ROM, REL)
                                        (0148) 
                                        (0149) 
                                        (0150) export _I2CHW_ISR
                                        (0151) ;;****************************************************
                                        (0152) ;; I2C_MASTER  main entry point from vector 60h
                                        (0153) ;;
                                        (0154) ;;****************************************************
                                        (0155) 
                                        (0156) 
                                        (0157) _I2CHW_ISR:
0DBF: 08       PUSH  A                  (0158)     push A
0DC0: 10       PUSH  X                  (0159)     push X
0DC1: 5D D3    MOV   A,REG[0xD3]        
0DC3: 08       PUSH  A                  
                                        (0160) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0161)     REG_PRESERVE IDX_PP
                                        (0162) ENDIF
                                        (0163)     
                                        (0164)     ; Stop trap is not recommended because the stop bit cannot be cleared
                                        (0165)     ; User may choose to enable it
                                        (0166)     ; Add code to handle stop condition here
                                        (0167) 
0DC4: 49 D7 08 TST   REG[0xD7],0x8      (0168)     tst reg[I2CHW_SCR], I2C_ADDRIN
0DC7: A0 18    JZ    0x0DE0             (0169)     jz DataState
                                        (0170)     ;test for a start condition sent out, or bus error, ack from slave, or (lost arb & addr)
                                        (0171) AddrState:
0DC9: 49 D9 01 TST   REG[0xD9],0x1      (0172)     tst reg[I2CHW_MSCR], I2CM_SNDSTRT
0DCC: B0 2F    JNZ   0x0DFC             (0173)     jnz NoStart
0DCE: 49 D7 02 TST   REG[0xD7],0x2      (0174)     tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
0DD1: B0 1E    JNZ   0x0DF0             (0175)     jnz SlaveAddrNAK
                                        (0176)                                                            ;slave must have acked here
                                        (0177)                                                            
0DD3: 47 04 01 TST   [0x4],0x1          (0178)     tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read (from slave and put it in RAM,
                                        (0179)                                                            ;bit 0 = 0 then write to slave and get it from RAM or Flash
0DD6: B0 2E    JNZ   0x0E05             (0180)     jnz I2C_ReadSlave1stByte                               ;bit 0 was 1
0DD8: 80 A7    JMP   0x0E80             (0181)     jmp I2C_WriteSlave1stByte                              ;bit 0 was 0
0DDA: 18       POP   A                  
0DDB: 60 D3    MOV   REG[0xD3],A        
                                        (0182) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0183)     REG_RESTORE IDX_PP
                                        (0184) ENDIF
0DDD: 20       POP   X                  (0185)     pop X
0DDE: 18       POP   A                  (0186)     pop A
0DDF: 7E       RETI                     (0187)     reti
                                        (0188) 
                                        (0189) DataState:
0DE0: 2E 05 80 OR    [0x5],0x80         (0190)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
0DE3: 47 04 01 TST   [0x4],0x1          (0191)     tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read, bit 0 = 0 then write
0DE6: B0 2D    JNZ   0x0E14             (0192)     jnz I2C_ReadSlave                                      ;bit 0 was 1
                                        (0193) 
                                        (0194) StillDataToWrite:
0DE8: 80 9D    JMP   0x0E86             (0195)     jmp I2C_WriteSlave                                     ;bit 0 was 0
0DEA: 18       POP   A                  
0DEB: 60 D3    MOV   REG[0xD3],A        
                                        (0196) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0197)     REG_RESTORE IDX_PP
                                        (0198) ENDIF
0DED: 20       POP   X                  (0199)     pop X
0DEE: 18       POP   A                  (0200)     pop A
0DEF: 7E       RETI                     (0201)     reti
0DF0: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0202) 
                                        (0203) 
                                        (0204) SlaveAddrNAK:
                                        (0205)     ;;
                                        (0206)     ;; all there is to do here is to return, the slave didn't respond so it's not there or needs
                                        (0207)     ;; to be tried later.
                                        (0208)     ;;
                                        (0209) ;@PSoC_UserCode_BODY4@ (Do not change this line.)
                                        (0210) ;---------------------------------------------------
                                        (0211) ; Insert your custom code below this banner
                                        (0212) ; to modify the way a NAK from a slave is handled
                                        (0213) ; possibly set a user defined status
                                        (0214) ;---------------------------------------------------
                                        (0215) 
                                        (0216) ;********************************************************
                                        (0217) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0218) ;********************************************************
                                        (0219) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0220) ;
                                        (0221) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0222) ;
                                        (0223)     SetI2CHW_SCR 0     ;sets the tx/rx bit to receive, generates a stop without sending any data
                                        (0224) 
0DF3: 26 05 7F AND   [0x5],0x7F         (0225)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0DF6: 18       POP   A                  
0DF7: 60 D3    MOV   REG[0xD3],A        
                                        (0226) 
                                        (0227) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0228)     REG_RESTORE IDX_PP
                                        (0229) ENDIF
0DF9: 20       POP   X                  (0230)     pop X
0DFA: 18       POP   A                  (0231)     pop A
0DFB: 7E       RETI                     (0232)     reti
                                        (0233) 
                                        (0234) NoStart:
                                        (0235)     ;here might test loss of arbitration and the presence of an address bit indicating that the
                                        (0236)     ;Master is being addressed as a slave.
                                        (0237)     ;;
                                        (0238)     ;; there may be a need to indicate that there was a Master transmission
                                        (0239)     ;; failure or an unsuccessful attempt.
                                        (0240)     ;;
0DFC: 26 05 7F AND   [0x5],0x7F         (0241)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0DFF: 18       POP   A                  
0E00: 60 D3    MOV   REG[0xD3],A        
                                        (0242) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0243)     REG_RESTORE IDX_PP
                                        (0244) ENDIF
0E02: 20       POP   X                  (0245)     pop X
0E03: 18       POP   A                  (0246)     pop A
0E04: 7E       RETI                     (0247)     reti
                                        (0248) 
                                        (0249) I2C_ReadSlave1stByte:
0E05: 2E 05 80 OR    [0x5],0x80         (0250)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
0E08: 26 05 FB AND   [0x5],0xFB         (0251)     and [I2CHW_RsrcStatus], ~I2CHW_RD_COMPLETE
0E0B: 62 D7 00 MOV   REG[0xD7],0x0      
0E0E: 18       POP   A                  
0E0F: 60 D3    MOV   REG[0xD3],A        
                                        (0252) 
                                        (0253) ;read normal data in from slave immediately after the address is sent, there is no data to read
                                        (0254) ;but the bus is stalled at byte complete
                                        (0255) 
                                        (0256) ;
                                        (0257) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0258) ;
                                        (0259)     SetI2CHW_SCR 0     ;sets the tx/rx bit to receive, and clocks a byte in
                                        (0260) 
                                        (0261) 
                                        (0262) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0263)     REG_RESTORE IDX_PP
                                        (0264) ENDIF
0E11: 20       POP   X                  (0265)     pop X
0E12: 18       POP   A                  (0266)     pop A
0E13: 7E       RETI                     (0267)     reti
                                        (0268) 
                                        (0269) I2C_ReadSlave:                                             ;this is just a normal read
                                        (0270) 
                                        (0271) 
                                        (0272) ;;code snipped from old SW I2C below
                                        (0273) ;
                                        (0274) ; MASTER READ from SLAVE
                                        (0275) ; (and writing to it's own RAM--Write_Buf and Write_Cnt)
                                        (0276) ;
                                        (0277) ;@PSoC_UserCode_BODY1_V1.2@ (Do not change this line.)
                                        (0278) ;---------------------------------------------------
                                        (0279) ; Insert your custom code below this banner
                                        (0280) ;---------------------------------------------------
                                        (0281) 
                                        (0282) ;********************************************************
                                        (0283) ; By modifying the section from here down to the next comment block
                                        (0284) ; a user could process data for a custom I2C Master Read (write to RAM) application
                                        (0285) ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
                                        (0286) ;********************************************************
0E14: 47 03 04 TST   [0x3],0x4          (0287)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
0E17: B0 14    JNZ   0x0E2C             (0288)    jnz   InStoreData
                                        (0289)    ;
                                        (0290)    ;process write data here
                                        (0291)    ;
0E19: 7A 06    DEC   [0x6]              (0292)    dec   [I2CHW_Write_Count]
0E1B: C0 4F    JC    0x0E6B             (0293)    jc    CompleteRDXfer                                              ; carry set if value became -1
                                        (0294)    ;jz    InStoreData                                                                                             ;In theory overflow cant happen but stop the transaction anyway.
0E1D: 3C 06 00 CMP   [0x6],0x0          (0295)    cmp   [I2CHW_Write_Count], 00                                     ;set nak flag, dec count, and store data
0E20: A0 03    JZ    0x0E24             (0296)    jz    InNakNextByte
0E22: 80 06    JMP   0x0E29             (0297)    jmp   InNotBufEnd
                                        (0298) InNakNextByte:                                                       ;set the nakflag in I2CHW_bStatus
0E24: 2E 03 04 OR    [0x3],0x4          (0299)    or    [I2CHW_bStatus], fI2C_NAKnextWr
0E27: 80 04    JMP   0x0E2C             (0300)    jmp   InStoreData
                                        (0301) InNotBufEnd:
0E29: 26 03 FB AND   [0x3],0xFB         (0302)    and   [I2CHW_bStatus], ~fI2C_NAKnextWr                            ;clear the nak flag in case it was set from a previous operation
                                        (0303) InStoreData:
                                        (0304)    ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
0E2C: 2E 05 10 OR    [0x5],0x10         (0305)    or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR                          ;set current status
                                        (0306) IF SYSTEM_LARGE_MEMORY_MODEL
0E2F: 51 07    MOV   A,[0x7]            (0307)    mov   A, [pI2CHW_Write_BufHI]
0E31: 60 D3    MOV   REG[0xD3],A        
                                        (0308) ENDIF
                                        (0309)    RAM_SETPAGE_IDX A
0E33: 58 08    MOV   X,[0x8]            (0310)    mov   X, [pI2CHW_Write_BufLO]
0E35: 5D D8    MOV   A,REG[0xD8]        (0311)    mov   A, reg[I2CHW_DR]
0E37: 70 3F    AND   F,0x3F             
0E39: 71 80    OR    F,0x80             
                                        (0312)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0E3B: 54 00    MOV   [X+0],A            (0313)    mov   [X], A
0E3D: 70 3F    AND   F,0x3F             
0E3F: 71 00    OR    F,0x0              
                                        (0314)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0E41: 76 08    INC   [0x8]              (0315)    inc   [pI2CHW_Write_BufLO]
                                        (0316) 
0E43: 47 03 04 TST   [0x3],0x4          (0317)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
0E46: B0 0A    JNZ   0x0E51             (0318)    jnz   NAK_this_one
0E48: 62 D7 10 MOV   REG[0xD7],0x10     
0E4B: 18       POP   A                  
0E4C: 60 D3    MOV   REG[0xD3],A        
                                        (0319) 
                                        (0320) ;********************************************************
                                        (0321) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0322) ;********************************************************
                                        (0323) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0324) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0325) 
                                        (0326) ;
                                        (0327) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0328) ;
                                        (0329)     SetI2CHW_SCR I2C_ACKOUT                                          ;send Ack
                                        (0330) 
                                        (0331) 
                                        (0332) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0333)     REG_RESTORE IDX_PP
                                        (0334) ENDIF
0E4E: 20       POP   X                  (0335)     pop X
0E4F: 18       POP   A                  (0336)     pop A
0E50: 7E       RETI                     (0337)     reti
                                        (0338) 
                                        (0339) NAK_this_one:
                                        (0340) 
0E51: 26 03 FB AND   [0x3],0xFB         (0341)     and  [I2CHW_bStatus], ~fI2C_NAKnextWr
                                        (0342) 
                                        (0343)     ; *****
                                        (0344)     ; here we may need to look at the mode that this was called under
                                        (0345)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0346)     ; ******
0E54: 26 05 F8 AND   [0x5],0xF8         (0347)     and   [I2CHW_RsrcStatus], ~0x07                                  ;clear the read status bits
0E57: 2E 05 01 OR    [0x5],0x1          (0348)     or    [I2CHW_RsrcStatus], I2CHW_RD_NOERR
0E5A: 2E 05 04 OR    [0x5],0x4          (0349)     or    [I2CHW_RsrcStatus], I2CHW_RD_COMPLETE
                                        (0350) 
0E5D: 26 03 03 AND   [0x3],0x3          (0351)     and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
0E60: A0 0A    JZ    0x0E6B             (0352)     jz      CompleteRDXfer
0E62: 26 05 7F AND   [0x5],0x7F         (0353)     and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0E65: 18       POP   A                  
0E66: 60 D3    MOV   REG[0xD3],A        
                                        (0354) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0355)     REG_RESTORE IDX_PP
                                        (0356) ENDIF
0E68: 20       POP   X                  (0357)     pop X
0E69: 18       POP   A                  (0358)     pop A
0E6A: 7E       RETI                     (0359)     reti
0E6B: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0360)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0361)     ;The NAK (not I2C_SNDACK) bit in I2C_SCR below will automatically generate a stop
                                        (0362) 
                                        (0363) CompleteRDXfer:
                                        (0364) 
                                        (0365) ;
                                        (0366) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0367) ;
                                        (0368)     SetI2CHW_SCR 0                                                   ;send Ack
                                        (0369) 
                                        (0370) 
0E6E: 26 05 7F AND   [0x5],0x7F         (0371)     and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0E71: 18       POP   A                  
0E72: 60 D3    MOV   REG[0xD3],A        
                                        (0372) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0373)     REG_RESTORE IDX_PP
                                        (0374) ENDIF
0E74: 20       POP   X                  (0375)     pop X
0E75: 18       POP   A                  (0376)     pop A
0E76: 7E       RETI                     (0377)     reti                                                             ;return and wait for the next interrupt (on data)
0E77: 62 D7 10 MOV   REG[0xD7],0x10     
0E7A: 18       POP   A                  
0E7B: 60 D3    MOV   REG[0xD3],A        
                                        (0378) 
                                        (0379) AckTheRead:
                                        (0380) 
                                        (0381) ;
                                        (0382) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0383) ;
                                        (0384)     SetI2CHW_SCR I2C_ACKOUT                                          ;send Ack
                                        (0385) 
                                        (0386) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0387)     REG_RESTORE IDX_PP
                                        (0388) ENDIF
0E7D: 20       POP   X                  (0389)     pop X
0E7E: 18       POP   A                  (0390)     pop A
0E7F: 7E       RETI                     (0391)     reti
                                        (0392) 
                                        (0393) 
                                        (0394) I2C_WriteSlave1stByte:
                                        (0395) ;write normal data to slave
0E80: 26 05 BF AND   [0x5],0xBF         (0396)     and [I2CHW_RsrcStatus], ~I2CHW_WR_COMPLETE
0E83: 2E 05 80 OR    [0x5],0x80         (0397)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0398) 
                                        (0399) 
                                        (0400) I2C_WriteSlave:
                                        (0401) 
0E86: 49 D7 02 TST   REG[0xD7],0x2      (0402)     tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
0E89: B0 4C    JNZ   0x0ED6             (0403)     jnz SlaveDataNAK
0E8B: 50 04    MOV   A,0x4              (0404)     mov A, (I2C_TX)
0E8D: 08       PUSH  A                  (0405)     push A
                                        (0406) 
                                        (0407) ;
                                        (0408) ;MASTER is WRITING TO SLAVE (& reading data from ram or flash buffer)
                                        (0409) ;
                                        (0410) ;;code snipped from SW I2C below
                                        (0411) 
                                        (0412) I2C_ObtainOutData:
                                        (0413) 
                                        (0414) 
                                        (0415) ;********************************************************
                                        (0416) ; here we need to get the next data to output (master-read)
                                        (0417) ; also set the status byte for use on exit
                                        (0418) ;********************************************************
                                        (0419) IF I2CHW_READ_FLASH
                                        (0420) ;@PSoC_UserCode_BODY2_V1.2@ (Do not change this line.)
                                        (0421) ;---------------------------------------------------
                                        (0422) ; Insert your custom code below this banner
                                        (0423) ; to modify the way a master might read non-volitile data
                                        (0424) ; to send.
                                        (0425) ;---------------------------------------------------
                                        (0426) 
                                        (0427)     tst  [I2CHW_RsrcStatus],I2CHW_READFLASH
                                        (0428)     jz   ReadOutData
                                        (0429) 
                                        (0430)     ;
                                        (0431)     ;get the data
                                        (0432)     ;
                                        (0433)     mov  X, [pI2CHW_Read_BufLO]
                                        (0434)     mov  A, [pI2CHW_Read_BufHI]
                                        (0435)     romx
                                        (0436)     mov  reg[I2CHW_DR],A
                                        (0437)     dec  [I2CHW_Read_Count]                                          ;calc addr lsb
                                        (0438)     jnc  NoDecHighCount
                                        (0439)     dec  [I2CHW_Read_CountHI]
                                        (0440) 
                                        (0441)     jc   MstrWRComplete
                                        (0442) 
                                        (0443) NoDecHighCount:
                                        (0444) 
                                        (0445)     inc  [pI2CHW_Read_BufLO]                                         ;set the next flash address to read
                                        (0446)     jnc  NoIncHiAddr
                                        (0447)     inc  [pI2CHW_Read_BufHI]
                                        (0448) NoIncHiAddr:
                                        (0449)    jmp   I2CNormalOutput
                                        (0450) ;
                                        (0451) ;****** THERE SHOULD BE NO WAY TO REACH THIS STATE WE'LL JUST TERMINATE THE ACTIVITY SINCE WERE THE MASTER
                                        (0452) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0453) ;
                                        (0454) ;FlashRdOverflow:
                                        (0455)     ;deal with the over flow cond by resending last data byte (dec the low addr)
                                        (0456) 
                                        (0457) ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0458) ;                                                                      ;set count back to 0
                                        (0459) ;   mov   [I2CHW_Read_CountHI], 0                                    ;functionally the same as incrementing ffff and less instructions
                                        (0460) ;   mov   [I2CHW_Read_Count], 0
                                        (0461) ;   jmp   I2CNormalRead
                                        (0462) 
                                        (0463) ;---------------------------------------------------
                                        (0464) ; Insert your custom code above this banner
                                        (0465) ;---------------------------------------------------
                                        (0466) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0467) 
                                        (0468) ENDIF
                                        (0469) ;@PSoC_UserCode_BODY3@ (Do not change this line.)
                                        (0470) ;---------------------------------------------------
                                        (0471) ; Insert your custom code below this banner
                                        (0472) ; to modify the way a master might read RAM data to send
                                        (0473) ; to an I2C device
                                        (0474) ; By replacing the section from here down to the next block
                                        (0475) ; a user could process data for a custom I2C READ application
                                        (0476) ;---------------------------------------------------
                                        (0477) ReadOutData:
                                        (0478)    ;read the current data byte
                                        (0479) IF SYSTEM_LARGE_MEMORY_MODEL
0E8E: 51 09    MOV   A,[0x9]            (0480)    mov   A, [pI2CHW_Read_BufHI]
0E90: 60 D3    MOV   REG[0xD3],A        
                                        (0481) ENDIF
                                        (0482)    RAM_SETPAGE_IDX A
0E92: 58 0A    MOV   X,[0xA]            (0483)    mov   X, [pI2CHW_Read_BufLO]
0E94: 70 3F    AND   F,0x3F             
0E96: 71 80    OR    F,0x80             
                                        (0484)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0E98: 52 00    MOV   A,[X+0]            (0485)    mov   A, [X]
0E9A: 70 3F    AND   F,0x3F             
0E9C: 71 00    OR    F,0x0              
                                        (0486)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0E9E: 60 D8    MOV   REG[0xD8],A        (0487)    mov   reg[I2CHW_DR], A
0EA0: 7A 0B    DEC   [0xB]              (0488)    dec   [I2CHW_Read_Count]
                                        (0489) 
0EA2: C0 0E    JC    0x0EB1             (0490)    jc    MstrWRComplete
0EA4: 76 0A    INC   [0xA]              (0491)    inc   [pI2CHW_Read_BufLO]
0EA6: 80 01    JMP   0x0EA8             (0492)    jmp   I2CNormalOutput
                                        (0493) ;
                                        (0494) ;ram read overflow detected here, just resend the last location in the buffer
                                        (0495) ;
                                        (0496) ;********        THERE SHOULD BE NO WAY TO OVERFLOW FOR THIS CASE
                                        (0497) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0498) ;
                                        (0499) ;RamRDOverflow:
                                        (0500) ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0501) ;   inc   [I2CHW_Read_Count]                                         ; set back to zero
                                        (0502) 
                                        (0503) ;---------------------------------------------------
                                        (0504) ; End user I2C MASTER WRITE TO SLAVE /READ buffer customization section
                                        (0505) ; Insert your custom code above this banner
                                        (0506) ;---------------------------------------------------
                                        (0507) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0508) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0509) I2CNormalOutput:
                                        (0510) 
                                        (0511)     ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                                        (0512)     ;and place there based on whether or not the previous transmission was our I2C address.
0EA8: 18       POP   A                  (0513)     pop   A
0EA9: 60 D7    MOV   REG[0xD7],A        
0EAB: 18       POP   A                  
0EAC: 60 D3    MOV   REG[0xD3],A        
                                        (0514) 
                                        (0515) ;
                                        (0516) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0517) ;
                                        (0518)     SetI2CHW_SCR A                                                   ;Sets the I2C_TX bit in the I2C_SCR reg.
                                        (0519) 
                                        (0520) 
                                        (0521) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0522)     REG_RESTORE IDX_PP
                                        (0523) ENDIF
0EAE: 20       POP   X                  (0524)     pop X
0EAF: 18       POP   A                  (0525)     pop A
0EB0: 7E       RETI                     (0526)     reti ;return and wait for the next interrupt (on data)
                                        (0527) 
                                        (0528) MstrWRComplete:
0EB1: 26 05 8F AND   [0x5],0x8F         (0529)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
0EB4: 2E 05 40 OR    [0x5],0x40         (0530)     or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
0EB7: 2E 05 10 OR    [0x5],0x10         (0531)     or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR
                                        (0532) 
                                        (0533)     ; *****
                                        (0534)     ; here we may need to look at the mode that this was called under
                                        (0535)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0536)     ; ******
0EBA: 26 03 03 AND   [0x3],0x3          (0537)     and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
0EBD: A0 0B    JZ    0x0EC9             (0538)     jz      CompleteWRXfer
0EBF: 18       POP   A                  (0539)     pop  A                                                           ;clear the stack for return
0EC0: 26 05 7F AND   [0x5],0x7F         (0540)     and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0EC3: 18       POP   A                  
0EC4: 60 D3    MOV   REG[0xD3],A        
                                        (0541) 
                                        (0542) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0543)     REG_RESTORE IDX_PP
                                        (0544) ENDIF
0EC6: 20       POP   X                  (0545)     pop X
0EC7: 18       POP   A                  (0546)     pop A
0EC8: 7E       RETI                     (0547)     reti
                                        (0548)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0549)     ; The release of the I2C_TX bit in I2C_SCR below will automatically generate a stop
                                        (0550) 
                                        (0551) CompleteWRXfer:
                                        (0552) 
0EC9: 18       POP   A                  (0553)     pop   A
0ECA: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0554) 
                                        (0555) ;
                                        (0556) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0557) ;
                                        (0558)     SetI2CHW_SCR 0                                                   ;this will release the bus and generate a stop condition
                                        (0559) 
0ECD: 26 05 7F AND   [0x5],0x7F         (0560)    and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0ED0: 18       POP   A                  
0ED1: 60 D3    MOV   REG[0xD3],A        
                                        (0561) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0562)    REG_RESTORE IDX_PP
                                        (0563) ENDIF
0ED3: 20       POP   X                  (0564)    pop X
0ED4: 18       POP   A                  (0565)    pop A
0ED5: 7E       RETI                     (0566)    reti
                                        (0567) 
                                        (0568) SlaveDataNAK:
                                        (0569) ;must also fix up the data buffer.  While it is marginally safe to nak a byte as a slave and 
                                        (0570) ;store it.  It is NEVER safe as a master to notice that a written byte has been nak'ed by a 
                                        (0571) ;slave and fail to resend it.
                                        (0572) ;this piece of code fixes up the count and buffer that the master is using to get data from
                                        (0573) ;to re-transmit the byte when the next master write is done.
0ED6: 76 0B    INC   [0xB]              (0574)     inc  [I2CHW_Read_Count]                          ;calc addr lsb
                                        (0575) IF I2CHW_READ_FLASH
                                        (0576)     jnc  NoIncHighCount
                                        (0577)     inc  [I2CHW_Read_CountHI]
                                        (0578) 
                                        (0579) NoIncHighCount:
                                        (0580) ENDIF
0ED8: 7A 0A    DEC   [0xA]              (0581)     dec  [pI2CHW_Read_BufLO]                         ;set the next flash address to read
                                        (0582) IF SYSTEM_LARGE_MEMORY_MODEL
0EDA: D0 03    JNC   0x0EDE             (0583)     jnc  NoDecHiAddr
0EDC: 7A 09    DEC   [0x9]              (0584)     dec  [pI2CHW_Read_BufHI]
0EDE: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0585) NoDecHiAddr:
                                        (0586) ELSE
                                        (0587) IF I2CHW_READ_FLASH
                                        (0588)     jnc  NoDecHiCAddr
                                        (0589)     dec  [pI2CHW_Read_BufHI]
                                        (0590) NoDecHiCAddr:
                                        (0591) ENDIF
                                        (0592) ENDIF
                                        (0593) 
                                        (0594) ;;
                                        (0595) ;; all there is to do here is to return & set status, the slave didn't want any more data
                                        (0596) ;;
                                        (0597) ; no pop needed because the nak is detected before the push happens above
                                        (0598) 
                                        (0599) ;
                                        (0600) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0601) ;
                                        (0602)     SetI2CHW_SCR 0                                                   ;this will release the bus and generate a stop condition
                                        (0603) 
0EE1: 26 05 7F AND   [0x5],0x7F         (0604)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0EE4: 26 05 8F AND   [0x5],0x8F         (0605)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
0EE7: 2E 05 40 OR    [0x5],0x40         (0606)     or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
0EEA: 2E 05 20 OR    [0x5],0x20         (0607)     or    [I2CHW_RsrcStatus], I2CHW_WR_OVERFLOW
0EED: 18       POP   A                  
0EEE: 60 D3    MOV   REG[0xD3],A        
                                        (0608) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0609)     REG_RESTORE IDX_PP
                                        (0610) ENDIF
0EF0: 20       POP   X                  (0611)     pop X
0EF1: 18       POP   A                  (0612)     pop A
0EF2: 7E       RETI                     (0613)    reti
                                        (0614) 
                                        (0615) STOPTRAP:
                                        (0616)     ;
                                        (0617)     ;   If interrupt on STOP condition is enabled:
                                        (0618)     ;   Add user code to process stop (not recommended becuase I2C bus is NOT stalled and ISR
                                        (0619)     ;   may block reception of ongoing transactions/addresses
                                        (0620)     ;   STOP condition is never detected when a repeat start is used by the master.
                                        (0621)     ;
0EF3: 26 05 7F AND   [0x5],0x7F         (0622)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0EF6: 18       POP   A                  
0EF7: 60 D3    MOV   REG[0xD3],A        
                                        (0623) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0624)     REG_RESTORE IDX_PP
                                        (0625) ENDIF
0EF9: 20       POP   X                  (0626)     pop X
0EFA: 18       POP   A                  (0627)     pop A
0EFB: 7E       RETI                     (0628)     reti
                                        (0629) 
                                        (0630) ; end of file I2CHWINT.asm
FILE: lib\i2chwcommon.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWCommon.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ; include instance specific register definitions
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) ;-------------------------------------------------------------------
                                        (0034) ;  Declare the functions global for both assembler and C compiler.
                                        (0035) ;
                                        (0036) ;  Note that there are two names for each API. First name is
                                        (0037) ;  assembler reference. Name with underscore is name refence for
                                        (0038) ;  C compiler.  Calling function in C source code does not require
                                        (0039) ;  the underscore.
                                        (0040) ;-------------------------------------------------------------------
                                        (0041) 
                                        (0042) export    I2CHW_InitWrite
                                        (0043) export   _I2CHW_InitWrite
                                        (0044) export    I2CHW_InitRamRead
                                        (0045) export   _I2CHW_InitRamRead
                                        (0046) export    I2CHW_InitFlashRead
                                        (0047) export   _I2CHW_InitFlashRead
                                        (0048) export    I2CHW_bReadI2CStatus
                                        (0049) export   _I2CHW_bReadI2CStatus
                                        (0050) export    I2CHW_ClrRdStatus
                                        (0051) export   _I2CHW_ClrRdStatus
                                        (0052) export    I2CHW_ClrWrStatus
                                        (0053) export   _I2CHW_ClrWrStatus
                                        (0054) 
                                        (0055) 
                                        (0056) AREA UserModules (ROM, REL)
                                        (0057) 
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: I2CHW_InitWrite
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Initializes a data buffer pointer for the slave to use to deposit data, and
                                        (0065) ;     zeroes the value of a count byte for the same buffer.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  [SP-5]   -- count of bytes to write
                                        (0070) ;              [SP-4]   -- Hi order part of address Wrbuf
                                        (0071) ;              [SP-3]   -- Low order part of the address Wrbuf 
                                        (0072) ;
                                        (0073) ;  RETURNS:  none
                                        (0074) ;
                                        (0075) ;    Write Status bits are cleared
                                        (0076) ;
                                        (0077) ;  SIDE EFFECTS:
                                        (0078) ;    The A and X registers may be modified by this or future implementations
                                        (0079) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0080) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0081) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0082) ;    functions.
                                        (0083) ;          
                                        (0084) ;    Currently only the page pointer registers listed below are modified: 
                                        (0085) ;          CUR_PP
                                        (0086) ;
                                        (0087) ;    Write Status bits are cleared
                                        (0088) ;
                                        (0089) ;  THEORY of OPERATION or PROCEDURE:
                                        (0090) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0091) ;     the accumulator.  X register is the low order pointer.
                                        (0092) ;     IF a one byte buffer is established, set a flag to NAK the first written data byte.
                                        (0093) ;
                                        (0094) 
                                        (0095)  I2CHW_InitWrite:
                                        (0096) _I2CHW_InitWrite:
                                        (0097) 
                                        (0098) WrCnt:   equ -5
                                        (0099) WrBufHi: equ -4
                                        (0100) WrBufLo: equ -3
                                        (0101) 
                                        (0102) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0103)     RAM_PROLOGUE RAM_USE_CLASS_2
0EFC: 10       PUSH  X                  (0104) 	push  X
0EFD: 4F       MOV   X,SP               (0105) 	mov   X, SP
0EFE: 79       DEC   X                  (0106)     dec   X                                                          ;set up the pointer for correct param access
0EFF: 08       PUSH  A                  (0107)     push  A
0F00: 5D DE    MOV   A,REG[0xDE]        (0108)     mov   A, reg[I2CHW_INT_REG]
0F02: 08       PUSH  A                  (0109)     push  A                                                           ;preserve flags prior to disabling int
0F03: 41 DE FE AND   REG[0xDE],0xFE     
0F06: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0110)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0111) 
                                        (0112)     RAM_SETPAGE_CUR >I2CHW_bStatus						                             ;Set the Page Pointer for LMM
0F09: 26 03 FB AND   [0x3],0xFB         (0113)     and    [I2CHW_bStatus], ~fI2C_NAKnextWr                          ;reset the nak-next-written-byte flag.
                                        (0114) IF SYSTEM_LARGE_MEMORY_MODEL
0F0C: 52 FC    MOV   A,[X-4]            (0115)     mov   A, [X + WrBufHi]                                           ;move wrbuf addr to A
0F0E: 53 07    MOV   [0x7],A            (0116)     mov   [pI2CHW_Write_BufHI], A
                                        (0117) ENDIF
0F10: 52 FD    MOV   A,[X-3]            (0118)     mov   A, [X + WrBufLo]                                           ;move wrbuf addr to A
0F12: 53 08    MOV   [0x8],A            (0119)     mov   [pI2CHW_Write_BufLO], A
0F14: 52 FB    MOV   A,[X-5]            (0120)     mov   A, [X + WrCnt]                                               ;move Write_count to A
0F16: 53 06    MOV   [0x6],A            (0121)     mov   [I2CHW_Write_Count], A
0F18: 39 01    CMP   A,0x1              (0122)     cmp   A, 01                                                        ;if data buffer is one byte long or less
0F1A: A0 08    JZ    0x0F23             (0123)     jz    I2CHW_SetNak
0F1C: C0 06    JC    0x0F23             (0124)     jc    I2CHW_SetNak
0F1E: 26 05 8F AND   [0x5],0x8F         (0125)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the 0x10, 0x20 (Write status bits)
0F21: 80 09    JMP   0x0F2B             (0126)     jmp   I2Cs_1_ResetFlgs
                                        (0127) 
                                        (0128) I2CHW_SetNak:
0F23: 2E 03 04 OR    [0x3],0x4          (0129)     or    [I2CHW_bStatus], fI2C_NAKnextWr                            ;set the nak-next-written-byte flag.
0F26: 26 05 8F AND   [0x5],0x8F         (0130)     and   [I2CHW_RsrcStatus], ~0x70                                  ; clear the 0x10, 0x20 (Write status bits)
0F29: 80 01    JMP   0x0F2B             (0131)     jmp   I2Cs_1_ResetFlgs
                                        (0132) 
                                        (0133) I2Cs_1_ResetFlgs:
0F2B: 18       POP   A                  (0134)     pop A
0F2C: 21 01    AND   A,0x1              (0135)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
0F2E: A0 04    JZ    0x0F33             (0136)     jz  . + 5
0F30: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0137)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0F33: 18       POP   A                  (0138)     pop A
0F34: 20       POP   X                  (0139)     pop X
0F35: 70 3F    AND   F,0x3F             
0F37: 71 C0    OR    F,0xC0             
                                        (0140) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0141)     RAM_EPILOGUE RAM_USE_CLASS_2
0F39: 7F       RET                      (0142)     ret
0F3A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0143) 
                                        (0144) .ENDSECTION
                                        (0145) 
                                        (0146) .SECTION
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;  FUNCTION NAME: I2CHW_InitRamRead
                                        (0149) ;
                                        (0150) ;  DESCRIPTION:
                                        (0151) ;     Initializes a data buffer pointer for the slave to use to retrieve data from,
                                        (0152) ;     and zeroes the value of a count byte for the same buffer.
                                        (0153) ;
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:  [SP-5]  -- count of bytes to read
                                        (0157) ;              [SP-4]  -- Hi order part of addr to ReadBuf
                                        (0158) ;              [SP-3]  -- Low order part of the address to ReadBuf
                                        (0159) ;
                                        (0160) ;  RETURNS: none
                                        (0161) ;
                                        (0162) ;  SIDE EFFECTS:
                                        (0163) ;    The A and X registers may be modified by this or future implementations
                                        (0164) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0165) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0166) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0167) ;    functions.
                                        (0168) ;          
                                        (0169) ;    Currently only the page pointer registers listed below are modified: 
                                        (0170) ;          CUR_PP
                                        (0171) ;
                                        (0172) ;     Read Status bits are cleared
                                        (0173) ;
                                        (0174) ;  THEORY of OPERATION or PROCEDURE:
                                        (0175) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0176) ;     the accumulator.  X register is the low order pointer.
                                        (0177) ;
                                        (0178) 
                                        (0179)  I2CHW_InitRamRead:
                                        (0180) _I2CHW_InitRamRead:
                                        (0181) 
                                        (0182) RdCnt:     equ   -5
                                        (0183) RdBufHi:   equ   -4
                                        (0184) RdBufLo:   equ   -3
                                        (0185) 
                                        (0186)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0187) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0188) 	RAM_SETPAGE_CUR >I2CHW_Read_Count
0F3D: 10       PUSH  X                  (0189)     push  X
0F3E: 4F       MOV   X,SP               (0190) 	mov   X, SP
0F3F: 79       DEC   X                  (0191)     dec   X                                                          ;set up the pointer for correct param access
0F40: 08       PUSH  A                  (0192)     push  A
0F41: 5D DE    MOV   A,REG[0xDE]        (0193)     mov   A, reg[I2CHW_INT_REG]
0F43: 08       PUSH  A                  (0194)     push  A                                                            ;preserve flags prior to disabling int
0F44: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0195)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0196) 
                                        (0197) IF SYSTEM_LARGE_MEMORY_MODEL
0F47: 52 FC    MOV   A,[X-4]            (0198)     mov   A, [X + RdBufHi]                                           ;move wrbuf addr to A
0F49: 53 09    MOV   [0x9],A            (0199)     mov   [pI2CHW_Read_BufHI], A
                                        (0200) ENDIF
0F4B: 52 FD    MOV   A,[X-3]            (0201)     mov   A, [X + RdBufLo]                                             ; move rdbuf addr to A
0F4D: 53 0A    MOV   [0xA],A            (0202)     mov   [pI2CHW_Read_BufLO], A
0F4F: 52 FB    MOV   A,[X-5]            (0203)     mov   A, [X + RdCnt]                                               ; move RamRead_count to A
0F51: 53 0B    MOV   [0xB],A            (0204)     mov   [I2CHW_Read_Count], A
0F53: 7A 0B    DEC   [0xB]              (0205)     dec   [I2CHW_Read_Count]                                         ; since we decrement through zero...
0F55: 26 05 F0 AND   [0x5],0xF0         (0206)     and   [I2CHW_RsrcStatus], ~0x0f                                  ; clear the lower 4 (read status bits)
                                        (0207) 
0F58: 18       POP   A                  (0208)     pop A
0F59: 21 01    AND   A,0x1              (0209)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
0F5B: A0 04    JZ    0x0F60             (0210)     jz  . + 5
0F5D: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0211)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0F60: 18       POP   A                  (0212)     pop A
0F61: 20       POP   X                  (0213)     pop X
0F62: 70 3F    AND   F,0x3F             
0F64: 71 C0    OR    F,0xC0             
                                        (0214) 
                                        (0215)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0216)     RAM_EPILOGUE RAM_USE_CLASS_2
0F66: 7F       RET                      (0217)     ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) .SECTION
                                        (0222) ;-----------------------------------------------------------------------------
                                        (0223) ;  FUNCTION NAME: I2CHW_InitFlashRead
                                        (0224) ;
                                        (0225) ;  DESCRIPTION:
                                        (0226) ;     Initializes a flash data buffer pointer for the slave to use to retrieve
                                        (0227) ;     data from, and zeroes the value of a count byte for the same buffer.
                                        (0228) ;
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:  [SP-6]   -- Hi order part of flash Read count
                                        (0232) ;              [SP-5]   -- Low order part of flashRead counts
                                        (0233) ;              [SP-4]   -- Hi order part of the flash buf address
                                        (0234) ;              [SP-3]   -- Lo order part of flash buf address
                                        (0235) ;
                                        (0236) ;  RETURNS:
                                        (0237) ;
                                        (0238) ;  SIDE EFFECTS:
                                        (0239) ;    The A and X registers may be modified by this or future implementations
                                        (0240) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0241) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0242) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0243) ;    functions.
                                        (0244) ;          
                                        (0245) ;    Currently only the page pointer registers listed below are modified: 
                                        (0246) ;          CUR_PP
                                        (0247) ;
                                        (0248) ;    Read Status bits are cleared
                                        (0249) ;
                                        (0250) ;  THEORY of OPERATION or PROCEDURE:
                                        (0251) ;     The C compiler will place the upper order address of the buffer in Acc.
                                        (0252) ;     X register is the low order pointer.  A user module parameter is used to conserve code
                                        (0253) ;     if flash buffers are un-needed.  The API call is left defined and capable of returning in
                                        (0254) ;     either case
                                        (0255) ;
                                        (0256)  I2CHW_InitFlashRead:
                                        (0257) _I2CHW_InitFlashRead:
                                        (0258) 
                                        (0259) FlRdCntHI:     equ   -6
                                        (0260) FlRdCntLO:     equ   -5
                                        (0261) FlBufAdrHI:    equ   -4
                                        (0262) FlBufAdrLO:    equ   -3
                                        (0263) 
                                        (0264) IF I2CHW_READ_FLASH
                                        (0265)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0266)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0267)     RAM_SETPAGE_CUR >pI2CHW_Read_BufLO   
                                        (0268) 	push  X
                                        (0269) 	mov   X, SP
                                        (0270)     dec   X                                                            ;set up the pointer for correct param access
                                        (0271)     push  A
                                        (0272)     mov   A, reg[I2CHW_INT_REG]
                                        (0273)     push  A                                                            ;preserve flags prior to disabling int
                                        (0274)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0275) 
                                        (0276)     mov   A, [X + FlBufAdrLO]                                          ; move flrdbuf LOaddr to A
                                        (0277)     mov   [pI2CHW_Read_BufLO], A
                                        (0278)     mov   A, [X + FlBufAdrHI]                                          ; move flrdbuf HIaddr to A
                                        (0279)     mov   [pI2CHW_Read_BufHI], A
                                        (0280)     mov   A, [X + FlRdCntLO]                                           ; move flrdbuf LOcount to A
                                        (0281)     mov   [I2CHW_Read_Count], A
                                        (0282)     mov   A, [X + FlRdCntHI]                                           ; move flrdbuf HIcount to A
                                        (0283)     mov   [I2CHW_Read_CountHI], A
                                        (0284) 
                                        (0285)     dec   [I2CHW_Read_Count]                                         ; since this will count throu zero
                                        (0286)     jnc    . + 4                                                       ; only Read_CountHI if Read_Count rolled to 0xff
                                        (0287)     dec   [I2CHW_Read_CountHI]
                                        (0288) 
                                        (0289)     and   [I2CHW_RsrcStatus], ~0x07                                  ; clear the lower 3 (read status bits)
                                        (0290)     or    [I2CHW_RsrcStatus],I2CHW_READFLASH                         ; set the flash status bit
                                        (0291) 
                                        (0292)     pop A
                                        (0293)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
                                        (0294)     jz  . + 5
                                        (0295)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0296)     pop A
                                        (0297) 	pop X
                                        (0298)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0299) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0300) ENDIF
0F67: 7F       RET                      (0301)     ret
0F68: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0302) 
                                        (0303) .ENDSECTION
                                        (0304) 
                                        (0305) .SECTION
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: I2CHW_bReadI2CStatus
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;     Returns the value in the the RsrcStatus variable.
                                        (0311) ;
                                        (0312) ;-----------------------------------------------------------------------------
                                        (0313) ;
                                        (0314) ;  ARGUMENTS:
                                        (0315) ;
                                        (0316) ;  RETURNS:
                                        (0317) ;     BYTE  bI2CStatus -  status data.  Use the following defined bits
                                        (0318) ;     returned in A.
                                        (0319) ;         I2CHW_RD_NOERR:                   equ 1
                                        (0320) ;         I2CHW_RD_OVERFLOW:                equ 2
                                        (0321) ;         I2CHW_RD_INCOMPLETE:              equ 4
                                        (0322) ;         I2CHW_READFLASH:                  equ 8
                                        (0323) ;         I2CHW_WR_NOERR:                   equ 10h
                                        (0324) ;         I2CHW_WR_OVERFLOW:                equ 20h
                                        (0325) ;         I2CHW_WR_COMPLETE:                equ 40h
                                        (0326) ;         I2CHW_ISR_ACTIVE:                 equ 80h
                                        (0327) ;
                                        (0328) ;  SIDE EFFECTS:
                                        (0329) ;    The A and X registers may be modified by this or future implementations
                                        (0330) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0331) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0332) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0333) ;    functions.
                                        (0334) ;          
                                        (0335) ;    Currently only the page pointer registers listed below are modified: 
                                        (0336) ;          CUR_PP
                                        (0337) ;          
                                        (0338)  I2CHW_bReadI2CStatus:
                                        (0339) _I2CHW_bReadI2CStatus:
                                        (0340)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0341) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0F6B: 51 05    MOV   A,[0x5]            (0342)     mov   A, [I2CHW_RsrcStatus]                                      ;return the status in A
                                        (0343)     RAM_EPILOGUE RAM_USE_CLASS_4
0F6D: 7F       RET                      (0344)     ret
0F6E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0345) 
                                        (0346) .ENDSECTION
                                        (0347) 
                                        (0348) .SECTION
                                        (0349) ;-----------------------------------------------------------------------------
                                        (0350) ;  FUNCTION NAME: I2CHW_ClrRdStatus
                                        (0351) ;
                                        (0352) ;  DESCRIPTION:
                                        (0353) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0354) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0355) ;
                                        (0356) ;-----------------------------------------------------------------------------
                                        (0357) ;
                                        (0358) ;  ARGUMENTS: none
                                        (0359) ;
                                        (0360) ;  RETURNS: none
                                        (0361) ;
                                        (0362) ;  SIDE EFFECTS:
                                        (0363) ;    The A and X registers may be modified by this or future implementations
                                        (0364) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0365) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0366) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0367) ;    functions.
                                        (0368) ;          
                                        (0369) ;    Currently only the page pointer registers listed below are modified: 
                                        (0370) ;          CUR_PP
                                        (0371) ;          
                                        (0372)  I2CHW_ClrRdStatus:
                                        (0373) _I2CHW_ClrRdStatus:
                                        (0374)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0375) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0F71: 26 05 F8 AND   [0x5],0xF8         (0376)     and   [I2CHW_RsrcStatus], ~0x07                                  ; clear the lower 3 (read status bits)
                                        (0377)     RAM_EPILOGUE RAM_USE_CLASS_4
0F74: 7F       RET                      (0378)     ret
0F75: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0379) 
                                        (0380) .ENDSECTION
                                        (0381) 
                                        (0382) .SECTION
                                        (0383) ;-----------------------------------------------------------------------------
                                        (0384) ;  FUNCTION NAME: I2CHW_ClrWrStatus
                                        (0385) ;
                                        (0386) ;  DESCRIPTION:
                                        (0387) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0388) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0389) ;
                                        (0390) ;-----------------------------------------------------------------------------
                                        (0391) ;
                                        (0392) ;  ARGUMENTS: none
                                        (0393) ;
                                        (0394) ;  RETURNS: none
                                        (0395) ;
                                        (0396) ;  SIDE EFFECTS:
                                        (0397) ;    The A and X registers may be modified by this or future implementations
                                        (0398) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0399) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0400) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0401) ;    functions.
                                        (0402) ;          
                                        (0403) ;    Currently only the page pointer registers listed below are modified: 
                                        (0404) ;          CUR_PP
                                        (0405) ;          
                                        (0406)  I2CHW_ClrWrStatus:
                                        (0407) _I2CHW_ClrWrStatus:
                                        (0408)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0409) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0F78: 26 05 8F AND   [0x5],0x8F         (0410)     and   [I2CHW_RsrcStatus], ~0x70                                  ; clear bits 10,20 (write status bits)
                                        (0411)     RAM_EPILOGUE RAM_USE_CLASS_4
0F7B: 7F       RET                      (0412)     ret
                                        (0413) 
                                        (0414) .ENDSECTION
                                        (0415) ; End of File I2CHW.asm
FILE: lib\counter16int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Counter16.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Counter16_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter16_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter16_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0F7C: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file Counter16INT.asm
FILE: lib\counter16.asm                 (0001) ;;*****************************************************************************
0F7D: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter16.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter16_EnableInt
                                        (0030) export _Counter16_EnableInt
                                        (0031) export  Counter16_DisableInt
                                        (0032) export _Counter16_DisableInt
                                        (0033) export  Counter16_Start
                                        (0034) export _Counter16_Start
                                        (0035) export  Counter16_Stop
                                        (0036) export _Counter16_Stop
                                        (0037) export  Counter16_WritePeriod
                                        (0038) export _Counter16_WritePeriod
                                        (0039) export  Counter16_WriteCompareValue
                                        (0040) export _Counter16_WriteCompareValue
                                        (0041) export  Counter16_wReadCompareValue
                                        (0042) export _Counter16_wReadCompareValue
                                        (0043) export  Counter16_wReadCounter
                                        (0044) export _Counter16_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wCounter16_ReadCompareValue  ; deprecated
                                        (0049) export _wCounter16_ReadCompareValue  ; deprecated
                                        (0050) export  wCounter16_ReadCounter       ; deprecated
                                        (0051) export _wCounter16_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Counter16_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Counter16_EnableInt:
                                        (0082) _Counter16_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    Counter16_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0F80: 7F       RET                      (0086)    ret
0F81: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Counter16_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Counter16_DisableInt:
                                        (0109) _Counter16_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    Counter16_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0F84: 7F       RET                      (0113)    ret
0F85: 43 23 01 OR    REG[0x23],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Counter16_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Counter16_Start:
                                        (0138) _Counter16_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    Counter16_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0F88: 7F       RET                      (0142)    ret
0F89: 41 23 FE AND   REG[0x23],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Counter16_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register of the LSB block.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Counter16_Stop:
                                        (0166) _Counter16_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    Counter16_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0F8C: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Counter16_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count registers (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Counter16_WritePeriod:
                                        (0196) _Counter16_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0F8D: 60 21    MOV   REG[0x21],A        (0198)    mov   reg[Counter16_PERIOD_LSB_REG], A
0F8F: 5B       MOV   A,X                (0199)    mov   A, X
0F90: 60 25    MOV   REG[0x25],A        (0200)    mov   reg[Counter16_PERIOD_MSB_REG], A
                                        (0201)    RAM_EPILOGUE RAM_USE_CLASS_1
0F92: 7F       RET                      (0202)    ret
                                        (0203) 
                                        (0204) 
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: Counter16_WriteCompareValue
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Writes compare value into the Compare register (DR2).
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;
                                        (0215) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0216) ;  RETURNS:      Nothing
                                        (0217) ;  SIDE EFFECTS: 
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;
                                        (0224)  Counter16_WriteCompareValue:
                                        (0225) _Counter16_WriteCompareValue:
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_1
0F93: 60 22    MOV   REG[0x22],A        (0227)    mov   reg[Counter16_COMPARE_LSB_REG], A
0F95: 5B       MOV   A,X                (0228)    mov   A, X
0F96: 60 26    MOV   REG[0x26],A        (0229)    mov   reg[Counter16_COMPARE_MSB_REG], A
                                        (0230)    RAM_EPILOGUE RAM_USE_CLASS_1
0F98: 7F       RET                      (0231)    ret
                                        (0232) 
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) .SECTION
                                        (0237) ;-----------------------------------------------------------------------------
                                        (0238) ;  FUNCTION NAME: Counter16_wReadCompareValue
                                        (0239) ;
                                        (0240) ;  DESCRIPTION:
                                        (0241) ;     Reads the Compare registers.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS:    None
                                        (0245) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  Counter16_wReadCompareValue:
                                        (0254) _Counter16_wReadCompareValue:
                                        (0255)  wCounter16_ReadCompareValue:                    ; this name deprecated
                                        (0256) _wCounter16_ReadCompareValue:                    ; this name deprecated
                                        (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
0F99: 5D 26    MOV   A,REG[0x26]        (0258)    mov   A, reg[Counter16_COMPARE_MSB_REG]
0F9B: 5C       MOV   X,A                (0259)    mov   X, A
0F9C: 5D 22    MOV   A,REG[0x22]        (0260)    mov   A, reg[Counter16_COMPARE_LSB_REG]
                                        (0261)    RAM_EPILOGUE RAM_USE_CLASS_1
0F9E: 7F       RET                      (0262)    ret
                                        (0263) 
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: Counter16_wReadCounter
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0273) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0274) ;     from the Count to the Compare registers by holding the clock low in
                                        (0275) ;     the MSB PSoC block.
                                        (0276) ;-----------------------------------------------------------------------------
                                        (0277) ;
                                        (0278) ;  ARGUMENTS: None
                                        (0279) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0280) ;  SIDE EFFECTS:
                                        (0281) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0282) ;     2) The A and X registers may be modified by this or future implementations
                                        (0283) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0284) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0285) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0286) ;        functions.
                                        (0287) ;
                                        (0288)  Counter16_wReadCounter:
                                        (0289) _Counter16_wReadCounter:
                                        (0290)  wCounter16_ReadCounter:                         ; this name deprecated
                                        (0291) _wCounter16_ReadCounter:                         ; this name deprecated
                                        (0292) 
                                        (0293)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0294)    bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
                                        (0295)    bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
                                        (0296)    wCounter:               EQU   4                  ; Frame offset to temp Count   store
                                        (0297)    STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
                                        (0298) 
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
0F9F: 4F       MOV   X,SP               (0300)    mov   X, SP                                      ; X <-  stack frame pointer
0FA0: 5D 26    MOV   A,REG[0x26]        (0301)    mov   A, reg[Counter16_COMPARE_MSB_REG]       ; Save the Compare register on the stack
0FA2: 08       PUSH  A                  (0302)    push  A                                          ;
0FA3: 5D 22    MOV   A,REG[0x22]        (0303)    mov   A, reg[Counter16_COMPARE_LSB_REG]       ;
0FA5: 08       PUSH  A                  (0304)    push  A                                          ;   -stack frame now 2 bytes-
0FA6: 5D 23    MOV   A,REG[0x23]        (0305)    mov   A, reg[Counter16_CONTROL_LSB_REG]       ; Save CR0 (running or stopped state)
0FA8: 08       PUSH  A                  (0306)    push  A                                          ;   -stack frame now 3 bytes-
0FA9: 41 23 FE AND   REG[0x23],0xFE     
0FAC: 71 10    OR    F,0x10             
                                        (0307)    Counter16_Stop_M                              ; Disable (stop) the Counter if running
                                        (0308)    M8C_SetBank1                                     ;
0FAE: 5D 21    MOV   A,REG[0x21]        (0309)    mov   A, reg[Counter16_INPUT_LSB_REG]         ; save the LSB clock input setting
0FB0: 08       PUSH  A                  (0310)    push  A                                          ;   on the stack (now 4 bytes) and ...
                                        (0311)                                                     ;   hold the clock low:
0FB1: 62 21 00 MOV   REG[0x21],0x0      (0312)    mov   reg[Counter16_INPUT_LSB_REG], INPUT_REG_NULL
0FB4: 70 EF    AND   F,0xEF             
                                        (0313)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0FB6: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[Counter16_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
0FB8: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[Counter16_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
0FBA: 08       PUSH  A                  (0316)    push  A                                          ;   -stack frame is now 5 bytes
0FBB: 5D 20    MOV   A,REG[0x20]        (0317)    mov   A, reg[Counter16_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
0FBD: 5D 22    MOV   A,REG[0x22]        (0318)    mov   A, reg[Counter16_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
0FBF: 08       PUSH  A                  (0319)    push  A                                          ;   -stack frame is now 6 bytes-
0FC0: 52 00    MOV   A,[X+0]            (0320)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0FC2: 60 26    MOV   REG[0x26],A        (0321)    mov   reg[Counter16_COMPARE_MSB_REG], A       ;
0FC4: 52 01    MOV   A,[X+1]            (0322)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0FC6: 60 22    MOV   REG[0x22],A        (0323)    mov   reg[Counter16_COMPARE_LSB_REG], A       ;
0FC8: 71 10    OR    F,0x10             
                                        (0324)    M8C_SetBank1                                     ; ---Restore the counter operation
0FCA: 52 03    MOV   A,[X+3]            (0325)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0FCC: 60 21    MOV   REG[0x21],A        (0326)    mov   reg[Counter16_INPUT_LSB_REG], A         ;   and restore it
0FCE: 70 EF    AND   F,0xEF             
                                        (0327)    M8C_SetBank0                                     ; Now re-enable (start) the counter
0FD0: 52 02    MOV   A,[X+2]            (0328)    mov   A, [X+bOrigControlReg]                     ;   if it was running when
0FD2: 60 23    MOV   REG[0x23],A        (0329)    mov   reg[Counter16_CONTROL_LSB_REG], A       ;   this function was first called
0FD4: 18       POP   A                  (0330)    pop   A                                          ; Setup the return value
0FD5: 20       POP   X                  (0331)    pop   X                                          ;
0FD6: 38 FC    ADD   SP,0xFC            (0332)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0FD8: 70 3F    AND   F,0x3F             
0FDA: 71 C0    OR    F,0xC0             
                                        (0333)    RAM_EPILOGUE RAM_USE_CLASS_2
0FDC: 7F       RET                      (0334)    ret
                                        (0335) 
                                        (0336) .ENDSECTION
                                        (0337) 
                                        (0338) ; End of File Counter16.asm
FILE: C:\Users\Jacob\Desktop\ECE381\I2CRAM\I2CRAM\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "string.h"		// used for any of the string fcns supported by API
(0008) #include "stdio.h"		// this is used for fcns....
(0009) #include "ctype.h"		// this is used for fcns.. csspanf() and cstork()
(0010) 
(0011) static char rubout[4] = { 0x08, 0x20, 0x08, 0x00 }; // Rubout Sequence consists of Backspace Space Backspace. This is the null-terminated string
(0012) 
(0013) char buf[80];	// global array for user cmd and entry
(0014) char data[256];	// all the spots in memory
(0015) 
(0016) // This function reads characters from the serial until a character is entered that is within the min & max ASCII characters.
(0017) // That character is returned
(0018) char GetNumber(char min, char max)	// gets passed
(0019) {
__UserModules_end|_GetNumber|__text_start|_GetNumber:
  c                    --> X+0
  max                  --> X-5
  min                  --> X-4
    0FDD: 10       PUSH  X
    0FDE: 4F       MOV   X,SP
    0FDF: 38 01    ADD   SP,0x1
    0FE1: 80 34    JMP   0x1016
(0020) 	char c;
(0021) 	
(0022) 	while (1)
(0023) 	{
(0024) 		c = UART_cReadChar(); // Read the character
    0FE3: 10       PUSH  X
    0FE4: 7C 09 3B LCALL _UART_cReadChar
    0FE7: 20       POP   X
    0FE8: 62 D0 00 MOV   REG[0xD0],0x0
    0FEB: 54 00    MOV   [X+0],A
(0025) 		if (c < ('0' + min) || c > ('0' + max)) // If the character is not within min to max range, continue the loop
    0FED: 52 FC    MOV   A,[X-4]
    0FEF: 01 30    ADD   A,0x30
    0FF1: 53 7F    MOV   [__r0],A
    0FF3: 52 00    MOV   A,[X+0]
    0FF5: 3A 7F    CMP   A,[__r0]
    0FF7: C0 0C    JC    0x1004
    0FF9: 62 D0 00 MOV   REG[0xD0],0x0
    0FFC: 52 FB    MOV   A,[X-5]
    0FFE: 01 30    ADD   A,0x30
    1000: 3B 00    CMP   A,[X+0]
    1002: D0 03    JNC   0x1006
(0026) 			continue;
    1004: 80 11    JMP   0x1016
(0027) 		
(0028) 		UART_PutChar(c); // Put the character on the serial
    1006: 10       PUSH  X
    1007: 52 00    MOV   A,[X+0]
    1009: 7C 09 2B LCALL _UART_PutChar
    100C: 20       POP   X
(0029) 		return (c - '0'); // This returns the integer number entered instead of the ASCII value
    100D: 62 D0 00 MOV   REG[0xD0],0x0
    1010: 52 00    MOV   A,[X+0]
    1012: 11 30    SUB   A,0x30
    1014: 80 03    JMP   0x1018
    1016: 8F CC    JMP   0x0FE3
    1018: 38 FF    ADD   SP,0xFF
    101A: 20       POP   X
    101B: 7F       RET   
(0030) 	}
(0031) 	
(0032) 	return 0;
(0033) }
(0034) 
(0035) // This function get's a line of text. It writes data into buffer with a maximum size of bufferLen. The function returns number of bytes written
(0036) // when enter is pressed
(0037) char GetLine(char *buffer, char bufferLen)
(0038) {
_GetLine:
  strPos               --> X+1
  c                    --> X+0
  bufferLen            --> X-6
  buffer               --> X-5
    101C: 10       PUSH  X
    101D: 4F       MOV   X,SP
    101E: 38 02    ADD   SP,0x2
(0039) 	char c;
(0040) 	char strPos = 0; // Current position in the string
    1020: 56 01 00 MOV   [X+1],0x0
(0041) 	
(0042) 	UART_PutChar('>'); // print line pointer
    1023: 10       PUSH  X
    1024: 50 3E    MOV   A,0x3E
    1026: 7C 09 2B LCALL _UART_PutChar
    1029: 20       POP   X
    102A: 80 94    JMP   0x10BF
(0043) 	
(0044) 	while (1)
(0045) 	{
(0046) 		c = UART_cReadChar(); // Use UART module to read the character user enters
    102C: 10       PUSH  X
    102D: 7C 09 3B LCALL _UART_cReadChar
    1030: 20       POP   X
    1031: 62 D0 00 MOV   REG[0xD0],0x0
    1034: 54 00    MOV   [X+0],A
(0047) 		
(0048) 		if (c == 0x08 || c == 0x7F) // Delete or backspace pressed
    1036: 3D 00 08 CMP   [X+0],0x8
    1039: A0 06    JZ    0x1040
    103B: 3D 00 7F CMP   [X+0],0x7F
    103E: B0 17    JNZ   0x1056
(0049) 		{
(0050) 			if (strPos > 0) // Only delete if there are characters to delete
    1040: 50 00    MOV   A,0x0
    1042: 3B 01    CMP   A,[X+1]
    1044: D0 7A    JNC   0x10BF
(0051) 			{
(0052) 				strPos--; // Set the position back one
    1046: 7B 01    DEC   [X+1]
(0053) 				UART_PutString(rubout); // Sends the rubout sequence to the serial.
    1048: 10       PUSH  X
    1049: 50 00    MOV   A,0x0
    104B: 08       PUSH  A
    104C: 50 80    MOV   A,0x80
    104E: 5C       MOV   X,A
    104F: 18       POP   A
    1050: 7C 09 68 LCALL _UART_PutString
    1053: 20       POP   X
(0054) 			}
(0055) 		}
    1054: 80 6A    JMP   0x10BF
(0056) 		else if (c == 0x0D) // Newline enter is pressed
    1056: 3D 00 0D CMP   [X+0],0xD
    1059: B0 27    JNZ   0x1081
(0057) 		{
(0058) 			buffer[strPos] = 0x00; // put the null character at the current strPos
    105B: 62 D0 00 MOV   REG[0xD0],0x0
    105E: 52 01    MOV   A,[X+1]
    1060: 53 7E    MOV   [__r1],A
    1062: 55 7F 00 MOV   [__r0],0x0
    1065: 52 FC    MOV   A,[X-4]
    1067: 04 7E    ADD   [__r1],A
    1069: 52 FB    MOV   A,[X-5]
    106B: 0C 7F    ADC   [__r0],A
    106D: 51 7F    MOV   A,[__r0]
    106F: 60 D5    MOV   REG[0xD5],A
    1071: 50 00    MOV   A,0x0
    1073: 3F 7E    MVI   [__r1],A
(0059) 			UART_PutCRLF(); // Go to another line
    1075: 10       PUSH  X
    1076: 7C 09 E0 LCALL _UART_PutCRLF
    1079: 20       POP   X
(0060) 			return strPos;
    107A: 52 01    MOV   A,[X+1]
    107C: 62 D0 00 MOV   REG[0xD0],0x0
    107F: 80 41    JMP   0x10C1
(0061) 		}
(0062) 		else if (c >= 0x20 && c < 0x7F) // only valid characters to the string. These are any alphabet, numeric, or symbols
    1081: 3D 00 20 CMP   [X+0],0x20
    1084: C0 3A    JC    0x10BF
    1086: 3D 00 7F CMP   [X+0],0x7F
    1089: D0 35    JNC   0x10BF
(0063) 		{
(0064) 			if (strPos < bufferLen) // If there is space in the buffer
    108B: 52 01    MOV   A,[X+1]
    108D: 3B FA    CMP   A,[X-6]
    108F: D0 28    JNC   0x10B8
(0065) 			{
(0066) 				buffer[strPos++] = c; // Set the current character in buffer to c and then increment strPos
    1091: 62 D0 00 MOV   REG[0xD0],0x0
    1094: 52 01    MOV   A,[X+1]
    1096: 53 7E    MOV   [__r1],A
    1098: 55 7F 00 MOV   [__r0],0x0
    109B: 01 01    ADD   A,0x1
    109D: 54 01    MOV   [X+1],A
    109F: 52 FC    MOV   A,[X-4]
    10A1: 04 7E    ADD   [__r1],A
    10A3: 52 FB    MOV   A,[X-5]
    10A5: 0C 7F    ADC   [__r0],A
    10A7: 51 7F    MOV   A,[__r0]
    10A9: 60 D5    MOV   REG[0xD5],A
    10AB: 52 00    MOV   A,[X+0]
    10AD: 3F 7E    MVI   [__r1],A
(0067) 				UART_PutChar(c); // Send the character to the computer
    10AF: 10       PUSH  X
    10B0: 52 00    MOV   A,[X+0]
    10B2: 7C 09 2B LCALL _UART_PutChar
    10B5: 20       POP   X
(0068) 			}
    10B6: 80 08    JMP   0x10BF
(0069) 			else
(0070) 				UART_PutChar(0x07); // Send BEL key because there is no more space left to add to the string
    10B8: 10       PUSH  X
    10B9: 50 07    MOV   A,0x7
    10BB: 7C 09 2B LCALL _UART_PutChar
    10BE: 20       POP   X
(0071) 		}
(0072) 	}
    10BF: 8F 6C    JMP   0x102C
    10C1: 38 FE    ADD   SP,0xFE
    10C3: 20       POP   X
    10C4: 7F       RET   
(0073) 	
(0074) 	return 0;
(0075) }
(0076) 
(0077) // This takes a string that has hex such as 'A4 FF 01 04' and converts it into a string containing the hex files. Returns -1 if error, otherwise it returns
(0078) // the number of bytes converted
(0079) int HexConversion(char *src, char *dst)
(0080) {
_HexConversion:
  i                    --> X+6
  temp                 --> X+4
  str                  --> X+2
  ii                   --> X+0
  dst                  --> X-7
  src                  --> X-5
    10C5: 10       PUSH  X
    10C6: 4F       MOV   X,SP
    10C7: 38 08    ADD   SP,0x8
(0081) 	char *str; // pointer to char array local to fcn	
(0082)     int i = 0;	// return int
    10C9: 56 07 00 MOV   [X+7],0x0
    10CC: 56 06 00 MOV   [X+6],0x0
(0083)     int ii = 0; // for loop indexing
    10CF: 56 01 00 MOV   [X+1],0x0
    10D2: 56 00 00 MOV   [X+0],0x0
(0084) 	int temp;	// 
(0085) 
(0086)     str = cstrtok(src, " ");
    10D5: 50 05    MOV   A,0x5
    10D7: 08       PUSH  A
    10D8: 50 04    MOV   A,0x4
    10DA: 08       PUSH  A
    10DB: 52 FB    MOV   A,[X-5]
    10DD: 08       PUSH  A
    10DE: 52 FC    MOV   A,[X-4]
    10E0: 08       PUSH  A
    10E1: 7C 33 2A LCALL _cstrtok
    10E4: 38 FC    ADD   SP,0xFC
    10E6: 62 D0 00 MOV   REG[0xD0],0x0
    10E9: 51 7E    MOV   A,[__r1]
    10EB: 54 03    MOV   [X+3],A
    10ED: 51 7F    MOV   A,[__r0]
    10EF: 54 02    MOV   [X+2],A
(0087)     do
(0088)     {
(0089)         if (strlen(str) != 2)
    10F1: 52 02    MOV   A,[X+2]
    10F3: 08       PUSH  A
    10F4: 52 03    MOV   A,[X+3]
    10F6: 08       PUSH  A
    10F7: 7C 19 BF LCALL _strlenLMM
    10FA: 38 FE    ADD   SP,0xFE
    10FC: 62 D0 00 MOV   REG[0xD0],0x0
    10FF: 3C 7F 00 CMP   [__r0],0x0
    1102: B0 06    JNZ   0x1109
    1104: 3C 7E 02 CMP   [__r1],0x2
    1107: A0 0C    JZ    0x1114
(0090)             return -1;
    1109: 62 D0 00 MOV   REG[0xD0],0x0
    110C: 55 7E FF MOV   [__r1],0xFF
    110F: 55 7F FF MOV   [__r0],0xFF
    1112: 80 D3    JMP   0x11E6
(0091) 
(0092)         for (ii = 0; ii < strlen(str); ++ii)
    1114: 56 01 00 MOV   [X+1],0x0
    1117: 56 00 00 MOV   [X+0],0x0
    111A: 80 3C    JMP   0x1157
(0093)             if (!isxdigit(str[ii]))
    111C: 62 D0 00 MOV   REG[0xD0],0x0
    111F: 52 01    MOV   A,[X+1]
    1121: 03 03    ADD   A,[X+3]
    1123: 53 7E    MOV   [__r1],A
    1125: 52 00    MOV   A,[X+0]
    1127: 0B 02    ADC   A,[X+2]
    1129: 60 D4    MOV   REG[0xD4],A
    112B: 3E 7E    MVI   A,[__r1]
    112D: 53 7E    MOV   [__r1],A
    112F: 50 00    MOV   A,0x0
    1131: 08       PUSH  A
    1132: 51 7E    MOV   A,[__r1]
    1134: 08       PUSH  A
    1135: 7C 25 49 LCALL _isxdigit
    1138: 38 FE    ADD   SP,0xFE
    113A: 62 D0 00 MOV   REG[0xD0],0x0
    113D: 3C 7F 00 CMP   [__r0],0x0
    1140: B0 11    JNZ   0x1152
    1142: 3C 7E 00 CMP   [__r1],0x0
    1145: B0 0C    JNZ   0x1152
(0094)                 return -1;
    1147: 62 D0 00 MOV   REG[0xD0],0x0
    114A: 55 7E FF MOV   [__r1],0xFF
    114D: 55 7F FF MOV   [__r0],0xFF
    1150: 80 95    JMP   0x11E6
    1152: 77 01    INC   [X+1]
    1154: 0F 00 00 ADC   [X+0],0x0
    1157: 52 02    MOV   A,[X+2]
    1159: 08       PUSH  A
    115A: 52 03    MOV   A,[X+3]
    115C: 08       PUSH  A
    115D: 7C 19 BF LCALL _strlenLMM
    1160: 38 FE    ADD   SP,0xFE
    1162: 62 D0 00 MOV   REG[0xD0],0x0
    1165: 52 01    MOV   A,[X+1]
    1167: 12 7E    SUB   A,[__r1]
    1169: 52 00    MOV   A,[X+0]
    116B: 1A 7F    SBB   A,[__r0]
    116D: CF AE    JC    0x111C
(0095) 
(0096)         csscanf(str, "%x", &temp);
    116F: 62 D0 00 MOV   REG[0xD0],0x0
    1172: 5A 7E    MOV   [__r1],X
    1174: 06 7E 04 ADD   [__r1],0x4
    1177: 50 07    MOV   A,0x7
    1179: 08       PUSH  A
    117A: 51 7E    MOV   A,[__r1]
    117C: 08       PUSH  A
    117D: 50 05    MOV   A,0x5
    117F: 08       PUSH  A
    1180: 50 01    MOV   A,0x1
    1182: 08       PUSH  A
    1183: 52 02    MOV   A,[X+2]
    1185: 08       PUSH  A
    1186: 52 03    MOV   A,[X+3]
    1188: 08       PUSH  A
    1189: 7C 26 CF LCALL _csscanf
(0097) 		dst[i++] = temp;
    118C: 62 D0 00 MOV   REG[0xD0],0x0
    118F: 52 07    MOV   A,[X+7]
    1191: 53 7E    MOV   [__r1],A
    1193: 52 06    MOV   A,[X+6]
    1195: 53 7F    MOV   [__r0],A
    1197: 51 7E    MOV   A,[__r1]
    1199: 01 01    ADD   A,0x1
    119B: 54 07    MOV   [X+7],A
    119D: 51 7F    MOV   A,[__r0]
    119F: 09 00    ADC   A,0x0
    11A1: 54 06    MOV   [X+6],A
    11A3: 52 05    MOV   A,[X+5]
    11A5: 53 7D    MOV   [__r2],A
    11A7: 52 FA    MOV   A,[X-6]
    11A9: 04 7E    ADD   [__r1],A
    11AB: 52 F9    MOV   A,[X-7]
    11AD: 0C 7F    ADC   [__r0],A
    11AF: 51 7F    MOV   A,[__r0]
    11B1: 60 D5    MOV   REG[0xD5],A
    11B3: 51 7D    MOV   A,[__r2]
    11B5: 3F 7E    MVI   [__r1],A
(0098)         str = cstrtok(0x00, " ");
    11B7: 50 05    MOV   A,0x5
    11B9: 08       PUSH  A
    11BA: 50 04    MOV   A,0x4
    11BC: 08       PUSH  A
    11BD: 50 00    MOV   A,0x0
    11BF: 08       PUSH  A
    11C0: 08       PUSH  A
    11C1: 7C 33 2A LCALL _cstrtok
    11C4: 38 F6    ADD   SP,0xF6
    11C6: 62 D0 00 MOV   REG[0xD0],0x0
    11C9: 51 7E    MOV   A,[__r1]
    11CB: 54 03    MOV   [X+3],A
    11CD: 51 7F    MOV   A,[__r0]
    11CF: 54 02    MOV   [X+2],A
(0099)     } while (str != 0x00);
    11D1: 3D 02 00 CMP   [X+2],0x0
    11D4: BF 1C    JNZ   0x10F1
    11D6: 3D 03 00 CMP   [X+3],0x0
    11D9: BF 17    JNZ   0x10F1
(0100) 
(0101)     return i;
    11DB: 62 D0 00 MOV   REG[0xD0],0x0
    11DE: 52 07    MOV   A,[X+7]
    11E0: 53 7E    MOV   [__r1],A
    11E2: 52 06    MOV   A,[X+6]
    11E4: 53 7F    MOV   [__r0],A
    11E6: 38 F8    ADD   SP,0xF8
    11E8: 20       POP   X
    11E9: 7F       RET   
(0102) }
(0103) 
(0104) char *Lowercase(char *str)
(0105) {
_Lowercase:
  i                    --> X+0
  str                  --> X-5
    11EA: 10       PUSH  X
    11EB: 4F       MOV   X,SP
    11EC: 38 04    ADD   SP,0x4
(0106) 	int i;
(0107) 	for (i = 0; str[i] != '\0'; ++i)
    11EE: 56 01 00 MOV   [X+1],0x0
    11F1: 56 00 00 MOV   [X+0],0x0
    11F4: 80 43    JMP   0x1238
(0108) 		str[i] = tolower(str[i]);
    11F6: 62 D0 00 MOV   REG[0xD0],0x0
    11F9: 52 01    MOV   A,[X+1]
    11FB: 03 FC    ADD   A,[X-4]
    11FD: 53 7E    MOV   [__r1],A
    11FF: 52 00    MOV   A,[X+0]
    1201: 0B FB    ADC   A,[X-5]
    1203: 53 7F    MOV   [__r0],A
    1205: 51 7E    MOV   A,[__r1]
    1207: 54 03    MOV   [X+3],A
    1209: 51 7F    MOV   A,[__r0]
    120B: 54 02    MOV   [X+2],A
    120D: 60 D4    MOV   REG[0xD4],A
    120F: 3E 7E    MVI   A,[__r1]
    1211: 7A 7E    DEC   [__r1]
    1213: 53 7C    MOV   [__r3],A
    1215: 50 00    MOV   A,0x0
    1217: 08       PUSH  A
    1218: 51 7C    MOV   A,[__r3]
    121A: 08       PUSH  A
    121B: 7C 25 A8 LCALL _tolower
    121E: 38 FE    ADD   SP,0xFE
    1220: 62 D0 00 MOV   REG[0xD0],0x0
    1223: 51 7E    MOV   A,[__r1]
    1225: 53 7F    MOV   [__r0],A
    1227: 52 03    MOV   A,[X+3]
    1229: 53 7C    MOV   [__r3],A
    122B: 52 02    MOV   A,[X+2]
    122D: 60 D5    MOV   REG[0xD5],A
    122F: 51 7F    MOV   A,[__r0]
    1231: 3F 7C    MVI   [__r3],A
    1233: 77 01    INC   [X+1]
    1235: 0F 00 00 ADC   [X+0],0x0
    1238: 62 D0 00 MOV   REG[0xD0],0x0
    123B: 52 01    MOV   A,[X+1]
    123D: 03 FC    ADD   A,[X-4]
    123F: 53 7E    MOV   [__r1],A
    1241: 52 00    MOV   A,[X+0]
    1243: 0B FB    ADC   A,[X-5]
    1245: 60 D4    MOV   REG[0xD4],A
    1247: 3E 7E    MVI   A,[__r1]
    1249: 39 00    CMP   A,0x0
    124B: BF AA    JNZ   0x11F6
(0109) 	
(0110) 	return str;
    124D: 52 FC    MOV   A,[X-4]
    124F: 53 7E    MOV   [__r1],A
    1251: 52 FB    MOV   A,[X-5]
    1253: 53 7F    MOV   [__r0],A
    1255: 38 FC    ADD   SP,0xFC
    1257: 20       POP   X
    1258: 7F       RET   
(0111) }
(0112) 
(0113) void main(void)
(0114) {	
_main:
  memLoc               --> X+16
  groupAddress         --> X+14
  dataType             --> X+13
  hexStr               --> X+9
  numBytes             --> X+7
  i                    --> X+5
  memLoc               --> X+10
  len                  --> X+8
  groupAddress         --> X+6
  dataType             --> X+5
  slaveAddress         --> X+4
  cmd                  --> X+2
  params               --> X+0
    1259: 10       PUSH  X
    125A: 4F       MOV   X,SP
    125B: 38 12    ADD   SP,0x12
(0115) 	M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
    125D: 71 01    OR    F,0x1
(0116) 	// User Interface
(0117) 	UART_Start(UART_PARITY_NONE);
    125F: 10       PUSH  X
    1260: 50 00    MOV   A,0x0
    1262: 7C 08 B9 LCALL _UART_Start
(0118) 	// clock for moving serial
(0119) 	Counter16_Start();
    1265: 7C 0F 85 LCALL _Counter16_Start
(0120) 	// used to debug
(0121) 	LCD_Start();
    1268: 7C 0A FB LCALL LCD_Init|LCD_Start|_LCD_Init|_LCD_Start
(0122) 	// initialize and enable the I2C module
(0123) 	I2CHW_Start();
    126B: 7C 0B A0 LCALL _I2CHW_Start
(0124) 	I2CHW_EnableMstr();
    126E: 7C 0B AE LCALL _I2CHW_EnableMstr
(0125) 	I2CHW_EnableInt();
    1271: 7C 0B A3 LCALL _I2CHW_EnableInt
(0126) // user guide for cmd window
(0127) 	UART_CPutString("########################## I2C External SRAM ########################\r\n\
    1274: 50 02    MOV   A,0x2
    1276: 08       PUSH  A
    1277: 50 58    MOV   A,0x58
    1279: 5C       MOV   X,A
    127A: 18       POP   A
    127B: 7C 09 CE LCALL _UART_CPutString
    127E: 20       POP   X
    127F: 85 FA    JMP   0x187A
(0128) #	W # XX T [Data]\r\n\
(0129) #		W    - Write command\r\n\
(0130) #		#    - Group Address (0 - 7)\r\n\
(0131) #		XX   - Memory Location in hex (00 - FF)\r\n\
(0132) #		T    - Data Type, either A for ASCII or H for Hexadecimal\r\n\
(0133) #		Data - Either ASCII string or Hexadecimal separates by spaces\r\n\
(0134) #\t\t\tA - Mary had a little lamb\r\n\
(0135) #\t\t\tH - 01 FF A0 0F D8 C3\r\n\
(0136) #\r\n\
(0137) #	R # XX T NN\r\n\
(0138) #		R    - Read command\r\n\
(0139) #		#    - Group Address (0 - 7)\r\n\
(0140) #		XX   - Memory Location in hex (00 - FF)\r\n\
(0141) #		T    - Data Type, either A for ASCII or H for Hexadecimal\r\n\
(0142) #		NN	 - Number of bytes to read in hexadecimal\r\n\
(0143) #####################################################################\r\n");
(0144) 	while (1)
(0145) 	{
(0146) 		char *cmd;
(0147) 		char *params;	// most widely buffer
(0148) 		char slaveAddress = 0x50;		// 01010000'0' R/W shifted to front
    1281: 56 04 50 MOV   [X+4],0x50
(0149) 		
(0150) 		GetLine(buf, 79); // passing ref to global char array and max length of cmd entry
    1284: 50 4F    MOV   A,0x4F
    1286: 08       PUSH  A
    1287: 50 00    MOV   A,0x0
    1289: 08       PUSH  A
    128A: 50 0C    MOV   A,0xC
    128C: 08       PUSH  A
    128D: 9D 8D    CALL  _GetLine
    128F: 38 FD    ADD   SP,0xFD
    1291: 62 D0 00 MOV   REG[0xD0],0x0
(0151) 							// return value not used
(0152) 		memset(data, 0x00, 256);	// initialize all the set {data} to zero
    1294: 50 01    MOV   A,0x1
    1296: 08       PUSH  A
    1297: 50 00    MOV   A,0x0
    1299: 08       PUSH  A
    129A: 08       PUSH  A
    129B: 08       PUSH  A
    129C: 50 01    MOV   A,0x1
    129E: 08       PUSH  A
    129F: 50 00    MOV   A,0x0
    12A1: 08       PUSH  A
    12A2: 7C 19 68 LCALL _memsetLMM
(0153) 		cmd = Lowercase(cstrtok(buf, " "));	
    12A5: 50 05    MOV   A,0x5
    12A7: 08       PUSH  A
    12A8: 50 04    MOV   A,0x4
    12AA: 08       PUSH  A
    12AB: 50 00    MOV   A,0x0
    12AD: 08       PUSH  A
    12AE: 50 0C    MOV   A,0xC
    12B0: 08       PUSH  A
    12B1: 7C 33 2A LCALL _cstrtok
    12B4: 38 F6    ADD   SP,0xF6
    12B6: 62 D0 00 MOV   REG[0xD0],0x0
    12B9: 51 7F    MOV   A,[__r0]
    12BB: 08       PUSH  A
    12BC: 51 7E    MOV   A,[__r1]
    12BE: 08       PUSH  A
    12BF: 9F 29    CALL  _Lowercase
    12C1: 62 D0 00 MOV   REG[0xD0],0x0
    12C4: 51 7E    MOV   A,[__r1]
    12C6: 54 03    MOV   [X+3],A
    12C8: 51 7F    MOV   A,[__r0]
    12CA: 54 02    MOV   [X+2],A
(0154) 		if (strlen(cmd) == 1 && cmd[0] == 'w')
    12CC: 52 02    MOV   A,[X+2]
    12CE: 08       PUSH  A
    12CF: 52 03    MOV   A,[X+3]
    12D1: 08       PUSH  A
    12D2: 7C 19 BF LCALL _strlenLMM
    12D5: 38 FC    ADD   SP,0xFC
    12D7: 62 D0 00 MOV   REG[0xD0],0x0
    12DA: 3C 7F 00 CMP   [__r0],0x0
    12DD: B2 75    JNZ   0x1553
    12DF: 3C 7E 01 CMP   [__r1],0x1
    12E2: B2 70    JNZ   0x1553
    12E4: 62 D0 00 MOV   REG[0xD0],0x0
    12E7: 52 03    MOV   A,[X+3]
    12E9: 53 7E    MOV   [__r1],A
    12EB: 52 02    MOV   A,[X+2]
    12ED: 60 D4    MOV   REG[0xD4],A
    12EF: 3E 7E    MVI   A,[__r1]
    12F1: 39 77    CMP   A,0x77
    12F3: B2 5F    JNZ   0x1553
(0155) 		{	
(0156) 			int groupAddress; // only 1 and 2 actually go to SRAM
(0157) 			int memLoc;
(0158) 			char dataType;
(0159) 			
(0160) 			int len;
(0161) 			
(0162) 			params = cstrtok(0x00, " ");  // this statement begins in buf where previous delimiter left off
    12F5: 50 05    MOV   A,0x5
    12F7: 08       PUSH  A
    12F8: 50 04    MOV   A,0x4
    12FA: 08       PUSH  A
    12FB: 50 00    MOV   A,0x0
    12FD: 08       PUSH  A
    12FE: 08       PUSH  A
    12FF: 7C 33 2A LCALL _cstrtok
    1302: 62 D0 00 MOV   REG[0xD0],0x0
    1305: 51 7E    MOV   A,[__r1]
    1307: 54 01    MOV   [X+1],A
    1309: 51 7F    MOV   A,[__r0]
    130B: 54 00    MOV   [X+0],A
(0163) 											// after getting the cmd from buf. it goes to next space delimiter
(0164) 			
(0165) 			// csscanf() used to assign initialize groupAdress, memLoc, and dataType.  also makes for easy length validation
(0166) 			// condtion to test the 0 or 1 int representation of the group address
(0167) 				// csscanf(const * char, %interrpret read type as, store in location) returns an integer
(0168) 			if (strlen(params) != 1 || csscanf(params, "%d", &groupAddress) != 1) goto error;
    130D: 52 00    MOV   A,[X+0]
    130F: 08       PUSH  A
    1310: 52 01    MOV   A,[X+1]
    1312: 08       PUSH  A
    1313: 7C 19 BF LCALL _strlenLMM
    1316: 38 FA    ADD   SP,0xFA
    1318: 62 D0 00 MOV   REG[0xD0],0x0
    131B: 3C 7F 00 CMP   [__r0],0x0
    131E: B0 32    JNZ   0x1351
    1320: 3C 7E 01 CMP   [__r1],0x1
    1323: B0 2D    JNZ   0x1351
    1325: 62 D0 00 MOV   REG[0xD0],0x0
    1328: 5A 7E    MOV   [__r1],X
    132A: 06 7E 06 ADD   [__r1],0x6
    132D: 50 07    MOV   A,0x7
    132F: 08       PUSH  A
    1330: 51 7E    MOV   A,[__r1]
    1332: 08       PUSH  A
    1333: 50 02    MOV   A,0x2
    1335: 08       PUSH  A
    1336: 50 55    MOV   A,0x55
    1338: 08       PUSH  A
    1339: 52 00    MOV   A,[X+0]
    133B: 08       PUSH  A
    133C: 52 01    MOV   A,[X+1]
    133E: 08       PUSH  A
    133F: 7C 26 CF LCALL _csscanf
    1342: 38 FA    ADD   SP,0xFA
    1344: 62 D0 00 MOV   REG[0xD0],0x0
    1347: 3C 7F 00 CMP   [__r0],0x0
    134A: B0 06    JNZ   0x1351
    134C: 3C 7E 01 CMP   [__r1],0x1
    134F: A0 03    JZ    0x1353
    1351: 85 1C    JMP   0x186E
(0169) 			
(0170) 			params = cstrtok(0x00, " "); // get memLoc could be 00 to FF ( Mem(0) to Mem(255))
    1353: 50 05    MOV   A,0x5
    1355: 08       PUSH  A
    1356: 50 04    MOV   A,0x4
    1358: 08       PUSH  A
    1359: 50 00    MOV   A,0x0
    135B: 08       PUSH  A
    135C: 08       PUSH  A
    135D: 7C 33 2A LCALL _cstrtok
    1360: 62 D0 00 MOV   REG[0xD0],0x0
    1363: 51 7E    MOV   A,[__r1]
    1365: 54 01    MOV   [X+1],A
    1367: 51 7F    MOV   A,[__r0]
    1369: 54 00    MOV   [X+0],A
(0171) 			if (strlen(params) != 2 || csscanf(params, "%x", &memLoc) != 1) goto error;
    136B: 52 00    MOV   A,[X+0]
    136D: 08       PUSH  A
    136E: 52 01    MOV   A,[X+1]
    1370: 08       PUSH  A
    1371: 7C 19 BF LCALL _strlenLMM
    1374: 38 FA    ADD   SP,0xFA
    1376: 62 D0 00 MOV   REG[0xD0],0x0
    1379: 3C 7F 00 CMP   [__r0],0x0
    137C: B0 32    JNZ   0x13AF
    137E: 3C 7E 02 CMP   [__r1],0x2
    1381: B0 2D    JNZ   0x13AF
    1383: 62 D0 00 MOV   REG[0xD0],0x0
    1386: 5A 7E    MOV   [__r1],X
    1388: 06 7E 0A ADD   [__r1],0xA
    138B: 50 07    MOV   A,0x7
    138D: 08       PUSH  A
    138E: 51 7E    MOV   A,[__r1]
    1390: 08       PUSH  A
    1391: 50 05    MOV   A,0x5
    1393: 08       PUSH  A
    1394: 50 01    MOV   A,0x1
    1396: 08       PUSH  A
    1397: 52 00    MOV   A,[X+0]
    1399: 08       PUSH  A
    139A: 52 01    MOV   A,[X+1]
    139C: 08       PUSH  A
    139D: 7C 26 CF LCALL _csscanf
    13A0: 38 FA    ADD   SP,0xFA
    13A2: 62 D0 00 MOV   REG[0xD0],0x0
    13A5: 3C 7F 00 CMP   [__r0],0x0
    13A8: B0 06    JNZ   0x13AF
    13AA: 3C 7E 01 CMP   [__r1],0x1
    13AD: A0 03    JZ    0x13B1
    13AF: 84 BE    JMP   0x186E
(0172) 			
(0173) 			params = cstrtok(0x00, " ");
    13B1: 50 05    MOV   A,0x5
    13B3: 08       PUSH  A
    13B4: 50 04    MOV   A,0x4
    13B6: 08       PUSH  A
    13B7: 50 00    MOV   A,0x0
    13B9: 08       PUSH  A
    13BA: 08       PUSH  A
    13BB: 7C 33 2A LCALL _cstrtok
    13BE: 62 D0 00 MOV   REG[0xD0],0x0
    13C1: 51 7E    MOV   A,[__r1]
    13C3: 54 01    MOV   [X+1],A
    13C5: 51 7F    MOV   A,[__r0]
    13C7: 54 00    MOV   [X+0],A
(0174) 			if (strlen(params) != 1 || csscanf(params, "%c", &dataType) != 1) goto error;
    13C9: 52 00    MOV   A,[X+0]
    13CB: 08       PUSH  A
    13CC: 52 01    MOV   A,[X+1]
    13CE: 08       PUSH  A
    13CF: 7C 19 BF LCALL _strlenLMM
    13D2: 38 FA    ADD   SP,0xFA
    13D4: 62 D0 00 MOV   REG[0xD0],0x0
    13D7: 3C 7F 00 CMP   [__r0],0x0
    13DA: B0 32    JNZ   0x140D
    13DC: 3C 7E 01 CMP   [__r1],0x1
    13DF: B0 2D    JNZ   0x140D
    13E1: 62 D0 00 MOV   REG[0xD0],0x0
    13E4: 5A 7E    MOV   [__r1],X
    13E6: 06 7E 05 ADD   [__r1],0x5
    13E9: 50 07    MOV   A,0x7
    13EB: 08       PUSH  A
    13EC: 51 7E    MOV   A,[__r1]
    13EE: 08       PUSH  A
    13EF: 50 02    MOV   A,0x2
    13F1: 08       PUSH  A
    13F2: 50 52    MOV   A,0x52
    13F4: 08       PUSH  A
    13F5: 52 00    MOV   A,[X+0]
    13F7: 08       PUSH  A
    13F8: 52 01    MOV   A,[X+1]
    13FA: 08       PUSH  A
    13FB: 7C 26 CF LCALL _csscanf
    13FE: 38 FA    ADD   SP,0xFA
    1400: 62 D0 00 MOV   REG[0xD0],0x0
    1403: 3C 7F 00 CMP   [__r0],0x0
    1406: B0 06    JNZ   0x140D
    1408: 3C 7E 01 CMP   [__r1],0x1
    140B: A0 03    JZ    0x140F
    140D: 84 60    JMP   0x186E
(0175) 			// after ascii or hex selection read the rest until null ( note new delimiter)
(0176) 			params = cstrtok(0x00, "\0");
    140F: 50 02    MOV   A,0x2
    1411: 08       PUSH  A
    1412: 50 50    MOV   A,0x50
    1414: 08       PUSH  A
    1415: 50 00    MOV   A,0x0
    1417: 08       PUSH  A
    1418: 08       PUSH  A
    1419: 7C 33 2A LCALL _cstrtok
    141C: 62 D0 00 MOV   REG[0xD0],0x0
    141F: 51 7E    MOV   A,[__r1]
    1421: 54 01    MOV   [X+1],A
    1423: 51 7F    MOV   A,[__r0]
    1425: 54 00    MOV   [X+0],A
(0177) 			if (strlen(params) == 0 || params == 0x00) goto error;	// the set up command but didn't put anything in to write
    1427: 52 00    MOV   A,[X+0]
    1429: 08       PUSH  A
    142A: 52 01    MOV   A,[X+1]
    142C: 08       PUSH  A
    142D: 7C 19 BF LCALL _strlenLMM
    1430: 38 FA    ADD   SP,0xFA
    1432: 62 D0 00 MOV   REG[0xD0],0x0
    1435: 3C 7F 00 CMP   [__r0],0x0
    1438: B0 06    JNZ   0x143F
    143A: 3C 7E 00 CMP   [__r1],0x0
    143D: A0 0B    JZ    0x1449
    143F: 3D 00 00 CMP   [X+0],0x0
    1442: B0 08    JNZ   0x144B
    1444: 3D 01 00 CMP   [X+1],0x0
    1447: B0 03    JNZ   0x144B
    1449: 84 24    JMP   0x186E
(0178) 			
(0179) 			dataType = tolower(dataType); // Lowercase this stuff b/c case insensitive
    144B: 62 D0 00 MOV   REG[0xD0],0x0
    144E: 52 05    MOV   A,[X+5]
    1450: 53 7E    MOV   [__r1],A
    1452: 50 00    MOV   A,0x0
    1454: 08       PUSH  A
    1455: 51 7E    MOV   A,[__r1]
    1457: 08       PUSH  A
    1458: 7C 25 A8 LCALL _tolower
    145B: 38 FE    ADD   SP,0xFE
    145D: 62 D0 00 MOV   REG[0xD0],0x0
    1460: 51 7E    MOV   A,[__r1]
    1462: 54 05    MOV   [X+5],A
(0180) 			if (groupAddress < 0 || groupAddress > 7)
    1464: 52 07    MOV   A,[X+7]
    1466: 11 00    SUB   A,0x0
    1468: 52 06    MOV   A,[X+6]
    146A: 31 80    XOR   A,0x80
    146C: 19 80    SBB   A,0x80
    146E: C0 14    JC    0x1483
    1470: 50 07    MOV   A,0x7
    1472: 13 07    SUB   A,[X+7]
    1474: 52 06    MOV   A,[X+6]
    1476: 31 80    XOR   A,0x80
    1478: 62 D0 00 MOV   REG[0xD0],0x0
    147B: 53 77    MOV   [__rX],A
    147D: 50 80    MOV   A,0x80
    147F: 1A 77    SBB   A,[__rX]
    1481: D0 03    JNC   0x1485
(0181) 				goto error;// groupAddress int representation is invalid
    1483: 83 EA    JMP   0x186E
(0182) 			
(0183) 			data[0] = memLoc;	// begin to fill the global data[256] first byte is user hex mem entry
    1485: 52 0B    MOV   A,[X+11]
    1487: 62 D0 01 MOV   REG[0xD0],0x1
    148A: 53 00    MOV   [data],A
(0184) 			
(0185) 			slaveAddress |= groupAddress;	// adds group address to the slaveAddress
    148C: 62 D0 00 MOV   REG[0xD0],0x0
    148F: 52 04    MOV   A,[X+4]
    1491: 53 7E    MOV   [__r1],A
    1493: 52 07    MOV   A,[X+7]
    1495: 2C 7E    OR    [__r1],A
    1497: 51 7E    MOV   A,[__r1]
    1499: 54 04    MOV   [X+4],A
(0186) 												// how does this work?? slaveAddress a char and groupAddress an int
(0187) 			if (dataType == 'a') // check data type used to write or read
    149B: 3D 05 61 CMP   [X+5],0x61
    149E: B0 2E    JNZ   0x14CD
(0188) 			{
(0189) 				strcpy((data + 1), params); // If it wants ASCII, just copy it from params into data +1
    14A0: 52 00    MOV   A,[X+0]
    14A2: 08       PUSH  A
    14A3: 52 01    MOV   A,[X+1]
    14A5: 08       PUSH  A
    14A6: 50 01    MOV   A,0x1
    14A8: 08       PUSH  A
    14A9: 50 01    MOV   A,0x1
    14AB: 08       PUSH  A
    14AC: 7C 19 96 LCALL _strcpyLMM
(0190) 						// data + 1 (byte after memLoc) is destination, params is source copies dataType
(0191) 				len = strlen((data + 1)) + 1; // length after pointing to data plus one measure then add 1 ??
    14AF: 50 01    MOV   A,0x1
    14B1: 08       PUSH  A
    14B2: 50 01    MOV   A,0x1
    14B4: 08       PUSH  A
    14B5: 7C 19 BF LCALL _strlenLMM
    14B8: 38 FA    ADD   SP,0xFA
    14BA: 62 D0 00 MOV   REG[0xD0],0x0
    14BD: 06 7E 01 ADD   [__r1],0x1
    14C0: 0E 7F 00 ADC   [__r0],0x0
    14C3: 51 7E    MOV   A,[__r1]
    14C5: 54 09    MOV   [X+9],A
    14C7: 51 7F    MOV   A,[__r0]
    14C9: 54 08    MOV   [X+8],A
(0192) 												// because memory location why is this twice????
(0193) 			}
    14CB: 80 32    JMP   0x14FE
(0194) 			else if (dataType == 'h')
    14CD: 3D 05 68 CMP   [X+5],0x68
    14D0: B3 9D    JNZ   0x186E
(0195) 			{
(0196) 				if ((len = HexConversion(params, (data + 1))) == -1) // Take hex data and convert to numbers into src + 1(src[0] has the memory loc)
    14D2: 50 01    MOV   A,0x1
    14D4: 08       PUSH  A
    14D5: 50 01    MOV   A,0x1
    14D7: 08       PUSH  A
    14D8: 52 00    MOV   A,[X+0]
    14DA: 08       PUSH  A
    14DB: 52 01    MOV   A,[X+1]
    14DD: 08       PUSH  A
    14DE: 9B E5    CALL  _HexConversion
    14E0: 38 FC    ADD   SP,0xFC
    14E2: 62 D0 00 MOV   REG[0xD0],0x0
    14E5: 51 7E    MOV   A,[__r1]
    14E7: 54 09    MOV   [X+9],A
    14E9: 51 7F    MOV   A,[__r0]
    14EB: 54 08    MOV   [X+8],A
    14ED: 3C 7F FF CMP   [__r0],0xFF
    14F0: B0 08    JNZ   0x14F9
    14F2: 3C 7E FF CMP   [__r1],0xFF
    14F5: B0 03    JNZ   0x14F9
(0197) 					goto error;
    14F7: 83 76    JMP   0x186E
(0198) 				len++; // Add one to the length because of the memoryLocation
    14F9: 77 09    INC   [X+9]
    14FB: 0F 08 00 ADC   [X+8],0x0
(0199) 			}
(0200) 			else
(0201) 				goto error;
(0202) 			
(0203) 			I2CHW_bWriteBytes(slaveAddress, data, len, I2CHW_CompleteXfer); // Write it using Master Fcn 
    14FE: 10       PUSH  X
    14FF: 50 00    MOV   A,0x0
    1501: 08       PUSH  A
    1502: 62 D0 00 MOV   REG[0xD0],0x0
    1505: 52 09    MOV   A,[X+9]
    1507: 08       PUSH  A
    1508: 50 01    MOV   A,0x1
    150A: 08       PUSH  A
    150B: 50 00    MOV   A,0x0
    150D: 08       PUSH  A
    150E: 52 04    MOV   A,[X+4]
    1510: 08       PUSH  A
    1511: 7C 0C 0A LCALL _I2CHW_bWriteBytes
    1514: 38 FB    ADD   SP,0xFB
    1516: 20       POP   X
(0204) 			while (!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    1517: 10       PUSH  X
    1518: 7C 0F 68 LCALL _I2CHW_bReadI2CStatus
    151B: 20       POP   X
    151C: 62 D0 00 MOV   REG[0xD0],0x0
    151F: 53 7F    MOV   [__r0],A
    1521: 47 7F 40 TST   [__r0],0x40
    1524: AF F2    JZ    0x1517
(0205) 			I2CHW_ClrWrStatus();
    1526: 10       PUSH  X
    1527: 7C 0F 75 LCALL _I2CHW_ClrWrStatus
    152A: 20       POP   X
(0206) 			
(0207) 			csprintf(data, "%x bytes were written", len); // Look up sprintf on Google for information 
    152B: 52 08    MOV   A,[X+8]
    152D: 08       PUSH  A
    152E: 52 09    MOV   A,[X+9]
    1530: 08       PUSH  A
    1531: 50 02    MOV   A,0x2
    1533: 08       PUSH  A
    1534: 50 3A    MOV   A,0x3A
    1536: 08       PUSH  A
    1537: 50 01    MOV   A,0x1
    1539: 08       PUSH  A
    153A: 50 00    MOV   A,0x0
    153C: 08       PUSH  A
    153D: 7C 26 18 LCALL _csprintf
    1540: 38 FA    ADD   SP,0xFA
(0208) 			UART_PutString(data);
    1542: 10       PUSH  X
    1543: 50 01    MOV   A,0x1
    1545: 08       PUSH  A
    1546: 50 00    MOV   A,0x0
    1548: 5C       MOV   X,A
    1549: 18       POP   A
    154A: 7C 09 68 LCALL _UART_PutString
(0209) 			UART_PutCRLF();
    154D: 7C 09 E0 LCALL _UART_PutCRLF
    1550: 20       POP   X
(0210) 		}
    1551: 83 28    JMP   0x187A
(0211) 		else if (strlen(cmd) == 1 && cmd[0] == 'r')
    1553: 52 02    MOV   A,[X+2]
    1555: 08       PUSH  A
    1556: 52 03    MOV   A,[X+3]
    1558: 08       PUSH  A
    1559: 7C 19 BF LCALL _strlenLMM
    155C: 38 FE    ADD   SP,0xFE
    155E: 62 D0 00 MOV   REG[0xD0],0x0
    1561: 3C 7F 00 CMP   [__r0],0x0
    1564: B3 09    JNZ   0x186E
    1566: 3C 7E 01 CMP   [__r1],0x1
    1569: B3 04    JNZ   0x186E
    156B: 62 D0 00 MOV   REG[0xD0],0x0
    156E: 52 03    MOV   A,[X+3]
    1570: 53 7E    MOV   [__r1],A
    1572: 52 02    MOV   A,[X+2]
    1574: 60 D4    MOV   REG[0xD4],A
    1576: 3E 7E    MVI   A,[__r1]
    1578: 39 72    CMP   A,0x72
    157A: B2 F3    JNZ   0x186E
(0212) 		{
(0213) 			int groupAddress;
(0214) 			int memLoc;
(0215) 			char dataType;
(0216) 			int numBytes;
(0217) 			
(0218) 			char hexStr[4];
(0219) 			int i;
(0220) 
(0221) 			params = cstrtok(0x00, " ");
    157C: 50 05    MOV   A,0x5
    157E: 08       PUSH  A
    157F: 50 04    MOV   A,0x4
    1581: 08       PUSH  A
    1582: 50 00    MOV   A,0x0
    1584: 08       PUSH  A
    1585: 08       PUSH  A
    1586: 7C 33 2A LCALL _cstrtok
    1589: 62 D0 00 MOV   REG[0xD0],0x0
    158C: 51 7E    MOV   A,[__r1]
    158E: 54 01    MOV   [X+1],A
    1590: 51 7F    MOV   A,[__r0]
    1592: 54 00    MOV   [X+0],A
(0222) 			if (strlen(params) != 1 || csscanf(params, "%d", &groupAddress) != 1) goto error;
    1594: 52 00    MOV   A,[X+0]
    1596: 08       PUSH  A
    1597: 52 01    MOV   A,[X+1]
    1599: 08       PUSH  A
    159A: 7C 19 BF LCALL _strlenLMM
    159D: 38 FA    ADD   SP,0xFA
    159F: 62 D0 00 MOV   REG[0xD0],0x0
    15A2: 3C 7F 00 CMP   [__r0],0x0
    15A5: B0 32    JNZ   0x15D8
    15A7: 3C 7E 01 CMP   [__r1],0x1
    15AA: B0 2D    JNZ   0x15D8
    15AC: 62 D0 00 MOV   REG[0xD0],0x0
    15AF: 5A 7E    MOV   [__r1],X
    15B1: 06 7E 0E ADD   [__r1],0xE
    15B4: 50 07    MOV   A,0x7
    15B6: 08       PUSH  A
    15B7: 51 7E    MOV   A,[__r1]
    15B9: 08       PUSH  A
    15BA: 50 02    MOV   A,0x2
    15BC: 08       PUSH  A
    15BD: 50 55    MOV   A,0x55
    15BF: 08       PUSH  A
    15C0: 52 00    MOV   A,[X+0]
    15C2: 08       PUSH  A
    15C3: 52 01    MOV   A,[X+1]
    15C5: 08       PUSH  A
    15C6: 7C 26 CF LCALL _csscanf
    15C9: 38 FA    ADD   SP,0xFA
    15CB: 62 D0 00 MOV   REG[0xD0],0x0
    15CE: 3C 7F 00 CMP   [__r0],0x0
    15D1: B0 06    JNZ   0x15D8
    15D3: 3C 7E 01 CMP   [__r1],0x1
    15D6: A0 03    JZ    0x15DA
    15D8: 82 95    JMP   0x186E
(0223) 	
(0224) 			params = cstrtok(0x00, " ");
    15DA: 50 05    MOV   A,0x5
    15DC: 08       PUSH  A
    15DD: 50 04    MOV   A,0x4
    15DF: 08       PUSH  A
    15E0: 50 00    MOV   A,0x0
    15E2: 08       PUSH  A
    15E3: 08       PUSH  A
    15E4: 7C 33 2A LCALL _cstrtok
    15E7: 62 D0 00 MOV   REG[0xD0],0x0
    15EA: 51 7E    MOV   A,[__r1]
    15EC: 54 01    MOV   [X+1],A
    15EE: 51 7F    MOV   A,[__r0]
    15F0: 54 00    MOV   [X+0],A
(0225) 			if (strlen(params) != 2 || csscanf(params, "%x", &memLoc) != 1) goto error;
    15F2: 52 00    MOV   A,[X+0]
    15F4: 08       PUSH  A
    15F5: 52 01    MOV   A,[X+1]
    15F7: 08       PUSH  A
    15F8: 7C 19 BF LCALL _strlenLMM
    15FB: 38 FA    ADD   SP,0xFA
    15FD: 62 D0 00 MOV   REG[0xD0],0x0
    1600: 3C 7F 00 CMP   [__r0],0x0
    1603: B0 32    JNZ   0x1636
    1605: 3C 7E 02 CMP   [__r1],0x2
    1608: B0 2D    JNZ   0x1636
    160A: 62 D0 00 MOV   REG[0xD0],0x0
    160D: 5A 7E    MOV   [__r1],X
    160F: 06 7E 10 ADD   [__r1],0x10
    1612: 50 07    MOV   A,0x7
    1614: 08       PUSH  A
    1615: 51 7E    MOV   A,[__r1]
    1617: 08       PUSH  A
    1618: 50 05    MOV   A,0x5
    161A: 08       PUSH  A
    161B: 50 01    MOV   A,0x1
    161D: 08       PUSH  A
    161E: 52 00    MOV   A,[X+0]
    1620: 08       PUSH  A
    1621: 52 01    MOV   A,[X+1]
    1623: 08       PUSH  A
    1624: 7C 26 CF LCALL _csscanf
    1627: 38 FA    ADD   SP,0xFA
    1629: 62 D0 00 MOV   REG[0xD0],0x0
    162C: 3C 7F 00 CMP   [__r0],0x0
    162F: B0 06    JNZ   0x1636
    1631: 3C 7E 01 CMP   [__r1],0x1
    1634: A0 03    JZ    0x1638
    1636: 82 37    JMP   0x186E
(0226) 			
(0227) 			params = cstrtok(0x00, " ");
    1638: 50 05    MOV   A,0x5
    163A: 08       PUSH  A
    163B: 50 04    MOV   A,0x4
    163D: 08       PUSH  A
    163E: 50 00    MOV   A,0x0
    1640: 08       PUSH  A
    1641: 08       PUSH  A
    1642: 7C 33 2A LCALL _cstrtok
    1645: 62 D0 00 MOV   REG[0xD0],0x0
    1648: 51 7E    MOV   A,[__r1]
    164A: 54 01    MOV   [X+1],A
    164C: 51 7F    MOV   A,[__r0]
    164E: 54 00    MOV   [X+0],A
(0228) 			if (strlen(params) != 1 || csscanf(params, "%c", &dataType) != 1) goto error;
    1650: 52 00    MOV   A,[X+0]
    1652: 08       PUSH  A
    1653: 52 01    MOV   A,[X+1]
    1655: 08       PUSH  A
    1656: 7C 19 BF LCALL _strlenLMM
    1659: 38 FA    ADD   SP,0xFA
    165B: 62 D0 00 MOV   REG[0xD0],0x0
    165E: 3C 7F 00 CMP   [__r0],0x0
    1661: B0 32    JNZ   0x1694
    1663: 3C 7E 01 CMP   [__r1],0x1
    1666: B0 2D    JNZ   0x1694
    1668: 62 D0 00 MOV   REG[0xD0],0x0
    166B: 5A 7E    MOV   [__r1],X
    166D: 06 7E 0D ADD   [__r1],0xD
    1670: 50 07    MOV   A,0x7
    1672: 08       PUSH  A
    1673: 51 7E    MOV   A,[__r1]
    1675: 08       PUSH  A
    1676: 50 02    MOV   A,0x2
    1678: 08       PUSH  A
    1679: 50 52    MOV   A,0x52
    167B: 08       PUSH  A
    167C: 52 00    MOV   A,[X+0]
    167E: 08       PUSH  A
    167F: 52 01    MOV   A,[X+1]
    1681: 08       PUSH  A
    1682: 7C 26 CF LCALL _csscanf
    1685: 38 FA    ADD   SP,0xFA
    1687: 62 D0 00 MOV   REG[0xD0],0x0
    168A: 3C 7F 00 CMP   [__r0],0x0
    168D: B0 06    JNZ   0x1694
    168F: 3C 7E 01 CMP   [__r1],0x1
    1692: A0 03    JZ    0x1696
    1694: 81 D9    JMP   0x186E
(0229) 			
(0230) 			params = cstrtok(0x00, " ");
    1696: 50 05    MOV   A,0x5
    1698: 08       PUSH  A
    1699: 50 04    MOV   A,0x4
    169B: 08       PUSH  A
    169C: 50 00    MOV   A,0x0
    169E: 08       PUSH  A
    169F: 08       PUSH  A
    16A0: 7C 33 2A LCALL _cstrtok
    16A3: 62 D0 00 MOV   REG[0xD0],0x0
    16A6: 51 7E    MOV   A,[__r1]
    16A8: 54 01    MOV   [X+1],A
    16AA: 51 7F    MOV   A,[__r0]
    16AC: 54 00    MOV   [X+0],A
(0231) 			if (strlen(params) != 2 || csscanf(params, "%x", &numBytes) != 1) goto error;
    16AE: 52 00    MOV   A,[X+0]
    16B0: 08       PUSH  A
    16B1: 52 01    MOV   A,[X+1]
    16B3: 08       PUSH  A
    16B4: 7C 19 BF LCALL _strlenLMM
    16B7: 38 FA    ADD   SP,0xFA
    16B9: 62 D0 00 MOV   REG[0xD0],0x0
    16BC: 3C 7F 00 CMP   [__r0],0x0
    16BF: B0 32    JNZ   0x16F2
    16C1: 3C 7E 02 CMP   [__r1],0x2
    16C4: B0 2D    JNZ   0x16F2
    16C6: 62 D0 00 MOV   REG[0xD0],0x0
    16C9: 5A 7E    MOV   [__r1],X
    16CB: 06 7E 07 ADD   [__r1],0x7
    16CE: 50 07    MOV   A,0x7
    16D0: 08       PUSH  A
    16D1: 51 7E    MOV   A,[__r1]
    16D3: 08       PUSH  A
    16D4: 50 05    MOV   A,0x5
    16D6: 08       PUSH  A
    16D7: 50 01    MOV   A,0x1
    16D9: 08       PUSH  A
    16DA: 52 00    MOV   A,[X+0]
    16DC: 08       PUSH  A
    16DD: 52 01    MOV   A,[X+1]
    16DF: 08       PUSH  A
    16E0: 7C 26 CF LCALL _csscanf
    16E3: 38 FA    ADD   SP,0xFA
    16E5: 62 D0 00 MOV   REG[0xD0],0x0
    16E8: 3C 7F 00 CMP   [__r0],0x0
    16EB: B0 06    JNZ   0x16F2
    16ED: 3C 7E 01 CMP   [__r1],0x1
    16F0: A0 03    JZ    0x16F4
    16F2: 81 7B    JMP   0x186E
(0232) 			
(0233) 			if (cstrtok(0x00, " ") != 0x00) goto error;
    16F4: 50 05    MOV   A,0x5
    16F6: 08       PUSH  A
    16F7: 50 04    MOV   A,0x4
    16F9: 08       PUSH  A
    16FA: 50 00    MOV   A,0x0
    16FC: 08       PUSH  A
    16FD: 08       PUSH  A
    16FE: 7C 33 2A LCALL _cstrtok
    1701: 38 FC    ADD   SP,0xFC
    1703: 62 D0 00 MOV   REG[0xD0],0x0
    1706: 3C 7F 00 CMP   [__r0],0x0
    1709: B0 06    JNZ   0x1710
    170B: 3C 7E 00 CMP   [__r1],0x0
    170E: A0 03    JZ    0x1712
    1710: 81 5D    JMP   0x186E
(0234) 			
(0235) 			dataType = tolower(dataType); // Lowercase this stuff b/c case insensitive
    1712: 62 D0 00 MOV   REG[0xD0],0x0
    1715: 52 0D    MOV   A,[X+13]
    1717: 53 7E    MOV   [__r1],A
    1719: 50 00    MOV   A,0x0
    171B: 08       PUSH  A
    171C: 51 7E    MOV   A,[__r1]
    171E: 08       PUSH  A
    171F: 7C 25 A8 LCALL _tolower
    1722: 38 FE    ADD   SP,0xFE
    1724: 62 D0 00 MOV   REG[0xD0],0x0
    1727: 51 7E    MOV   A,[__r1]
    1729: 54 0D    MOV   [X+13],A
(0236) 			if (groupAddress < 0 || groupAddress > 7)
    172B: 52 0F    MOV   A,[X+15]
    172D: 11 00    SUB   A,0x0
    172F: 52 0E    MOV   A,[X+14]
    1731: 31 80    XOR   A,0x80
    1733: 19 80    SBB   A,0x80
    1735: C0 14    JC    0x174A
    1737: 50 07    MOV   A,0x7
    1739: 13 0F    SUB   A,[X+15]
    173B: 52 0E    MOV   A,[X+14]
    173D: 31 80    XOR   A,0x80
    173F: 62 D0 00 MOV   REG[0xD0],0x0
    1742: 53 77    MOV   [__rX],A
    1744: 50 80    MOV   A,0x80
    1746: 1A 77    SBB   A,[__rX]
    1748: D0 03    JNC   0x174C
(0237) 				goto error;
    174A: 81 23    JMP   0x186E
(0238) 			
(0239) 			data[0] = memLoc;
    174C: 52 11    MOV   A,[X+17]
    174E: 62 D0 01 MOV   REG[0xD0],0x1
    1751: 53 00    MOV   [data],A
(0240) 			slaveAddress |= groupAddress;
    1753: 62 D0 00 MOV   REG[0xD0],0x0
    1756: 52 04    MOV   A,[X+4]
    1758: 53 7E    MOV   [__r1],A
    175A: 52 0F    MOV   A,[X+15]
    175C: 2C 7E    OR    [__r1],A
    175E: 51 7E    MOV   A,[__r1]
    1760: 54 04    MOV   [X+4],A
(0241) 			
(0242) 			I2CHW_bWriteBytes(slaveAddress, data, 1, I2CHW_NoStop);
    1762: 10       PUSH  X
    1763: 50 02    MOV   A,0x2
    1765: 08       PUSH  A
    1766: 50 01    MOV   A,0x1
    1768: 08       PUSH  A
    1769: 50 01    MOV   A,0x1
    176B: 08       PUSH  A
    176C: 50 00    MOV   A,0x0
    176E: 08       PUSH  A
    176F: 52 04    MOV   A,[X+4]
    1771: 08       PUSH  A
    1772: 7C 0C 0A LCALL _I2CHW_bWriteBytes
    1775: 38 FB    ADD   SP,0xFB
    1777: 20       POP   X
(0243) 			while (!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    1778: 10       PUSH  X
    1779: 7C 0F 68 LCALL _I2CHW_bReadI2CStatus
    177C: 20       POP   X
    177D: 62 D0 00 MOV   REG[0xD0],0x0
    1780: 53 7F    MOV   [__r0],A
    1782: 47 7F 40 TST   [__r0],0x40
    1785: AF F2    JZ    0x1778
(0244) 			I2CHW_ClrWrStatus();
    1787: 10       PUSH  X
    1788: 7C 0F 75 LCALL _I2CHW_ClrWrStatus
    178B: 20       POP   X
(0245) 			
(0246) 			I2CHW_fReadBytes(slaveAddress, data, numBytes, I2CHW_CompleteXfer);
    178C: 10       PUSH  X
    178D: 50 00    MOV   A,0x0
    178F: 08       PUSH  A
    1790: 62 D0 00 MOV   REG[0xD0],0x0
    1793: 52 08    MOV   A,[X+8]
    1795: 08       PUSH  A
    1796: 50 01    MOV   A,0x1
    1798: 08       PUSH  A
    1799: 50 00    MOV   A,0x0
    179B: 08       PUSH  A
    179C: 52 04    MOV   A,[X+4]
    179E: 08       PUSH  A
    179F: 7C 0B C6 LCALL _I2CHW_fReadBytes
    17A2: 38 FB    ADD   SP,0xFB
    17A4: 20       POP   X
(0247) 			while(!(I2CHW_bReadI2CStatus() & I2CHW_RD_COMPLETE));
    17A5: 10       PUSH  X
    17A6: 7C 0F 68 LCALL _I2CHW_bReadI2CStatus
    17A9: 20       POP   X
    17AA: 62 D0 00 MOV   REG[0xD0],0x0
    17AD: 53 7F    MOV   [__r0],A
    17AF: 47 7F 04 TST   [__r0],0x4
    17B2: AF F2    JZ    0x17A5
(0248) 			I2CHW_ClrRdStatus();
    17B4: 10       PUSH  X
    17B5: 7C 0F 6E LCALL _I2CHW_ClrRdStatus
    17B8: 20       POP   X
(0249) 			
(0250) 			if (dataType == 'a')
    17B9: 3D 0D 61 CMP   [X+13],0x61
    17BC: B0 40    JNZ   0x17FD
(0251) 			{
(0252) 				for (i = 0; i < numBytes; ++i)
    17BE: 56 06 00 MOV   [X+6],0x0
    17C1: 56 05 00 MOV   [X+5],0x0
    17C4: 80 1C    JMP   0x17E1
(0253) 					UART_PutChar(data[i]);
    17C6: 62 D0 00 MOV   REG[0xD0],0x0
    17C9: 52 06    MOV   A,[X+6]
    17CB: 01 00    ADD   A,0x0
    17CD: 53 7E    MOV   [__r1],A
    17CF: 52 05    MOV   A,[X+5]
    17D1: 09 01    ADC   A,0x1
    17D3: 60 D4    MOV   REG[0xD4],A
    17D5: 3E 7E    MVI   A,[__r1]
    17D7: 10       PUSH  X
    17D8: 7C 09 2B LCALL _UART_PutChar
    17DB: 20       POP   X
    17DC: 77 06    INC   [X+6]
    17DE: 0F 05 00 ADC   [X+5],0x0
    17E1: 52 06    MOV   A,[X+6]
    17E3: 13 08    SUB   A,[X+8]
    17E5: 52 07    MOV   A,[X+7]
    17E7: 31 80    XOR   A,0x80
    17E9: 62 D0 00 MOV   REG[0xD0],0x0
    17EC: 53 77    MOV   [__rX],A
    17EE: 52 05    MOV   A,[X+5]
    17F0: 31 80    XOR   A,0x80
    17F2: 1A 77    SBB   A,[__rX]
    17F4: CF D1    JC    0x17C6
(0254) 				UART_PutCRLF();
    17F6: 10       PUSH  X
    17F7: 7C 09 E0 LCALL _UART_PutCRLF
    17FA: 20       POP   X
(0255) 			}
    17FB: 80 7E    JMP   0x187A
(0256) 			else if (dataType == 'h')
    17FD: 3D 0D 68 CMP   [X+13],0x68
    1800: B0 6D    JNZ   0x186E
(0257) 			{
(0258) 				for (i = 0; i < numBytes; ++i)
    1802: 56 06 00 MOV   [X+6],0x0
    1805: 56 05 00 MOV   [X+5],0x0
    1808: 80 49    JMP   0x1852
(0259) 				{
(0260) 					csprintf(hexStr, "%X ", data[i]);
    180A: 62 D0 00 MOV   REG[0xD0],0x0
    180D: 52 06    MOV   A,[X+6]
    180F: 01 00    ADD   A,0x0
    1811: 53 7E    MOV   [__r1],A
    1813: 52 05    MOV   A,[X+5]
    1815: 09 01    ADC   A,0x1
    1817: 60 D4    MOV   REG[0xD4],A
    1819: 3E 7E    MVI   A,[__r1]
    181B: 53 7E    MOV   [__r1],A
    181D: 50 00    MOV   A,0x0
    181F: 08       PUSH  A
    1820: 51 7E    MOV   A,[__r1]
    1822: 08       PUSH  A
    1823: 50 02    MOV   A,0x2
    1825: 08       PUSH  A
    1826: 50 36    MOV   A,0x36
    1828: 08       PUSH  A
    1829: 5A 7E    MOV   [__r1],X
    182B: 06 7E 09 ADD   [__r1],0x9
    182E: 50 07    MOV   A,0x7
    1830: 08       PUSH  A
    1831: 51 7E    MOV   A,[__r1]
    1833: 08       PUSH  A
    1834: 7C 26 18 LCALL _csprintf
    1837: 38 FA    ADD   SP,0xFA
(0261) 					UART_PutString(hexStr);
    1839: 62 D0 00 MOV   REG[0xD0],0x0
    183C: 5A 7E    MOV   [__r1],X
    183E: 06 7E 09 ADD   [__r1],0x9
    1841: 10       PUSH  X
    1842: 50 07    MOV   A,0x7
    1844: 08       PUSH  A
    1845: 51 7E    MOV   A,[__r1]
    1847: 5C       MOV   X,A
    1848: 18       POP   A
    1849: 7C 09 68 LCALL _UART_PutString
    184C: 20       POP   X
(0262) 				}
    184D: 77 06    INC   [X+6]
    184F: 0F 05 00 ADC   [X+5],0x0
    1852: 52 06    MOV   A,[X+6]
    1854: 13 08    SUB   A,[X+8]
    1856: 52 07    MOV   A,[X+7]
    1858: 31 80    XOR   A,0x80
    185A: 62 D0 00 MOV   REG[0xD0],0x0
    185D: 53 77    MOV   [__rX],A
    185F: 52 05    MOV   A,[X+5]
    1861: 31 80    XOR   A,0x80
    1863: 1A 77    SBB   A,[__rX]
    1865: CF A4    JC    0x180A
(0263) 				UART_PutCRLF();
    1867: 10       PUSH  X
    1868: 7C 09 E0 LCALL _UART_PutCRLF
    186B: 20       POP   X
(0264) 			}
(0265) 			else
(0266) 				goto error;
(0267) 		}
(0268) 		else 
(0269) 			goto error;
(0270) 		
(0271) 		continue;
    186C: 80 0D    JMP   0x187A
(0272) 		error:
(0273) 			UART_CPutString("Invalid format entered. Valid formats are:\r\n\tW [GroupAddress] [MemoryLocation] [h|a] Hex/ASCII\r\n\tR [GroupAddress] [MemoryLocation] [h|a] [NumBytes]\r\n");
    186E: 10       PUSH  X
    186F: 50 01    MOV   A,0x1
    1871: 08       PUSH  A
    1872: 50 A0    MOV   A,0xA0
    1874: 5C       MOV   X,A
    1875: 18       POP   A
    1876: 7C 09 CE LCALL _UART_CPutString
    1879: 20       POP   X
(0274) 	}
    187A: 8A 06    JMP   0x1281
(0275) }
    187C: 38 EE    ADD   SP,0xEE
    187E: 20       POP   X
    187F: 8F FF    JMP   0x187F
_memsetLMM:
    1968: 62 D0 00 MOV   REG[0xD0],0x0
    196B: 10       PUSH  X
    196C: 4F       MOV   X,SP
    196D: 52 FB    MOV   A,[X-5]
    196F: 60 D5    MOV   REG[0xD5],A
    1971: 80 03    JMP   0x1975
_memset:
    1973: 10       PUSH  X
    1974: 4F       MOV   X,SP
    1975: 52 FC    MOV   A,[X-4]
    1977: 53 7E    MOV   [__r1],A
    1979: 53 7D    MOV   [__r2],A
    197B: 52 FB    MOV   A,[X-5]
    197D: 53 7F    MOV   [__r0],A
    197F: 52 FA    MOV   A,[X-6]
    1981: 80 08    JMP   0x198A
    1983: 3F 7D    MVI   [__r2],A
    1985: 7B F8    DEC   [X-8]
    1987: 1F F7 00 SBB   [X-9],0x0
    198A: 3D F8 00 CMP   [X-8],0x0
    198D: BF F5    JNZ   0x1983
    198F: 3D F7 00 CMP   [X-9],0x0
    1992: BF F0    JNZ   0x1983
    1994: 20       POP   X
    1995: 7F       RET   
_strcpyLMM:
    1996: 62 D0 00 MOV   REG[0xD0],0x0
    1999: 10       PUSH  X
    199A: 4F       MOV   X,SP
    199B: 52 FB    MOV   A,[X-5]
    199D: 60 D5    MOV   REG[0xD5],A
    199F: 52 F9    MOV   A,[X-7]
    19A1: 60 D4    MOV   REG[0xD4],A
    19A3: 80 03    JMP   0x19A7
_strcpy:
    19A5: 10       PUSH  X
    19A6: 4F       MOV   X,SP
    19A7: 52 FC    MOV   A,[X-4]
    19A9: 53 7E    MOV   [__r1],A
    19AB: 53 7D    MOV   [__r2],A
    19AD: 52 FB    MOV   A,[X-5]
    19AF: 53 7F    MOV   [__r0],A
    19B1: 52 FA    MOV   A,[X-6]
    19B3: 53 7C    MOV   [__r3],A
    19B5: 3E 7C    MVI   A,[__r3]
    19B7: 3F 7D    MVI   [__r2],A
    19B9: 39 00    CMP   A,0x0
    19BB: BF F9    JNZ   0x19B5
    19BD: 20       POP   X
    19BE: 7F       RET   
_strlenLMM:
    19BF: 62 D0 00 MOV   REG[0xD0],0x0
    19C2: 10       PUSH  X
    19C3: 4F       MOV   X,SP
    19C4: 52 FB    MOV   A,[X-5]
    19C6: 60 D4    MOV   REG[0xD4],A
    19C8: 80 03    JMP   0x19CC
_strlen:
    19CA: 10       PUSH  X
    19CB: 4F       MOV   X,SP
    19CC: 55 7E 00 MOV   [__r1],0x0
    19CF: 55 7F 00 MOV   [__r0],0x0
    19D2: 52 FC    MOV   A,[X-4]
    19D4: 53 7D    MOV   [__r2],A
    19D6: 3E 7D    MVI   A,[__r2]
    19D8: 39 00    CMP   A,0x0
    19DA: A0 08    JZ    0x19E3
    19DC: 76 7E    INC   [__r1]
    19DE: 0E 7F 00 ADC   [__r0],0x0
    19E1: 8F F4    JMP   0x19D6
    19E3: 20       POP   X
    19E4: 7F       RET   
__plcall:
    19E5: 53 77    MOV   [__rX],A
    19E7: 28       ROMX  
    19E8: 08       PUSH  A
    19E9: 51 77    MOV   A,[__rX]
    19EB: 75       INC   X
    19EC: 09 00    ADC   A,0x0
    19EE: 28       ROMX  
    19EF: 08       PUSH  A
    19F0: 7F       RET   
_itoa:
    19F1: 10       PUSH  X
    19F2: 4F       MOV   X,SP
    19F3: 38 09    ADD   SP,0x9
    19F5: 52 FA    MOV   A,[X-6]
    19F7: 54 03    MOV   [X+3],A
    19F9: 52 F9    MOV   A,[X-7]
    19FB: 54 02    MOV   [X+2],A
    19FD: 3D F9 00 CMP   [X-7],0x0
    1A00: B0 2F    JNZ   0x1A30
    1A02: 3D FA 00 CMP   [X-6],0x0
    1A05: B0 2A    JNZ   0x1A30
    1A07: 62 D0 00 MOV   REG[0xD0],0x0
    1A0A: 52 FC    MOV   A,[X-4]
    1A0C: 53 7E    MOV   [__r1],A
    1A0E: 52 FB    MOV   A,[X-5]
    1A10: 60 D5    MOV   REG[0xD5],A
    1A12: 50 30    MOV   A,0x30
    1A14: 3F 7E    MVI   [__r1],A
    1A16: 52 FC    MOV   A,[X-4]
    1A18: 01 01    ADD   A,0x1
    1A1A: 53 7E    MOV   [__r1],A
    1A1C: 52 FB    MOV   A,[X-5]
    1A1E: 09 00    ADC   A,0x0
    1A20: 60 D5    MOV   REG[0xD5],A
    1A22: 50 00    MOV   A,0x0
    1A24: 3F 7E    MVI   [__r1],A
    1A26: 52 FC    MOV   A,[X-4]
    1A28: 53 7E    MOV   [__r1],A
    1A2A: 52 FB    MOV   A,[X-5]
    1A2C: 53 7F    MOV   [__r0],A
    1A2E: 81 97    JMP   0x1BC6
    1A30: 52 FA    MOV   A,[X-6]
    1A32: 11 00    SUB   A,0x0
    1A34: 52 F9    MOV   A,[X-7]
    1A36: 31 80    XOR   A,0x80
    1A38: 19 80    SBB   A,0x80
    1A3A: D0 29    JNC   0x1A64
    1A3C: 3D F7 00 CMP   [X-9],0x0
    1A3F: B0 24    JNZ   0x1A64
    1A41: 3D F8 0A CMP   [X-8],0xA
    1A44: B0 1F    JNZ   0x1A64
    1A46: 56 06 01 MOV   [X+6],0x1
    1A49: 62 D0 00 MOV   REG[0xD0],0x0
    1A4C: 52 03    MOV   A,[X+3]
    1A4E: 73       CPL   A
    1A4F: 53 7E    MOV   [__r1],A
    1A51: 52 02    MOV   A,[X+2]
    1A53: 73       CPL   A
    1A54: 53 7F    MOV   [__r0],A
    1A56: 51 7E    MOV   A,[__r1]
    1A58: 01 01    ADD   A,0x1
    1A5A: 54 03    MOV   [X+3],A
    1A5C: 51 7F    MOV   A,[__r0]
    1A5E: 09 00    ADC   A,0x0
    1A60: 54 02    MOV   [X+2],A
    1A62: 80 04    JMP   0x1A67
    1A64: 56 06 00 MOV   [X+6],0x0
    1A67: 52 FC    MOV   A,[X-4]
    1A69: 54 01    MOV   [X+1],A
    1A6B: 52 FB    MOV   A,[X-5]
    1A6D: 54 00    MOV   [X+0],A
    1A6F: 62 D0 00 MOV   REG[0xD0],0x0
    1A72: 52 F7    MOV   A,[X-9]
    1A74: 08       PUSH  A
    1A75: 52 F8    MOV   A,[X-8]
    1A77: 08       PUSH  A
    1A78: 52 02    MOV   A,[X+2]
    1A7A: 08       PUSH  A
    1A7B: 52 03    MOV   A,[X+3]
    1A7D: 08       PUSH  A
    1A7E: 7C 18 81 LCALL 0x1881
    1A81: 38 FE    ADD   SP,0xFE
    1A83: 18       POP   A
    1A84: 53 7E    MOV   [__r1],A
    1A86: 18       POP   A
    1A87: 53 7F    MOV   [__r0],A
    1A89: 51 7E    MOV   A,[__r1]
    1A8B: 54 08    MOV   [X+8],A
    1A8D: 51 7F    MOV   A,[__r0]
    1A8F: 54 07    MOV   [X+7],A
    1A91: 50 09    MOV   A,0x9
    1A93: 13 08    SUB   A,[X+8]
    1A95: 52 07    MOV   A,[X+7]
    1A97: 31 80    XOR   A,0x80
    1A99: 53 77    MOV   [__rX],A
    1A9B: 50 80    MOV   A,0x80
    1A9D: 1A 77    SBB   A,[__rX]
    1A9F: C0 28    JC    0x1AC8
    1AA1: 62 D0 00 MOV   REG[0xD0],0x0
    1AA4: 52 01    MOV   A,[X+1]
    1AA6: 53 7E    MOV   [__r1],A
    1AA8: 52 00    MOV   A,[X+0]
    1AAA: 53 7F    MOV   [__r0],A
    1AAC: 51 7E    MOV   A,[__r1]
    1AAE: 01 01    ADD   A,0x1
    1AB0: 54 01    MOV   [X+1],A
    1AB2: 51 7F    MOV   A,[__r0]
    1AB4: 09 00    ADC   A,0x0
    1AB6: 54 00    MOV   [X+0],A
    1AB8: 52 08    MOV   A,[X+8]
    1ABA: 01 30    ADD   A,0x30
    1ABC: 53 7D    MOV   [__r2],A
    1ABE: 51 7F    MOV   A,[__r0]
    1AC0: 60 D5    MOV   REG[0xD5],A
    1AC2: 51 7D    MOV   A,[__r2]
    1AC4: 3F 7E    MVI   [__r1],A
    1AC6: 80 26    JMP   0x1AED
    1AC8: 62 D0 00 MOV   REG[0xD0],0x0
    1ACB: 52 01    MOV   A,[X+1]
    1ACD: 53 7E    MOV   [__r1],A
    1ACF: 52 00    MOV   A,[X+0]
    1AD1: 53 7F    MOV   [__r0],A
    1AD3: 51 7E    MOV   A,[__r1]
    1AD5: 01 01    ADD   A,0x1
    1AD7: 54 01    MOV   [X+1],A
    1AD9: 51 7F    MOV   A,[__r0]
    1ADB: 09 00    ADC   A,0x0
    1ADD: 54 00    MOV   [X+0],A
    1ADF: 52 08    MOV   A,[X+8]
    1AE1: 01 57    ADD   A,0x57
    1AE3: 53 7D    MOV   [__r2],A
    1AE5: 51 7F    MOV   A,[__r0]
    1AE7: 60 D5    MOV   REG[0xD5],A
    1AE9: 51 7D    MOV   A,[__r2]
    1AEB: 3F 7E    MVI   [__r1],A
    1AED: 52 F7    MOV   A,[X-9]
    1AEF: 08       PUSH  A
    1AF0: 52 F8    MOV   A,[X-8]
    1AF2: 08       PUSH  A
    1AF3: 52 02    MOV   A,[X+2]
    1AF5: 08       PUSH  A
    1AF6: 52 03    MOV   A,[X+3]
    1AF8: 08       PUSH  A
    1AF9: 62 D0 00 MOV   REG[0xD0],0x0
    1AFC: 7C 18 81 LCALL 0x1881
    1AFF: 18       POP   A
    1B00: 54 03    MOV   [X+3],A
    1B02: 18       POP   A
    1B03: 54 02    MOV   [X+2],A
    1B05: 38 FE    ADD   SP,0xFE
    1B07: 3D 02 00 CMP   [X+2],0x0
    1B0A: BF 64    JNZ   0x1A6F
    1B0C: 3D 03 00 CMP   [X+3],0x0
    1B0F: BF 5F    JNZ   0x1A6F
    1B11: 3D 06 00 CMP   [X+6],0x0
    1B14: A0 20    JZ    0x1B35
    1B16: 62 D0 00 MOV   REG[0xD0],0x0
    1B19: 52 01    MOV   A,[X+1]
    1B1B: 53 7E    MOV   [__r1],A
    1B1D: 52 00    MOV   A,[X+0]
    1B1F: 53 7F    MOV   [__r0],A
    1B21: 51 7E    MOV   A,[__r1]
    1B23: 01 01    ADD   A,0x1
    1B25: 54 01    MOV   [X+1],A
    1B27: 51 7F    MOV   A,[__r0]
    1B29: 09 00    ADC   A,0x0
    1B2B: 54 00    MOV   [X+0],A
    1B2D: 51 7F    MOV   A,[__r0]
    1B2F: 60 D5    MOV   REG[0xD5],A
    1B31: 50 2D    MOV   A,0x2D
    1B33: 3F 7E    MVI   [__r1],A
    1B35: 62 D0 00 MOV   REG[0xD0],0x0
    1B38: 52 01    MOV   A,[X+1]
    1B3A: 53 7E    MOV   [__r1],A
    1B3C: 52 00    MOV   A,[X+0]
    1B3E: 53 7F    MOV   [__r0],A
    1B40: 51 7E    MOV   A,[__r1]
    1B42: 01 FF    ADD   A,0xFF
    1B44: 54 01    MOV   [X+1],A
    1B46: 51 7F    MOV   A,[__r0]
    1B48: 09 FF    ADC   A,0xFF
    1B4A: 54 00    MOV   [X+0],A
    1B4C: 51 7F    MOV   A,[__r0]
    1B4E: 60 D5    MOV   REG[0xD5],A
    1B50: 50 00    MOV   A,0x0
    1B52: 3F 7E    MVI   [__r1],A
    1B54: 52 FC    MOV   A,[X-4]
    1B56: 54 05    MOV   [X+5],A
    1B58: 52 FB    MOV   A,[X-5]
    1B5A: 54 04    MOV   [X+4],A
    1B5C: 80 54    JMP   0x1BB1
    1B5E: 62 D0 00 MOV   REG[0xD0],0x0
    1B61: 52 05    MOV   A,[X+5]
    1B63: 53 7E    MOV   [__r1],A
    1B65: 52 04    MOV   A,[X+4]
    1B67: 60 D4    MOV   REG[0xD4],A
    1B69: 3E 7E    MVI   A,[__r1]
    1B6B: 54 06    MOV   [X+6],A
    1B6D: 52 05    MOV   A,[X+5]
    1B6F: 53 7E    MOV   [__r1],A
    1B71: 52 04    MOV   A,[X+4]
    1B73: 53 7F    MOV   [__r0],A
    1B75: 51 7E    MOV   A,[__r1]
    1B77: 01 01    ADD   A,0x1
    1B79: 54 05    MOV   [X+5],A
    1B7B: 51 7F    MOV   A,[__r0]
    1B7D: 09 00    ADC   A,0x0
    1B7F: 54 04    MOV   [X+4],A
    1B81: 52 01    MOV   A,[X+1]
    1B83: 53 7C    MOV   [__r3],A
    1B85: 52 00    MOV   A,[X+0]
    1B87: 60 D4    MOV   REG[0xD4],A
    1B89: 3E 7C    MVI   A,[__r3]
    1B8B: 53 7D    MOV   [__r2],A
    1B8D: 51 7F    MOV   A,[__r0]
    1B8F: 60 D5    MOV   REG[0xD5],A
    1B91: 51 7D    MOV   A,[__r2]
    1B93: 3F 7E    MVI   [__r1],A
    1B95: 52 01    MOV   A,[X+1]
    1B97: 53 7E    MOV   [__r1],A
    1B99: 52 00    MOV   A,[X+0]
    1B9B: 53 7F    MOV   [__r0],A
    1B9D: 51 7E    MOV   A,[__r1]
    1B9F: 01 FF    ADD   A,0xFF
    1BA1: 54 01    MOV   [X+1],A
    1BA3: 51 7F    MOV   A,[__r0]
    1BA5: 09 FF    ADC   A,0xFF
    1BA7: 54 00    MOV   [X+0],A
    1BA9: 51 7F    MOV   A,[__r0]
    1BAB: 60 D5    MOV   REG[0xD5],A
    1BAD: 52 06    MOV   A,[X+6]
    1BAF: 3F 7E    MVI   [__r1],A
    1BB1: 52 05    MOV   A,[X+5]
    1BB3: 13 01    SUB   A,[X+1]
    1BB5: 52 04    MOV   A,[X+4]
    1BB7: 1B 00    SBB   A,[X+0]
    1BB9: CF A4    JC    0x1B5E
    1BBB: 62 D0 00 MOV   REG[0xD0],0x0
    1BBE: 52 FC    MOV   A,[X-4]
    1BC0: 53 7E    MOV   [__r1],A
    1BC2: 52 FB    MOV   A,[X-5]
    1BC4: 53 7F    MOV   [__r0],A
    1BC6: 38 F7    ADD   SP,0xF7
    1BC8: 20       POP   X
    1BC9: 7F       RET   
_strtol:
    1BCA: 10       PUSH  X
    1BCB: 4F       MOV   X,SP
    1BCC: 38 18    ADD   SP,0x18
    1BCE: 56 00 00 MOV   [X+0],0x0
    1BD1: 56 01 00 MOV   [X+1],0x0
    1BD4: 56 02 00 MOV   [X+2],0x0
    1BD7: 56 03 00 MOV   [X+3],0x0
    1BDA: 80 06    JMP   0x1BE1
    1BDC: 77 FC    INC   [X-4]
    1BDE: 0F FB 00 ADC   [X-5],0x0
    1BE1: 62 D0 00 MOV   REG[0xD0],0x0
    1BE4: 52 FC    MOV   A,[X-4]
    1BE6: 53 7E    MOV   [__r1],A
    1BE8: 52 FB    MOV   A,[X-5]
    1BEA: 60 D4    MOV   REG[0xD4],A
    1BEC: 3E 7E    MVI   A,[__r1]
    1BEE: 53 7E    MOV   [__r1],A
    1BF0: 50 00    MOV   A,0x0
    1BF2: 08       PUSH  A
    1BF3: 51 7E    MOV   A,[__r1]
    1BF5: 08       PUSH  A
    1BF6: 7C 25 07 LCALL _isspace
    1BF9: 38 FE    ADD   SP,0xFE
    1BFB: 62 D0 00 MOV   REG[0xD0],0x0
    1BFE: 3C 7F 00 CMP   [__r0],0x0
    1C01: BF DA    JNZ   0x1BDC
    1C03: 3C 7E 00 CMP   [__r1],0x0
    1C06: BF D5    JNZ   0x1BDC
    1C08: 62 D0 00 MOV   REG[0xD0],0x0
    1C0B: 52 FC    MOV   A,[X-4]
    1C0D: 53 7E    MOV   [__r1],A
    1C0F: 52 FB    MOV   A,[X-5]
    1C11: 60 D4    MOV   REG[0xD4],A
    1C13: 3E 7E    MVI   A,[__r1]
    1C15: 39 00    CMP   A,0x0
    1C17: A0 31    JZ    0x1C49
    1C19: 3D F7 00 CMP   [X-9],0x0
    1C1C: B0 06    JNZ   0x1C23
    1C1E: 3D F8 00 CMP   [X-8],0x0
    1C21: A0 55    JZ    0x1C77
    1C23: 50 01    MOV   A,0x1
    1C25: 13 F8    SUB   A,[X-8]
    1C27: 52 F7    MOV   A,[X-9]
    1C29: 31 80    XOR   A,0x80
    1C2B: 62 D0 00 MOV   REG[0xD0],0x0
    1C2E: 53 77    MOV   [__rX],A
    1C30: 50 80    MOV   A,0x80
    1C32: 1A 77    SBB   A,[__rX]
    1C34: D0 14    JNC   0x1C49
    1C36: 50 24    MOV   A,0x24
    1C38: 13 F8    SUB   A,[X-8]
    1C3A: 52 F7    MOV   A,[X-9]
    1C3C: 31 80    XOR   A,0x80
    1C3E: 62 D0 00 MOV   REG[0xD0],0x0
    1C41: 53 77    MOV   [__rX],A
    1C43: 50 80    MOV   A,0x80
    1C45: 1A 77    SBB   A,[__rX]
    1C47: D0 2F    JNC   0x1C77
    1C49: 3D F9 00 CMP   [X-7],0x0
    1C4C: B0 06    JNZ   0x1C53
    1C4E: 3D FA 00 CMP   [X-6],0x0
    1C51: A0 14    JZ    0x1C66
    1C53: 62 D0 00 MOV   REG[0xD0],0x0
    1C56: 52 FA    MOV   A,[X-6]
    1C58: 53 7E    MOV   [__r1],A
    1C5A: 52 F9    MOV   A,[X-7]
    1C5C: 60 D5    MOV   REG[0xD5],A
    1C5E: 52 FB    MOV   A,[X-5]
    1C60: 3F 7E    MVI   [__r1],A
    1C62: 52 FC    MOV   A,[X-4]
    1C64: 3F 7E    MVI   [__r1],A
    1C66: 62 D0 00 MOV   REG[0xD0],0x0
    1C69: 55 7F 00 MOV   [__r0],0x0
    1C6C: 55 7E 00 MOV   [__r1],0x0
    1C6F: 55 7D 00 MOV   [__r2],0x0
    1C72: 55 7C 00 MOV   [__r3],0x0
    1C75: 83 72    JMP   0x1FE8
    1C77: 56 0B 00 MOV   [X+11],0x0
    1C7A: 56 0A 00 MOV   [X+10],0x0
    1C7D: 62 D0 00 MOV   REG[0xD0],0x0
    1C80: 52 FC    MOV   A,[X-4]
    1C82: 53 7E    MOV   [__r1],A
    1C84: 52 FB    MOV   A,[X-5]
    1C86: 60 D4    MOV   REG[0xD4],A
    1C88: 3E 7E    MVI   A,[__r1]
    1C8A: 39 2D    CMP   A,0x2D
    1C8C: B0 0E    JNZ   0x1C9B
    1C8E: 77 FC    INC   [X-4]
    1C90: 0F FB 00 ADC   [X-5],0x0
    1C93: 56 0B 01 MOV   [X+11],0x1
    1C96: 56 0A 00 MOV   [X+10],0x0
    1C99: 80 17    JMP   0x1CB1
    1C9B: 62 D0 00 MOV   REG[0xD0],0x0
    1C9E: 52 FC    MOV   A,[X-4]
    1CA0: 53 7E    MOV   [__r1],A
    1CA2: 52 FB    MOV   A,[X-5]
    1CA4: 60 D4    MOV   REG[0xD4],A
    1CA6: 3E 7E    MVI   A,[__r1]
    1CA8: 39 2B    CMP   A,0x2B
    1CAA: B0 06    JNZ   0x1CB1
    1CAC: 77 FC    INC   [X-4]
    1CAE: 0F FB 00 ADC   [X-5],0x0
    1CB1: 62 D0 00 MOV   REG[0xD0],0x0
    1CB4: 52 FC    MOV   A,[X-4]
    1CB6: 53 7E    MOV   [__r1],A
    1CB8: 52 FB    MOV   A,[X-5]
    1CBA: 60 D4    MOV   REG[0xD4],A
    1CBC: 3E 7E    MVI   A,[__r1]
    1CBE: 39 30    CMP   A,0x30
    1CC0: B0 4A    JNZ   0x1D0B
    1CC2: 52 FC    MOV   A,[X-4]
    1CC4: 01 01    ADD   A,0x1
    1CC6: 53 7E    MOV   [__r1],A
    1CC8: 52 FB    MOV   A,[X-5]
    1CCA: 09 00    ADC   A,0x0
    1CCC: 60 D4    MOV   REG[0xD4],A
    1CCE: 3E 7E    MVI   A,[__r1]
    1CD0: 53 7E    MOV   [__r1],A
    1CD2: 55 7F 00 MOV   [__r0],0x0
    1CD5: 3C 7F 00 CMP   [__r0],0x0
    1CD8: B0 05    JNZ   0x1CDE
    1CDA: 39 58    CMP   A,0x58
    1CDC: A0 0E    JZ    0x1CEB
    1CDE: 62 D0 00 MOV   REG[0xD0],0x0
    1CE1: 3C 7F 00 CMP   [__r0],0x0
    1CE4: B0 26    JNZ   0x1D0B
    1CE6: 3C 7E 78 CMP   [__r1],0x78
    1CE9: B0 21    JNZ   0x1D0B
    1CEB: 3D F7 00 CMP   [X-9],0x0
    1CEE: B0 06    JNZ   0x1CF5
    1CF0: 3D F8 10 CMP   [X-8],0x10
    1CF3: A0 0B    JZ    0x1CFF
    1CF5: 3D F7 00 CMP   [X-9],0x0
    1CF8: B0 12    JNZ   0x1D0B
    1CFA: 3D F8 00 CMP   [X-8],0x0
    1CFD: B0 0D    JNZ   0x1D0B
    1CFF: 56 F8 10 MOV   [X-8],0x10
    1D02: 56 F7 00 MOV   [X-9],0x0
    1D05: 07 FC 02 ADD   [X-4],0x2
    1D08: 0F FB 00 ADC   [X-5],0x0
    1D0B: 3D F7 00 CMP   [X-9],0x0
    1D0E: B0 2D    JNZ   0x1D3C
    1D10: 3D F8 00 CMP   [X-8],0x0
    1D13: B0 28    JNZ   0x1D3C
    1D15: 62 D0 00 MOV   REG[0xD0],0x0
    1D18: 52 FC    MOV   A,[X-4]
    1D1A: 53 7E    MOV   [__r1],A
    1D1C: 52 FB    MOV   A,[X-5]
    1D1E: 60 D4    MOV   REG[0xD4],A
    1D20: 3E 7E    MVI   A,[__r1]
    1D22: 39 30    CMP   A,0x30
    1D24: B0 09    JNZ   0x1D2E
    1D26: 56 0F 08 MOV   [X+15],0x8
    1D29: 56 0E 00 MOV   [X+14],0x0
    1D2C: 80 07    JMP   0x1D34
    1D2E: 56 0F 0A MOV   [X+15],0xA
    1D31: 56 0E 00 MOV   [X+14],0x0
    1D34: 52 0F    MOV   A,[X+15]
    1D36: 54 F8    MOV   [X-8],A
    1D38: 52 0E    MOV   A,[X+14]
    1D3A: 54 F7    MOV   [X-9],A
    1D3C: 52 F8    MOV   A,[X-8]
    1D3E: 11 0A    SUB   A,0xA
    1D40: 52 F7    MOV   A,[X-9]
    1D42: 31 80    XOR   A,0x80
    1D44: 19 80    SBB   A,0x80
    1D46: C0 09    JC    0x1D50
    1D48: 56 11 39 MOV   [X+17],0x39
    1D4B: 56 10 00 MOV   [X+16],0x0
    1D4E: 80 1C    JMP   0x1D6B
    1D50: 62 D0 00 MOV   REG[0xD0],0x0
    1D53: 52 F8    MOV   A,[X-8]
    1D55: 11 01    SUB   A,0x1
    1D57: 53 7E    MOV   [__r1],A
    1D59: 52 F7    MOV   A,[X-9]
    1D5B: 19 00    SBB   A,0x0
    1D5D: 53 7F    MOV   [__r0],A
    1D5F: 51 7E    MOV   A,[__r1]
    1D61: 01 30    ADD   A,0x30
    1D63: 54 11    MOV   [X+17],A
    1D65: 51 7F    MOV   A,[__r0]
    1D67: 09 00    ADC   A,0x0
    1D69: 54 10    MOV   [X+16],A
    1D6B: 52 11    MOV   A,[X+17]
    1D6D: 54 09    MOV   [X+9],A
    1D6F: 52 10    MOV   A,[X+16]
    1D71: 54 08    MOV   [X+8],A
    1D73: 50 0A    MOV   A,0xA
    1D75: 13 F8    SUB   A,[X-8]
    1D77: 52 F7    MOV   A,[X-9]
    1D79: 31 80    XOR   A,0x80
    1D7B: 62 D0 00 MOV   REG[0xD0],0x0
    1D7E: 53 77    MOV   [__rX],A
    1D80: 50 80    MOV   A,0x80
    1D82: 1A 77    SBB   A,[__rX]
    1D84: D1 EA    JNC   0x1F6F
    1D86: 62 D0 00 MOV   REG[0xD0],0x0
    1D89: 52 F8    MOV   A,[X-8]
    1D8B: 11 0B    SUB   A,0xB
    1D8D: 53 7E    MOV   [__r1],A
    1D8F: 52 F7    MOV   A,[X-9]
    1D91: 19 00    SBB   A,0x0
    1D93: 53 7F    MOV   [__r0],A
    1D95: 51 7E    MOV   A,[__r1]
    1D97: 01 61    ADD   A,0x61
    1D99: 54 0D    MOV   [X+13],A
    1D9B: 51 7F    MOV   A,[__r0]
    1D9D: 09 00    ADC   A,0x0
    1D9F: 54 0C    MOV   [X+12],A
    1DA1: 81 CD    JMP   0x1F6F
    1DA3: 62 D0 00 MOV   REG[0xD0],0x0
    1DA6: 52 FC    MOV   A,[X-4]
    1DA8: 53 7E    MOV   [__r1],A
    1DAA: 52 FB    MOV   A,[X-5]
    1DAC: 60 D4    MOV   REG[0xD4],A
    1DAE: 3E 7E    MVI   A,[__r1]
    1DB0: 53 7E    MOV   [__r1],A
    1DB2: 50 00    MOV   A,0x0
    1DB4: 08       PUSH  A
    1DB5: 51 7E    MOV   A,[__r1]
    1DB7: 08       PUSH  A
    1DB8: 7C 24 C5 LCALL _isdigit
    1DBB: 38 FE    ADD   SP,0xFE
    1DBD: 62 D0 00 MOV   REG[0xD0],0x0
    1DC0: 3C 7F 00 CMP   [__r0],0x0
    1DC3: B0 06    JNZ   0x1DCA
    1DC5: 3C 7E 00 CMP   [__r1],0x0
    1DC8: A0 3B    JZ    0x1E04
    1DCA: 62 D0 00 MOV   REG[0xD0],0x0
    1DCD: 52 FC    MOV   A,[X-4]
    1DCF: 53 7E    MOV   [__r1],A
    1DD1: 52 FB    MOV   A,[X-5]
    1DD3: 60 D4    MOV   REG[0xD4],A
    1DD5: 3E 7E    MVI   A,[__r1]
    1DD7: 53 7E    MOV   [__r1],A
    1DD9: 52 09    MOV   A,[X+9]
    1DDB: 12 7E    SUB   A,[__r1]
    1DDD: 50 00    MOV   A,0x0
    1DDF: 31 80    XOR   A,0x80
    1DE1: 53 77    MOV   [__rX],A
    1DE3: 52 08    MOV   A,[X+8]
    1DE5: 31 80    XOR   A,0x80
    1DE7: 1A 77    SBB   A,[__rX]
    1DE9: C0 1A    JC    0x1E04
    1DEB: 62 D0 00 MOV   REG[0xD0],0x0
    1DEE: 52 FC    MOV   A,[X-4]
    1DF0: 53 7E    MOV   [__r1],A
    1DF2: 52 FB    MOV   A,[X-5]
    1DF4: 60 D4    MOV   REG[0xD4],A
    1DF6: 3E 7E    MVI   A,[__r1]
    1DF8: 11 30    SUB   A,0x30
    1DFA: 54 13    MOV   [X+19],A
    1DFC: 50 00    MOV   A,0x0
    1DFE: 19 00    SBB   A,0x0
    1E00: 54 12    MOV   [X+18],A
    1E02: 80 75    JMP   0x1E78
    1E04: 50 0A    MOV   A,0xA
    1E06: 13 F8    SUB   A,[X-8]
    1E08: 52 F7    MOV   A,[X-9]
    1E0A: 31 80    XOR   A,0x80
    1E0C: 62 D0 00 MOV   REG[0xD0],0x0
    1E0F: 53 77    MOV   [__rX],A
    1E11: 50 80    MOV   A,0x80
    1E13: 1A 77    SBB   A,[__rX]
    1E15: D1 6A    JNC   0x1F80
    1E17: 62 D0 00 MOV   REG[0xD0],0x0
    1E1A: 52 FC    MOV   A,[X-4]
    1E1C: 53 7E    MOV   [__r1],A
    1E1E: 52 FB    MOV   A,[X-5]
    1E20: 60 D4    MOV   REG[0xD4],A
    1E22: 3E 7E    MVI   A,[__r1]
    1E24: 53 7E    MOV   [__r1],A
    1E26: 50 00    MOV   A,0x0
    1E28: 08       PUSH  A
    1E29: 51 7E    MOV   A,[__r1]
    1E2B: 08       PUSH  A
    1E2C: 7C 25 A8 LCALL _tolower
    1E2F: 38 FE    ADD   SP,0xFE
    1E31: 62 D0 00 MOV   REG[0xD0],0x0
    1E34: 51 7E    MOV   A,[__r1]
    1E36: 54 13    MOV   [X+19],A
    1E38: 51 7F    MOV   A,[__r0]
    1E3A: 54 12    MOV   [X+18],A
    1E3C: 51 7E    MOV   A,[__r1]
    1E3E: 11 61    SUB   A,0x61
    1E40: 51 7F    MOV   A,[__r0]
    1E42: 31 80    XOR   A,0x80
    1E44: 19 80    SBB   A,0x80
    1E46: C1 39    JC    0x1F80
    1E48: 52 0D    MOV   A,[X+13]
    1E4A: 13 13    SUB   A,[X+19]
    1E4C: 52 12    MOV   A,[X+18]
    1E4E: 31 80    XOR   A,0x80
    1E50: 62 D0 00 MOV   REG[0xD0],0x0
    1E53: 53 77    MOV   [__rX],A
    1E55: 52 0C    MOV   A,[X+12]
    1E57: 31 80    XOR   A,0x80
    1E59: 1A 77    SBB   A,[__rX]
    1E5B: C1 24    JC    0x1F80
    1E5D: 62 D0 00 MOV   REG[0xD0],0x0
    1E60: 52 13    MOV   A,[X+19]
    1E62: 11 61    SUB   A,0x61
    1E64: 53 7E    MOV   [__r1],A
    1E66: 52 12    MOV   A,[X+18]
    1E68: 19 00    SBB   A,0x0
    1E6A: 53 7F    MOV   [__r0],A
    1E6C: 51 7E    MOV   A,[__r1]
    1E6E: 01 0A    ADD   A,0xA
    1E70: 54 13    MOV   [X+19],A
    1E72: 51 7F    MOV   A,[__r0]
    1E74: 09 00    ADC   A,0x0
    1E76: 54 12    MOV   [X+18],A
    1E78: 52 00    MOV   A,[X+0]
    1E7A: 54 04    MOV   [X+4],A
    1E7C: 52 01    MOV   A,[X+1]
    1E7E: 54 05    MOV   [X+5],A
    1E80: 52 02    MOV   A,[X+2]
    1E82: 54 06    MOV   [X+6],A
    1E84: 52 03    MOV   A,[X+3]
    1E86: 54 07    MOV   [X+7],A
    1E88: 62 D0 00 MOV   REG[0xD0],0x0
    1E8B: 52 13    MOV   A,[X+19]
    1E8D: 53 7C    MOV   [__r3],A
    1E8F: 52 12    MOV   A,[X+18]
    1E91: 53 7D    MOV   [__r2],A
    1E93: 47 7D 80 TST   [__r2],0x80
    1E96: A0 09    JZ    0x1EA0
    1E98: 55 7E FF MOV   [__r1],0xFF
    1E9B: 55 7F FF MOV   [__r0],0xFF
    1E9E: 80 0A    JMP   0x1EA9
    1EA0: 62 D0 00 MOV   REG[0xD0],0x0
    1EA3: 55 7E 00 MOV   [__r1],0x0
    1EA6: 55 7F 00 MOV   [__r0],0x0
    1EA9: 62 D0 00 MOV   REG[0xD0],0x0
    1EAC: 52 F8    MOV   A,[X-8]
    1EAE: 53 78    MOV   [__r7],A
    1EB0: 52 F7    MOV   A,[X-9]
    1EB2: 53 79    MOV   [__r6],A
    1EB4: 47 79 80 TST   [__r6],0x80
    1EB7: A0 09    JZ    0x1EC1
    1EB9: 55 7A FF MOV   [__r5],0xFF
    1EBC: 55 7B FF MOV   [__r4],0xFF
    1EBF: 80 0A    JMP   0x1ECA
    1EC1: 62 D0 00 MOV   REG[0xD0],0x0
    1EC4: 55 7A 00 MOV   [__r5],0x0
    1EC7: 55 7B 00 MOV   [__r4],0x0
    1ECA: 62 D0 00 MOV   REG[0xD0],0x0
    1ECD: 51 7B    MOV   A,[__r4]
    1ECF: 08       PUSH  A
    1ED0: 51 7A    MOV   A,[__r5]
    1ED2: 08       PUSH  A
    1ED3: 51 79    MOV   A,[__r6]
    1ED5: 08       PUSH  A
    1ED6: 51 78    MOV   A,[__r7]
    1ED8: 08       PUSH  A
    1ED9: 52 00    MOV   A,[X+0]
    1EDB: 08       PUSH  A
    1EDC: 52 01    MOV   A,[X+1]
    1EDE: 08       PUSH  A
    1EDF: 52 02    MOV   A,[X+2]
    1EE1: 08       PUSH  A
    1EE2: 52 03    MOV   A,[X+3]
    1EE4: 08       PUSH  A
    1EE5: 7C 18 E2 LCALL 0x18E2
    1EE8: 38 FC    ADD   SP,0xFC
    1EEA: 18       POP   A
    1EEB: 53 78    MOV   [__r7],A
    1EED: 18       POP   A
    1EEE: 53 79    MOV   [__r6],A
    1EF0: 18       POP   A
    1EF1: 53 7A    MOV   [__r5],A
    1EF3: 18       POP   A
    1EF4: 53 7B    MOV   [__r4],A
    1EF6: 51 78    MOV   A,[__r7]
    1EF8: 02 7C    ADD   A,[__r3]
    1EFA: 54 03    MOV   [X+3],A
    1EFC: 51 79    MOV   A,[__r6]
    1EFE: 0A 7D    ADC   A,[__r2]
    1F00: 54 02    MOV   [X+2],A
    1F02: 51 7A    MOV   A,[__r5]
    1F04: 0A 7E    ADC   A,[__r1]
    1F06: 54 01    MOV   [X+1],A
    1F08: 51 7B    MOV   A,[__r4]
    1F0A: 0A 7F    ADC   A,[__r0]
    1F0C: 54 00    MOV   [X+0],A
    1F0E: 52 03    MOV   A,[X+3]
    1F10: 13 07    SUB   A,[X+7]
    1F12: 52 02    MOV   A,[X+2]
    1F14: 1B 06    SBB   A,[X+6]
    1F16: 52 01    MOV   A,[X+1]
    1F18: 1B 05    SBB   A,[X+5]
    1F1A: 52 04    MOV   A,[X+4]
    1F1C: 31 80    XOR   A,0x80
    1F1E: 53 77    MOV   [__rX],A
    1F20: 52 00    MOV   A,[X+0]
    1F22: 31 80    XOR   A,0x80
    1F24: 1A 77    SBB   A,[__rX]
    1F26: D0 43    JNC   0x1F6A
    1F28: 62 D0 00 MOV   REG[0xD0],0x0
    1F2B: 55 8D 02 MOV   [errno+1],0x2
    1F2E: 55 8C 00 MOV   [errno],0x0
    1F31: 3D 0A 00 CMP   [X+10],0x0
    1F34: B0 06    JNZ   0x1F3B
    1F36: 3D 0B 00 CMP   [X+11],0x0
    1F39: A0 0F    JZ    0x1F49
    1F3B: 56 14 80 MOV   [X+20],0x80
    1F3E: 56 15 00 MOV   [X+21],0x0
    1F41: 56 16 00 MOV   [X+22],0x0
    1F44: 56 17 00 MOV   [X+23],0x0
    1F47: 80 0D    JMP   0x1F55
    1F49: 56 14 7F MOV   [X+20],0x7F
    1F4C: 56 15 FF MOV   [X+21],0xFF
    1F4F: 56 16 FF MOV   [X+22],0xFF
    1F52: 56 17 FF MOV   [X+23],0xFF
    1F55: 62 D0 00 MOV   REG[0xD0],0x0
    1F58: 52 14    MOV   A,[X+20]
    1F5A: 53 7F    MOV   [__r0],A
    1F5C: 52 15    MOV   A,[X+21]
    1F5E: 53 7E    MOV   [__r1],A
    1F60: 52 16    MOV   A,[X+22]
    1F62: 53 7D    MOV   [__r2],A
    1F64: 52 17    MOV   A,[X+23]
    1F66: 53 7C    MOV   [__r3],A
    1F68: 80 7F    JMP   0x1FE8
    1F6A: 77 FC    INC   [X-4]
    1F6C: 0F FB 00 ADC   [X-5],0x0
    1F6F: 62 D0 00 MOV   REG[0xD0],0x0
    1F72: 52 FC    MOV   A,[X-4]
    1F74: 53 7E    MOV   [__r1],A
    1F76: 52 FB    MOV   A,[X-5]
    1F78: 60 D4    MOV   REG[0xD4],A
    1F7A: 3E 7E    MVI   A,[__r1]
    1F7C: 39 00    CMP   A,0x0
    1F7E: BE 24    JNZ   0x1DA3
    1F80: 3D F9 00 CMP   [X-7],0x0
    1F83: B0 06    JNZ   0x1F8A
    1F85: 3D FA 00 CMP   [X-6],0x0
    1F88: A0 14    JZ    0x1F9D
    1F8A: 62 D0 00 MOV   REG[0xD0],0x0
    1F8D: 52 FA    MOV   A,[X-6]
    1F8F: 53 7E    MOV   [__r1],A
    1F91: 52 F9    MOV   A,[X-7]
    1F93: 60 D5    MOV   REG[0xD5],A
    1F95: 52 FB    MOV   A,[X-5]
    1F97: 3F 7E    MVI   [__r1],A
    1F99: 52 FC    MOV   A,[X-4]
    1F9B: 3F 7E    MVI   [__r1],A
    1F9D: 3D 0A 00 CMP   [X+10],0x0
    1FA0: B0 06    JNZ   0x1FA7
    1FA2: 3D 0B 00 CMP   [X+11],0x0
    1FA5: A0 1F    JZ    0x1FC5
    1FA7: 52 03    MOV   A,[X+3]
    1FA9: 73       CPL   A
    1FAA: 11 FF    SUB   A,0xFF
    1FAC: 54 15    MOV   [X+21],A
    1FAE: 52 02    MOV   A,[X+2]
    1FB0: 73       CPL   A
    1FB1: 19 FF    SBB   A,0xFF
    1FB3: 54 14    MOV   [X+20],A
    1FB5: 52 01    MOV   A,[X+1]
    1FB7: 73       CPL   A
    1FB8: 19 FF    SBB   A,0xFF
    1FBA: 54 13    MOV   [X+19],A
    1FBC: 52 00    MOV   A,[X+0]
    1FBE: 73       CPL   A
    1FBF: 19 FF    SBB   A,0xFF
    1FC1: 54 12    MOV   [X+18],A
    1FC3: 80 11    JMP   0x1FD5
    1FC5: 52 00    MOV   A,[X+0]
    1FC7: 54 12    MOV   [X+18],A
    1FC9: 52 01    MOV   A,[X+1]
    1FCB: 54 13    MOV   [X+19],A
    1FCD: 52 02    MOV   A,[X+2]
    1FCF: 54 14    MOV   [X+20],A
    1FD1: 52 03    MOV   A,[X+3]
    1FD3: 54 15    MOV   [X+21],A
    1FD5: 62 D0 00 MOV   REG[0xD0],0x0
    1FD8: 52 12    MOV   A,[X+18]
    1FDA: 53 7F    MOV   [__r0],A
    1FDC: 52 13    MOV   A,[X+19]
    1FDE: 53 7E    MOV   [__r1],A
    1FE0: 52 14    MOV   A,[X+20]
    1FE2: 53 7D    MOV   [__r2],A
    1FE4: 52 15    MOV   A,[X+21]
    1FE6: 53 7C    MOV   [__r3],A
    1FE8: 38 E8    ADD   SP,0xE8
    1FEA: 20       POP   X
    1FEB: 7F       RET   
_strtoul:
    1FEC: 10       PUSH  X
    1FED: 4F       MOV   X,SP
    1FEE: 38 12    ADD   SP,0x12
    1FF0: 56 00 00 MOV   [X+0],0x0
    1FF3: 56 01 00 MOV   [X+1],0x0
    1FF6: 56 02 00 MOV   [X+2],0x0
    1FF9: 56 03 00 MOV   [X+3],0x0
    1FFC: 80 06    JMP   0x2003
    1FFE: 77 FC    INC   [X-4]
    2000: 0F FB 00 ADC   [X-5],0x0
    2003: 62 D0 00 MOV   REG[0xD0],0x0
    2006: 52 FC    MOV   A,[X-4]
    2008: 53 7E    MOV   [__r1],A
    200A: 52 FB    MOV   A,[X-5]
    200C: 60 D4    MOV   REG[0xD4],A
    200E: 3E 7E    MVI   A,[__r1]
    2010: 53 7E    MOV   [__r1],A
    2012: 50 00    MOV   A,0x0
    2014: 08       PUSH  A
    2015: 51 7E    MOV   A,[__r1]
    2017: 08       PUSH  A
    2018: 7C 25 07 LCALL _isspace
    201B: 38 FE    ADD   SP,0xFE
    201D: 62 D0 00 MOV   REG[0xD0],0x0
    2020: 3C 7F 00 CMP   [__r0],0x0
    2023: BF DA    JNZ   0x1FFE
    2025: 3C 7E 00 CMP   [__r1],0x0
    2028: BF D5    JNZ   0x1FFE
    202A: 62 D0 00 MOV   REG[0xD0],0x0
    202D: 52 FC    MOV   A,[X-4]
    202F: 53 7E    MOV   [__r1],A
    2031: 52 FB    MOV   A,[X-5]
    2033: 60 D4    MOV   REG[0xD4],A
    2035: 3E 7E    MVI   A,[__r1]
    2037: 39 00    CMP   A,0x0
    2039: A0 31    JZ    0x206B
    203B: 3D F7 00 CMP   [X-9],0x0
    203E: B0 06    JNZ   0x2045
    2040: 3D F8 00 CMP   [X-8],0x0
    2043: A0 55    JZ    0x2099
    2045: 50 01    MOV   A,0x1
    2047: 13 F8    SUB   A,[X-8]
    2049: 52 F7    MOV   A,[X-9]
    204B: 31 80    XOR   A,0x80
    204D: 62 D0 00 MOV   REG[0xD0],0x0
    2050: 53 77    MOV   [__rX],A
    2052: 50 80    MOV   A,0x80
    2054: 1A 77    SBB   A,[__rX]
    2056: D0 14    JNC   0x206B
    2058: 50 24    MOV   A,0x24
    205A: 13 F8    SUB   A,[X-8]
    205C: 52 F7    MOV   A,[X-9]
    205E: 31 80    XOR   A,0x80
    2060: 62 D0 00 MOV   REG[0xD0],0x0
    2063: 53 77    MOV   [__rX],A
    2065: 50 80    MOV   A,0x80
    2067: 1A 77    SBB   A,[__rX]
    2069: D0 2F    JNC   0x2099
    206B: 3D F9 00 CMP   [X-7],0x0
    206E: B0 06    JNZ   0x2075
    2070: 3D FA 00 CMP   [X-6],0x0
    2073: A0 14    JZ    0x2088
    2075: 62 D0 00 MOV   REG[0xD0],0x0
    2078: 52 FA    MOV   A,[X-6]
    207A: 53 7E    MOV   [__r1],A
    207C: 52 F9    MOV   A,[X-7]
    207E: 60 D5    MOV   REG[0xD5],A
    2080: 52 FB    MOV   A,[X-5]
    2082: 3F 7E    MVI   [__r1],A
    2084: 52 FC    MOV   A,[X-4]
    2086: 3F 7E    MVI   [__r1],A
    2088: 62 D0 00 MOV   REG[0xD0],0x0
    208B: 55 7F 00 MOV   [__r0],0x0
    208E: 55 7E 00 MOV   [__r1],0x0
    2091: 55 7D 00 MOV   [__r2],0x0
    2094: 55 7C 00 MOV   [__r3],0x0
    2097: 82 E6    JMP   0x237E
    2099: 62 D0 00 MOV   REG[0xD0],0x0
    209C: 52 FC    MOV   A,[X-4]
    209E: 53 7E    MOV   [__r1],A
    20A0: 52 FB    MOV   A,[X-5]
    20A2: 60 D4    MOV   REG[0xD4],A
    20A4: 3E 7E    MVI   A,[__r1]
    20A6: 39 2B    CMP   A,0x2B
    20A8: B0 06    JNZ   0x20AF
    20AA: 77 FC    INC   [X-4]
    20AC: 0F FB 00 ADC   [X-5],0x0
    20AF: 62 D0 00 MOV   REG[0xD0],0x0
    20B2: 52 FC    MOV   A,[X-4]
    20B4: 53 7E    MOV   [__r1],A
    20B6: 52 FB    MOV   A,[X-5]
    20B8: 60 D4    MOV   REG[0xD4],A
    20BA: 3E 7E    MVI   A,[__r1]
    20BC: 39 30    CMP   A,0x30
    20BE: B0 4A    JNZ   0x2109
    20C0: 52 FC    MOV   A,[X-4]
    20C2: 01 01    ADD   A,0x1
    20C4: 53 7E    MOV   [__r1],A
    20C6: 52 FB    MOV   A,[X-5]
    20C8: 09 00    ADC   A,0x0
    20CA: 60 D4    MOV   REG[0xD4],A
    20CC: 3E 7E    MVI   A,[__r1]
    20CE: 53 7E    MOV   [__r1],A
    20D0: 55 7F 00 MOV   [__r0],0x0
    20D3: 3C 7F 00 CMP   [__r0],0x0
    20D6: B0 05    JNZ   0x20DC
    20D8: 39 58    CMP   A,0x58
    20DA: A0 0E    JZ    0x20E9
    20DC: 62 D0 00 MOV   REG[0xD0],0x0
    20DF: 3C 7F 00 CMP   [__r0],0x0
    20E2: B0 26    JNZ   0x2109
    20E4: 3C 7E 78 CMP   [__r1],0x78
    20E7: B0 21    JNZ   0x2109
    20E9: 3D F7 00 CMP   [X-9],0x0
    20EC: B0 06    JNZ   0x20F3
    20EE: 3D F8 10 CMP   [X-8],0x10
    20F1: A0 0B    JZ    0x20FD
    20F3: 3D F7 00 CMP   [X-9],0x0
    20F6: B0 12    JNZ   0x2109
    20F8: 3D F8 00 CMP   [X-8],0x0
    20FB: B0 0D    JNZ   0x2109
    20FD: 56 F8 10 MOV   [X-8],0x10
    2100: 56 F7 00 MOV   [X-9],0x0
    2103: 07 FC 02 ADD   [X-4],0x2
    2106: 0F FB 00 ADC   [X-5],0x0
    2109: 3D F7 00 CMP   [X-9],0x0
    210C: B0 2D    JNZ   0x213A
    210E: 3D F8 00 CMP   [X-8],0x0
    2111: B0 28    JNZ   0x213A
    2113: 62 D0 00 MOV   REG[0xD0],0x0
    2116: 52 FC    MOV   A,[X-4]
    2118: 53 7E    MOV   [__r1],A
    211A: 52 FB    MOV   A,[X-5]
    211C: 60 D4    MOV   REG[0xD4],A
    211E: 3E 7E    MVI   A,[__r1]
    2120: 39 30    CMP   A,0x30
    2122: B0 09    JNZ   0x212C
    2124: 56 0D 08 MOV   [X+13],0x8
    2127: 56 0C 00 MOV   [X+12],0x0
    212A: 80 07    JMP   0x2132
    212C: 56 0D 0A MOV   [X+13],0xA
    212F: 56 0C 00 MOV   [X+12],0x0
    2132: 52 0D    MOV   A,[X+13]
    2134: 54 F8    MOV   [X-8],A
    2136: 52 0C    MOV   A,[X+12]
    2138: 54 F7    MOV   [X-9],A
    213A: 52 F8    MOV   A,[X-8]
    213C: 11 0A    SUB   A,0xA
    213E: 52 F7    MOV   A,[X-9]
    2140: 31 80    XOR   A,0x80
    2142: 19 80    SBB   A,0x80
    2144: C0 09    JC    0x214E
    2146: 56 0F 39 MOV   [X+15],0x39
    2149: 56 0E 00 MOV   [X+14],0x0
    214C: 80 1C    JMP   0x2169
    214E: 62 D0 00 MOV   REG[0xD0],0x0
    2151: 52 F8    MOV   A,[X-8]
    2153: 11 01    SUB   A,0x1
    2155: 53 7E    MOV   [__r1],A
    2157: 52 F7    MOV   A,[X-9]
    2159: 19 00    SBB   A,0x0
    215B: 53 7F    MOV   [__r0],A
    215D: 51 7E    MOV   A,[__r1]
    215F: 01 30    ADD   A,0x30
    2161: 54 0F    MOV   [X+15],A
    2163: 51 7F    MOV   A,[__r0]
    2165: 09 00    ADC   A,0x0
    2167: 54 0E    MOV   [X+14],A
    2169: 52 0F    MOV   A,[X+15]
    216B: 54 09    MOV   [X+9],A
    216D: 52 0E    MOV   A,[X+14]
    216F: 54 08    MOV   [X+8],A
    2171: 50 0A    MOV   A,0xA
    2173: 13 F8    SUB   A,[X-8]
    2175: 52 F7    MOV   A,[X-9]
    2177: 31 80    XOR   A,0x80
    2179: 62 D0 00 MOV   REG[0xD0],0x0
    217C: 53 77    MOV   [__rX],A
    217E: 50 80    MOV   A,0x80
    2180: 1A 77    SBB   A,[__rX]
    2182: D1 BA    JNC   0x233D
    2184: 62 D0 00 MOV   REG[0xD0],0x0
    2187: 52 F8    MOV   A,[X-8]
    2189: 11 0B    SUB   A,0xB
    218B: 53 7E    MOV   [__r1],A
    218D: 52 F7    MOV   A,[X-9]
    218F: 19 00    SBB   A,0x0
    2191: 53 7F    MOV   [__r0],A
    2193: 51 7E    MOV   A,[__r1]
    2195: 01 61    ADD   A,0x61
    2197: 54 0B    MOV   [X+11],A
    2199: 51 7F    MOV   A,[__r0]
    219B: 09 00    ADC   A,0x0
    219D: 54 0A    MOV   [X+10],A
    219F: 81 9D    JMP   0x233D
    21A1: 62 D0 00 MOV   REG[0xD0],0x0
    21A4: 52 FC    MOV   A,[X-4]
    21A6: 53 7E    MOV   [__r1],A
    21A8: 52 FB    MOV   A,[X-5]
    21AA: 60 D4    MOV   REG[0xD4],A
    21AC: 3E 7E    MVI   A,[__r1]
    21AE: 53 7E    MOV   [__r1],A
    21B0: 50 00    MOV   A,0x0
    21B2: 08       PUSH  A
    21B3: 51 7E    MOV   A,[__r1]
    21B5: 08       PUSH  A
    21B6: 7C 24 C5 LCALL _isdigit
    21B9: 38 FE    ADD   SP,0xFE
    21BB: 62 D0 00 MOV   REG[0xD0],0x0
    21BE: 3C 7F 00 CMP   [__r0],0x0
    21C1: B0 06    JNZ   0x21C8
    21C3: 3C 7E 00 CMP   [__r1],0x0
    21C6: A0 3B    JZ    0x2202
    21C8: 62 D0 00 MOV   REG[0xD0],0x0
    21CB: 52 FC    MOV   A,[X-4]
    21CD: 53 7E    MOV   [__r1],A
    21CF: 52 FB    MOV   A,[X-5]
    21D1: 60 D4    MOV   REG[0xD4],A
    21D3: 3E 7E    MVI   A,[__r1]
    21D5: 53 7E    MOV   [__r1],A
    21D7: 52 09    MOV   A,[X+9]
    21D9: 12 7E    SUB   A,[__r1]
    21DB: 50 00    MOV   A,0x0
    21DD: 31 80    XOR   A,0x80
    21DF: 53 77    MOV   [__rX],A
    21E1: 52 08    MOV   A,[X+8]
    21E3: 31 80    XOR   A,0x80
    21E5: 1A 77    SBB   A,[__rX]
    21E7: C0 1A    JC    0x2202
    21E9: 62 D0 00 MOV   REG[0xD0],0x0
    21EC: 52 FC    MOV   A,[X-4]
    21EE: 53 7E    MOV   [__r1],A
    21F0: 52 FB    MOV   A,[X-5]
    21F2: 60 D4    MOV   REG[0xD4],A
    21F4: 3E 7E    MVI   A,[__r1]
    21F6: 11 30    SUB   A,0x30
    21F8: 54 11    MOV   [X+17],A
    21FA: 50 00    MOV   A,0x0
    21FC: 19 00    SBB   A,0x0
    21FE: 54 10    MOV   [X+16],A
    2200: 80 75    JMP   0x2276
    2202: 50 0A    MOV   A,0xA
    2204: 13 F8    SUB   A,[X-8]
    2206: 52 F7    MOV   A,[X-9]
    2208: 31 80    XOR   A,0x80
    220A: 62 D0 00 MOV   REG[0xD0],0x0
    220D: 53 77    MOV   [__rX],A
    220F: 50 80    MOV   A,0x80
    2211: 1A 77    SBB   A,[__rX]
    2213: D1 3A    JNC   0x234E
    2215: 62 D0 00 MOV   REG[0xD0],0x0
    2218: 52 FC    MOV   A,[X-4]
    221A: 53 7E    MOV   [__r1],A
    221C: 52 FB    MOV   A,[X-5]
    221E: 60 D4    MOV   REG[0xD4],A
    2220: 3E 7E    MVI   A,[__r1]
    2222: 53 7E    MOV   [__r1],A
    2224: 50 00    MOV   A,0x0
    2226: 08       PUSH  A
    2227: 51 7E    MOV   A,[__r1]
    2229: 08       PUSH  A
    222A: 7C 25 A8 LCALL _tolower
    222D: 38 FE    ADD   SP,0xFE
    222F: 62 D0 00 MOV   REG[0xD0],0x0
    2232: 51 7E    MOV   A,[__r1]
    2234: 54 11    MOV   [X+17],A
    2236: 51 7F    MOV   A,[__r0]
    2238: 54 10    MOV   [X+16],A
    223A: 51 7E    MOV   A,[__r1]
    223C: 11 61    SUB   A,0x61
    223E: 51 7F    MOV   A,[__r0]
    2240: 31 80    XOR   A,0x80
    2242: 19 80    SBB   A,0x80
    2244: C1 09    JC    0x234E
    2246: 52 0B    MOV   A,[X+11]
    2248: 13 11    SUB   A,[X+17]
    224A: 52 10    MOV   A,[X+16]
    224C: 31 80    XOR   A,0x80
    224E: 62 D0 00 MOV   REG[0xD0],0x0
    2251: 53 77    MOV   [__rX],A
    2253: 52 0A    MOV   A,[X+10]
    2255: 31 80    XOR   A,0x80
    2257: 1A 77    SBB   A,[__rX]
    2259: C0 F4    JC    0x234E
    225B: 62 D0 00 MOV   REG[0xD0],0x0
    225E: 52 11    MOV   A,[X+17]
    2260: 11 61    SUB   A,0x61
    2262: 53 7E    MOV   [__r1],A
    2264: 52 10    MOV   A,[X+16]
    2266: 19 00    SBB   A,0x0
    2268: 53 7F    MOV   [__r0],A
    226A: 51 7E    MOV   A,[__r1]
    226C: 01 0A    ADD   A,0xA
    226E: 54 11    MOV   [X+17],A
    2270: 51 7F    MOV   A,[__r0]
    2272: 09 00    ADC   A,0x0
    2274: 54 10    MOV   [X+16],A
    2276: 52 00    MOV   A,[X+0]
    2278: 54 04    MOV   [X+4],A
    227A: 52 01    MOV   A,[X+1]
    227C: 54 05    MOV   [X+5],A
    227E: 52 02    MOV   A,[X+2]
    2280: 54 06    MOV   [X+6],A
    2282: 52 03    MOV   A,[X+3]
    2284: 54 07    MOV   [X+7],A
    2286: 62 D0 00 MOV   REG[0xD0],0x0
    2289: 52 11    MOV   A,[X+17]
    228B: 53 7C    MOV   [__r3],A
    228D: 52 10    MOV   A,[X+16]
    228F: 53 7D    MOV   [__r2],A
    2291: 47 7D 80 TST   [__r2],0x80
    2294: A0 09    JZ    0x229E
    2296: 55 7E FF MOV   [__r1],0xFF
    2299: 55 7F FF MOV   [__r0],0xFF
    229C: 80 0A    JMP   0x22A7
    229E: 62 D0 00 MOV   REG[0xD0],0x0
    22A1: 55 7E 00 MOV   [__r1],0x0
    22A4: 55 7F 00 MOV   [__r0],0x0
    22A7: 62 D0 00 MOV   REG[0xD0],0x0
    22AA: 52 F8    MOV   A,[X-8]
    22AC: 53 78    MOV   [__r7],A
    22AE: 52 F7    MOV   A,[X-9]
    22B0: 53 79    MOV   [__r6],A
    22B2: 47 79 80 TST   [__r6],0x80
    22B5: A0 09    JZ    0x22BF
    22B7: 55 7A FF MOV   [__r5],0xFF
    22BA: 55 7B FF MOV   [__r4],0xFF
    22BD: 80 0A    JMP   0x22C8
    22BF: 62 D0 00 MOV   REG[0xD0],0x0
    22C2: 55 7A 00 MOV   [__r5],0x0
    22C5: 55 7B 00 MOV   [__r4],0x0
    22C8: 62 D0 00 MOV   REG[0xD0],0x0
    22CB: 51 7B    MOV   A,[__r4]
    22CD: 08       PUSH  A
    22CE: 51 7A    MOV   A,[__r5]
    22D0: 08       PUSH  A
    22D1: 51 79    MOV   A,[__r6]
    22D3: 08       PUSH  A
    22D4: 51 78    MOV   A,[__r7]
    22D6: 08       PUSH  A
    22D7: 52 00    MOV   A,[X+0]
    22D9: 08       PUSH  A
    22DA: 52 01    MOV   A,[X+1]
    22DC: 08       PUSH  A
    22DD: 52 02    MOV   A,[X+2]
    22DF: 08       PUSH  A
    22E0: 52 03    MOV   A,[X+3]
    22E2: 08       PUSH  A
    22E3: 7C 18 E2 LCALL 0x18E2
    22E6: 38 FC    ADD   SP,0xFC
    22E8: 18       POP   A
    22E9: 53 78    MOV   [__r7],A
    22EB: 18       POP   A
    22EC: 53 79    MOV   [__r6],A
    22EE: 18       POP   A
    22EF: 53 7A    MOV   [__r5],A
    22F1: 18       POP   A
    22F2: 53 7B    MOV   [__r4],A
    22F4: 51 78    MOV   A,[__r7]
    22F6: 02 7C    ADD   A,[__r3]
    22F8: 54 03    MOV   [X+3],A
    22FA: 51 79    MOV   A,[__r6]
    22FC: 0A 7D    ADC   A,[__r2]
    22FE: 54 02    MOV   [X+2],A
    2300: 51 7A    MOV   A,[__r5]
    2302: 0A 7E    ADC   A,[__r1]
    2304: 54 01    MOV   [X+1],A
    2306: 51 7B    MOV   A,[__r4]
    2308: 0A 7F    ADC   A,[__r0]
    230A: 54 00    MOV   [X+0],A
    230C: 52 03    MOV   A,[X+3]
    230E: 13 07    SUB   A,[X+7]
    2310: 52 02    MOV   A,[X+2]
    2312: 1B 06    SBB   A,[X+6]
    2314: 52 01    MOV   A,[X+1]
    2316: 1B 05    SBB   A,[X+5]
    2318: 52 00    MOV   A,[X+0]
    231A: 1B 04    SBB   A,[X+4]
    231C: D0 1B    JNC   0x2338
    231E: 62 D0 00 MOV   REG[0xD0],0x0
    2321: 55 8D 02 MOV   [errno+1],0x2
    2324: 55 8C 00 MOV   [errno],0x0
    2327: 62 D0 00 MOV   REG[0xD0],0x0
    232A: 55 7F FF MOV   [__r0],0xFF
    232D: 55 7E FF MOV   [__r1],0xFF
    2330: 55 7D FF MOV   [__r2],0xFF
    2333: 55 7C FF MOV   [__r3],0xFF
    2336: 80 47    JMP   0x237E
    2338: 77 FC    INC   [X-4]
    233A: 0F FB 00 ADC   [X-5],0x0
    233D: 62 D0 00 MOV   REG[0xD0],0x0
    2340: 52 FC    MOV   A,[X-4]
    2342: 53 7E    MOV   [__r1],A
    2344: 52 FB    MOV   A,[X-5]
    2346: 60 D4    MOV   REG[0xD4],A
    2348: 3E 7E    MVI   A,[__r1]
    234A: 39 00    CMP   A,0x0
    234C: BE 54    JNZ   0x21A1
    234E: 3D F9 00 CMP   [X-7],0x0
    2351: B0 06    JNZ   0x2358
    2353: 3D FA 00 CMP   [X-6],0x0
    2356: A0 14    JZ    0x236B
    2358: 62 D0 00 MOV   REG[0xD0],0x0
    235B: 52 FA    MOV   A,[X-6]
    235D: 53 7E    MOV   [__r1],A
    235F: 52 F9    MOV   A,[X-7]
    2361: 60 D5    MOV   REG[0xD5],A
    2363: 52 FB    MOV   A,[X-5]
    2365: 3F 7E    MVI   [__r1],A
    2367: 52 FC    MOV   A,[X-4]
    2369: 3F 7E    MVI   [__r1],A
    236B: 62 D0 00 MOV   REG[0xD0],0x0
    236E: 52 00    MOV   A,[X+0]
    2370: 53 7F    MOV   [__r0],A
    2372: 52 01    MOV   A,[X+1]
    2374: 53 7E    MOV   [__r1],A
    2376: 52 02    MOV   A,[X+2]
    2378: 53 7D    MOV   [__r2],A
    237A: 52 03    MOV   A,[X+3]
    237C: 53 7C    MOV   [__r3],A
    237E: 38 EE    ADD   SP,0xEE
    2380: 20       POP   X
    2381: 7F       RET   
_utoa:
    2382: 10       PUSH  X
    2383: 4F       MOV   X,SP
    2384: 38 07    ADD   SP,0x7
    2386: 52 FC    MOV   A,[X-4]
    2388: 54 01    MOV   [X+1],A
    238A: 52 FB    MOV   A,[X-5]
    238C: 54 00    MOV   [X+0],A
    238E: 62 D0 00 MOV   REG[0xD0],0x0
    2391: 52 F7    MOV   A,[X-9]
    2393: 08       PUSH  A
    2394: 52 F8    MOV   A,[X-8]
    2396: 08       PUSH  A
    2397: 52 F9    MOV   A,[X-7]
    2399: 08       PUSH  A
    239A: 52 FA    MOV   A,[X-6]
    239C: 08       PUSH  A
    239D: 7C 18 81 LCALL 0x1881
    23A0: 38 FE    ADD   SP,0xFE
    23A2: 18       POP   A
    23A3: 53 7E    MOV   [__r1],A
    23A5: 18       POP   A
    23A6: 53 7F    MOV   [__r0],A
    23A8: 51 7E    MOV   A,[__r1]
    23AA: 54 06    MOV   [X+6],A
    23AC: 51 7F    MOV   A,[__r0]
    23AE: 54 05    MOV   [X+5],A
    23B0: 50 09    MOV   A,0x9
    23B2: 13 06    SUB   A,[X+6]
    23B4: 52 05    MOV   A,[X+5]
    23B6: 31 80    XOR   A,0x80
    23B8: 53 77    MOV   [__rX],A
    23BA: 50 80    MOV   A,0x80
    23BC: 1A 77    SBB   A,[__rX]
    23BE: C0 28    JC    0x23E7
    23C0: 62 D0 00 MOV   REG[0xD0],0x0
    23C3: 52 01    MOV   A,[X+1]
    23C5: 53 7E    MOV   [__r1],A
    23C7: 52 00    MOV   A,[X+0]
    23C9: 53 7F    MOV   [__r0],A
    23CB: 51 7E    MOV   A,[__r1]
    23CD: 01 01    ADD   A,0x1
    23CF: 54 01    MOV   [X+1],A
    23D1: 51 7F    MOV   A,[__r0]
    23D3: 09 00    ADC   A,0x0
    23D5: 54 00    MOV   [X+0],A
    23D7: 52 06    MOV   A,[X+6]
    23D9: 01 30    ADD   A,0x30
    23DB: 53 7D    MOV   [__r2],A
    23DD: 51 7F    MOV   A,[__r0]
    23DF: 60 D5    MOV   REG[0xD5],A
    23E1: 51 7D    MOV   A,[__r2]
    23E3: 3F 7E    MVI   [__r1],A
    23E5: 80 26    JMP   0x240C
    23E7: 62 D0 00 MOV   REG[0xD0],0x0
    23EA: 52 01    MOV   A,[X+1]
    23EC: 53 7E    MOV   [__r1],A
    23EE: 52 00    MOV   A,[X+0]
    23F0: 53 7F    MOV   [__r0],A
    23F2: 51 7E    MOV   A,[__r1]
    23F4: 01 01    ADD   A,0x1
    23F6: 54 01    MOV   [X+1],A
    23F8: 51 7F    MOV   A,[__r0]
    23FA: 09 00    ADC   A,0x0
    23FC: 54 00    MOV   [X+0],A
    23FE: 52 06    MOV   A,[X+6]
    2400: 01 57    ADD   A,0x57
    2402: 53 7D    MOV   [__r2],A
    2404: 51 7F    MOV   A,[__r0]
    2406: 60 D5    MOV   REG[0xD5],A
    2408: 51 7D    MOV   A,[__r2]
    240A: 3F 7E    MVI   [__r1],A
    240C: 52 F7    MOV   A,[X-9]
    240E: 08       PUSH  A
    240F: 52 F8    MOV   A,[X-8]
    2411: 08       PUSH  A
    2412: 52 F9    MOV   A,[X-7]
    2414: 08       PUSH  A
    2415: 52 FA    MOV   A,[X-6]
    2417: 08       PUSH  A
    2418: 62 D0 00 MOV   REG[0xD0],0x0
    241B: 7C 18 81 LCALL 0x1881
    241E: 18       POP   A
    241F: 54 FA    MOV   [X-6],A
    2421: 18       POP   A
    2422: 54 F9    MOV   [X-7],A
    2424: 38 FE    ADD   SP,0xFE
    2426: 3D F9 00 CMP   [X-7],0x0
    2429: BF 64    JNZ   0x238E
    242B: 3D FA 00 CMP   [X-6],0x0
    242E: BF 5F    JNZ   0x238E
    2430: 62 D0 00 MOV   REG[0xD0],0x0
    2433: 52 01    MOV   A,[X+1]
    2435: 53 7E    MOV   [__r1],A
    2437: 52 00    MOV   A,[X+0]
    2439: 53 7F    MOV   [__r0],A
    243B: 51 7E    MOV   A,[__r1]
    243D: 01 FF    ADD   A,0xFF
    243F: 54 01    MOV   [X+1],A
    2441: 51 7F    MOV   A,[__r0]
    2443: 09 FF    ADC   A,0xFF
    2445: 54 00    MOV   [X+0],A
    2447: 51 7F    MOV   A,[__r0]
    2449: 60 D5    MOV   REG[0xD5],A
    244B: 50 00    MOV   A,0x0
    244D: 3F 7E    MVI   [__r1],A
    244F: 52 FC    MOV   A,[X-4]
    2451: 54 03    MOV   [X+3],A
    2453: 52 FB    MOV   A,[X-5]
    2455: 54 02    MOV   [X+2],A
    2457: 80 54    JMP   0x24AC
    2459: 62 D0 00 MOV   REG[0xD0],0x0
    245C: 52 03    MOV   A,[X+3]
    245E: 53 7E    MOV   [__r1],A
    2460: 52 02    MOV   A,[X+2]
    2462: 60 D4    MOV   REG[0xD4],A
    2464: 3E 7E    MVI   A,[__r1]
    2466: 54 04    MOV   [X+4],A
    2468: 52 03    MOV   A,[X+3]
    246A: 53 7E    MOV   [__r1],A
    246C: 52 02    MOV   A,[X+2]
    246E: 53 7F    MOV   [__r0],A
    2470: 51 7E    MOV   A,[__r1]
    2472: 01 01    ADD   A,0x1
    2474: 54 03    MOV   [X+3],A
    2476: 51 7F    MOV   A,[__r0]
    2478: 09 00    ADC   A,0x0
    247A: 54 02    MOV   [X+2],A
    247C: 52 01    MOV   A,[X+1]
    247E: 53 7C    MOV   [__r3],A
    2480: 52 00    MOV   A,[X+0]
    2482: 60 D4    MOV   REG[0xD4],A
    2484: 3E 7C    MVI   A,[__r3]
    2486: 53 7D    MOV   [__r2],A
    2488: 51 7F    MOV   A,[__r0]
    248A: 60 D5    MOV   REG[0xD5],A
    248C: 51 7D    MOV   A,[__r2]
    248E: 3F 7E    MVI   [__r1],A
    2490: 52 01    MOV   A,[X+1]
    2492: 53 7E    MOV   [__r1],A
    2494: 52 00    MOV   A,[X+0]
    2496: 53 7F    MOV   [__r0],A
    2498: 51 7E    MOV   A,[__r1]
    249A: 01 FF    ADD   A,0xFF
    249C: 54 01    MOV   [X+1],A
    249E: 51 7F    MOV   A,[__r0]
    24A0: 09 FF    ADC   A,0xFF
    24A2: 54 00    MOV   [X+0],A
    24A4: 51 7F    MOV   A,[__r0]
    24A6: 60 D5    MOV   REG[0xD5],A
    24A8: 52 04    MOV   A,[X+4]
    24AA: 3F 7E    MVI   [__r1],A
    24AC: 52 03    MOV   A,[X+3]
    24AE: 13 01    SUB   A,[X+1]
    24B0: 52 02    MOV   A,[X+2]
    24B2: 1B 00    SBB   A,[X+0]
    24B4: CF A4    JC    0x2459
    24B6: 62 D0 00 MOV   REG[0xD0],0x0
    24B9: 52 FC    MOV   A,[X-4]
    24BB: 53 7E    MOV   [__r1],A
    24BD: 52 FB    MOV   A,[X-5]
    24BF: 53 7F    MOV   [__r0],A
    24C1: 38 F9    ADD   SP,0xF9
    24C3: 20       POP   X
    24C4: 7F       RET   
_isdigit:
    24C5: 10       PUSH  X
    24C6: 4F       MOV   X,SP
    24C7: 62 D0 00 MOV   REG[0xD0],0x0
    24CA: 52 FC    MOV   A,[X-4]
    24CC: 01 AB    ADD   A,0xAB
    24CE: 53 7E    MOV   [__r1],A
    24D0: 52 FB    MOV   A,[X-5]
    24D2: 09 05    ADC   A,0x5
    24D4: 10       PUSH  X
    24D5: 58 7E    MOV   X,[__r1]
    24D7: 28       ROMX  
    24D8: 20       POP   X
    24D9: 53 7E    MOV   [__r1],A
    24DB: 55 7F 00 MOV   [__r0],0x0
    24DE: 26 7E 04 AND   [__r1],0x4
    24E1: 26 7F 00 AND   [__r0],0x0
    24E4: 20       POP   X
    24E5: 7F       RET   
_islower:
    24E6: 10       PUSH  X
    24E7: 4F       MOV   X,SP
    24E8: 62 D0 00 MOV   REG[0xD0],0x0
    24EB: 52 FC    MOV   A,[X-4]
    24ED: 01 AB    ADD   A,0xAB
    24EF: 53 7E    MOV   [__r1],A
    24F1: 52 FB    MOV   A,[X-5]
    24F3: 09 05    ADC   A,0x5
    24F5: 10       PUSH  X
    24F6: 58 7E    MOV   X,[__r1]
    24F8: 28       ROMX  
    24F9: 20       POP   X
    24FA: 53 7E    MOV   [__r1],A
    24FC: 55 7F 00 MOV   [__r0],0x0
    24FF: 26 7E 02 AND   [__r1],0x2
    2502: 26 7F 00 AND   [__r0],0x0
    2505: 20       POP   X
    2506: 7F       RET   
_isspace:
    2507: 10       PUSH  X
    2508: 4F       MOV   X,SP
    2509: 62 D0 00 MOV   REG[0xD0],0x0
    250C: 52 FC    MOV   A,[X-4]
    250E: 01 AB    ADD   A,0xAB
    2510: 53 7E    MOV   [__r1],A
    2512: 52 FB    MOV   A,[X-5]
    2514: 09 05    ADC   A,0x5
    2516: 10       PUSH  X
    2517: 58 7E    MOV   X,[__r1]
    2519: 28       ROMX  
    251A: 20       POP   X
    251B: 53 7E    MOV   [__r1],A
    251D: 55 7F 00 MOV   [__r0],0x0
    2520: 26 7E 10 AND   [__r1],0x10
    2523: 26 7F 00 AND   [__r0],0x0
    2526: 20       POP   X
    2527: 7F       RET   
_isupper:
    2528: 10       PUSH  X
    2529: 4F       MOV   X,SP
    252A: 62 D0 00 MOV   REG[0xD0],0x0
    252D: 52 FC    MOV   A,[X-4]
    252F: 01 AB    ADD   A,0xAB
    2531: 53 7E    MOV   [__r1],A
    2533: 52 FB    MOV   A,[X-5]
    2535: 09 05    ADC   A,0x5
    2537: 10       PUSH  X
    2538: 58 7E    MOV   X,[__r1]
    253A: 28       ROMX  
    253B: 20       POP   X
    253C: 53 7E    MOV   [__r1],A
    253E: 55 7F 00 MOV   [__r0],0x0
    2541: 26 7E 01 AND   [__r1],0x1
    2544: 26 7F 00 AND   [__r0],0x0
    2547: 20       POP   X
    2548: 7F       RET   
_isxdigit:
    2549: 10       PUSH  X
    254A: 4F       MOV   X,SP
    254B: 62 D0 00 MOV   REG[0xD0],0x0
    254E: 52 FC    MOV   A,[X-4]
    2550: 01 AB    ADD   A,0xAB
    2552: 53 7E    MOV   [__r1],A
    2554: 52 FB    MOV   A,[X-5]
    2556: 09 05    ADC   A,0x5
    2558: 10       PUSH  X
    2559: 58 7E    MOV   X,[__r1]
    255B: 28       ROMX  
    255C: 20       POP   X
    255D: 53 7E    MOV   [__r1],A
    255F: 55 7F 00 MOV   [__r0],0x0
    2562: 26 7E 08 AND   [__r1],0x8
    2565: 26 7F 00 AND   [__r0],0x0
    2568: 20       POP   X
    2569: 7F       RET   
_toupper:
    256A: 10       PUSH  X
    256B: 4F       MOV   X,SP
    256C: 52 FB    MOV   A,[X-5]
    256E: 08       PUSH  A
    256F: 52 FC    MOV   A,[X-4]
    2571: 08       PUSH  A
    2572: 7C 24 E6 LCALL _islower
    2575: 38 FE    ADD   SP,0xFE
    2577: 62 D0 00 MOV   REG[0xD0],0x0
    257A: 3C 7F 00 CMP   [__r0],0x0
    257D: B0 06    JNZ   0x2584
    257F: 3C 7E 00 CMP   [__r1],0x0
    2582: A0 18    JZ    0x259B
    2584: 62 D0 00 MOV   REG[0xD0],0x0
    2587: 52 FC    MOV   A,[X-4]
    2589: 11 61    SUB   A,0x61
    258B: 53 7E    MOV   [__r1],A
    258D: 52 FB    MOV   A,[X-5]
    258F: 19 00    SBB   A,0x0
    2591: 53 7F    MOV   [__r0],A
    2593: 06 7E 41 ADD   [__r1],0x41
    2596: 0E 7F 00 ADC   [__r0],0x0
    2599: 80 0C    JMP   0x25A6
    259B: 62 D0 00 MOV   REG[0xD0],0x0
    259E: 52 FC    MOV   A,[X-4]
    25A0: 53 7E    MOV   [__r1],A
    25A2: 52 FB    MOV   A,[X-5]
    25A4: 53 7F    MOV   [__r0],A
    25A6: 20       POP   X
    25A7: 7F       RET   
_tolower:
    25A8: 10       PUSH  X
    25A9: 4F       MOV   X,SP
    25AA: 52 FB    MOV   A,[X-5]
    25AC: 08       PUSH  A
    25AD: 52 FC    MOV   A,[X-4]
    25AF: 08       PUSH  A
    25B0: 7C 25 28 LCALL _isupper
    25B3: 38 FE    ADD   SP,0xFE
    25B5: 62 D0 00 MOV   REG[0xD0],0x0
    25B8: 3C 7F 00 CMP   [__r0],0x0
    25BB: B0 06    JNZ   0x25C2
    25BD: 3C 7E 00 CMP   [__r1],0x0
    25C0: A0 18    JZ    0x25D9
    25C2: 62 D0 00 MOV   REG[0xD0],0x0
    25C5: 52 FC    MOV   A,[X-4]
    25C7: 11 41    SUB   A,0x41
    25C9: 53 7E    MOV   [__r1],A
    25CB: 52 FB    MOV   A,[X-5]
    25CD: 19 00    SBB   A,0x0
    25CF: 53 7F    MOV   [__r0],A
    25D1: 06 7E 61 ADD   [__r1],0x61
    25D4: 0E 7F 00 ADC   [__r0],0x0
    25D7: 80 0C    JMP   0x25E4
    25D9: 62 D0 00 MOV   REG[0xD0],0x0
    25DC: 52 FC    MOV   A,[X-4]
    25DE: 53 7E    MOV   [__r1],A
    25E0: 52 FB    MOV   A,[X-5]
    25E2: 53 7F    MOV   [__r0],A
    25E4: 20       POP   X
    25E5: 7F       RET   
__csdepi:
    25E6: 10       PUSH  X
    25E7: 4F       MOV   X,SP
    25E8: 62 D0 00 MOV   REG[0xD0],0x0
    25EB: 51 89    MOV   A,[main.c:rubout+9]
    25ED: 08       PUSH  A
    25EE: 51 88    MOV   A,[main.c:rubout+8]
    25F0: 62 D0 00 MOV   REG[0xD0],0x0
    25F3: 53 7F    MOV   [__r0],A
    25F5: 18       POP   A
    25F6: 53 7E    MOV   [__r1],A
    25F8: 01 01    ADD   A,0x1
    25FA: 62 D0 00 MOV   REG[0xD0],0x0
    25FD: 53 89    MOV   [main.c:rubout+9],A
    25FF: 62 D0 00 MOV   REG[0xD0],0x0
    2602: 51 7F    MOV   A,[__r0]
    2604: 09 00    ADC   A,0x0
    2606: 62 D0 00 MOV   REG[0xD0],0x0
    2609: 53 88    MOV   [main.c:rubout+8],A
    260B: 62 D0 00 MOV   REG[0xD0],0x0
    260E: 51 7F    MOV   A,[__r0]
    2610: 60 D5    MOV   REG[0xD5],A
    2612: 52 FC    MOV   A,[X-4]
    2614: 3F 7E    MVI   [__r1],A
    2616: 20       POP   X
    2617: 7F       RET   
_csprintf:
    2618: 10       PUSH  X
    2619: 4F       MOV   X,SP
    261A: 38 02    ADD   SP,0x2
    261C: 62 D0 00 MOV   REG[0xD0],0x0
    261F: 52 FC    MOV   A,[X-4]
    2621: 53 89    MOV   [main.c:rubout+9],A
    2623: 52 FB    MOV   A,[X-5]
    2625: 53 88    MOV   [main.c:rubout+8],A
    2627: 62 D0 00 MOV   REG[0xD0],0x0
    262A: 5A 7E    MOV   [__r1],X
    262C: 16 7E 07 SUB   [__r1],0x7
    262F: 51 7E    MOV   A,[__r1]
    2631: 54 01    MOV   [X+1],A
    2633: 56 00 07 MOV   [X+0],0x7
    2636: 52 00    MOV   A,[X+0]
    2638: 08       PUSH  A
    2639: 52 01    MOV   A,[X+1]
    263B: 08       PUSH  A
    263C: 52 F9    MOV   A,[X-7]
    263E: 08       PUSH  A
    263F: 52 FA    MOV   A,[X-6]
    2641: 08       PUSH  A
    2642: 50 07    MOV   A,0x7
    2644: 08       PUSH  A
    2645: 50 21    MOV   A,0x21
    2647: 08       PUSH  A
    2648: 7C 27 3B LCALL __cprint
    264B: 38 FA    ADD   SP,0xFA
    264D: 62 D0 00 MOV   REG[0xD0],0x0
    2650: 51 89    MOV   A,[main.c:rubout+9]
    2652: 08       PUSH  A
    2653: 51 88    MOV   A,[main.c:rubout+8]
    2655: 62 D0 00 MOV   REG[0xD0],0x0
    2658: 53 7F    MOV   [__r0],A
    265A: 18       POP   A
    265B: 53 7E    MOV   [__r1],A
    265D: 51 7F    MOV   A,[__r0]
    265F: 60 D5    MOV   REG[0xD5],A
    2661: 50 00    MOV   A,0x0
    2663: 3F 7E    MVI   [__r1],A
    2665: 62 D0 00 MOV   REG[0xD0],0x0
    2668: 51 89    MOV   A,[main.c:rubout+9]
    266A: 13 FC    SUB   A,[X-4]
    266C: 62 D0 00 MOV   REG[0xD0],0x0
    266F: 53 7E    MOV   [__r1],A
    2671: 62 D0 00 MOV   REG[0xD0],0x0
    2674: 51 88    MOV   A,[main.c:rubout+8]
    2676: 1B FB    SBB   A,[X-5]
    2678: 62 D0 00 MOV   REG[0xD0],0x0
    267B: 53 7F    MOV   [__r0],A
    267D: 38 FE    ADD   SP,0xFE
    267F: 20       POP   X
    2680: 7F       RET   
    2681: 10       PUSH  X
    2682: 4F       MOV   X,SP
    2683: 38 01    ADD   SP,0x1
    2685: 62 D0 00 MOV   REG[0xD0],0x0
    2688: 3C 8E 00 CMP   [errno+2],0x0
    268B: A0 0A    JZ    0x2696
    268D: 51 8E    MOV   A,[errno+2]
    268F: 54 00    MOV   [X+0],A
    2691: 55 8E 00 MOV   [errno+2],0x0
    2694: 80 26    JMP   0x26BB
    2696: 62 D0 00 MOV   REG[0xD0],0x0
    2699: 51 85    MOV   A,[main.c:rubout+5]
    269B: 08       PUSH  A
    269C: 51 84    MOV   A,[main.c:rubout+4]
    269E: 62 D0 00 MOV   REG[0xD0],0x0
    26A1: 53 7F    MOV   [__r0],A
    26A3: 18       POP   A
    26A4: 53 7E    MOV   [__r1],A
    26A6: 51 7F    MOV   A,[__r0]
    26A8: 60 D4    MOV   REG[0xD4],A
    26AA: 3E 7E    MVI   A,[__r1]
    26AC: 54 00    MOV   [X+0],A
    26AE: 3D 00 00 CMP   [X+0],0x0
    26B1: A0 09    JZ    0x26BB
    26B3: 62 D0 00 MOV   REG[0xD0],0x0
    26B6: 76 85    INC   [main.c:rubout+5]
    26B8: 0E 84 00 ADC   [main.c:rubout+4],0x0
    26BB: 52 00    MOV   A,[X+0]
    26BD: 62 D0 00 MOV   REG[0xD0],0x0
    26C0: 38 FF    ADD   SP,0xFF
    26C2: 20       POP   X
    26C3: 7F       RET   
    26C4: 10       PUSH  X
    26C5: 4F       MOV   X,SP
    26C6: 52 FC    MOV   A,[X-4]
    26C8: 62 D0 00 MOV   REG[0xD0],0x0
    26CB: 53 8E    MOV   [errno+2],A
    26CD: 20       POP   X
    26CE: 7F       RET   
_csscanf:
    26CF: 10       PUSH  X
    26D0: 4F       MOV   X,SP
    26D1: 38 04    ADD   SP,0x4
    26D3: 62 D0 00 MOV   REG[0xD0],0x0
    26D6: 55 8E 00 MOV   [errno+2],0x0
    26D9: 62 D0 00 MOV   REG[0xD0],0x0
    26DC: 52 FC    MOV   A,[X-4]
    26DE: 53 85    MOV   [main.c:rubout+5],A
    26E0: 52 FB    MOV   A,[X-5]
    26E2: 53 84    MOV   [main.c:rubout+4],A
    26E4: 62 D0 00 MOV   REG[0xD0],0x0
    26E7: 5A 7E    MOV   [__r1],X
    26E9: 16 7E 07 SUB   [__r1],0x7
    26EC: 51 7E    MOV   A,[__r1]
    26EE: 54 01    MOV   [X+1],A
    26F0: 56 00 07 MOV   [X+0],0x7
    26F3: 52 00    MOV   A,[X+0]
    26F5: 08       PUSH  A
    26F6: 52 01    MOV   A,[X+1]
    26F8: 08       PUSH  A
    26F9: 52 F9    MOV   A,[X-7]
    26FB: 08       PUSH  A
    26FC: 52 FA    MOV   A,[X-6]
    26FE: 08       PUSH  A
    26FF: 50 07    MOV   A,0x7
    2701: 08       PUSH  A
    2702: 50 25    MOV   A,0x25
    2704: 08       PUSH  A
    2705: 50 07    MOV   A,0x7
    2707: 08       PUSH  A
    2708: 50 23    MOV   A,0x23
    270A: 08       PUSH  A
    270B: 7C 2E 49 LCALL __cscanf
    270E: 38 F8    ADD   SP,0xF8
    2710: 62 D0 00 MOV   REG[0xD0],0x0
    2713: 51 7E    MOV   A,[__r1]
    2715: 54 03    MOV   [X+3],A
    2717: 51 7F    MOV   A,[__r0]
    2719: 54 02    MOV   [X+2],A
    271B: 62 D0 00 MOV   REG[0xD0],0x0
    271E: 3C 8E 00 CMP   [errno+2],0x0
    2721: A0 0A    JZ    0x272C
    2723: 62 D0 00 MOV   REG[0xD0],0x0
    2726: 06 85 FF ADD   [main.c:rubout+5],0xFF
    2729: 0E 84 FF ADC   [main.c:rubout+4],0xFF
    272C: 62 D0 00 MOV   REG[0xD0],0x0
    272F: 52 03    MOV   A,[X+3]
    2731: 53 7E    MOV   [__r1],A
    2733: 52 02    MOV   A,[X+2]
    2735: 53 7F    MOV   [__r0],A
    2737: 38 FC    ADD   SP,0xFC
    2739: 20       POP   X
    273A: 7F       RET   
__cprint:
    273B: 10       PUSH  X
    273C: 4F       MOV   X,SP
    273D: 38 11    ADD   SP,0x11
    273F: 56 05 00 MOV   [X+5],0x0
    2742: 56 04 00 MOV   [X+4],0x0
    2745: 83 C7    JMP   0x2B0D
    2747: 62 D0 00 MOV   REG[0xD0],0x0
    274A: 52 FA    MOV   A,[X-6]
    274C: 53 7E    MOV   [__r1],A
    274E: 52 F9    MOV   A,[X-7]
    2750: 10       PUSH  X
    2751: 58 7E    MOV   X,[__r1]
    2753: 28       ROMX  
    2754: 20       POP   X
    2755: 39 25    CMP   A,0x25
    2757: A0 23    JZ    0x277B
    2759: 52 FA    MOV   A,[X-6]
    275B: 53 7E    MOV   [__r1],A
    275D: 52 F9    MOV   A,[X-7]
    275F: 10       PUSH  X
    2760: 58 7E    MOV   X,[__r1]
    2762: 28       ROMX  
    2763: 20       POP   X
    2764: 10       PUSH  X
    2765: 08       PUSH  A
    2766: 52 FC    MOV   A,[X-4]
    2768: 53 7E    MOV   [__r1],A
    276A: 52 FB    MOV   A,[X-5]
    276C: 58 7E    MOV   X,[__r1]
    276E: 7C 19 E5 LCALL __plcall
    2771: 38 FF    ADD   SP,0xFF
    2773: 20       POP   X
    2774: 77 05    INC   [X+5]
    2776: 0F 04 00 ADC   [X+4],0x0
    2779: 83 8E    JMP   0x2B08
    277B: 56 0A 00 MOV   [X+10],0x0
    277E: 56 09 00 MOV   [X+9],0x0
    2781: 56 07 5C MOV   [X+7],0x5C
    2784: 56 06 00 MOV   [X+6],0x0
    2787: 56 08 20 MOV   [X+8],0x20
    278A: 77 FA    INC   [X-6]
    278C: 0F F9 00 ADC   [X-7],0x0
    278F: 62 D0 00 MOV   REG[0xD0],0x0
    2792: 52 FA    MOV   A,[X-6]
    2794: 53 7E    MOV   [__r1],A
    2796: 52 F9    MOV   A,[X-7]
    2798: 10       PUSH  X
    2799: 58 7E    MOV   X,[__r1]
    279B: 28       ROMX  
    279C: 20       POP   X
    279D: 54 10    MOV   [X+16],A
    279F: 56 0F 00 MOV   [X+15],0x0
    27A2: 52 10    MOV   A,[X+16]
    27A4: 11 58    SUB   A,0x58
    27A6: 53 76    MOV   [__rY],A
    27A8: 52 0F    MOV   A,[X+15]
    27AA: 31 80    XOR   A,0x80
    27AC: 19 80    SBB   A,0x80
    27AE: 2A 76    OR    A,[__rY]
    27B0: A0 ED    JZ    0x289E
    27B2: D0 22    JNC   0x27D5
    27B4: 52 10    MOV   A,[X+16]
    27B6: 11 45    SUB   A,0x45
    27B8: 62 D0 00 MOV   REG[0xD0],0x0
    27BB: 53 76    MOV   [__rY],A
    27BD: 52 0F    MOV   A,[X+15]
    27BF: 31 80    XOR   A,0x80
    27C1: 19 80    SBB   A,0x80
    27C3: C0 83    JC    0x2847
    27C5: 2A 76    OR    A,[__rY]
    27C7: A3 38    JZ    0x2B00
    27C9: 3D 0F 00 CMP   [X+15],0x0
    27CC: B0 06    JNZ   0x27D3
    27CE: 3D 10 53 CMP   [X+16],0x53
    27D1: A2 32    JZ    0x2A04
    27D3: 80 73    JMP   0x2847
    27D5: 3D 0F 00 CMP   [X+15],0x0
    27D8: B0 06    JNZ   0x27DF
    27DA: 3D 10 63 CMP   [X+16],0x63
    27DD: A1 F6    JZ    0x29D4
    27DF: 3D 0F 00 CMP   [X+15],0x0
    27E2: B0 06    JNZ   0x27E9
    27E4: 3D 10 64 CMP   [X+16],0x64
    27E7: A0 84    JZ    0x286C
    27E9: 3D 0F 00 CMP   [X+15],0x0
    27EC: B0 06    JNZ   0x27F3
    27EE: 3D 10 65 CMP   [X+16],0x65
    27F1: A3 0E    JZ    0x2B00
    27F3: 3D 0F 00 CMP   [X+15],0x0
    27F6: B0 06    JNZ   0x27FD
    27F8: 3D 10 66 CMP   [X+16],0x66
    27FB: A3 04    JZ    0x2B00
    27FD: 3D 0F 00 CMP   [X+15],0x0
    2800: B0 06    JNZ   0x2807
    2802: 3D 10 69 CMP   [X+16],0x69
    2805: A0 66    JZ    0x286C
    2807: 3D 0F 00 CMP   [X+15],0x0
    280A: B0 06    JNZ   0x2811
    280C: 3D 10 6F CMP   [X+16],0x6F
    280F: A0 8E    JZ    0x289E
    2811: 3D 0F 00 CMP   [X+15],0x0
    2814: B0 06    JNZ   0x281B
    2816: 3D 10 70 CMP   [X+16],0x70
    2819: A0 84    JZ    0x289E
    281B: 52 10    MOV   A,[X+16]
    281D: 11 63    SUB   A,0x63
    281F: 52 0F    MOV   A,[X+15]
    2821: 31 80    XOR   A,0x80
    2823: 19 80    SBB   A,0x80
    2825: C0 21    JC    0x2847
    2827: 3D 0F 00 CMP   [X+15],0x0
    282A: B0 06    JNZ   0x2831
    282C: 3D 10 73 CMP   [X+16],0x73
    282F: A2 4A    JZ    0x2A7A
    2831: 3D 0F 00 CMP   [X+15],0x0
    2834: B0 06    JNZ   0x283B
    2836: 3D 10 75 CMP   [X+16],0x75
    2839: A0 64    JZ    0x289E
    283B: 3D 0F 00 CMP   [X+15],0x0
    283E: B0 06    JNZ   0x2845
    2840: 3D 10 78 CMP   [X+16],0x78
    2843: A0 5A    JZ    0x289E
    2845: 80 01    JMP   0x2847
    2847: 62 D0 00 MOV   REG[0xD0],0x0
    284A: 52 FA    MOV   A,[X-6]
    284C: 53 7E    MOV   [__r1],A
    284E: 52 F9    MOV   A,[X-7]
    2850: 10       PUSH  X
    2851: 58 7E    MOV   X,[__r1]
    2853: 28       ROMX  
    2854: 20       POP   X
    2855: 10       PUSH  X
    2856: 08       PUSH  A
    2857: 52 FC    MOV   A,[X-4]
    2859: 53 7E    MOV   [__r1],A
    285B: 52 FB    MOV   A,[X-5]
    285D: 58 7E    MOV   X,[__r1]
    285F: 7C 19 E5 LCALL __plcall
    2862: 38 FF    ADD   SP,0xFF
    2864: 20       POP   X
    2865: 77 05    INC   [X+5]
    2867: 0F 04 00 ADC   [X+4],0x0
    286A: 82 9D    JMP   0x2B08
    286C: 07 F8 FE ADD   [X-8],0xFE
    286F: 0F F7 FF ADC   [X-9],0xFF
    2872: 62 D0 00 MOV   REG[0xD0],0x0
    2875: 52 F8    MOV   A,[X-8]
    2877: 53 7E    MOV   [__r1],A
    2879: 52 F7    MOV   A,[X-9]
    287B: 60 D4    MOV   REG[0xD4],A
    287D: 3E 7E    MVI   A,[__r1]
    287F: 54 0B    MOV   [X+11],A
    2881: 3E 7E    MVI   A,[__r1]
    2883: 54 0C    MOV   [X+12],A
    2885: 50 00    MOV   A,0x0
    2887: 08       PUSH  A
    2888: 50 0A    MOV   A,0xA
    288A: 08       PUSH  A
    288B: 52 0B    MOV   A,[X+11]
    288D: 08       PUSH  A
    288E: 52 0C    MOV   A,[X+12]
    2890: 08       PUSH  A
    2891: 52 06    MOV   A,[X+6]
    2893: 08       PUSH  A
    2894: 52 07    MOV   A,[X+7]
    2896: 08       PUSH  A
    2897: 7C 19 F1 LCALL _itoa
    289A: 38 FA    ADD   SP,0xFA
    289C: 81 2F    JMP   0x29CC
    289E: 07 F8 FE ADD   [X-8],0xFE
    28A1: 0F F7 FF ADC   [X-9],0xFF
    28A4: 62 D0 00 MOV   REG[0xD0],0x0
    28A7: 52 F8    MOV   A,[X-8]
    28A9: 53 7E    MOV   [__r1],A
    28AB: 52 F7    MOV   A,[X-9]
    28AD: 60 D4    MOV   REG[0xD4],A
    28AF: 3E 7E    MVI   A,[__r1]
    28B1: 53 7F    MOV   [__r0],A
    28B3: 3E 7E    MVI   A,[__r1]
    28B5: 54 0C    MOV   [X+12],A
    28B7: 51 7F    MOV   A,[__r0]
    28B9: 54 0B    MOV   [X+11],A
    28BB: 52 FA    MOV   A,[X-6]
    28BD: 53 7E    MOV   [__r1],A
    28BF: 52 F9    MOV   A,[X-7]
    28C1: 10       PUSH  X
    28C2: 58 7E    MOV   X,[__r1]
    28C4: 28       ROMX  
    28C5: 20       POP   X
    28C6: 39 75    CMP   A,0x75
    28C8: B0 1A    JNZ   0x28E3
    28CA: 50 00    MOV   A,0x0
    28CC: 08       PUSH  A
    28CD: 50 0A    MOV   A,0xA
    28CF: 08       PUSH  A
    28D0: 52 0B    MOV   A,[X+11]
    28D2: 08       PUSH  A
    28D3: 52 0C    MOV   A,[X+12]
    28D5: 08       PUSH  A
    28D6: 52 06    MOV   A,[X+6]
    28D8: 08       PUSH  A
    28D9: 52 07    MOV   A,[X+7]
    28DB: 08       PUSH  A
    28DC: 7C 23 82 LCALL _utoa
    28DF: 38 FA    ADD   SP,0xFA
    28E1: 80 EA    JMP   0x29CC
    28E3: 62 D0 00 MOV   REG[0xD0],0x0
    28E6: 52 FA    MOV   A,[X-6]
    28E8: 53 7E    MOV   [__r1],A
    28EA: 52 F9    MOV   A,[X-7]
    28EC: 10       PUSH  X
    28ED: 58 7E    MOV   X,[__r1]
    28EF: 28       ROMX  
    28F0: 20       POP   X
    28F1: 39 6F    CMP   A,0x6F
    28F3: B0 1A    JNZ   0x290E
    28F5: 50 00    MOV   A,0x0
    28F7: 08       PUSH  A
    28F8: 50 08    MOV   A,0x8
    28FA: 08       PUSH  A
    28FB: 52 0B    MOV   A,[X+11]
    28FD: 08       PUSH  A
    28FE: 52 0C    MOV   A,[X+12]
    2900: 08       PUSH  A
    2901: 52 06    MOV   A,[X+6]
    2903: 08       PUSH  A
    2904: 52 07    MOV   A,[X+7]
    2906: 08       PUSH  A
    2907: 7C 23 82 LCALL _utoa
    290A: 38 FA    ADD   SP,0xFA
    290C: 80 BF    JMP   0x29CC
    290E: 62 D0 00 MOV   REG[0xD0],0x0
    2911: 52 FA    MOV   A,[X-6]
    2913: 53 7E    MOV   [__r1],A
    2915: 52 F9    MOV   A,[X-7]
    2917: 10       PUSH  X
    2918: 58 7E    MOV   X,[__r1]
    291A: 28       ROMX  
    291B: 20       POP   X
    291C: 39 70    CMP   A,0x70
    291E: B0 39    JNZ   0x2958
    2920: 52 07    MOV   A,[X+7]
    2922: 53 7E    MOV   [__r1],A
    2924: 52 06    MOV   A,[X+6]
    2926: 53 7F    MOV   [__r0],A
    2928: 51 7E    MOV   A,[__r1]
    292A: 01 01    ADD   A,0x1
    292C: 54 07    MOV   [X+7],A
    292E: 51 7F    MOV   A,[__r0]
    2930: 09 00    ADC   A,0x0
    2932: 54 06    MOV   [X+6],A
    2934: 51 7F    MOV   A,[__r0]
    2936: 60 D5    MOV   REG[0xD5],A
    2938: 50 30    MOV   A,0x30
    293A: 3F 7E    MVI   [__r1],A
    293C: 52 07    MOV   A,[X+7]
    293E: 53 7E    MOV   [__r1],A
    2940: 52 06    MOV   A,[X+6]
    2942: 53 7F    MOV   [__r0],A
    2944: 51 7E    MOV   A,[__r1]
    2946: 01 01    ADD   A,0x1
    2948: 54 07    MOV   [X+7],A
    294A: 51 7F    MOV   A,[__r0]
    294C: 09 00    ADC   A,0x0
    294E: 54 06    MOV   [X+6],A
    2950: 51 7F    MOV   A,[__r0]
    2952: 60 D5    MOV   REG[0xD5],A
    2954: 50 78    MOV   A,0x78
    2956: 3F 7E    MVI   [__r1],A
    2958: 50 00    MOV   A,0x0
    295A: 08       PUSH  A
    295B: 50 10    MOV   A,0x10
    295D: 08       PUSH  A
    295E: 52 0B    MOV   A,[X+11]
    2960: 08       PUSH  A
    2961: 52 0C    MOV   A,[X+12]
    2963: 08       PUSH  A
    2964: 52 06    MOV   A,[X+6]
    2966: 08       PUSH  A
    2967: 52 07    MOV   A,[X+7]
    2969: 08       PUSH  A
    296A: 7C 23 82 LCALL _utoa
    296D: 38 FA    ADD   SP,0xFA
    296F: 62 D0 00 MOV   REG[0xD0],0x0
    2972: 52 FA    MOV   A,[X-6]
    2974: 53 7E    MOV   [__r1],A
    2976: 52 F9    MOV   A,[X-7]
    2978: 10       PUSH  X
    2979: 58 7E    MOV   X,[__r1]
    297B: 28       ROMX  
    297C: 20       POP   X
    297D: 39 58    CMP   A,0x58
    297F: B0 4C    JNZ   0x29CC
    2981: 56 01 5C MOV   [X+1],0x5C
    2984: 56 00 00 MOV   [X+0],0x0
    2987: 80 33    JMP   0x29BB
    2989: 62 D0 00 MOV   REG[0xD0],0x0
    298C: 52 01    MOV   A,[X+1]
    298E: 53 7E    MOV   [__r1],A
    2990: 52 00    MOV   A,[X+0]
    2992: 60 D4    MOV   REG[0xD4],A
    2994: 3E 7E    MVI   A,[__r1]
    2996: 53 7E    MOV   [__r1],A
    2998: 50 00    MOV   A,0x0
    299A: 08       PUSH  A
    299B: 51 7E    MOV   A,[__r1]
    299D: 08       PUSH  A
    299E: 7C 25 6A LCALL _toupper
    29A1: 38 FE    ADD   SP,0xFE
    29A3: 62 D0 00 MOV   REG[0xD0],0x0
    29A6: 51 7E    MOV   A,[__r1]
    29A8: 53 7F    MOV   [__r0],A
    29AA: 52 01    MOV   A,[X+1]
    29AC: 53 7C    MOV   [__r3],A
    29AE: 52 00    MOV   A,[X+0]
    29B0: 60 D5    MOV   REG[0xD5],A
    29B2: 51 7F    MOV   A,[__r0]
    29B4: 3F 7C    MVI   [__r3],A
    29B6: 77 01    INC   [X+1]
    29B8: 0F 00 00 ADC   [X+0],0x0
    29BB: 62 D0 00 MOV   REG[0xD0],0x0
    29BE: 52 01    MOV   A,[X+1]
    29C0: 53 7E    MOV   [__r1],A
    29C2: 52 00    MOV   A,[X+0]
    29C4: 60 D4    MOV   REG[0xD4],A
    29C6: 3E 7E    MVI   A,[__r1]
    29C8: 39 00    CMP   A,0x0
    29CA: BF BE    JNZ   0x2989
    29CC: 56 01 5C MOV   [X+1],0x5C
    29CF: 56 00 00 MOV   [X+0],0x0
    29D2: 80 D2    JMP   0x2AA5
    29D4: 07 F8 FE ADD   [X-8],0xFE
    29D7: 0F F7 FF ADC   [X-9],0xFF
    29DA: 62 D0 00 MOV   REG[0xD0],0x0
    29DD: 52 F8    MOV   A,[X-8]
    29DF: 53 7E    MOV   [__r1],A
    29E1: 52 F7    MOV   A,[X-9]
    29E3: 60 D4    MOV   REG[0xD4],A
    29E5: 3E 7E    MVI   A,[__r1]
    29E7: 3E 7E    MVI   A,[__r1]
    29E9: 54 0D    MOV   [X+13],A
    29EB: 10       PUSH  X
    29EC: 52 0D    MOV   A,[X+13]
    29EE: 08       PUSH  A
    29EF: 52 FC    MOV   A,[X-4]
    29F1: 53 7E    MOV   [__r1],A
    29F3: 52 FB    MOV   A,[X-5]
    29F5: 58 7E    MOV   X,[__r1]
    29F7: 7C 19 E5 LCALL __plcall
    29FA: 38 FF    ADD   SP,0xFF
    29FC: 20       POP   X
    29FD: 77 05    INC   [X+5]
    29FF: 0F 04 00 ADC   [X+4],0x0
    2A02: 81 05    JMP   0x2B08
    2A04: 07 F8 FE ADD   [X-8],0xFE
    2A07: 0F F7 FF ADC   [X-9],0xFF
    2A0A: 62 D0 00 MOV   REG[0xD0],0x0
    2A0D: 52 F8    MOV   A,[X-8]
    2A0F: 53 7E    MOV   [__r1],A
    2A11: 52 F7    MOV   A,[X-9]
    2A13: 60 D4    MOV   REG[0xD4],A
    2A15: 3E 7E    MVI   A,[__r1]
    2A17: 54 02    MOV   [X+2],A
    2A19: 3E 7E    MVI   A,[__r1]
    2A1B: 54 03    MOV   [X+3],A
    2A1D: 3D 08 2D CMP   [X+8],0x2D
    2A20: B0 45    JNZ   0x2A66
    2A22: 10       PUSH  X
    2A23: 50 2D    MOV   A,0x2D
    2A25: 08       PUSH  A
    2A26: 62 D0 00 MOV   REG[0xD0],0x0
    2A29: 52 FC    MOV   A,[X-4]
    2A2B: 53 7E    MOV   [__r1],A
    2A2D: 52 FB    MOV   A,[X-5]
    2A2F: 58 7E    MOV   X,[__r1]
    2A31: 7C 19 E5 LCALL __plcall
    2A34: 38 FF    ADD   SP,0xFF
    2A36: 20       POP   X
    2A37: 77 05    INC   [X+5]
    2A39: 0F 04 00 ADC   [X+4],0x0
    2A3C: 80 29    JMP   0x2A66
    2A3E: 62 D0 00 MOV   REG[0xD0],0x0
    2A41: 52 03    MOV   A,[X+3]
    2A43: 53 7E    MOV   [__r1],A
    2A45: 52 02    MOV   A,[X+2]
    2A47: 10       PUSH  X
    2A48: 58 7E    MOV   X,[__r1]
    2A4A: 28       ROMX  
    2A4B: 20       POP   X
    2A4C: 10       PUSH  X
    2A4D: 08       PUSH  A
    2A4E: 52 FC    MOV   A,[X-4]
    2A50: 53 7E    MOV   [__r1],A
    2A52: 52 FB    MOV   A,[X-5]
    2A54: 58 7E    MOV   X,[__r1]
    2A56: 7C 19 E5 LCALL __plcall
    2A59: 38 FF    ADD   SP,0xFF
    2A5B: 20       POP   X
    2A5C: 77 05    INC   [X+5]
    2A5E: 0F 04 00 ADC   [X+4],0x0
    2A61: 77 03    INC   [X+3]
    2A63: 0F 02 00 ADC   [X+2],0x0
    2A66: 62 D0 00 MOV   REG[0xD0],0x0
    2A69: 52 03    MOV   A,[X+3]
    2A6B: 53 7E    MOV   [__r1],A
    2A6D: 52 02    MOV   A,[X+2]
    2A6F: 10       PUSH  X
    2A70: 58 7E    MOV   X,[__r1]
    2A72: 28       ROMX  
    2A73: 20       POP   X
    2A74: 39 00    CMP   A,0x0
    2A76: BF C7    JNZ   0x2A3E
    2A78: 80 8F    JMP   0x2B08
    2A7A: 07 F8 FE ADD   [X-8],0xFE
    2A7D: 0F F7 FF ADC   [X-9],0xFF
    2A80: 62 D0 00 MOV   REG[0xD0],0x0
    2A83: 52 F8    MOV   A,[X-8]
    2A85: 53 7E    MOV   [__r1],A
    2A87: 52 F7    MOV   A,[X-9]
    2A89: 60 D4    MOV   REG[0xD4],A
    2A8B: 3E 7E    MVI   A,[__r1]
    2A8D: 54 00    MOV   [X+0],A
    2A8F: 3E 7E    MVI   A,[__r1]
    2A91: 54 01    MOV   [X+1],A
    2A93: 3D 00 00 CMP   [X+0],0x0
    2A96: B0 0E    JNZ   0x2AA5
    2A98: 3D 01 00 CMP   [X+1],0x0
    2A9B: B0 09    JNZ   0x2AA5
    2A9D: 56 03 AB MOV   [X+3],0xAB
    2AA0: 56 02 06 MOV   [X+2],0x6
    2AA3: 8F 79    JMP   0x2A1D
    2AA5: 3D 08 2D CMP   [X+8],0x2D
    2AA8: B0 44    JNZ   0x2AED
    2AAA: 10       PUSH  X
    2AAB: 50 2D    MOV   A,0x2D
    2AAD: 08       PUSH  A
    2AAE: 62 D0 00 MOV   REG[0xD0],0x0
    2AB1: 52 FC    MOV   A,[X-4]
    2AB3: 53 7E    MOV   [__r1],A
    2AB5: 52 FB    MOV   A,[X-5]
    2AB7: 58 7E    MOV   X,[__r1]
    2AB9: 7C 19 E5 LCALL __plcall
    2ABC: 38 FF    ADD   SP,0xFF
    2ABE: 20       POP   X
    2ABF: 77 05    INC   [X+5]
    2AC1: 0F 04 00 ADC   [X+4],0x0
    2AC4: 80 28    JMP   0x2AED
    2AC6: 62 D0 00 MOV   REG[0xD0],0x0
    2AC9: 52 01    MOV   A,[X+1]
    2ACB: 53 7E    MOV   [__r1],A
    2ACD: 52 00    MOV   A,[X+0]
    2ACF: 60 D4    MOV   REG[0xD4],A
    2AD1: 3E 7E    MVI   A,[__r1]
    2AD3: 10       PUSH  X
    2AD4: 08       PUSH  A
    2AD5: 52 FC    MOV   A,[X-4]
    2AD7: 53 7E    MOV   [__r1],A
    2AD9: 52 FB    MOV   A,[X-5]
    2ADB: 58 7E    MOV   X,[__r1]
    2ADD: 7C 19 E5 LCALL __plcall
    2AE0: 38 FF    ADD   SP,0xFF
    2AE2: 20       POP   X
    2AE3: 77 05    INC   [X+5]
    2AE5: 0F 04 00 ADC   [X+4],0x0
    2AE8: 77 01    INC   [X+1]
    2AEA: 0F 00 00 ADC   [X+0],0x0
    2AED: 62 D0 00 MOV   REG[0xD0],0x0
    2AF0: 52 01    MOV   A,[X+1]
    2AF2: 53 7E    MOV   [__r1],A
    2AF4: 52 00    MOV   A,[X+0]
    2AF6: 60 D4    MOV   REG[0xD4],A
    2AF8: 3E 7E    MVI   A,[__r1]
    2AFA: 39 00    CMP   A,0x0
    2AFC: BF C9    JNZ   0x2AC6
    2AFE: 80 09    JMP   0x2B08
    2B00: 56 03 BD MOV   [X+3],0xBD
    2B03: 56 02 06 MOV   [X+2],0x6
    2B06: 8F 16    JMP   0x2A1D
    2B08: 77 FA    INC   [X-6]
    2B0A: 0F F9 00 ADC   [X-7],0x0
    2B0D: 62 D0 00 MOV   REG[0xD0],0x0
    2B10: 52 FA    MOV   A,[X-6]
    2B12: 53 7E    MOV   [__r1],A
    2B14: 52 F9    MOV   A,[X-7]
    2B16: 10       PUSH  X
    2B17: 58 7E    MOV   X,[__r1]
    2B19: 28       ROMX  
    2B1A: 20       POP   X
    2B1B: 39 00    CMP   A,0x0
    2B1D: BC 29    JNZ   0x2747
    2B1F: 52 05    MOV   A,[X+5]
    2B21: 53 7E    MOV   [__r1],A
    2B23: 52 04    MOV   A,[X+4]
    2B25: 53 7F    MOV   [__r0],A
    2B27: 38 EF    ADD   SP,0xEF
    2B29: 20       POP   X
    2B2A: 7F       RET   
    2B2B: 10       PUSH  X
    2B2C: 4F       MOV   X,SP
    2B2D: 38 04    ADD   SP,0x4
    2B2F: 80 06    JMP   0x2B36
    2B31: 77 FC    INC   [X-4]
    2B33: 0F FB 00 ADC   [X-5],0x0
    2B36: 62 D0 00 MOV   REG[0xD0],0x0
    2B39: 52 FC    MOV   A,[X-4]
    2B3B: 53 7E    MOV   [__r1],A
    2B3D: 52 FB    MOV   A,[X-5]
    2B3F: 10       PUSH  X
    2B40: 58 7E    MOV   X,[__r1]
    2B42: 28       ROMX  
    2B43: 20       POP   X
    2B44: 53 7E    MOV   [__r1],A
    2B46: 50 00    MOV   A,0x0
    2B48: 08       PUSH  A
    2B49: 51 7E    MOV   A,[__r1]
    2B4B: 08       PUSH  A
    2B4C: 7C 25 07 LCALL _isspace
    2B4F: 38 FE    ADD   SP,0xFE
    2B51: 62 D0 00 MOV   REG[0xD0],0x0
    2B54: 3C 7F 00 CMP   [__r0],0x0
    2B57: BF D9    JNZ   0x2B31
    2B59: 3C 7E 00 CMP   [__r1],0x0
    2B5C: BF D4    JNZ   0x2B31
    2B5E: 56 03 00 MOV   [X+3],0x0
    2B61: 56 02 00 MOV   [X+2],0x0
    2B64: 62 D0 00 MOV   REG[0xD0],0x0
    2B67: 52 FC    MOV   A,[X-4]
    2B69: 53 7E    MOV   [__r1],A
    2B6B: 52 FB    MOV   A,[X-5]
    2B6D: 10       PUSH  X
    2B6E: 58 7E    MOV   X,[__r1]
    2B70: 28       ROMX  
    2B71: 20       POP   X
    2B72: 39 2D    CMP   A,0x2D
    2B74: B0 0E    JNZ   0x2B83
    2B76: 56 03 01 MOV   [X+3],0x1
    2B79: 56 02 00 MOV   [X+2],0x0
    2B7C: 77 FC    INC   [X-4]
    2B7E: 0F FB 00 ADC   [X-5],0x0
    2B81: 80 18    JMP   0x2B9A
    2B83: 62 D0 00 MOV   REG[0xD0],0x0
    2B86: 52 FC    MOV   A,[X-4]
    2B88: 53 7E    MOV   [__r1],A
    2B8A: 52 FB    MOV   A,[X-5]
    2B8C: 10       PUSH  X
    2B8D: 58 7E    MOV   X,[__r1]
    2B8F: 28       ROMX  
    2B90: 20       POP   X
    2B91: 39 2B    CMP   A,0x2B
    2B93: B0 06    JNZ   0x2B9A
    2B95: 77 FC    INC   [X-4]
    2B97: 0F FB 00 ADC   [X-5],0x0
    2B9A: 56 01 00 MOV   [X+1],0x0
    2B9D: 56 00 00 MOV   [X+0],0x0
    2BA0: 80 7C    JMP   0x2C1D
    2BA2: 62 D0 00 MOV   REG[0xD0],0x0
    2BA5: 52 FC    MOV   A,[X-4]
    2BA7: 53 7E    MOV   [__r1],A
    2BA9: 52 FB    MOV   A,[X-5]
    2BAB: 53 7F    MOV   [__r0],A
    2BAD: 51 7E    MOV   A,[__r1]
    2BAF: 01 01    ADD   A,0x1
    2BB1: 54 FC    MOV   [X-4],A
    2BB3: 51 7F    MOV   A,[__r0]
    2BB5: 09 00    ADC   A,0x0
    2BB7: 54 FB    MOV   [X-5],A
    2BB9: 52 01    MOV   A,[X+1]
    2BBB: 53 7C    MOV   [__r3],A
    2BBD: 52 00    MOV   A,[X+0]
    2BBF: 53 7D    MOV   [__r2],A
    2BC1: 55 7A 0A MOV   [__r5],0xA
    2BC4: 55 7B 00 MOV   [__r4],0x0
    2BC7: 55 77 00 MOV   [__rX],0x0
    2BCA: 55 76 00 MOV   [__rY],0x0
    2BCD: 3C 7B 00 CMP   [__r4],0x0
    2BD0: B0 06    JNZ   0x2BD7
    2BD2: 3C 7A 00 CMP   [__r5],0x0
    2BD5: A0 1A    JZ    0x2BF0
    2BD7: 70 FB    AND   F,0xFB
    2BD9: 6E 7B    RRC   [__r4]
    2BDB: 6E 7A    RRC   [__r5]
    2BDD: D0 0C    JNC   0x2BEA
    2BDF: 62 D0 00 MOV   REG[0xD0],0x0
    2BE2: 51 7C    MOV   A,[__r3]
    2BE4: 04 77    ADD   [__rX],A
    2BE6: 51 7D    MOV   A,[__r2]
    2BE8: 0C 76    ADC   [__rY],A
    2BEA: 65 7C    ASL   [__r3]
    2BEC: 6B 7D    RLC   [__r2]
    2BEE: 8F DE    JMP   0x2BCD
    2BF0: 5F 7C 77 MOV   [__r3],[__rX]
    2BF3: 5F 7D 76 MOV   [__r2],[__rY]
    2BF6: 62 D0 00 MOV   REG[0xD0],0x0
    2BF9: 51 7F    MOV   A,[__r0]
    2BFB: 10       PUSH  X
    2BFC: 58 7E    MOV   X,[__r1]
    2BFE: 28       ROMX  
    2BFF: 20       POP   X
    2C00: 53 7E    MOV   [__r1],A
    2C02: 55 7F 00 MOV   [__r0],0x0
    2C05: 51 7C    MOV   A,[__r3]
    2C07: 02 7E    ADD   A,[__r1]
    2C09: 53 7E    MOV   [__r1],A
    2C0B: 51 7D    MOV   A,[__r2]
    2C0D: 0A 7F    ADC   A,[__r0]
    2C0F: 53 7F    MOV   [__r0],A
    2C11: 51 7E    MOV   A,[__r1]
    2C13: 11 30    SUB   A,0x30
    2C15: 54 01    MOV   [X+1],A
    2C17: 51 7F    MOV   A,[__r0]
    2C19: 19 00    SBB   A,0x0
    2C1B: 54 00    MOV   [X+0],A
    2C1D: 62 D0 00 MOV   REG[0xD0],0x0
    2C20: 52 FC    MOV   A,[X-4]
    2C22: 53 7E    MOV   [__r1],A
    2C24: 52 FB    MOV   A,[X-5]
    2C26: 10       PUSH  X
    2C27: 58 7E    MOV   X,[__r1]
    2C29: 28       ROMX  
    2C2A: 20       POP   X
    2C2B: 53 7E    MOV   [__r1],A
    2C2D: 50 00    MOV   A,0x0
    2C2F: 08       PUSH  A
    2C30: 51 7E    MOV   A,[__r1]
    2C32: 08       PUSH  A
    2C33: 7C 24 C5 LCALL _isdigit
    2C36: 38 FE    ADD   SP,0xFE
    2C38: 62 D0 00 MOV   REG[0xD0],0x0
    2C3B: 3C 7F 00 CMP   [__r0],0x0
    2C3E: BF 63    JNZ   0x2BA2
    2C40: 3C 7E 00 CMP   [__r1],0x0
    2C43: BF 5E    JNZ   0x2BA2
    2C45: 3D 02 00 CMP   [X+2],0x0
    2C48: B0 06    JNZ   0x2C4F
    2C4A: 3D 03 00 CMP   [X+3],0x0
    2C4D: A0 14    JZ    0x2C62
    2C4F: 62 D0 00 MOV   REG[0xD0],0x0
    2C52: 52 01    MOV   A,[X+1]
    2C54: 73       CPL   A
    2C55: 11 FF    SUB   A,0xFF
    2C57: 53 7E    MOV   [__r1],A
    2C59: 52 00    MOV   A,[X+0]
    2C5B: 73       CPL   A
    2C5C: 19 FF    SBB   A,0xFF
    2C5E: 53 7F    MOV   [__r0],A
    2C60: 80 0C    JMP   0x2C6D
    2C62: 62 D0 00 MOV   REG[0xD0],0x0
    2C65: 52 01    MOV   A,[X+1]
    2C67: 53 7E    MOV   [__r1],A
    2C69: 52 00    MOV   A,[X+0]
    2C6B: 53 7F    MOV   [__r0],A
    2C6D: 38 FC    ADD   SP,0xFC
    2C6F: 20       POP   X
    2C70: 7F       RET   
    2C71: 10       PUSH  X
    2C72: 4F       MOV   X,SP
    2C73: 38 04    ADD   SP,0x4
    2C75: 56 03 00 MOV   [X+3],0x0
    2C78: 56 02 00 MOV   [X+2],0x0
    2C7B: 80 59    JMP   0x2CD5
    2C7D: 52 00    MOV   A,[X+0]
    2C7F: 08       PUSH  A
    2C80: 52 01    MOV   A,[X+1]
    2C82: 08       PUSH  A
    2C83: 7C 25 07 LCALL _isspace
    2C86: 38 FE    ADD   SP,0xFE
    2C88: 62 D0 00 MOV   REG[0xD0],0x0
    2C8B: 3C 7F 00 CMP   [__r0],0x0
    2C8E: B0 06    JNZ   0x2C95
    2C90: 3C 7E 00 CMP   [__r1],0x0
    2C93: A0 18    JZ    0x2CAC
    2C95: 62 D0 00 MOV   REG[0xD0],0x0
    2C98: 52 01    MOV   A,[X+1]
    2C9A: 10       PUSH  X
    2C9B: 08       PUSH  A
    2C9C: 52 F8    MOV   A,[X-8]
    2C9E: 53 7E    MOV   [__r1],A
    2CA0: 52 F7    MOV   A,[X-9]
    2CA2: 58 7E    MOV   X,[__r1]
    2CA4: 7C 19 E5 LCALL __plcall
    2CA7: 38 FF    ADD   SP,0xFF
    2CA9: 20       POP   X
    2CAA: 80 50    JMP   0x2CFB
    2CAC: 62 D0 00 MOV   REG[0xD0],0x0
    2CAF: 52 FC    MOV   A,[X-4]
    2CB1: 53 7E    MOV   [__r1],A
    2CB3: 52 FB    MOV   A,[X-5]
    2CB5: 53 7F    MOV   [__r0],A
    2CB7: 51 7E    MOV   A,[__r1]
    2CB9: 01 01    ADD   A,0x1
    2CBB: 54 FC    MOV   [X-4],A
    2CBD: 51 7F    MOV   A,[__r0]
    2CBF: 09 00    ADC   A,0x0
    2CC1: 54 FB    MOV   [X-5],A
    2CC3: 52 01    MOV   A,[X+1]
    2CC5: 53 7D    MOV   [__r2],A
    2CC7: 51 7F    MOV   A,[__r0]
    2CC9: 60 D5    MOV   REG[0xD5],A
    2CCB: 51 7D    MOV   A,[__r2]
    2CCD: 3F 7E    MVI   [__r1],A
    2CCF: 56 03 01 MOV   [X+3],0x1
    2CD2: 56 02 00 MOV   [X+2],0x0
    2CD5: 62 D0 00 MOV   REG[0xD0],0x0
    2CD8: 52 FA    MOV   A,[X-6]
    2CDA: 53 7E    MOV   [__r1],A
    2CDC: 52 F9    MOV   A,[X-7]
    2CDE: 10       PUSH  X
    2CDF: 58 7E    MOV   X,[__r1]
    2CE1: 7C 19 E5 LCALL __plcall
    2CE4: 62 D0 00 MOV   REG[0xD0],0x0
    2CE7: 20       POP   X
    2CE8: 53 7E    MOV   [__r1],A
    2CEA: 55 7F 00 MOV   [__r0],0x0
    2CED: 54 01    MOV   [X+1],A
    2CEF: 56 00 00 MOV   [X+0],0x0
    2CF2: 3C 7F 00 CMP   [__r0],0x0
    2CF5: BF 87    JNZ   0x2C7D
    2CF7: 39 00    CMP   A,0x0
    2CF9: BF 83    JNZ   0x2C7D
    2CFB: 62 D0 00 MOV   REG[0xD0],0x0
    2CFE: 52 FC    MOV   A,[X-4]
    2D00: 53 7E    MOV   [__r1],A
    2D02: 52 FB    MOV   A,[X-5]
    2D04: 60 D5    MOV   REG[0xD5],A
    2D06: 50 00    MOV   A,0x0
    2D08: 3F 7E    MVI   [__r1],A
    2D0A: 62 D0 00 MOV   REG[0xD0],0x0
    2D0D: 52 03    MOV   A,[X+3]
    2D0F: 04 8B    ADD   [main.c:rubout+11],A
    2D11: 52 02    MOV   A,[X+2]
    2D13: 0C 8A    ADC   [main.c:rubout+10],A
    2D15: 38 FC    ADD   SP,0xFC
    2D17: 20       POP   X
    2D18: 7F       RET   
    2D19: 10       PUSH  X
    2D1A: 4F       MOV   X,SP
    2D1B: 38 04    ADD   SP,0x4
    2D1D: 56 03 00 MOV   [X+3],0x0
    2D20: 56 02 00 MOV   [X+2],0x0
    2D23: 80 E1    JMP   0x2E05
    2D25: 3D F5 00 CMP   [X-11],0x0
    2D28: B0 35    JNZ   0x2D5E
    2D2A: 3D F6 10 CMP   [X-10],0x10
    2D2D: B0 30    JNZ   0x2D5E
    2D2F: 52 00    MOV   A,[X+0]
    2D31: 08       PUSH  A
    2D32: 52 01    MOV   A,[X+1]
    2D34: 08       PUSH  A
    2D35: 7C 25 49 LCALL _isxdigit
    2D38: 38 FE    ADD   SP,0xFE
    2D3A: 62 D0 00 MOV   REG[0xD0],0x0
    2D3D: 3C 7F 00 CMP   [__r0],0x0
    2D40: B0 9B    JNZ   0x2DDC
    2D42: 3C 7E 00 CMP   [__r1],0x0
    2D45: B0 96    JNZ   0x2DDC
    2D47: 62 D0 00 MOV   REG[0xD0],0x0
    2D4A: 52 01    MOV   A,[X+1]
    2D4C: 10       PUSH  X
    2D4D: 08       PUSH  A
    2D4E: 52 F8    MOV   A,[X-8]
    2D50: 53 7E    MOV   [__r1],A
    2D52: 52 F7    MOV   A,[X-9]
    2D54: 58 7E    MOV   X,[__r1]
    2D56: 7C 19 E5 LCALL __plcall
    2D59: 38 FF    ADD   SP,0xFF
    2D5B: 20       POP   X
    2D5C: 80 CE    JMP   0x2E2B
    2D5E: 3D F5 00 CMP   [X-11],0x0
    2D61: B0 41    JNZ   0x2DA3
    2D63: 3D F6 08 CMP   [X-10],0x8
    2D66: B0 3C    JNZ   0x2DA3
    2D68: 52 00    MOV   A,[X+0]
    2D6A: 08       PUSH  A
    2D6B: 52 01    MOV   A,[X+1]
    2D6D: 08       PUSH  A
    2D6E: 7C 24 C5 LCALL _isdigit
    2D71: 38 FE    ADD   SP,0xFE
    2D73: 62 D0 00 MOV   REG[0xD0],0x0
    2D76: 3C 7F 00 CMP   [__r0],0x0
    2D79: B0 06    JNZ   0x2D80
    2D7B: 3C 7E 00 CMP   [__r1],0x0
    2D7E: A0 0D    JZ    0x2D8C
    2D80: 52 01    MOV   A,[X+1]
    2D82: 11 38    SUB   A,0x38
    2D84: 52 00    MOV   A,[X+0]
    2D86: 31 80    XOR   A,0x80
    2D88: 19 80    SBB   A,0x80
    2D8A: C0 51    JC    0x2DDC
    2D8C: 62 D0 00 MOV   REG[0xD0],0x0
    2D8F: 52 01    MOV   A,[X+1]
    2D91: 10       PUSH  X
    2D92: 08       PUSH  A
    2D93: 52 F8    MOV   A,[X-8]
    2D95: 53 7E    MOV   [__r1],A
    2D97: 52 F7    MOV   A,[X-9]
    2D99: 58 7E    MOV   X,[__r1]
    2D9B: 7C 19 E5 LCALL __plcall
    2D9E: 38 FF    ADD   SP,0xFF
    2DA0: 20       POP   X
    2DA1: 80 89    JMP   0x2E2B
    2DA3: 52 00    MOV   A,[X+0]
    2DA5: 08       PUSH  A
    2DA6: 52 01    MOV   A,[X+1]
    2DA8: 08       PUSH  A
    2DA9: 7C 24 C5 LCALL _isdigit
    2DAC: 38 FE    ADD   SP,0xFE
    2DAE: 62 D0 00 MOV   REG[0xD0],0x0
    2DB1: 3C 7F 00 CMP   [__r0],0x0
    2DB4: B0 27    JNZ   0x2DDC
    2DB6: 3C 7E 00 CMP   [__r1],0x0
    2DB9: B0 22    JNZ   0x2DDC
    2DBB: 3D 00 00 CMP   [X+0],0x0
    2DBE: B0 06    JNZ   0x2DC5
    2DC0: 3D 01 2D CMP   [X+1],0x2D
    2DC3: A0 18    JZ    0x2DDC
    2DC5: 62 D0 00 MOV   REG[0xD0],0x0
    2DC8: 52 01    MOV   A,[X+1]
    2DCA: 10       PUSH  X
    2DCB: 08       PUSH  A
    2DCC: 52 F8    MOV   A,[X-8]
    2DCE: 53 7E    MOV   [__r1],A
    2DD0: 52 F7    MOV   A,[X-9]
    2DD2: 58 7E    MOV   X,[__r1]
    2DD4: 7C 19 E5 LCALL __plcall
    2DD7: 38 FF    ADD   SP,0xFF
    2DD9: 20       POP   X
    2DDA: 80 50    JMP   0x2E2B
    2DDC: 62 D0 00 MOV   REG[0xD0],0x0
    2DDF: 52 FC    MOV   A,[X-4]
    2DE1: 53 7E    MOV   [__r1],A
    2DE3: 52 FB    MOV   A,[X-5]
    2DE5: 53 7F    MOV   [__r0],A
    2DE7: 51 7E    MOV   A,[__r1]
    2DE9: 01 01    ADD   A,0x1
    2DEB: 54 FC    MOV   [X-4],A
    2DED: 51 7F    MOV   A,[__r0]
    2DEF: 09 00    ADC   A,0x0
    2DF1: 54 FB    MOV   [X-5],A
    2DF3: 52 01    MOV   A,[X+1]
    2DF5: 53 7D    MOV   [__r2],A
    2DF7: 51 7F    MOV   A,[__r0]
    2DF9: 60 D5    MOV   REG[0xD5],A
    2DFB: 51 7D    MOV   A,[__r2]
    2DFD: 3F 7E    MVI   [__r1],A
    2DFF: 56 03 01 MOV   [X+3],0x1
    2E02: 56 02 00 MOV   [X+2],0x0
    2E05: 62 D0 00 MOV   REG[0xD0],0x0
    2E08: 52 FA    MOV   A,[X-6]
    2E0A: 53 7E    MOV   [__r1],A
    2E0C: 52 F9    MOV   A,[X-7]
    2E0E: 10       PUSH  X
    2E0F: 58 7E    MOV   X,[__r1]
    2E11: 7C 19 E5 LCALL __plcall
    2E14: 62 D0 00 MOV   REG[0xD0],0x0
    2E17: 20       POP   X
    2E18: 53 7E    MOV   [__r1],A
    2E1A: 55 7F 00 MOV   [__r0],0x0
    2E1D: 54 01    MOV   [X+1],A
    2E1F: 56 00 00 MOV   [X+0],0x0
    2E22: 3C 7F 00 CMP   [__r0],0x0
    2E25: BE FF    JNZ   0x2D25
    2E27: 39 00    CMP   A,0x0
    2E29: BE FB    JNZ   0x2D25
    2E2B: 62 D0 00 MOV   REG[0xD0],0x0
    2E2E: 52 FC    MOV   A,[X-4]
    2E30: 53 7E    MOV   [__r1],A
    2E32: 52 FB    MOV   A,[X-5]
    2E34: 60 D5    MOV   REG[0xD5],A
    2E36: 50 00    MOV   A,0x0
    2E38: 3F 7E    MVI   [__r1],A
    2E3A: 62 D0 00 MOV   REG[0xD0],0x0
    2E3D: 52 03    MOV   A,[X+3]
    2E3F: 04 8B    ADD   [main.c:rubout+11],A
    2E41: 52 02    MOV   A,[X+2]
    2E43: 0C 8A    ADC   [main.c:rubout+10],A
    2E45: 38 FC    ADD   SP,0xFC
    2E47: 20       POP   X
    2E48: 7F       RET   
__cscanf:
    2E49: 10       PUSH  X
    2E4A: 4F       MOV   X,SP
    2E4B: 38 15    ADD   SP,0x15
    2E4D: 62 D0 00 MOV   REG[0xD0],0x0
    2E50: 55 8B 00 MOV   [main.c:rubout+11],0x0
    2E53: 55 8A 00 MOV   [main.c:rubout+10],0x0
    2E56: 83 12    JMP   0x3169
    2E58: 3D 00 00 CMP   [X+0],0x0
    2E5B: B2 7D    JNZ   0x30D9
    2E5D: 3D 01 25 CMP   [X+1],0x25
    2E60: B2 78    JNZ   0x30D9
    2E62: 62 D0 00 MOV   REG[0xD0],0x0
    2E65: 52 F8    MOV   A,[X-8]
    2E67: 53 7E    MOV   [__r1],A
    2E69: 52 F7    MOV   A,[X-9]
    2E6B: 10       PUSH  X
    2E6C: 58 7E    MOV   X,[__r1]
    2E6E: 28       ROMX  
    2E6F: 20       POP   X
    2E70: 39 6C    CMP   A,0x6C
    2E72: B0 0E    JNZ   0x2E81
    2E74: 56 05 01 MOV   [X+5],0x1
    2E77: 56 04 00 MOV   [X+4],0x0
    2E7A: 77 F8    INC   [X-8]
    2E7C: 0F F7 00 ADC   [X-9],0x0
    2E7F: 80 07    JMP   0x2E87
    2E81: 56 05 00 MOV   [X+5],0x0
    2E84: 56 04 00 MOV   [X+4],0x0
    2E87: 07 F6 FE ADD   [X-10],0xFE
    2E8A: 0F F5 FF ADC   [X-11],0xFF
    2E8D: 62 D0 00 MOV   REG[0xD0],0x0
    2E90: 52 F6    MOV   A,[X-10]
    2E92: 53 7E    MOV   [__r1],A
    2E94: 52 F5    MOV   A,[X-11]
    2E96: 60 D4    MOV   REG[0xD4],A
    2E98: 3E 7E    MVI   A,[__r1]
    2E9A: 54 02    MOV   [X+2],A
    2E9C: 3E 7E    MVI   A,[__r1]
    2E9E: 54 03    MOV   [X+3],A
    2EA0: 52 F8    MOV   A,[X-8]
    2EA2: 53 7E    MOV   [__r1],A
    2EA4: 52 F7    MOV   A,[X-9]
    2EA6: 10       PUSH  X
    2EA7: 58 7E    MOV   X,[__r1]
    2EA9: 28       ROMX  
    2EAA: 20       POP   X
    2EAB: 54 14    MOV   [X+20],A
    2EAD: 56 13 00 MOV   [X+19],0x0
    2EB0: 3D 13 00 CMP   [X+19],0x0
    2EB3: B0 06    JNZ   0x2EBA
    2EB5: 3D 14 63 CMP   [X+20],0x63
    2EB8: A0 56    JZ    0x2F0F
    2EBA: 52 14    MOV   A,[X+20]
    2EBC: 11 64    SUB   A,0x64
    2EBE: 62 D0 00 MOV   REG[0xD0],0x0
    2EC1: 53 76    MOV   [__rY],A
    2EC3: 52 13    MOV   A,[X+19]
    2EC5: 31 80    XOR   A,0x80
    2EC7: 19 80    SBB   A,0x80
    2EC9: 2A 76    OR    A,[__rY]
    2ECB: A1 2E    JZ    0x2FFA
    2ECD: D0 0D    JNC   0x2EDB
    2ECF: 3D 13 00 CMP   [X+19],0x0
    2ED2: B0 06    JNZ   0x2ED9
    2ED4: 3D 14 58 CMP   [X+20],0x58
    2ED7: A0 72    JZ    0x2F4A
    2ED9: 81 ED    JMP   0x30C7
    2EDB: 3D 13 00 CMP   [X+19],0x0
    2EDE: B0 06    JNZ   0x2EE5
    2EE0: 3D 14 6F CMP   [X+20],0x6F
    2EE3: A0 56    JZ    0x2F3A
    2EE5: 3D 13 00 CMP   [X+19],0x0
    2EE8: B0 06    JNZ   0x2EEF
    2EEA: 3D 14 70 CMP   [X+20],0x70
    2EED: A0 5C    JZ    0x2F4A
    2EEF: 3D 13 00 CMP   [X+19],0x0
    2EF2: B0 06    JNZ   0x2EF9
    2EF4: 3D 14 73 CMP   [X+20],0x73
    2EF7: A1 AC    JZ    0x30A4
    2EF9: 3D 13 00 CMP   [X+19],0x0
    2EFC: B0 06    JNZ   0x2F03
    2EFE: 3D 14 75 CMP   [X+20],0x75
    2F01: A0 40    JZ    0x2F42
    2F03: 3D 13 00 CMP   [X+19],0x0
    2F06: B0 06    JNZ   0x2F0D
    2F08: 3D 14 78 CMP   [X+20],0x78
    2F0B: A0 3E    JZ    0x2F4A
    2F0D: 81 B9    JMP   0x30C7
    2F0F: 62 D0 00 MOV   REG[0xD0],0x0
    2F12: 52 FC    MOV   A,[X-4]
    2F14: 53 7E    MOV   [__r1],A
    2F16: 52 FB    MOV   A,[X-5]
    2F18: 10       PUSH  X
    2F19: 58 7E    MOV   X,[__r1]
    2F1B: 7C 19 E5 LCALL __plcall
    2F1E: 62 D0 00 MOV   REG[0xD0],0x0
    2F21: 53 7F    MOV   [__r0],A
    2F23: 20       POP   X
    2F24: 52 03    MOV   A,[X+3]
    2F26: 53 7C    MOV   [__r3],A
    2F28: 52 02    MOV   A,[X+2]
    2F2A: 60 D5    MOV   REG[0xD5],A
    2F2C: 51 7F    MOV   A,[__r0]
    2F2E: 3F 7C    MVI   [__r3],A
    2F30: 62 D0 00 MOV   REG[0xD0],0x0
    2F33: 76 8B    INC   [main.c:rubout+11]
    2F35: 0E 8A 00 ADC   [main.c:rubout+10],0x0
    2F38: 81 99    JMP   0x30D2
    2F3A: 56 07 08 MOV   [X+7],0x8
    2F3D: 56 06 00 MOV   [X+6],0x0
    2F40: 80 0F    JMP   0x2F50
    2F42: 56 07 0A MOV   [X+7],0xA
    2F45: 56 06 00 MOV   [X+6],0x0
    2F48: 80 07    JMP   0x2F50
    2F4A: 56 07 10 MOV   [X+7],0x10
    2F4D: 56 06 00 MOV   [X+6],0x0
    2F50: 52 06    MOV   A,[X+6]
    2F52: 08       PUSH  A
    2F53: 52 07    MOV   A,[X+7]
    2F55: 08       PUSH  A
    2F56: 62 D0 00 MOV   REG[0xD0],0x0
    2F59: 52 FA    MOV   A,[X-6]
    2F5B: 53 7E    MOV   [__r1],A
    2F5D: 52 F9    MOV   A,[X-7]
    2F5F: 08       PUSH  A
    2F60: 51 7E    MOV   A,[__r1]
    2F62: 08       PUSH  A
    2F63: 52 FC    MOV   A,[X-4]
    2F65: 53 7E    MOV   [__r1],A
    2F67: 52 FB    MOV   A,[X-5]
    2F69: 08       PUSH  A
    2F6A: 51 7E    MOV   A,[__r1]
    2F6C: 08       PUSH  A
    2F6D: 5A 7E    MOV   [__r1],X
    2F6F: 06 7E 08 ADD   [__r1],0x8
    2F72: 50 07    MOV   A,0x7
    2F74: 08       PUSH  A
    2F75: 51 7E    MOV   A,[__r1]
    2F77: 08       PUSH  A
    2F78: 9D 9F    CALL  0x2D19
    2F7A: 38 F8    ADD   SP,0xF8
    2F7C: 3D 04 00 CMP   [X+4],0x0
    2F7F: B0 06    JNZ   0x2F86
    2F81: 3D 05 00 CMP   [X+5],0x0
    2F84: A0 3B    JZ    0x2FC0
    2F86: 52 06    MOV   A,[X+6]
    2F88: 08       PUSH  A
    2F89: 52 07    MOV   A,[X+7]
    2F8B: 08       PUSH  A
    2F8C: 50 00    MOV   A,0x0
    2F8E: 08       PUSH  A
    2F8F: 08       PUSH  A
    2F90: 62 D0 00 MOV   REG[0xD0],0x0
    2F93: 5A 7E    MOV   [__r1],X
    2F95: 06 7E 08 ADD   [__r1],0x8
    2F98: 50 07    MOV   A,0x7
    2F9A: 08       PUSH  A
    2F9B: 51 7E    MOV   A,[__r1]
    2F9D: 08       PUSH  A
    2F9E: 7C 1F EC LCALL _strtoul
    2FA1: 38 FA    ADD   SP,0xFA
    2FA3: 62 D0 00 MOV   REG[0xD0],0x0
    2FA6: 52 03    MOV   A,[X+3]
    2FA8: 53 7A    MOV   [__r5],A
    2FAA: 52 02    MOV   A,[X+2]
    2FAC: 60 D5    MOV   REG[0xD5],A
    2FAE: 51 7F    MOV   A,[__r0]
    2FB0: 3F 7A    MVI   [__r5],A
    2FB2: 51 7E    MOV   A,[__r1]
    2FB4: 3F 7A    MVI   [__r5],A
    2FB6: 51 7D    MOV   A,[__r2]
    2FB8: 3F 7A    MVI   [__r5],A
    2FBA: 51 7C    MOV   A,[__r3]
    2FBC: 3F 7A    MVI   [__r5],A
    2FBE: 81 13    JMP   0x30D2
    2FC0: 52 06    MOV   A,[X+6]
    2FC2: 08       PUSH  A
    2FC3: 52 07    MOV   A,[X+7]
    2FC5: 08       PUSH  A
    2FC6: 50 00    MOV   A,0x0
    2FC8: 08       PUSH  A
    2FC9: 08       PUSH  A
    2FCA: 62 D0 00 MOV   REG[0xD0],0x0
    2FCD: 5A 7E    MOV   [__r1],X
    2FCF: 06 7E 08 ADD   [__r1],0x8
    2FD2: 50 07    MOV   A,0x7
    2FD4: 08       PUSH  A
    2FD5: 51 7E    MOV   A,[__r1]
    2FD7: 08       PUSH  A
    2FD8: 7C 1F EC LCALL _strtoul
    2FDB: 38 FA    ADD   SP,0xFA
    2FDD: 62 D0 00 MOV   REG[0xD0],0x0
    2FE0: 51 7C    MOV   A,[__r3]
    2FE2: 53 7E    MOV   [__r1],A
    2FE4: 51 7D    MOV   A,[__r2]
    2FE6: 53 7F    MOV   [__r0],A
    2FE8: 52 03    MOV   A,[X+3]
    2FEA: 53 7C    MOV   [__r3],A
    2FEC: 52 02    MOV   A,[X+2]
    2FEE: 60 D5    MOV   REG[0xD5],A
    2FF0: 51 7F    MOV   A,[__r0]
    2FF2: 3F 7C    MVI   [__r3],A
    2FF4: 51 7E    MOV   A,[__r1]
    2FF6: 3F 7C    MVI   [__r3],A
    2FF8: 80 D9    JMP   0x30D2
    2FFA: 50 00    MOV   A,0x0
    2FFC: 08       PUSH  A
    2FFD: 50 0A    MOV   A,0xA
    2FFF: 08       PUSH  A
    3000: 62 D0 00 MOV   REG[0xD0],0x0
    3003: 52 FA    MOV   A,[X-6]
    3005: 53 7E    MOV   [__r1],A
    3007: 52 F9    MOV   A,[X-7]
    3009: 08       PUSH  A
    300A: 51 7E    MOV   A,[__r1]
    300C: 08       PUSH  A
    300D: 52 FC    MOV   A,[X-4]
    300F: 53 7E    MOV   [__r1],A
    3011: 52 FB    MOV   A,[X-5]
    3013: 08       PUSH  A
    3014: 51 7E    MOV   A,[__r1]
    3016: 08       PUSH  A
    3017: 5A 7E    MOV   [__r1],X
    3019: 06 7E 08 ADD   [__r1],0x8
    301C: 50 07    MOV   A,0x7
    301E: 08       PUSH  A
    301F: 51 7E    MOV   A,[__r1]
    3021: 08       PUSH  A
    3022: 9C F5    CALL  0x2D19
    3024: 38 F8    ADD   SP,0xF8
    3026: 3D 04 00 CMP   [X+4],0x0
    3029: B0 06    JNZ   0x3030
    302B: 3D 05 00 CMP   [X+5],0x0
    302E: A0 3B    JZ    0x306A
    3030: 50 00    MOV   A,0x0
    3032: 08       PUSH  A
    3033: 50 0A    MOV   A,0xA
    3035: 08       PUSH  A
    3036: 50 00    MOV   A,0x0
    3038: 08       PUSH  A
    3039: 08       PUSH  A
    303A: 62 D0 00 MOV   REG[0xD0],0x0
    303D: 5A 7E    MOV   [__r1],X
    303F: 06 7E 08 ADD   [__r1],0x8
    3042: 50 07    MOV   A,0x7
    3044: 08       PUSH  A
    3045: 51 7E    MOV   A,[__r1]
    3047: 08       PUSH  A
    3048: 7C 1B CA LCALL _strtol
    304B: 38 FA    ADD   SP,0xFA
    304D: 62 D0 00 MOV   REG[0xD0],0x0
    3050: 52 03    MOV   A,[X+3]
    3052: 53 7A    MOV   [__r5],A
    3054: 52 02    MOV   A,[X+2]
    3056: 60 D5    MOV   REG[0xD5],A
    3058: 51 7F    MOV   A,[__r0]
    305A: 3F 7A    MVI   [__r5],A
    305C: 51 7E    MOV   A,[__r1]
    305E: 3F 7A    MVI   [__r5],A
    3060: 51 7D    MOV   A,[__r2]
    3062: 3F 7A    MVI   [__r5],A
    3064: 51 7C    MOV   A,[__r3]
    3066: 3F 7A    MVI   [__r5],A
    3068: 80 69    JMP   0x30D2
    306A: 50 00    MOV   A,0x0
    306C: 08       PUSH  A
    306D: 50 0A    MOV   A,0xA
    306F: 08       PUSH  A
    3070: 50 00    MOV   A,0x0
    3072: 08       PUSH  A
    3073: 08       PUSH  A
    3074: 62 D0 00 MOV   REG[0xD0],0x0
    3077: 5A 7E    MOV   [__r1],X
    3079: 06 7E 08 ADD   [__r1],0x8
    307C: 50 07    MOV   A,0x7
    307E: 08       PUSH  A
    307F: 51 7E    MOV   A,[__r1]
    3081: 08       PUSH  A
    3082: 7C 1B CA LCALL _strtol
    3085: 38 FA    ADD   SP,0xFA
    3087: 62 D0 00 MOV   REG[0xD0],0x0
    308A: 51 7C    MOV   A,[__r3]
    308C: 53 7E    MOV   [__r1],A
    308E: 51 7D    MOV   A,[__r2]
    3090: 53 7F    MOV   [__r0],A
    3092: 52 03    MOV   A,[X+3]
    3094: 53 7C    MOV   [__r3],A
    3096: 52 02    MOV   A,[X+2]
    3098: 60 D5    MOV   REG[0xD5],A
    309A: 51 7F    MOV   A,[__r0]
    309C: 3F 7C    MVI   [__r3],A
    309E: 51 7E    MOV   A,[__r1]
    30A0: 3F 7C    MVI   [__r3],A
    30A2: 80 2F    JMP   0x30D2
    30A4: 62 D0 00 MOV   REG[0xD0],0x0
    30A7: 52 FA    MOV   A,[X-6]
    30A9: 53 7E    MOV   [__r1],A
    30AB: 52 F9    MOV   A,[X-7]
    30AD: 08       PUSH  A
    30AE: 51 7E    MOV   A,[__r1]
    30B0: 08       PUSH  A
    30B1: 52 FC    MOV   A,[X-4]
    30B3: 53 7E    MOV   [__r1],A
    30B5: 52 FB    MOV   A,[X-5]
    30B7: 08       PUSH  A
    30B8: 51 7E    MOV   A,[__r1]
    30BA: 08       PUSH  A
    30BB: 52 02    MOV   A,[X+2]
    30BD: 08       PUSH  A
    30BE: 52 03    MOV   A,[X+3]
    30C0: 08       PUSH  A
    30C1: 9B AE    CALL  0x2C71
    30C3: 38 FA    ADD   SP,0xFA
    30C5: 80 0C    JMP   0x30D2
    30C7: 62 D0 00 MOV   REG[0xD0],0x0
    30CA: 55 7E 00 MOV   [__r1],0x0
    30CD: 55 7F 00 MOV   [__r0],0x0
    30D0: 80 D9    JMP   0x31AA
    30D2: 77 F8    INC   [X-8]
    30D4: 0F F7 00 ADC   [X-9],0x0
    30D7: 80 91    JMP   0x3169
    30D9: 52 00    MOV   A,[X+0]
    30DB: 08       PUSH  A
    30DC: 52 01    MOV   A,[X+1]
    30DE: 08       PUSH  A
    30DF: 7C 25 07 LCALL _isspace
    30E2: 38 FE    ADD   SP,0xFE
    30E4: 62 D0 00 MOV   REG[0xD0],0x0
    30E7: 3C 7F 00 CMP   [__r0],0x0
    30EA: B0 06    JNZ   0x30F1
    30EC: 3C 7E 00 CMP   [__r1],0x0
    30EF: A0 56    JZ    0x3146
    30F1: 62 D0 00 MOV   REG[0xD0],0x0
    30F4: 52 FC    MOV   A,[X-4]
    30F6: 53 7E    MOV   [__r1],A
    30F8: 52 FB    MOV   A,[X-5]
    30FA: 10       PUSH  X
    30FB: 58 7E    MOV   X,[__r1]
    30FD: 7C 19 E5 LCALL __plcall
    3100: 62 D0 00 MOV   REG[0xD0],0x0
    3103: 20       POP   X
    3104: 53 7E    MOV   [__r1],A
    3106: 55 7F 00 MOV   [__r0],0x0
    3109: 54 01    MOV   [X+1],A
    310B: 56 00 00 MOV   [X+0],0x0
    310E: 3C 7F 00 CMP   [__r0],0x0
    3111: B0 05    JNZ   0x3117
    3113: 39 00    CMP   A,0x0
    3115: A0 19    JZ    0x312F
    3117: 52 00    MOV   A,[X+0]
    3119: 08       PUSH  A
    311A: 52 01    MOV   A,[X+1]
    311C: 08       PUSH  A
    311D: 7C 25 07 LCALL _isspace
    3120: 38 FE    ADD   SP,0xFE
    3122: 62 D0 00 MOV   REG[0xD0],0x0
    3125: 3C 7F 00 CMP   [__r0],0x0
    3128: BF C8    JNZ   0x30F1
    312A: 3C 7E 00 CMP   [__r1],0x0
    312D: BF C3    JNZ   0x30F1
    312F: 62 D0 00 MOV   REG[0xD0],0x0
    3132: 52 01    MOV   A,[X+1]
    3134: 10       PUSH  X
    3135: 08       PUSH  A
    3136: 52 FA    MOV   A,[X-6]
    3138: 53 7E    MOV   [__r1],A
    313A: 52 F9    MOV   A,[X-7]
    313C: 58 7E    MOV   X,[__r1]
    313E: 7C 19 E5 LCALL __plcall
    3141: 38 FF    ADD   SP,0xFF
    3143: 20       POP   X
    3144: 80 24    JMP   0x3169
    3146: 62 D0 00 MOV   REG[0xD0],0x0
    3149: 52 FC    MOV   A,[X-4]
    314B: 53 7E    MOV   [__r1],A
    314D: 52 FB    MOV   A,[X-5]
    314F: 10       PUSH  X
    3150: 58 7E    MOV   X,[__r1]
    3152: 7C 19 E5 LCALL __plcall
    3155: 62 D0 00 MOV   REG[0xD0],0x0
    3158: 20       POP   X
    3159: 53 7E    MOV   [__r1],A
    315B: 50 00    MOV   A,0x0
    315D: 3B 00    CMP   A,[X+0]
    315F: B0 07    JNZ   0x3167
    3161: 51 7E    MOV   A,[__r1]
    3163: 3B 01    CMP   A,[X+1]
    3165: A0 03    JZ    0x3169
    3167: 80 32    JMP   0x319A
    3169: 62 D0 00 MOV   REG[0xD0],0x0
    316C: 52 F8    MOV   A,[X-8]
    316E: 53 7E    MOV   [__r1],A
    3170: 52 F7    MOV   A,[X-9]
    3172: 53 7F    MOV   [__r0],A
    3174: 51 7E    MOV   A,[__r1]
    3176: 01 01    ADD   A,0x1
    3178: 54 F8    MOV   [X-8],A
    317A: 51 7F    MOV   A,[__r0]
    317C: 09 00    ADC   A,0x0
    317E: 54 F7    MOV   [X-9],A
    3180: 51 7F    MOV   A,[__r0]
    3182: 10       PUSH  X
    3183: 58 7E    MOV   X,[__r1]
    3185: 28       ROMX  
    3186: 20       POP   X
    3187: 53 7E    MOV   [__r1],A
    3189: 55 7F 00 MOV   [__r0],0x0
    318C: 54 01    MOV   [X+1],A
    318E: 56 00 00 MOV   [X+0],0x0
    3191: 3C 7F 00 CMP   [__r0],0x0
    3194: BC C3    JNZ   0x2E58
    3196: 39 00    CMP   A,0x0
    3198: BC BF    JNZ   0x2E58
    319A: 62 D0 00 MOV   REG[0xD0],0x0
    319D: 51 8B    MOV   A,[main.c:rubout+11]
    319F: 08       PUSH  A
    31A0: 51 8A    MOV   A,[main.c:rubout+10]
    31A2: 62 D0 00 MOV   REG[0xD0],0x0
    31A5: 53 7F    MOV   [__r0],A
    31A7: 18       POP   A
    31A8: 53 7E    MOV   [__r1],A
    31AA: 38 EB    ADD   SP,0xEB
    31AC: 20       POP   X
    31AD: 7F       RET   
_cstrcspn:
    31AE: 10       PUSH  X
    31AF: 4F       MOV   X,SP
    31B0: 38 04    ADD   SP,0x4
    31B2: 56 03 00 MOV   [X+3],0x0
    31B5: 56 02 00 MOV   [X+2],0x0
    31B8: 80 5A    JMP   0x3213
    31BA: 56 01 00 MOV   [X+1],0x0
    31BD: 56 00 00 MOV   [X+0],0x0
    31C0: 80 32    JMP   0x31F3
    31C2: 62 D0 00 MOV   REG[0xD0],0x0
    31C5: 52 01    MOV   A,[X+1]
    31C7: 03 FA    ADD   A,[X-6]
    31C9: 53 7E    MOV   [__r1],A
    31CB: 52 00    MOV   A,[X+0]
    31CD: 0B F9    ADC   A,[X-7]
    31CF: 10       PUSH  X
    31D0: 58 7E    MOV   X,[__r1]
    31D2: 28       ROMX  
    31D3: 20       POP   X
    31D4: 53 7F    MOV   [__r0],A
    31D6: 52 FC    MOV   A,[X-4]
    31D8: 53 7C    MOV   [__r3],A
    31DA: 52 FB    MOV   A,[X-5]
    31DC: 60 D4    MOV   REG[0xD4],A
    31DE: 3E 7C    MVI   A,[__r3]
    31E0: 3A 7F    CMP   A,[__r0]
    31E2: B0 0B    JNZ   0x31EE
    31E4: 52 03    MOV   A,[X+3]
    31E6: 53 7E    MOV   [__r1],A
    31E8: 52 02    MOV   A,[X+2]
    31EA: 53 7F    MOV   [__r0],A
    31EC: 80 3F    JMP   0x322C
    31EE: 77 01    INC   [X+1]
    31F0: 0F 00 00 ADC   [X+0],0x0
    31F3: 62 D0 00 MOV   REG[0xD0],0x0
    31F6: 52 01    MOV   A,[X+1]
    31F8: 03 FA    ADD   A,[X-6]
    31FA: 53 7E    MOV   [__r1],A
    31FC: 52 00    MOV   A,[X+0]
    31FE: 0B F9    ADC   A,[X-7]
    3200: 10       PUSH  X
    3201: 58 7E    MOV   X,[__r1]
    3203: 28       ROMX  
    3204: 20       POP   X
    3205: 39 00    CMP   A,0x0
    3207: BF BA    JNZ   0x31C2
    3209: 77 FC    INC   [X-4]
    320B: 0F FB 00 ADC   [X-5],0x0
    320E: 77 03    INC   [X+3]
    3210: 0F 02 00 ADC   [X+2],0x0
    3213: 62 D0 00 MOV   REG[0xD0],0x0
    3216: 52 FC    MOV   A,[X-4]
    3218: 53 7E    MOV   [__r1],A
    321A: 52 FB    MOV   A,[X-5]
    321C: 60 D4    MOV   REG[0xD4],A
    321E: 3E 7E    MVI   A,[__r1]
    3220: 39 00    CMP   A,0x0
    3222: BF 97    JNZ   0x31BA
    3224: 52 03    MOV   A,[X+3]
    3226: 53 7E    MOV   [__r1],A
    3228: 52 02    MOV   A,[X+2]
    322A: 53 7F    MOV   [__r0],A
    322C: 38 FC    ADD   SP,0xFC
    322E: 20       POP   X
    322F: 7F       RET   
_cstrpbrk:
    3230: 10       PUSH  X
    3231: 4F       MOV   X,SP
    3232: 38 02    ADD   SP,0x2
    3234: 52 F9    MOV   A,[X-7]
    3236: 08       PUSH  A
    3237: 52 FA    MOV   A,[X-6]
    3239: 08       PUSH  A
    323A: 52 FB    MOV   A,[X-5]
    323C: 08       PUSH  A
    323D: 52 FC    MOV   A,[X-4]
    323F: 08       PUSH  A
    3240: 7C 31 AE LCALL _cstrcspn
    3243: 38 FC    ADD   SP,0xFC
    3245: 62 D0 00 MOV   REG[0xD0],0x0
    3248: 51 7E    MOV   A,[__r1]
    324A: 54 01    MOV   [X+1],A
    324C: 51 7F    MOV   A,[__r0]
    324E: 54 00    MOV   [X+0],A
    3250: 52 01    MOV   A,[X+1]
    3252: 03 FC    ADD   A,[X-4]
    3254: 53 7E    MOV   [__r1],A
    3256: 52 00    MOV   A,[X+0]
    3258: 0B FB    ADC   A,[X-5]
    325A: 60 D4    MOV   REG[0xD4],A
    325C: 3E 7E    MVI   A,[__r1]
    325E: 39 00    CMP   A,0x0
    3260: A0 0F    JZ    0x3270
    3262: 52 01    MOV   A,[X+1]
    3264: 03 FC    ADD   A,[X-4]
    3266: 53 7E    MOV   [__r1],A
    3268: 52 00    MOV   A,[X+0]
    326A: 0B FB    ADC   A,[X-5]
    326C: 53 7F    MOV   [__r0],A
    326E: 80 0A    JMP   0x3279
    3270: 62 D0 00 MOV   REG[0xD0],0x0
    3273: 55 7E 00 MOV   [__r1],0x0
    3276: 55 7F 00 MOV   [__r0],0x0
    3279: 38 FE    ADD   SP,0xFE
    327B: 20       POP   X
    327C: 7F       RET   
_cstrspn:
    327D: 10       PUSH  X
    327E: 4F       MOV   X,SP
    327F: 38 04    ADD   SP,0x4
    3281: 56 03 00 MOV   [X+3],0x0
    3284: 56 02 00 MOV   [X+2],0x0
    3287: 80 81    JMP   0x3309
    3289: 56 01 00 MOV   [X+1],0x0
    328C: 56 00 00 MOV   [X+0],0x0
    328F: 80 2E    JMP   0x32BE
    3291: 62 D0 00 MOV   REG[0xD0],0x0
    3294: 52 01    MOV   A,[X+1]
    3296: 03 FA    ADD   A,[X-6]
    3298: 53 7E    MOV   [__r1],A
    329A: 52 00    MOV   A,[X+0]
    329C: 0B F9    ADC   A,[X-7]
    329E: 10       PUSH  X
    329F: 58 7E    MOV   X,[__r1]
    32A1: 28       ROMX  
    32A2: 20       POP   X
    32A3: 53 7F    MOV   [__r0],A
    32A5: 52 03    MOV   A,[X+3]
    32A7: 03 FC    ADD   A,[X-4]
    32A9: 53 7C    MOV   [__r3],A
    32AB: 52 02    MOV   A,[X+2]
    32AD: 0B FB    ADC   A,[X-5]
    32AF: 60 D4    MOV   REG[0xD4],A
    32B1: 3E 7C    MVI   A,[__r3]
    32B3: 3A 7F    CMP   A,[__r0]
    32B5: B0 03    JNZ   0x32B9
    32B7: 80 1C    JMP   0x32D4
    32B9: 77 01    INC   [X+1]
    32BB: 0F 00 00 ADC   [X+0],0x0
    32BE: 62 D0 00 MOV   REG[0xD0],0x0
    32C1: 52 01    MOV   A,[X+1]
    32C3: 03 FA    ADD   A,[X-6]
    32C5: 53 7E    MOV   [__r1],A
    32C7: 52 00    MOV   A,[X+0]
    32C9: 0B F9    ADC   A,[X-7]
    32CB: 10       PUSH  X
    32CC: 58 7E    MOV   X,[__r1]
    32CE: 28       ROMX  
    32CF: 20       POP   X
    32D0: 39 00    CMP   A,0x0
    32D2: BF BE    JNZ   0x3291
    32D4: 62 D0 00 MOV   REG[0xD0],0x0
    32D7: 52 01    MOV   A,[X+1]
    32D9: 03 FA    ADD   A,[X-6]
    32DB: 53 7E    MOV   [__r1],A
    32DD: 52 00    MOV   A,[X+0]
    32DF: 0B F9    ADC   A,[X-7]
    32E1: 10       PUSH  X
    32E2: 58 7E    MOV   X,[__r1]
    32E4: 28       ROMX  
    32E5: 20       POP   X
    32E6: 53 7F    MOV   [__r0],A
    32E8: 52 03    MOV   A,[X+3]
    32EA: 03 FC    ADD   A,[X-4]
    32EC: 53 7C    MOV   [__r3],A
    32EE: 52 02    MOV   A,[X+2]
    32F0: 0B FB    ADC   A,[X-5]
    32F2: 60 D4    MOV   REG[0xD4],A
    32F4: 3E 7C    MVI   A,[__r3]
    32F6: 3A 7F    CMP   A,[__r0]
    32F8: A0 0B    JZ    0x3304
    32FA: 52 03    MOV   A,[X+3]
    32FC: 53 7E    MOV   [__r1],A
    32FE: 52 02    MOV   A,[X+2]
    3300: 53 7F    MOV   [__r0],A
    3302: 80 23    JMP   0x3326
    3304: 77 03    INC   [X+3]
    3306: 0F 02 00 ADC   [X+2],0x0
    3309: 62 D0 00 MOV   REG[0xD0],0x0
    330C: 52 03    MOV   A,[X+3]
    330E: 03 FC    ADD   A,[X-4]
    3310: 53 7E    MOV   [__r1],A
    3312: 52 02    MOV   A,[X+2]
    3314: 0B FB    ADC   A,[X-5]
    3316: 60 D4    MOV   REG[0xD4],A
    3318: 3E 7E    MVI   A,[__r1]
    331A: 39 00    CMP   A,0x0
    331C: BF 6C    JNZ   0x3289
    331E: 52 03    MOV   A,[X+3]
    3320: 53 7E    MOV   [__r1],A
    3322: 52 02    MOV   A,[X+2]
    3324: 53 7F    MOV   [__r0],A
    3326: 38 FC    ADD   SP,0xFC
    3328: 20       POP   X
    3329: 7F       RET   
_cstrtok:
    332A: 10       PUSH  X
    332B: 4F       MOV   X,SP
    332C: 38 06    ADD   SP,0x6
    332E: 3D FB 00 CMP   [X-5],0x0
    3331: B0 06    JNZ   0x3338
    3333: 3D FC 00 CMP   [X-4],0x0
    3336: A0 0B    JZ    0x3342
    3338: 52 FC    MOV   A,[X-4]
    333A: 54 05    MOV   [X+5],A
    333C: 52 FB    MOV   A,[X-5]
    333E: 54 04    MOV   [X+4],A
    3340: 80 0C    JMP   0x334D
    3342: 62 D0 00 MOV   REG[0xD0],0x0
    3345: 51 87    MOV   A,[main.c:rubout+7]
    3347: 54 05    MOV   [X+5],A
    3349: 51 86    MOV   A,[main.c:rubout+6]
    334B: 54 04    MOV   [X+4],A
    334D: 52 05    MOV   A,[X+5]
    334F: 54 01    MOV   [X+1],A
    3351: 52 04    MOV   A,[X+4]
    3353: 54 00    MOV   [X+0],A
    3355: 3D 00 00 CMP   [X+0],0x0
    3358: B0 11    JNZ   0x336A
    335A: 3D 01 00 CMP   [X+1],0x0
    335D: B0 0C    JNZ   0x336A
    335F: 62 D0 00 MOV   REG[0xD0],0x0
    3362: 55 7E 00 MOV   [__r1],0x0
    3365: 55 7F 00 MOV   [__r0],0x0
    3368: 80 A0    JMP   0x3409
    336A: 52 F9    MOV   A,[X-7]
    336C: 08       PUSH  A
    336D: 52 FA    MOV   A,[X-6]
    336F: 08       PUSH  A
    3370: 52 00    MOV   A,[X+0]
    3372: 08       PUSH  A
    3373: 52 01    MOV   A,[X+1]
    3375: 08       PUSH  A
    3376: 7C 32 7D LCALL _cstrspn
    3379: 38 FC    ADD   SP,0xFC
    337B: 62 D0 00 MOV   REG[0xD0],0x0
    337E: 51 7E    MOV   A,[__r1]
    3380: 03 01    ADD   A,[X+1]
    3382: 54 01    MOV   [X+1],A
    3384: 51 7F    MOV   A,[__r0]
    3386: 0B 00    ADC   A,[X+0]
    3388: 54 00    MOV   [X+0],A
    338A: 52 01    MOV   A,[X+1]
    338C: 53 7E    MOV   [__r1],A
    338E: 52 00    MOV   A,[X+0]
    3390: 60 D4    MOV   REG[0xD4],A
    3392: 3E 7E    MVI   A,[__r1]
    3394: 39 00    CMP   A,0x0
    3396: B0 09    JNZ   0x33A0
    3398: 55 7E 00 MOV   [__r1],0x0
    339B: 55 7F 00 MOV   [__r0],0x0
    339E: 80 6A    JMP   0x3409
    33A0: 52 F9    MOV   A,[X-7]
    33A2: 08       PUSH  A
    33A3: 52 FA    MOV   A,[X-6]
    33A5: 08       PUSH  A
    33A6: 52 00    MOV   A,[X+0]
    33A8: 08       PUSH  A
    33A9: 52 01    MOV   A,[X+1]
    33AB: 08       PUSH  A
    33AC: 7C 32 30 LCALL _cstrpbrk
    33AF: 38 FC    ADD   SP,0xFC
    33B1: 62 D0 00 MOV   REG[0xD0],0x0
    33B4: 51 7E    MOV   A,[__r1]
    33B6: 54 03    MOV   [X+3],A
    33B8: 51 7F    MOV   A,[__r0]
    33BA: 54 02    MOV   [X+2],A
    33BC: 3D 02 00 CMP   [X+2],0x0
    33BF: B0 06    JNZ   0x33C6
    33C1: 3D 03 00 CMP   [X+3],0x0
    33C4: A0 2E    JZ    0x33F3
    33C6: 62 D0 00 MOV   REG[0xD0],0x0
    33C9: 52 03    MOV   A,[X+3]
    33CB: 53 7E    MOV   [__r1],A
    33CD: 52 02    MOV   A,[X+2]
    33CF: 60 D4    MOV   REG[0xD4],A
    33D1: 3E 7E    MVI   A,[__r1]
    33D3: 39 00    CMP   A,0x0
    33D5: A0 1D    JZ    0x33F3
    33D7: 52 03    MOV   A,[X+3]
    33D9: 53 7E    MOV   [__r1],A
    33DB: 52 02    MOV   A,[X+2]
    33DD: 53 7F    MOV   [__r0],A
    33DF: 51 7E    MOV   A,[__r1]
    33E1: 01 01    ADD   A,0x1
    33E3: 54 03    MOV   [X+3],A
    33E5: 51 7F    MOV   A,[__r0]
    33E7: 09 00    ADC   A,0x0
    33E9: 54 02    MOV   [X+2],A
    33EB: 51 7F    MOV   A,[__r0]
    33ED: 60 D5    MOV   REG[0xD5],A
    33EF: 50 00    MOV   A,0x0
    33F1: 3F 7E    MVI   [__r1],A
    33F3: 62 D0 00 MOV   REG[0xD0],0x0
    33F6: 52 03    MOV   A,[X+3]
    33F8: 53 87    MOV   [main.c:rubout+7],A
    33FA: 52 02    MOV   A,[X+2]
    33FC: 53 86    MOV   [main.c:rubout+6],A
    33FE: 62 D0 00 MOV   REG[0xD0],0x0
    3401: 52 01    MOV   A,[X+1]
    3403: 53 7E    MOV   [__r1],A
    3405: 52 00    MOV   A,[X+0]
    3407: 53 7F    MOV   [__r0],A
    3409: 38 FA    ADD   SP,0xFA
    340B: 20       POP   X
    340C: 7F       RET   
