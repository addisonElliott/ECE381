FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 0D BC LJMP  _Counter16_ISR     (0153)     ljmp	_Counter16_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 08 8E LJMP  _UART_TX_ISR       (0157)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 08 8F LJMP  _UART_RX_ISR       (0161)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 0B FF LJMP  _I2CHW_ISR         (0213)     ljmp	_I2CHW_ISR
0063: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [errno+111],0x0    (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [errno+112],0x0    (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 08 2C LCALL 0x082C             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 07    MOV   A,0x7              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 1F    MOV   X,0x1F             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 7C    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 7C    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 7C    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 7B    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 7C    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 7C FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 7B    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 7B    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 7C    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 7C FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 7B    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 10 94 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0727: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_i2cram_Bank1
                                        (0019) export LoadConfigTBL_i2cram_Bank0
                                        (0020) export LoadConfigTBL_i2cram_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_i2cram_Bank0:
                                        (0023) ;  Instance name Counter16, User Module Counter16
                                        (0024) ;       Instance name Counter16, Block Name CNTR16_LSB(DBB00)
                                        (0025) 	db		23h, 00h		;Counter16_CONTROL_LSB_REG(DBB00CR0)
                                        (0026) 	db		21h, 9eh		;Counter16_PERIOD_LSB_REG(DBB00DR1)
                                        (0027) 	db		22h, 4fh		;Counter16_COMPARE_LSB_REG(DBB00DR2)
                                        (0028) ;       Instance name Counter16, Block Name CNTR16_MSB(DBB01)
                                        (0029) 	db		27h, 00h		;Counter16_CONTROL_MSB_REG(DBB01CR0)
                                        (0030) 	db		25h, 00h		;Counter16_PERIOD_MSB_REG(DBB01DR1)
                                        (0031) 	db		26h, 00h		;Counter16_COMPARE_MSB_REG(DBB01DR2)
                                        (0032) ;  Instance name I2CHW, User Module I2CHW
                                        (0033) ;  Instance name UART, User Module UART
                                        (0034) ;       Instance name UART, Block Name RX(DCB03)
                                        (0035) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0036) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0037) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0038) ;       Instance name UART, Block Name TX(DCB02)
                                        (0039) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0040) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0041) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0042) ;  Global Register values Bank 0
                                        (0043) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0044) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0045) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0046) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0047) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0048) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0049) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0050) 	db		b0h, 30h		; Row_0_InputMux register (RDI0RI)
                                        (0051) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0052) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0053) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0054) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0055) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0056) 	db		b6h, 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0057) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0058) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0059) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0060) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0061) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0062) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0063) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0064) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0065) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0066) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0067) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0068) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0069) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0070) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0071) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0072) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0073) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0074) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0075) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0076) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0077) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0078) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0079) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0080) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0081) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0082) 	db		ffh
                                        (0083) LoadConfigTBL_i2cram_Bank1:
                                        (0084) ;  Instance name Counter16, User Module Counter16
                                        (0085) ;       Instance name Counter16, Block Name CNTR16_LSB(DBB00)
                                        (0086) 	db		20h, 11h		;Counter16_FUNC_LSB_REG(DBB00FN)
                                        (0087) 	db		21h, 15h		;Counter16_INPUT_LSB_REG(DBB00IN)
                                        (0088) 	db		22h, 40h		;Counter16_OUTPUT_LSB_REG(DBB00OU)
                                        (0089) ;       Instance name Counter16, Block Name CNTR16_MSB(DBB01)
                                        (0090) 	db		24h, 31h		;Counter16_FUNC_MSB_REG(DBB01FN)
                                        (0091) 	db		25h, 35h		;Counter16_INPUT_MSB_REG(DBB01IN)
                                        (0092) 	db		26h, 44h		;Counter16_OUTPUT_MSB_REG(DBB01OU)
                                        (0093) ;  Instance name I2CHW, User Module I2CHW
                                        (0094) ;  Instance name UART, User Module UART
                                        (0095) ;       Instance name UART, Block Name RX(DCB03)
                                        (0096) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0097) 	db		2dh, e8h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0098) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0099) ;       Instance name UART, Block Name TX(DCB02)
                                        (0100) 	db		28h, 0dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0101) 	db		29h, 08h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0102) 	db		2ah, 47h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0103) ;  Global Register values Bank 1
                                        (0104) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0105) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0106) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0107) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0108) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0109) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0110) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0111) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0112) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0113) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0114) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0115) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0116) 	db		e1h, 1fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0117) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0118) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0119) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0120) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0121) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0122) 	db		ffh
                                        (0123) AREA psoc_config(rom, rel)
                                        (0124) LoadConfigTBL_i2cram_Ordered:
                                        (0125) ;  Ordered Global Register values
                                        (0126) 	M8C_SetBank0
0729: 62 00 00 MOV   REG[0x0],0x0       (0127) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
072C: 71 10    OR    F,0x10             
                                        (0128) 	M8C_SetBank1
072E: 62 00 00 MOV   REG[0x0],0x0       (0129) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0731: 62 01 FF MOV   REG[0x1],0xFF      (0130) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0734: 70 EF    AND   F,0xEF             
                                        (0131) 	M8C_SetBank0
0736: 62 03 FF MOV   REG[0x3],0xFF      (0132) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0739: 62 02 00 MOV   REG[0x2],0x0       (0133) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
073C: 71 10    OR    F,0x10             
                                        (0134) 	M8C_SetBank1
073E: 62 02 00 MOV   REG[0x2],0x0       (0135) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0741: 62 03 00 MOV   REG[0x3],0x0       (0136) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0744: 70 EF    AND   F,0xEF             
                                        (0137) 	M8C_SetBank0
0746: 62 01 00 MOV   REG[0x1],0x0       (0138) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0749: 62 04 A0 MOV   REG[0x4],0xA0      (0139) 	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
074C: 71 10    OR    F,0x10             
                                        (0140) 	M8C_SetBank1
074E: 62 04 A0 MOV   REG[0x4],0xA0      (0141) 	mov	reg[04h], a0h		; Port_1_DriveMode_0 register (PRT1DM0)
0751: 62 05 FF MOV   REG[0x5],0xFF      (0142) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0754: 70 EF    AND   F,0xEF             
                                        (0143) 	M8C_SetBank0
0756: 62 07 BF MOV   REG[0x7],0xBF      (0144) 	mov	reg[07h], bfh		; Port_1_DriveMode_2 register (PRT1DM2)
0759: 62 06 40 MOV   REG[0x6],0x40      (0145) 	mov	reg[06h], 40h		; Port_1_GlobalSelect register (PRT1GS)
075C: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
075E: 62 06 00 MOV   REG[0x6],0x0       (0147) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0761: 62 07 00 MOV   REG[0x7],0x0       (0148) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0764: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
0766: 62 05 00 MOV   REG[0x5],0x0       (0150) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0769: 62 08 00 MOV   REG[0x8],0x0       (0151) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
076C: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
076E: 62 08 80 MOV   REG[0x8],0x80      (0153) 	mov	reg[08h], 80h		; Port_2_DriveMode_0 register (PRT2DM0)
0771: 62 09 7F MOV   REG[0x9],0x7F      (0154) 	mov	reg[09h], 7fh		; Port_2_DriveMode_1 register (PRT2DM1)
0774: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
0776: 62 0B 7F MOV   REG[0xB],0x7F      (0156) 	mov	reg[0bh], 7fh		; Port_2_DriveMode_2 register (PRT2DM2)
0779: 62 0A 80 MOV   REG[0xA],0x80      (0157) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
077C: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
077E: 62 0A 00 MOV   REG[0xA],0x0       (0159) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0781: 62 0B 00 MOV   REG[0xB],0x0       (0160) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0784: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
0786: 62 09 00 MOV   REG[0x9],0x0       (0162) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0789: 62 0C 00 MOV   REG[0xC],0x0       (0163) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
078C: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
078E: 62 0C 00 MOV   REG[0xC],0x0       (0165) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0791: 62 0D 00 MOV   REG[0xD],0x0       (0166) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0794: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
0796: 62 0F 00 MOV   REG[0xF],0x0       (0168) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0799: 62 0E 00 MOV   REG[0xE],0x0       (0169) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
079C: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
079E: 62 0E 00 MOV   REG[0xE],0x0       (0171) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
07A1: 62 0F 00 MOV   REG[0xF],0x0       (0172) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
07A4: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
07A6: 62 0D 00 MOV   REG[0xD],0x0       (0174) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
07A9: 62 10 00 MOV   REG[0x10],0x0      (0175) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
07AC: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
07AE: 62 10 00 MOV   REG[0x10],0x0      (0177) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
07B1: 62 11 00 MOV   REG[0x11],0x0      (0178) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
07B4: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
07B6: 62 13 00 MOV   REG[0x13],0x0      (0180) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
07B9: 62 12 00 MOV   REG[0x12],0x0      (0181) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
07BC: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
07BE: 62 12 00 MOV   REG[0x12],0x0      (0183) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
07C1: 62 13 00 MOV   REG[0x13],0x0      (0184) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
07C4: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
07C6: 62 11 00 MOV   REG[0x11],0x0      (0186) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
07C9: 62 14 00 MOV   REG[0x14],0x0      (0187) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
07CC: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
07CE: 62 14 00 MOV   REG[0x14],0x0      (0189) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
07D1: 62 15 00 MOV   REG[0x15],0x0      (0190) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
07D4: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
07D6: 62 17 00 MOV   REG[0x17],0x0      (0192) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
07D9: 62 16 00 MOV   REG[0x16],0x0      (0193) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
07DC: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
07DE: 62 16 00 MOV   REG[0x16],0x0      (0195) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
07E1: 62 17 00 MOV   REG[0x17],0x0      (0196) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
07E4: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
07E6: 62 15 00 MOV   REG[0x15],0x0      (0198) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
07E9: 62 18 00 MOV   REG[0x18],0x0      (0199) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
07EC: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
07EE: 62 18 00 MOV   REG[0x18],0x0      (0201) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
07F1: 62 19 00 MOV   REG[0x19],0x0      (0202) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
07F4: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
07F6: 62 1B 00 MOV   REG[0x1B],0x0      (0204) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
07F9: 62 1A 00 MOV   REG[0x1A],0x0      (0205) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
07FC: 71 10    OR    F,0x10             
                                        (0206) 	M8C_SetBank1
07FE: 62 1A 00 MOV   REG[0x1A],0x0      (0207) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0801: 62 1B 00 MOV   REG[0x1B],0x0      (0208) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0804: 70 EF    AND   F,0xEF             
                                        (0209) 	M8C_SetBank0
0806: 62 19 00 MOV   REG[0x19],0x0      (0210) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0809: 62 1C 00 MOV   REG[0x1C],0x0      (0211) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
080C: 71 10    OR    F,0x10             
                                        (0212) 	M8C_SetBank1
080E: 62 1C 00 MOV   REG[0x1C],0x0      (0213) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0811: 62 1D 00 MOV   REG[0x1D],0x0      (0214) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0814: 70 EF    AND   F,0xEF             
                                        (0215) 	M8C_SetBank0
0816: 62 1F 00 MOV   REG[0x1F],0x0      (0216) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0819: 62 1E 00 MOV   REG[0x1E],0x0      (0217) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
081C: 71 10    OR    F,0x10             
                                        (0218) 	M8C_SetBank1
081E: 62 1E 00 MOV   REG[0x1E],0x0      (0219) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0821: 62 1F 00 MOV   REG[0x1F],0x0      (0220) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0824: 70 EF    AND   F,0xEF             
                                        (0221) 	M8C_SetBank0
0826: 62 1D 00 MOV   REG[0x1D],0x0      (0222) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0829: 70 EF    AND   F,0xEF             
                                        (0223) 	M8C_SetBank0
082B: 7F       RET                      (0224) 	ret
                                        (0225) 
                                        (0226) 
                                        (0227) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_i2cram
                                        (0026) export _LoadConfig_i2cram
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
082C: 7C 08 33 LCALL 0x0833             (0058) 	lcall	LoadConfig_i2cram
082F: 7C 07 27 LCALL 0x0727             (0059) 	lcall	LoadConfigTBL_i2cram_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
0832: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration i2cram
                                        (0067) ;
                                        (0068) ;    Load configuration registers for i2cram.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_i2cram:
                                        (0085)  LoadConfig_i2cram:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
0833: 10       PUSH  X                  (0088) 	push	x
0834: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
0836: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0838: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0839: 50 05    MOV   A,0x5              (0093)     mov     A, >LoadConfigTBL_i2cram_Bank0
083B: 57 06    MOV   X,0x6              (0094)     mov     X, <LoadConfigTBL_i2cram_Bank0
083D: 7C 08 4E LCALL 0x084E             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
0840: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
0842: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
0843: 50 05    MOV   A,0x5              (0100)     mov     A, >LoadConfigTBL_i2cram_Bank1
0845: 57 6D    MOV   X,0x6D             (0101)     mov     X, <LoadConfigTBL_i2cram_Bank1
0847: 7C 08 4E LCALL 0x084E             (0102)     lcall   LoadConfig              ; Load the bank 1 values
084A: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
084C: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
084D: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
084E: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
0850: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
0851: 08       PUSH  A                  (0132)     push    A
0852: 4F       MOV   X,SP               (0133)     mov     X, SP
0853: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0856: D0 04    JNC   0x085B             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0858: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
085B: 18       POP   A                  (0138)     pop     A
085C: 20       POP   X                  (0139)     pop     X
085D: 70 EF    AND   F,0xEF             
085F: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0862: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
0863: 08       PUSH  A                  (0145)     push    A
0864: 28       ROMX                     (0146)     romx                            ; Load register address from table
0865: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
0867: A0 1F    JZ    0x0887             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
0869: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
086A: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
086D: A0 03    JZ    0x0871             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
086F: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
0871: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
0873: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
0874: 20       POP   X                  (0156)     pop     X
0875: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
0876: 09 00    ADC   A,0x0              (0158)     adc     A, 0
0878: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
0879: 08       PUSH  A                  (0160)     push    A
087A: 28       ROMX                     (0161)     romx                            ; load config data from the table
087B: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
087C: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
087E: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
0880: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
0881: 20       POP   X                  (0166)     pop     X
0882: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
0883: 09 00    ADC   A,0x0              (0168)     adc     A, 0
0885: 8F D7    JMP   0x085D             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
0887: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
0889: 70 3F    AND   F,0x3F             
088B: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
088D: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
088E: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
088F: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
0890: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
0893: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0896: 7F       RET                      (0182)    ret
0897: 41 E1 FB AND   REG[0xE1],0xFB     
089A: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
089D: 7F       RET                      (0214)    ret
089E: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
08A0: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
08A2: A0 07    JZ    0x08AA             (0249)    jz    .SetModeRegEmpty
08A4: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
08A7: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
08A9: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
08AA: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
08AD: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
08AF: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
08B0: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
08B2: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
08B4: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
08B6: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
08B7: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
08BA: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
08BD: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
08BE: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
08C0: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
08C1: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
08C3: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
08C4: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
08C6: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
08C7: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
08C9: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
08CA: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
08CC: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
08CE: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
08D0: A0 06    JZ    0x08D7             (0492)    jz   .SetTxCmpMode
                                        (0493) 
08D2: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
08D5: 80 04    JMP   0x08DA             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
08D7: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
08DA: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
08DC: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
08DD: 08       PUSH  A                  (0536)    push A
08DE: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
08E0: A0 06    JZ    0x08E7             (0538)    jz   .DisRxInt
08E2: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
08E5: 80 04    JMP   0x08EA             (0541)    jmp  .CheckTxInt
08E7: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
08EA: 18       POP   A                  (0547)    pop  A
08EB: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
08ED: A0 06    JZ    0x08F4             (0549)    jz   .DisTxInt
08EF: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
08F2: 80 04    JMP   0x08F7             (0552)    jmp  .End_IntCntl
08F4: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
08F7: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0908: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0909: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
090A: 67       ASR   A                  (0603)    asr   A
090B: 67       ASR   A                  (0604)    asr   A
090C: 67       ASR   A                  (0605)    asr   A
090D: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
090F: FF E7    INDEX 0x08F8             (0607)    index UART_HEX_STR                  ; Get Hex value
0911: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
0913: 18       POP   A                  (0609)    pop   A                             ; Restore value
0914: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0916: FF E0    INDEX 0x08F8             (0611)    index UART_HEX_STR                  ; Get Hex value
0918: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
091A: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
091B: 4B       SWAP  A,X                (0645)    swap  A,X
091C: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
091E: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
091F: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0921: 7F       RET                      (0650)    ret
0922: 49 2B 10 TST   REG[0x2B],0x10     
0925: AF FC    JZ    _UART_PutChar      
0927: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0929: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
092A: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
092D: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
092F: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0931: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0932: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0934: 08       PUSH  A                  (0756)    push A
0935: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0937: B0 04    JNZ   0x093C             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0939: 18       POP   A                  (0759)    pop  A
093A: 80 0B    JMP   0x0946             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
093C: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
093E: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
093F: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0940: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
0942: B0 03    JNZ   0x0946             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0944: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0945: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0946: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0948: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0949: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
094B: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
094D: 08       PUSH  A                  (0819)    push A
094E: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0950: B0 07    JNZ   0x0958             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0952: 18       POP   A                  (0822)    pop  A
0953: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0955: 4B       SWAP  A,X                (0824)    swap A,X
0956: 80 07    JMP   0x095E             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0958: 18       POP   A                  (0828)    pop  A
0959: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
095B: 4B       SWAP  A,X                (0830)    swap A,X
095C: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
095E: 7F       RET                      (0836)    ret
095F: 70 BF    AND   F,0xBF             
0961: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0963: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0965: A0 06    JZ    0x096C             (0872)    jz    End_PutString                           ; Check for end of string
0967: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0969: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
096A: 8F F8    JMP   0x0963             (0875)    jmp   .PutStringLoop                          ; Get next character
096C: 70 3F    AND   F,0x3F             
096E: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0970: 7F       RET                      (0879)    ret
0971: 70 BF    AND   F,0xBF             
0973: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0976: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0977: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0979: A0 1A    JZ    0x0994             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
097B: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
097D: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
097F: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
0981: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0983: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0985: 49 2B 10 TST   REG[0x2B],0x10     
0988: AF FC    JZ    0x0985             
098A: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
098C: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
098D: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0990: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0992: 8F E4    JMP   0x0977             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
0994: 70 3F    AND   F,0x3F             
0996: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0998: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0999: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
099A: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
099D: B0 06    JNZ   0x09A4             (0980)    jnz   .CW_WRITEIT
099F: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
09A2: A0 1D    JZ    0x09C0             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
09A4: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
09A5: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
09A7: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
09A9: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
09AA: 49 2B 10 TST   REG[0x2B],0x10     
09AD: AF FC    JZ    0x09AA             
09AF: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
09B1: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
09B2: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
09B5: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
09B8: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
09BB: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
09BE: 8F DB    JMP   0x099A             (0995)    jmp   .CW_Loop
09C0: 70 3F    AND   F,0x3F             
09C2: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
09C4: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
09C5: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
09C6: 10       PUSH  X                  (1030)    push  X
09C7: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
09C8: A0 0B    JZ    0x09D4             (1032)    jz    .End_CPutString
09CA: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
09CC: 20       POP   X                  (1034)    pop   X
09CD: 18       POP   A                  (1035)    pop   A
09CE: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
09CF: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
09D1: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
09D2: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
09D4: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
09D6: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
09D7: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
09D9: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
09DB: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
09DD: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
09DF: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\i2chwrsrcinits.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHW.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) include "PSoCGPIOINT.inc"
                                        (0026) include "PSoCAPI.inc"
                                        (0027) 
                                        (0028) ;-----------------------------------------------
                                        (0029) ; include instance specific register definitions
                                        (0030) ;-----------------------------------------------
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ;  Global Symbols
                                        (0034) ;-----------------------------------------------
                                        (0035) ;-------------------------------------------------------------------
                                        (0036) ;  Declare the functions global for both assembler and C compiler.
                                        (0037) ;
                                        (0038) ;  Note that there are two names for each API. First name is
                                        (0039) ;  assembler reference. Name with underscore is name refence for
                                        (0040) ;  C compiler.  Calling function in C source code does not require
                                        (0041) ;  the underscore.
                                        (0042) ;-------------------------------------------------------------------
                                        (0043) 
                                        (0044) export    I2CHW_ResumeInt
                                        (0045) export   _I2CHW_ResumeInt
                                        (0046) export    I2CHW_EnableInt
                                        (0047) export   _I2CHW_EnableInt
                                        (0048) export    I2CHW_ClearInt
                                        (0049) export   _I2CHW_ClearInt
                                        (0050) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0051) export    I2CHW_EnableSlave
                                        (0052) export   _I2CHW_EnableSlave
                                        (0053) ENDIF
                                        (0054) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0055) export    I2CHW_EnableMstr
                                        (0056) export   _I2CHW_EnableMstr
                                        (0057) ENDIF
                                        (0058) export    I2CHW_Start
                                        (0059) export   _I2CHW_Start
                                        (0060) export    I2CHW_DisableInt
                                        (0061) export   _I2CHW_DisableInt
                                        (0062) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0063) export    I2CHW_DisableSlave
                                        (0064) export   _I2CHW_DisableSlave
                                        (0065) ENDIF
                                        (0066) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0067) export    I2CHW_DisableMstr
                                        (0068) export   _I2CHW_DisableMstr
                                        (0069) ENDIF
                                        (0070) export    I2CHW_Stop
                                        (0071) export   _I2CHW_Stop
                                        (0072) 
                                        (0073) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0074)  IF (I2CHW_CY8C22x45)
                                        (0075) export    I2CHW_EnableHWAddrCheck
                                        (0076) export   _I2CHW_EnableHWAddrCheck
                                        (0077) export    I2CHW_DisableHWAddrCheck
                                        (0078) export   _I2CHW_DisableHWAddrCheck
                                        (0079)  ENDIF
                                        (0080) ENDIF
                                        (0081) 
                                        (0082) AREA UserModules (ROM, REL)
                                        (0083) 
                                        (0084) .SECTION
                                        (0085) 
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;  FUNCTION NAME: I2CHW_Start
                                        (0088) ;
                                        (0089) ;  DESCRIPTION:
                                        (0090) ;   Initialize the I2CHW I2C bus interface.
                                        (0091) ;
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;
                                        (0094) ;  ARGUMENTS:
                                        (0095) ;
                                        (0096) ;  RETURNS: none
                                        (0097) ;
                                        (0098) ;  SIDE EFFECTS:
                                        (0099) ;    The A and X registers may be modified by this or future implementations
                                        (0100) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0101) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0102) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0103) ;    functions.
                                        (0104) ;          
                                        (0105)  I2CHW_Start:
                                        (0106) _I2CHW_Start:
                                        (0107)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0108) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0109)  IF (I2CHW_CY8C22x45)
                                        (0110)    M8C_SetBank1
                                        (0111)    mov   reg[I2CHW_ADDR], I2CHW_SLAVE_ADDR;I2CHW_HW_ADDR_EN
                                        (0112)    M8C_SetBank0
                                        (0113)  ENDIF
                                        (0114) ENDIF
                                        (0115)     RAM_EPILOGUE RAM_USE_CLASS_1
09E0: 7F       RET                      (0116)     ret
                                        (0117) .ENDSECTION
                                        (0118) 
                                        (0119) .SECTION
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;  FUNCTION NAME: I2CHW_ResumeInt
                                        (0122) ;
                                        (0123) ;  DESCRIPTION:
                                        (0124) ;     reEnables SDA interrupt allowing start condition detection. 
                                        (0125) ;     Skips clearing INT_CLR3 by entering the EnableInt at ResumeIntEntry:.
                                        (0126) ;     Remember to call the global interrupt enable function by using
                                        (0127) ;     the macro: M8C_EnableGInt.
                                        (0128) ;-----------------------------------------------------------------------------
                                        (0129) ;  ARGUMENTS: none
                                        (0130) ;
                                        (0131) ;  RETURNS: none
                                        (0132) ;
                                        (0133) ;  SIDE EFFECTS:
                                        (0134) ;    The A and X registers may be modified by this or future implementations
                                        (0135) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0136) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0137) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0138) ;    functions.
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140)  I2CHW_ResumeInt:
                                        (0141) _I2CHW_ResumeInt:
                                        (0142)     RAM_PROLOGUE RAM_USE_CLASS_1
09E1: 80 04    JMP   0x09E6             (0143)     jmp ResumeIntEntry
09E3: 62 DD FE MOV   REG[0xDD],0xFE     
09E6: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0144)     
                                        (0145) ;-----------------------------------------------------------------------------
                                        (0146) ;  FUNCTION NAME: I2CHW_EnableInt
                                        (0147) ;
                                        (0148) ;  DESCRIPTION:
                                        (0149) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0150) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0151) ;
                                        (0152) ;-----------------------------------------------------------------------------
                                        (0153) ;
                                        (0154) ;  ARGUMENTS: none
                                        (0155) ;
                                        (0156) ;  RETURNS: none
                                        (0157) ;
                                        (0158) ;  SIDE EFFECTS:
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165)  I2CHW_EnableInt:
                                        (0166) _I2CHW_EnableInt:
                                        (0167)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)     ;first clear any pending interrupts
                                        (0169)     M8C_ClearIntFlag INT_CLR3, I2CHW_INT_MASK
                                        (0170) ResumeIntEntry:
                                        (0171)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_1
09E9: 7F       RET                      (0173)     ret
09EA: 62 DD FE MOV   REG[0xDD],0xFE     
                                        (0174) 
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: I2CHW_ClearInt
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;     Clears only the I2C interrupt in the INT_CLR3 register.
                                        (0183) ;
                                        (0184) ;-----------------------------------------------------------------------------
                                        (0185) ;
                                        (0186) ;  ARGUMENTS: none
                                        (0187) ;
                                        (0188) ;  RETURNS: none
                                        (0189) ;
                                        (0190) ;  SIDE EFFECTS:
                                        (0191) ;    The A and X registers may be modified by this or future implementations
                                        (0192) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0193) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0194) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0195) ;    functions.
                                        (0196) ;          
                                        (0197)  I2CHW_ClearInt:
                                        (0198) _I2CHW_ClearInt:
                                        (0199)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0200)     M8C_ClearIntFlag INT_CLR3, I2CHW_INT_MASK
                                        (0201)     RAM_EPILOGUE RAM_USE_CLASS_1
09ED: 7F       RET                      (0202)     ret
09EE: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0203)     
                                        (0204) .ENDSECTION
                                        (0205) 
                                        (0206) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))	
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: I2CHW_EnableMstr
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0213) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0214) ;
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS: none
                                        (0218) ;
                                        (0219) ;  RETURNS: none
                                        (0220) ;
                                        (0221) ;  SIDE EFFECTS:
                                        (0222) ;    The A and X registers may be modified by this or future implementations
                                        (0223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0225) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0226) ;    functions.
                                        (0227) ;          
                                        (0228)  I2CHW_EnableMstr:
                                        (0229) _I2CHW_EnableMstr:
                                        (0230)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231) 	;;CDT 28399
                                        (0232) 	RAM_SETPAGE_CUR >I2CHW_bStatus
09F1: 26 00 7F AND   [0x0],0x7F         (0233) 	and [I2CHW_bStatus], ~0x80 ;; ~I2CHW_ISR_ACTIVE
09F4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0234) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
09F7: 26 02 7F AND   [0x2],0x7F         (0235)     and    [I2CHW_RsrcStatus], ~0x80;;~I2CHW_ISR_ACTIVE        ; Make sure internal control variables weren't corrupted previous to start.
09FA: 43 D6 02 OR    REG[0xD6],0x2      
                                        (0236)     BitSetI2CHW_CFG I2C_M_EN                                         ;Enable SDA interupt
                                        (0237)     RAM_EPILOGUE RAM_USE_CLASS_1
09FD: 7F       RET                      (0238)     ret
09FE: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) ENDIF
                                        (0242) 
                                        (0243) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0244) .SECTION
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  FUNCTION NAME: I2CHW_EnableSlave
                                        (0247) ;
                                        (0248) ;  DESCRIPTION:
                                        (0249) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0250) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0251) ;
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS: none
                                        (0255) ;
                                        (0256) ;  RETURNS: none
                                        (0257) ;
                                        (0258) ;  SIDE EFFECTS:
                                        (0259) ;    The A and X registers may be modified by this or future implementations
                                        (0260) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0261) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0262) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0263) ;    functions.
                                        (0264) ;          
                                        (0265)  I2CHW_EnableSlave:
                                        (0266) _I2CHW_EnableSlave:
                                        (0267)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0268)     
                                        (0269)     M8C_SetBank1 ;The SDA and SCL pins are setting to Hi-z drive mode
                                        (0270)     and reg[I2CHWSDA_DriveMode_0_ADDR],~(I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0271)     or  reg[I2CHWSDA_DriveMode_1_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0272)     M8C_SetBank0
                                        (0273)     or  reg[I2CHWSDA_DriveMode_2_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0274)    
                                        (0275)     BitSetI2CHW_CFG I2C_S_EN                                         ;Enable SDA interrupt
                                        (0276)     nop
                                        (0277)     nop
                                        (0278)     nop
                                        (0279)     nop
                                        (0280)     nop
                                        (0281)    
                                        (0282)     M8C_SetBank1 ;The SDA and SCL pins are restored to Open Drain Low drive mode
                                        (0283)     or reg[I2CHWSDA_DriveMode_0_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0284)     or reg[I2CHWSDA_DriveMode_1_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0285)     M8C_SetBank0
                                        (0286)     or reg[I2CHWSDA_DriveMode_2_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0287)     
                                        (0288)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0289)     ret
                                        (0290) 
                                        (0291) .ENDSECTION
                                        (0292) ENDIF
                                        (0293) 
                                        (0294) .SECTION
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;  FUNCTION NAME: I2CHW_DisableInt
                                        (0297) ;  FUNCTION NAME: I2CHW_Stop
                                        (0298) ;
                                        (0299) ;  DESCRIPTION:
                                        (0300) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: none
                                        (0305) ;
                                        (0306) ;  RETURNS: none
                                        (0307) ;
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315)  I2CHW_DisableInt:
                                        (0316) _I2CHW_DisableInt:
                                        (0317)  I2CHW_Stop:
                                        (0318) _I2CHW_Stop:
                                        (0319)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0320)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0321)     RAM_EPILOGUE RAM_USE_CLASS_1
0A01: 7F       RET                      (0322)     ret
0A02: 41 D6 FD AND   REG[0xD6],0xFD     
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME: I2CHW_DisableSlave
                                        (0330) ;
                                        (0331) ;  DESCRIPTION:
                                        (0332) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0333) ;
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;
                                        (0336) ;  ARGUMENTS: none
                                        (0337) ;
                                        (0338) ;  RETURNS: none
                                        (0339) ;
                                        (0340) ;  SIDE EFFECTS:
                                        (0341) ;    The A and X registers may be modified by this or future implementations
                                        (0342) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0343) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0344) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0345) ;    functions.
                                        (0346) ;          
                                        (0347)  I2CHW_DisableSlave:
                                        (0348) _I2CHW_DisableSlave:
                                        (0349)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0350)     BitClrI2CHW_CFG I2C_S_EN                                         ;Disable the Slave
                                        (0351)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0352)     ret
                                        (0353) 
                                        (0354) .ENDSECTION
                                        (0355) ENDIF
                                        (0356) 
                                        (0357) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0358) .SECTION
                                        (0359) ;-----------------------------------------------------------------------------
                                        (0360) ;  FUNCTION NAME: I2CHW_DisableMstr
                                        (0361) ;
                                        (0362) ;  DESCRIPTION:
                                        (0363) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0364) ;
                                        (0365) ;-----------------------------------------------------------------------------
                                        (0366) ;
                                        (0367) ;  ARGUMENTS: none
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378)  I2CHW_DisableMstr:
                                        (0379) _I2CHW_DisableMstr:
                                        (0380)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0381)     BitClrI2CHW_CFG I2C_M_EN                                         ;Disable the Master
                                        (0382)     RAM_EPILOGUE RAM_USE_CLASS_1
0A05: 7F       RET                      (0383)    ret
                                        (0384) 
                                        (0385) .ENDSECTION
                                        (0386) ENDIF
                                        (0387) 
                                        (0388) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0389)  IF (I2CHW_CY8C22x45)
                                        (0390)  .SECTION
                                        (0391) ;-----------------------------------------------------------------------------
                                        (0392) ;  FUNCTION NAME: void  I2CHW_EnableHWAddrCheck(void)
                                        (0393) ;
                                        (0394) ;  DESCRIPTION:
                                        (0395) ;   Set respective bit to engage the HardWare Address Recognition 
                                        (0396) ;   feature in I2C slave block.
                                        (0397) ;
                                        (0398) ;-----------------------------------------------------------------------------
                                        (0399) ;
                                        (0400) ;  ARGUMENTS: none
                                        (0401) ;
                                        (0402) ;  RETURNS: none
                                        (0403) ;
                                        (0404) ;  SIDE EFFECTS:
                                        (0405) ;    If the HardWare Address Recognition feature is enabled, the ROM registers reading does not work.
                                        (0406) ;    The HardWare Address Recognition feature should be disabled for using ROM registers.
                                        (0407) ;
                                        (0408) ;    The A and X registers may be modified by this or future implementations
                                        (0409) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0410) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0411) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0412) ;    functions.
                                        (0413) ;
                                        (0414)  I2CHW_EnableHWAddrCheck:
                                        (0415) _I2CHW_EnableHWAddrCheck:
                                        (0416)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0417)    M8C_SetBank1
                                        (0418)    or    reg[I2CHW_ADDR], I2CHW_HW_ADDR_EN
                                        (0419)    M8C_SetBank0
                                        (0420)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0421)    ret
                                        (0422) .ENDSECTION
                                        (0423) 
                                        (0424) .SECTION
                                        (0425) ;-----------------------------------------------------------------------------
                                        (0426) ;  FUNCTION NAME: void  I2CHW_DisableHWAddrCheck(void)
                                        (0427) ;
                                        (0428) ;  DESCRIPTION:
                                        (0429) ;   Clear respective bit to disengage the HardWare Address Recognition 
                                        (0430) ;   feature in I2C slave block.
                                        (0431) ;
                                        (0432) ;-----------------------------------------------------------------------------
                                        (0433) ;
                                        (0434) ;  ARGUMENTS: none
                                        (0435) ;
                                        (0436) ;  RETURNS: none
                                        (0437) ;
                                        (0438) ;  SIDE EFFECTS:
                                        (0439) ;    The A and X registers may be modified by this or future implementations
                                        (0440) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0441) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0442) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0443) ;    functions.
                                        (0444) ;
                                        (0445)  I2CHW_DisableHWAddrCheck:
                                        (0446) _I2CHW_DisableHWAddrCheck:
                                        (0447)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0448)    M8C_SetBank1
                                        (0449)    and   reg[I2CHW_ADDR], ~I2CHW_HW_ADDR_EN
                                        (0450)    M8C_SetBank0
                                        (0451)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0452)    ret
                                        (0453) .ENDSECTION
                                        (0454)  ENDIF
                                        (0455) ENDIF
                                        (0456) 
                                        (0457) ; End of File I2CHW.asm
FILE: lib\i2chwmstr.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0A06: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: I2CHWMSTR.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: <UMName> User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) include "I2CHWMstr.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) 
                                        (0031) export   I2CHW_fSendRepeatStart
                                        (0032) export  _I2CHW_fSendRepeatStart
                                        (0033) export   I2CHW_fSendStart
                                        (0034) export  _I2CHW_fSendStart
                                        (0035) export   I2CHW_SendStop
                                        (0036) export  _I2CHW_SendStop
                                        (0037) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0038) export  _I2CHW_fReadBytes
                                        (0039) export  _I2CHW_bWriteBytes
                                        (0040) export  _I2CHW_bWriteCBytes
                                        (0041) 
                                        (0042) export   I2CHW_fWrite
                                        (0043) export  _I2CHW_fWrite
                                        (0044) 
                                        (0045) export   I2CHW_bRead
                                        (0046) export  _I2CHW_bRead
                                        (0047) 
                                        (0048) export    I2CHW_bReadBusStatus
                                        (0049) export   _I2CHW_bReadBusStatus
                                        (0050) 
                                        (0051) 
                                        (0052) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0053) 
                                        (0054) export   I2CHW_fReadBytes
                                        (0055) export   I2CHW_bWriteBytes
                                        (0056) export   I2CHW_bWriteCBytes
                                        (0057) 
                                        (0058) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0059) 
                                        (0060) ;-------------------------------------------------------------------
                                        (0061) ;  Declare the varables for both the assembler and C compiler.
                                        (0062) ;
                                        (0063) ;-------------------------------------------------------------------
                                        (0064) export  I2CHW_bStatus
                                        (0065) export _I2CHW_bStatus
                                        (0066) 
                                        (0067) ;-----------------------------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;-----------------------------------------------
                                        (0070) area InterruptRAM(RAM, REL, CON)
                                        (0071) 
                                        (0072) _I2CHW_bStatus:
                                        (0073)  I2CHW_bStatus:                        blk   1  ; Status during transfers
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) ;-----------------------------------------------
                                        (0077) ;  EQUATES
                                        (0078) ;-----------------------------------------------
                                        (0079) I2CHW_SLAVE_ACKed:                     equ 0x01 ; This bit set if Slave ACKed Master
                                        (0080) I2CHW_SEND_ACK:                        equ 0x10 ; If this flag set, Master should send ACK
                                        (0081) 
                                        (0082) 
                                        (0083) .SECTION
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;  FUNCTION NAME: I2CHW_fReadBytes
                                        (0086) ;
                                        (0087) ;  DESCRIPTION:
                                        (0088) ;       Read Multiple bytes from a slave.  Use the ISR to perform operation.
                                        (0089) ;-----------------------------------------------------------------------------
                                        (0090) ;
                                        (0091) ;  ARGUMENTS:
                                        (0092) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0093) ;           to determine if:
                                        (0094) ;             0x01 => Use RepeatStart instead of Start
                                        (0095) ;             0x02 => Don't send Stop
                                        (0096) ;  [SP-6]=> Count of bytes to read.
                                        (0097) ;  [SP-5]=> MSB of Array address to put data in (ignorned for small mem model)
                                        (0098) ;  [SP-4]=> LSB of Array address to put data in 
                                        (0099) ;  [SP-3]=> Address of slave
                                        (0100) ;
                                        (0101) ;  RETURNS:       None
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;          
                                        (0110) ;    Currently only the page pointer registers listed below are modified: 
                                        (0111) ;          CUR_PP
                                        (0112) ;
                                        (0113) ;  THEORY of OPERATION or PROCEDURE:
                                        (0114) ;    I2C and block must be operational.
                                        (0115) ;    This routine will enable the I2C interrupt!
                                        (0116) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (0117) ;    pend on the ISR_ACTIVE bit until it can run
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) IF	(TOOLCHAIN & HITECH)
                                        (0121) RxMode:         set  -7
                                        (0122) RxCnt:          set  -6
                                        (0123) RxArrayHI:      set  -5
                                        (0124) RxArrayLO:      set  -4
                                        (0125) RxSlaveAddr:    set  -3
                                        (0126) ELSE
                                        (0127) RxMode:         equ  -7
                                        (0128) RxCnt:          equ  -6
                                        (0129) RxArrayHI:      equ  -5
                                        (0130) RxArrayLO:      equ  -4
                                        (0131) RxSlaveAddr:    equ  -3
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) _I2CHW_fReadBytes:			      
                                        (0135)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0136)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0137) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0A09: 4F       MOV   X,SP               (0138) 	mov   X, SP
                                        (0139) I2CMSCR_NotReady1:
0A0A: 51 02    MOV   A,[0x2]            (0140)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0A0C: 47 02 80 TST   [0x2],0x80         (0141)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0142)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0143)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0144)           ;For multi master operations, a pening start or restart
                                        (0145)           ;request might be OK, the master might be waiting to
                                        (0146)           ;acquire the bus from another master
0A0F: BF FA    JNZ   0x0A0A             (0147)     jnz   I2CMSCR_NotReady1
0A11: 2E 02 80 OR    [0x2],0x80         (0148)     or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared by ISR
                                        (0149)     ;get the address from the parameters on the stack
0A14: 52 FD    MOV   A,[X-3]            (0150)     mov   A, [X + RxSlaveAddr]
0A16: 64       ASL   A                  (0151)     asl   A                                                ; Shift address to the left to make
                                        (0152)                                                            ; a complete byte with the R/W bit.
0A17: 29 01    OR    A,0x1              (0153)     or    A,0x01                                           ; OR the address with the Read bit.
0A19: 53 01    MOV   [0x1],A            (0154)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0A1B: 60 D8    MOV   REG[0xD8],A        (0155)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0A1D: 55 00 00 MOV   [0x0],0x0          (0156)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0A20: 52 F9    MOV   A,[X-7]            (0157)     mov   A, [X+RxMode]                                    ; place the RxMode in status so ISR can access it
0A22: 53 00    MOV   [0x0],A            (0158)     mov   [I2CHW_bStatus],A
                                        (0159)     ;
                                        (0160)     ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0161)     ;
0A24: 10       PUSH  X                  (0162)     push   X                                               ;preserve since it's used later
0A25: 52 FA    MOV   A,[X-6]            (0163)     mov    A, [X+RxCnt]                                    ;get the write buf size
0A27: 08       PUSH  A                  (0164)     push   A
0A28: 52 FB    MOV   A,[X-5]            (0165)     mov    A, [X+RxArrayHI]                                ;get the write addrHI
0A2A: 08       PUSH  A                  (0166)     push   A										   
0A2B: 52 FC    MOV   A,[X-4]            (0167)     mov    A, [X+RxArrayLO]							                         ;get the write addrLO
0A2D: 08       PUSH  A                  (0168)     push   A                                               ;this will be ignored
0A2E: 93 0C    CALL  _I2CHW_InitWrite   (0169)     call  I2CHW_InitWrite                                  ;sets the addr and byte count to write to
0A30: 38 FD    ADD   SP,0xFD            (0170)     add    SP, -3
0A32: 20       POP   X                  (0171)     pop    X                                               ;restore X to be used for the rest of this routine
                                        (0172)     
0A33: 51 01    MOV   A,[0x1]            (0173)     mov   A,[I2CHW_SlaveAddr]
0A35: 48 F9 01 TST   [X-7],0x1          (0174)     tst   [x+RxMode],I2CHW_RepStart
0A38: B0 0A    JNZ   0x0A43             (0175)     jnz   DoRestartRx
0A3A: 49 D7 01 TST   REG[0xD7],0x1      (0176)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0A3D: B0 05    JNZ   0x0A43             (0177)     jnz   DoRestartRx
0A3F: 91 2E    CALL  0x0B6F             (0178)     call  I2C_DoStart                                      ; Send a start and address.
0A41: 80 03    JMP   0x0A45             (0179)     jmp   CheckRxAck
                                        (0180) DoRestartRx:
0A43: 90 93    CALL  0x0AD8             (0181)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0A45: 70 3F    AND   F,0x3F             
0A47: 71 C0    OR    F,0xC0             
                                        (0182)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (0183)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (0184)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (0185) 
                                        (0186) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0187)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (0188)         ;is finished.
                                        (0189) End_RD:
                                        (0190)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0191)     RAM_EPILOGUE RAM_USE_CLASS_4
0A49: 7F       RET                      (0192)     ret
0A4A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0193) 
                                        (0194) .ENDSECTION
                                        (0195) 
                                        (0196) .SECTION
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;  FUNCTION NAME: I2CHW_bWriteBytes
                                        (0199) ;
                                        (0200) ;  DESCRIPTION:
                                        (0201) ;    Write multiple data bits to slave device.
                                        (0202) ;
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;
                                        (0205) ;  ARGUMENTS:
                                        (0206) ; [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0207) ;          to determine if:
                                        (0208) ;              0x01 => Use RePeatStart instead of Start
                                        (0209) ;              0x02 => Don't send Stop
                                        (0210) ; [SP-6]=> Count of bytes to write.
                                        (0211) ; [SP-5]=> MSB of Array address to put data in (ignored small mem model).
                                        (0212) ; [SP-4]=> LSB of Array address to put data in.
                                        (0213) ; [SP-3]=> Address of slave
                                        (0214) ;
                                        (0215) ;
                                        (0216) ;  RETURNS:     None
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS:
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;          
                                        (0225) ;    Currently only the page pointer registers listed below are modified: 
                                        (0226) ;          CUR_PP
                                        (0227) ;
                                        (0228) ;  THEORY of OPERATION or PROCEDURE:
                                        (0229) ;
                                        (0230) ;-----------------------------------------------------------------------------
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232) TxMode:       set  -7
                                        (0233) TxByteCount:  set  -6
                                        (0234) TxArrayHI:    set  -5
                                        (0235) TxArrayLO:    set  -4
                                        (0236) TxSlaveAddr:  set  -3
                                        (0237) ELSE
                                        (0238) TxMode:       equ  -7
                                        (0239) TxByteCount:  equ  -6
                                        (0240) TxArrayHI:    equ  -5
                                        (0241) TxArrayLO:    equ  -4
                                        (0242) TxSlaveAddr:  equ  -3
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) _I2CHW_bWriteBytes:
                                        (0246)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0247)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0248) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
                                        (0249) 
0A4D: 4F       MOV   X,SP               (0250) 	mov   X, SP
                                        (0251) I2CMSCR_NotReady2:
0A4E: 51 02    MOV   A,[0x2]            (0252)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0A50: 47 02 80 TST   [0x2],0x80         (0253)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0254)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0255)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0256)           ;For multi master operations, a pening start or restart
                                        (0257)           ;request might be OK, the master might be waiting to
                                        (0258)           ;acquire the bus from another master
0A53: BF FA    JNZ   0x0A4E             (0259)     jnz   I2CMSCR_NotReady2
0A55: 2E 02 80 OR    [0x2],0x80         (0260)     or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared at end of ISR
0A58: 52 FD    MOV   A,[X-3]            (0261)     mov   A, [X + TxSlaveAddr]
0A5A: 64       ASL   A                  (0262)     asl   A                                                ; Shift address to the left to make
                                        (0263)                                                            ; a complete byte with the R/W bit.
                                        (0264)                                                            ; The ASL takes care of clearing bit 0.
0A5B: 55 00 00 MOV   [0x0],0x0          (0265)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0A5E: 53 01    MOV   [0x1],A            (0266)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0A60: 60 D8    MOV   REG[0xD8],A        (0267)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0A62: 52 F9    MOV   A,[X-7]            (0268)     mov   A, [X+TxMode]                                    ; place the TxMode in status so ISR can access it
0A64: 53 00    MOV   [0x0],A            (0269)     mov   [I2CHW_bStatus],A
                                        (0270)     ;
                                        (0271)     ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0272)     ;
0A66: 10       PUSH  X                  (0273)         push   X                                                ;preserve since it's used later
0A67: 77 FA    INC   [X-6]              (0274)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (0275) 
0A69: 52 FA    MOV   A,[X-6]            (0276)         mov    A, [X+TxByteCount]                               ;get the write buf size
0A6B: 08       PUSH  A                  (0277)         push   A
0A6C: 52 FB    MOV   A,[X-5]            (0278)         mov    A, [X+TxArrayHI]                                 ;get the write buf addr
0A6E: 08       PUSH  A                  (0279)         push   A                                                                                            ;this will be ignored
0A6F: 52 FC    MOV   A,[X-4]            (0280)         mov    A, [X+TxArrayLO]                                 ;get the write buf addr
0A71: 08       PUSH  A                  (0281)         push   A
0A72: 93 06    CALL  _I2CHW_InitRamRead (0282)         call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
0A74: 38 FD    ADD   SP,0xFD            (0283)         add SP, -3
0A76: 20       POP   X                  (0284)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0285)     ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (0286) 
                                        (0287) 
0A77: 51 01    MOV   A,[0x1]            (0288)     mov   A,[I2CHW_SlaveAddr]
0A79: 48 F9 01 TST   [X-7],0x1          (0289)     tst   [x+TxMode],I2CHW_RepStart
0A7C: B0 0A    JNZ   0x0A87             (0290)     jnz   DoRestartTx
0A7E: 49 D7 01 TST   REG[0xD7],0x1      (0291)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0A81: BF C1    JNZ   0x0A43             (0292)     jnz   DoRestartRx
0A83: 90 EA    CALL  0x0B6F             (0293)     call  I2C_DoStart                                      ; Send a start and address.
0A85: 80 03    JMP   0x0A89             (0294)     jmp   DoTxAck
                                        (0295) DoRestartTx:
0A87: 90 4F    CALL  0x0AD8             (0296)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0A89: 70 3F    AND   F,0x3F             
0A8B: 71 C0    OR    F,0xC0             
                                        (0297) DoTxAck:
                                        (0298) 
                                        (0299) 
                                        (0300) WriteSlaveAck:
                                        (0301)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0302) 	RAM_EPILOGUE RAM_USE_CLASS_4
0A8D: 7F       RET                      (0303)     ret
0A8E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0304) 
                                        (0305) .ENDSECTION
                                        (0306) 
                                        (0307) .SECTION
                                        (0308) ;-----------------------------------------------------------------------------
                                        (0309) ;  FUNCTION NAME: I2CHW_bWriteCBytes
                                        (0310) ;
                                        (0311) ;  DESCRIPTION:
                                        (0312) ;    Write multiple data bits to slave device from ROM
                                        (0313) ;
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;
                                        (0316) ;  ARGUMENTS:
                                        (0317) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0318) ;            to determine if:
                                        (0319) ;               0x01 => Use RepeatStart instead of Start
                                        (0320) ;               0x02 => Don't send Stop
                                        (0321) ;  [SP-6]=> Count of bytes to write.
                                        (0322) ;  [SP-5]=> MSB of ROM Array address to get data from
                                        (0323) ;  [SP-4]=> LSB of ROM Array address to get data from.
                                        (0324) ;  [SP-3]=> Address of slave
                                        (0325) ;
                                        (0326) ;  RETURNS:
                                        (0327) ;    None
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;
                                        (0339) ;  THEORY of OPERATION or PROCEDURE:
                                        (0340) ;
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) IF	(TOOLCHAIN & HITECH)
                                        (0343) TxCMode:       set  -7
                                        (0344) TxCByteCount:  set  -6
                                        (0345) TxCArrayMSB:   set  -5
                                        (0346) TxCArrayLSB:   set  -4
                                        (0347) ;TxSlaveAddr:  set  -3	  ;defined above this line if for reference only
                                        (0348) ELSE
                                        (0349) TxCMode:       equ  -7
                                        (0350) TxCByteCount:  equ  -6
                                        (0351) TxCArrayMSB:   equ  -5
                                        (0352) TxCArrayLSB:   equ  -4
                                        (0353) ;TxSlaveAddr:  equ  -3	  ;defined above this line if for reference only
                                        (0354) ENDIF
                                        (0355) 
                                        (0356) _I2CHW_bWriteCBytes:
                                        (0357)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0358) 	RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0359) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0A91: 4F       MOV   X,SP               (0360) 	mov   X, SP
                                        (0361) I2CMSCR_NotReady3:
0A92: 51 02    MOV   A,[0x2]            (0362)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
0A94: 47 02 80 TST   [0x2],0x80         (0363)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0364)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0365)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0366)           ;For multi master operations, a pening start or restart
                                        (0367)           ;request might be OK, the master might be waiting to
                                        (0368)           ;acquire the bus from another master
0A97: BF FA    JNZ   0x0A92             (0369)         jnz   I2CMSCR_NotReady3
0A99: 2E 02 80 OR    [0x2],0x80         (0370)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
0A9C: 52 FD    MOV   A,[X-3]            (0371)     mov   A, [X + TxSlaveAddr]
0A9E: 64       ASL   A                  (0372)     asl   A                                                ; Shift address to the left to make
                                        (0373)                                                            ; a complete byte with the R/W bit.
                                        (0374)                                                            ; The ASL takes care of clearing bit 0.
0A9F: 55 00 00 MOV   [0x0],0x0          (0375)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0AA2: 53 01    MOV   [0x1],A            (0376)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0AA4: 60 D8    MOV   REG[0xD8],A        (0377)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0AA6: 52 F9    MOV   A,[X-7]            (0378)     mov   A, [X+TxCMode]                                                             ; place the RxMode in status so ISR can access it
0AA8: 53 00    MOV   [0x0],A            (0379)     mov   [I2CHW_bStatus],A
                                        (0380)     ;
                                        (0381)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0382)         ;
0AAA: 10       PUSH  X                  (0383)         push   X                                                ;preserve X since it's used later
                                        (0384) 
0AAB: 50 00    MOV   A,0x0              (0385)          mov    A, 0                                             ;get the write buf size (this is the hi order part)
0AAD: 77 FA    INC   [X-6]              (0386)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
0AAF: D0 02    JNC   0x0AB2             (0387)         jnc    . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
0AB1: 74       INC   A                  (0388)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
0AB2: 08       PUSH  A                  (0389)         push   A
0AB3: 52 FA    MOV   A,[X-6]            (0390)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
0AB5: 08       PUSH  A                  (0391)         push   A
0AB6: 52 FB    MOV   A,[X-5]            (0392)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
0AB8: 08       PUSH  A                  (0393)         push   A                                                                                        ;this will be ignored
0AB9: 52 FC    MOV   A,[X-4]            (0394)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
0ABB: 08       PUSH  A                  (0395)         push   A
                                        (0396) 
0ABC: 92 E9    CALL  _I2CHW_InitFlashRead(0397)         call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
0ABE: 38 FC    ADD   SP,0xFC            (0398)         add SP, -4
0AC0: 20       POP   X                  (0399)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0400) 
                                        (0401)     ;or  [I2CHW_RsrcStatus],I2C_READFLASH
0AC1: 51 01    MOV   A,[0x1]            (0402)     mov   A,[I2CHW_SlaveAddr]
0AC3: 48 F9 01 TST   [X-7],0x1          (0403)     tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
0AC6: B0 0A    JNZ   0x0AD1             (0404)     jnz   DoCRestartTx                                     ; should executed.
0AC8: 49 D7 01 TST   REG[0xD7],0x1      (0405)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0ACB: BF 77    JNZ   0x0A43             (0406)     jnz   DoRestartRx
0ACD: 90 A0    CALL  0x0B6F             (0407)     call  I2C_DoStart                                      ; Send a start and address.
0ACF: 80 03    JMP   0x0AD3             (0408)     jmp   DoCTxAck
                                        (0409) DoCRestartTx:
0AD1: 90 05    CALL  0x0AD8             (0410)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0AD3: 70 3F    AND   F,0x3F             
0AD5: 71 C0    OR    F,0xC0             
                                        (0411) 
                                        (0412) DoCTxAck:                                                  ; Test to see if Slave is ACKed
                                        (0413) 
                                        (0414) CWriteSlaveAck:
                                        (0415)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0416)     RAM_EPILOGUE RAM_USE_CLASS_4
0AD7: 7F       RET                      (0417)     ret
0AD8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0418) 
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: I2CHW_DoBufferRepeatStart
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;    Send repeated start condition and send slave address for buffered transfers.
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     This routine is called internally only.  It is not exported or intended as an API
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;    None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS:
                                        (0437) ;    The A and X registers may be modified by this or future implementations
                                        (0438) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0439) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0440) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0441) ;    functions.
                                        (0442) ;          
                                        (0443) ;  THEORY of OPERATION or PROCEDURE:
                                        (0444) ;    This is similar to the I2C_DoRepeatStart entry point but this function does not
                                        (0445) ;    wait for the byte_complete flag.  That is this is not polled and is therefore compatible
                                        (0446) ;    with the buffered read and write functions (above).
                                        (0447) ;
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) 
                                        (0450) I2CHW_DoBufferRepeatStart:
                                        (0451)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0452) 	RAM_SETPAGE_CUR >I2CHW_SlaveAddr
                                        (0453)     ;here the path through the routine is dependent on the previous transmission.
                                        (0454)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0455)         ; I2C interrupt
                                        (0456)         ; 2a. the master must NAK the byte if he is reading from the slave.
                                        (0457)         ; We do have to look at the status of the I2C block to see what is going on because if there was a
                                        (0458)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0459)         ; by setting the master restart bit and clearing to I2C_SCR (I2C_TX)
                                        (0460)         ; 2b. if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0461)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0462)         ; 3. once the ISR starts it will figure out which direction we are going with data (sending/receiving)
                                        (0463)         ;
0ADB: 60 D8    MOV   REG[0xD8],A        (0464)     mov   reg[I2CHW_DR], A
0ADD: 53 01    MOV   [0x1],A            (0465)         mov   [I2CHW_SlaveAddr], A
                                        (0466)         ;tst      reg[I2CHW_MSCR], I2CM_MASTEROP           ;do we even have control of the bus?
                                        (0467)         ;jz    notBusMasterErr
0ADF: 5D D9    MOV   A,REG[0xD9]        (0468)     mov   A, reg[I2CHW_MSCR]                               ;read the mscr register to look for pending master operations
0AE1: 21 0F    AND   A,0xF              (0469)     and   A, 0x0f                                          ;only look at the lower bits
0AE3: A0 11    JZ    0x0AF5             (0470)         jz    BusIdleSendStart
0AE5: 62 D9 02 MOV   REG[0xD9],0x2      
                                        (0471)         ; for a single master system this should not be an issue,
                                        (0472)         ; so we'll go ahead and request the restart.  If a stop condition was already generated
                                        (0473)         ; the state machine will automatically generate a start instead.
                                        (0474) 
                                        (0475)         ;SetI2CHW_SCR I2CM_RESTRT
                                        (0476)     ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0477)         ;SetI2CHW_SCR          I2C_TX                                ;even though the restart has been requested the state
                                        (0478)         ;mov      reg[I2CHW_SCR], I2C_TX                   ;even though the restart has been requested the state
                                        (0479) 
                                        (0480) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0481)         SetI2CHW_MSCR I2CM_RESTRT
                                        (0482) ;ELSE
                                        (0483) ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0484) ;ENDIF
0AE8: 49 D7 04 TST   REG[0xD7],0x4      (0485)     tst   reg[I2CHW_SCR], I2C_TX
0AEB: B0 05    JNZ   0x0AF1             (0486)     jnz   I2C_RestartRecieve
0AED: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0487) 
                                        (0488) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0489)     SetI2CHW_SCR I2C_TX                                    ;even though the restart has been requested the state
                                        (0490) ;ELSE
                                        (0491) ;    mov   reg[I2CHW_SCR], I2C_TX                          ;send Ack
                                        (0492) ;ENDIF
                                        (0493) 
                                        (0494)     RAM_EPILOGUE RAM_USE_CLASS_4
0AF0: 7F       RET                      (0495)     ret
0AF1: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0496) I2C_RestartRecieve:
                                        (0497) 
                                        (0498) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0499)     SetI2CHW_SCR 0                                         ;even though the restart has been requested the state
                                        (0500) ;ELSE
                                        (0501) ;    mov   reg[I2CHW_SCR], 0                               ;send Ack
                                        (0502) ;ENDIF
                                        (0503) 
                                        (0504)    RAM_EPILOGUE RAM_USE_CLASS_4
0AF4: 7F       RET                      (0505)    ret
                                        (0506) 
                                        (0507) BusIdleSendStart:
0AF5: 51 01    MOV   A,[0x1]            (0508)    mov    A, [I2CHW_SlaveAddr]
0AF7: 90 76    CALL  0x0B6F             (0509)    call   I2C_DoStart
                                        (0510)    ;Since something appears to be messed up do the next best thing to a repeat start, send a start.
                                        (0511)    RAM_EPILOGUE RAM_USE_CLASS_4
0AF9: 7F       RET                      (0512)    ret
0AFA: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0513) 
                                        (0514) .ENDSECTION
                                        (0515) 
                                        (0516) .SECTION
                                        (0517) 
                                        (0518) ;-----------------------------------------------------------------------------
                                        (0519) ;  FUNCTION NAME: I2CHW_fSendRepeatStart
                                        (0520) ;
                                        (0521) ;  DESCRIPTION:
                                        (0522) ;    Send repeated start condition and send slave address.
                                        (0523) ;
                                        (0524) ;-----------------------------------------------------------------------------
                                        (0525) ;
                                        (0526) ;  ARGUMENTS:
                                        (0527) ;    I2CHW_bAddr - Contains the slave address and transfer direction.
                                        (0528) ;
                                        (0529) ;  RETURNS:
                                        (0530) ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0531) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0532) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0533) ;
                                        (0534) ;  SIDE EFFECTS:
                                        (0535) ;    The A and X registers may be modified by this or future implementations
                                        (0536) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0537) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0538) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0539) ;    functions.
                                        (0540) ;          
                                        (0541) ;    Currently only the page pointer registers listed below are modified: 
                                        (0542) ;          CUR_PP
                                        (0543) ;
                                        (0544) ;  THEORY of OPERATION or PROCEDURE:
                                        (0545) ;    Prepare to send start by setting SCl and SDA high.
                                        (0546) ;    must be followed directly by I2CHW_start.
                                        (0547) ;
                                        (0548) ;-----------------------------------------------------------------------------
                                        (0549)  I2CHW_fSendRepeatStart:
                                        (0550) _I2CHW_fSendRepeatStart:
                                        (0551)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0552) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0553)     ;wait if the bus is already busy...
0AFD: 08       PUSH  A                  (0554)     push  A
0AFE: 55 00 00 MOV   [0x0],0x0          (0555)     mov   [I2CHW_bStatus], 0x00
                                        (0556) I2CMSCR_NotReady4:
0B01: 51 02    MOV   A,[0x2]            (0557)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0B03: 47 02 80 TST   [0x2],0x80         (0558)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0559)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0560)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0561)           ;For multi master operations, a pening start or restart
                                        (0562)           ;request might be OK, the master might be waiting to
                                        (0563)           ;acquire the bus from another master
0B06: BF FA    JNZ   0x0B01             (0564)     jnz   I2CMSCR_NotReady4
0B08: 18       POP   A                  (0565)     pop   A
                                        (0566) 
                                        (0567) 
0B09: 64       ASL   A                  (0568)     asl   a                                                ; Shift address to the left
0B0A: 79       DEC   X                  (0569)     dec   x                                                ; If zero, C flag will be set
0B0B: C0 03    JC    0x0B0F             (0570)     jc    I2C_DoRepeatStart                                ; Do a write if zero
0B0D: 29 01    OR    A,0x1              (0571)     or    a,0x01                                           ; Set Read flag
                                        (0572) 
                                        (0573) I2C_DoRepeatStart:
                                        (0574)     ;here the path through the routine is dependent on the previous transmission.
                                        (0575)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0576)         ; I2C interrupt
                                        (0577)         ; 2. the master must NAK the byte if he is reading from the slave.
                                        (0578)         ; We don't have to look at the status of the I2C block to see what is going on because if there was a
                                        (0579)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0580)         ; by setting the master restart bit and writing to I2C_SCR (I2C_TX)
                                        (0581)         ; if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0582)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0583)         ;
0B0F: 60 D8    MOV   REG[0xD8],A        (0584)     mov   reg[I2CHW_DR], A
0B11: 53 01    MOV   [0x1],A            (0585)     mov   [I2CHW_SlaveAddr], A
0B13: 49 D9 04 TST   REG[0xD9],0x4      (0586)     tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
0B16: A0 1C    JZ    0x0B33             (0587)     jz    notBusMaster1
0B18: 62 D9 02 MOV   REG[0xD9],0x2      
0B1B: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0588)     ;SetI2CHW_MSCR  I2CM_RESTRT
                                        (0589)     ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0590)     ;SetI2CHW_SCR         I2C_TX                           ;even though the restart has been requested the state
                                        (0591)     ;mov      reg[I2CHW_SCR], I2C_TX                       ;even though the restart has been requested the state
                                        (0592)                                                                 ; machine is stalling the SCL and has to be 'released'
                                        (0593) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0594)     SetI2CHW_MSCR I2CM_RESTRT
                                        (0595)     SetI2CHW_SCR  0                                        ;getting a restart out requires a 0 into the SCR reg
                                        (0596) ;ELSE
                                        (0597) ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0598) ;    mov   reg[I2CHW_SCR], 0                               ;getting a restart out requires a 0 into the SCR reg
                                        (0599) ;ENDIF
                                        (0600) 
                                        (0601) WaitRepStrtCompl:
0B1E: 5D D7    MOV   A,REG[0xD7]        (0602)     mov   A,  reg[I2CHW_SCR]
0B20: 49 D7 01 TST   REG[0xD7],0x1      (0603)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0B23: AF FA    JZ    0x0B1E             (0604)     jz    WaitRepStrtCompl
0B25: 49 D7 02 TST   REG[0xD7],0x2      (0605)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0B28: B0 07    JNZ   0x0B30             (0606)     jnz   Err_Exit_RepStart
0B2A: 55 00 01 MOV   [0x0],0x1          (0607)     mov   [I2CHW_bStatus], 0x01
0B2D: 50 01    MOV   A,0x1              (0608)     mov   A, 01
                                        (0609)     RAM_EPILOGUE RAM_USE_CLASS_4
0B2F: 7F       RET                      (0610)     ret
                                        (0611) 
                                        (0612) Err_Exit_RepStart:
0B30: 50 00    MOV   A,0x0              (0613)     mov   A, 0
                                        (0614)     RAM_EPILOGUE RAM_USE_CLASS_4
0B32: 7F       RET                      (0615)     ret
                                        (0616) 
                                        (0617)  notBusMaster1:
                                        (0618)     ;SetI2CHW_MSCR 0
                                        (0619)     ;mov reg[I2CHW_MSCR], 0                                ;we certainly cant restart if we've not Master
                                        (0620)     ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
0B33: 50 00    MOV   A,0x0              (0621)     mov   A, 0
                                        (0622)     RAM_EPILOGUE RAM_USE_CLASS_4
0B35: 7F       RET                      (0623)     ret
0B36: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0624) 
                                        (0625) .ENDSECTION
                                        (0626) 
                                        (0627) .SECTION
                                        (0628) ;-----------------------------------------------------------------------------
                                        (0629) ;  FUNCTION NAME: I2CHW_fSendStart
                                        (0630) ;
                                        (0631) ;  DESCRIPTION:
                                        (0632) ;    Generates start condition and sends slave address.
                                        (0633) ;
                                        (0634) ;-----------------------------------------------------------------------------
                                        (0635) ;
                                        (0636) ;  ARGUMENTS:
                                        (0637) ;    A => Contains the slave address.
                                        (0638) ;
                                        (0639) ;  RETURNS:
                                        (0640) ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0641) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0642) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0643) ;
                                        (0644) ;  SIDE EFFECTS:
                                        (0645) ;    The A and X registers may be modified by this or future implementations
                                        (0646) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0647) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0648) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0649) ;    functions.
                                        (0650) ;          
                                        (0651) ;    Currently only the page pointer registers listed below are modified: 
                                        (0652) ;          CUR_PP
                                        (0653) ;
                                        (0654) ;  THEORY of OPERATION or PROCEDURE:
                                        (0655) ;   Send start by setting SDA low while SCL is high. Set
                                        (0656) ;   SCL low in preparation to send address. 
                                        (0657) ;   Sends address, waits for byte complete
                                        (0658) ;   An address must be followed by a read or write of data if it was acked by a slave
                                        (0659) ;
                                        (0660) ;  WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0661) ;   flag is set to return.
                                        (0662) ;
                                        (0663) ;
                                        (0664) ;-----------------------------------------------------------------------------
                                        (0665)  I2CHW_fSendStart:
                                        (0666) _I2CHW_fSendStart:
                                        (0667)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0668) 	RAM_SETPAGE_CUR >I2CHW_bStatus 
                                        (0669)     ;wait if the bus is already busy...
0B39: 08       PUSH  A                  (0670)     push  A
0B3A: 55 00 00 MOV   [0x0],0x0          (0671)     mov   [I2CHW_bStatus], 0x00
                                        (0672) I2CMSCR_NotReady5:
0B3D: 51 02    MOV   A,[0x2]            (0673)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0B3F: 47 02 80 TST   [0x2],0x80         (0674)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0675)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0676)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0677)           ;For multi master operations, a pening start or restart
                                        (0678)           ;request might be OK, the master might be waiting to
                                        (0679)           ;acquire the bus from another master
0B42: BF FA    JNZ   0x0B3D             (0680)     jnz   I2CMSCR_NotReady5
0B44: 18       POP   A                  (0681)     pop   A
0B45: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0682) 
                                        (0683) 
                                        (0684)     ; disable the interrupt
                                        (0685)         ; *** NOT REENABLED ***
                                        (0686)         ;
                                        (0687)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0B48: 49 D7 01 TST   REG[0xD7],0x1      (0688)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ;If there is a pending BYTE_COMPL here
                                        (0689)                                                                 ;it is highly probable that a start is not the
                                        (0690)                                                                                                                     ;correct thing to do.
                                        (0691)                                                                                                                     ;leaving
0B4B: B0 20    JNZ   0x0B6C             (0692)     jnz   Err_Exit_Start
                                        (0693) 
0B4D: 64       ASL   A                  (0694)     asl   a                                                ; Shift address to the left
0B4E: 79       DEC   X                  (0695)     dec   x                                                ; If zero, C flag will be set
0B4F: C0 03    JC    0x0B53             (0696)     jc    I2C_SndWRStart                                   ; Do a write if zero
0B51: 29 01    OR    A,0x1              (0697)     or    a,0x01                                           ; Set Read flag
                                        (0698) I2C_SndWRStart:
0B53: 60 D8    MOV   REG[0xD8],A        (0699)     mov   reg[I2CHW_DR], A
0B55: 53 01    MOV   [0x1],A            (0700)     mov   [I2CHW_SlaveAddr], A
0B57: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0701)     ;SetI2CHW_MSCR, I2CM_SNDSTRT
                                        (0702)     ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0703) 
                                        (0704) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0705)     SetI2CHW_MSCR I2CM_SNDSTRT
                                        (0706) ;ELSE
                                        (0707) ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0708) ;ENDIF
                                        (0709) 
                                        (0710) 
                                        (0711) WaitStrtByteCompl:
0B5A: 5D D7    MOV   A,REG[0xD7]        (0712)     mov   A,  reg[I2CHW_SCR]
0B5C: 49 D7 01 TST   REG[0xD7],0x1      (0713)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0B5F: AF FA    JZ    0x0B5A             (0714)     jz    WaitStrtByteCompl
0B61: 49 D7 02 TST   REG[0xD7],0x2      (0715)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0B64: B0 07    JNZ   0x0B6C             (0716)     jnz   Err_Exit_Start
0B66: 55 00 01 MOV   [0x0],0x1          (0717)     mov   [I2CHW_bStatus], 0x01
0B69: 50 01    MOV   A,0x1              (0718)     mov   A, 01
                                        (0719)     RAM_EPILOGUE RAM_USE_CLASS_4
0B6B: 7F       RET                      (0720)     ret
                                        (0721) Err_Exit_Start:
0B6C: 50 00    MOV   A,0x0              (0722)     mov   A, 0
                                        (0723)     RAM_EPILOGUE RAM_USE_CLASS_4
0B6E: 7F       RET                      (0724)     ret
0B6F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0725) 
                                        (0726) I2C_DoStart:
                                        (0727)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0728)     RAM_SETPAGE_CUR >I2CHW_SlaveAddr
                                        (0729)     ;here we are not required to test for master operation since we are only attempting to gain control of the bus
                                        (0730)     ; by attempting to assert a Start
                                        (0731)     
0B72: 60 D8    MOV   REG[0xD8],A        (0732)     mov   reg[I2CHW_DR], A
0B74: 53 01    MOV   [0x1],A            (0733)     mov   [I2CHW_SlaveAddr], A
0B76: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0734)     ;SetI2CHW_MSCR  I2CM_SNDSTRT
                                        (0735)     ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0736) 
                                        (0737) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0738)     SetI2CHW_MSCR I2CM_SNDSTRT
                                        (0739) ;ELSE
                                        (0740) ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0741) ;ENDIF
                                        (0742)     RAM_EPILOGUE RAM_USE_CLASS_4
0B79: 7F       RET                      (0743)     ret
0B7A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0744) ;
                                        (0745) ;   DO NOT PLACE
                                        (0746) ;   .SECTION
                                        (0747) ;   .ENDSECTION
                                        (0748) ;   _fSendStart USES CODE BELOW
                                        (0749) ;
                                        (0750) ;-----------------------------------------------------------------------------
                                        (0751) ;  FUNCTION NAME: I2CHW_fWrite
                                        (0752) ;
                                        (0753) ;  DESCRIPTION:
                                        (0754) ;    Writes a byte to the I2C master bus.
                                        (0755) ;
                                        (0756) ;-----------------------------------------------------------------------------
                                        (0757) ;
                                        (0758) ;  ARGUMENTS:
                                        (0759) ;    A contains Data to be written to I2C slave.
                                        (0760) ;
                                        (0761) ;  RETURNS:
                                        (0762) ;    1 If ACKed, else 0
                                        (0763) ;
                                        (0764) ;  SIDE EFFECTS:
                                        (0765) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0766) ;
                                        (0767) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0768) ;
                                        (0769) ;  FUNCTION NAME: I2CHW_fWrite
                                        (0770) ;
                                        (0771) ;  DESCRIPTION:
                                        (0772) ;    Writes a data byte to the I2C master bus. 
                                        (0773) ;
                                        (0774) ;  ARGUMENTS:
                                        (0775) ;    Reg A contains slave address.
                                        (0776) ;    I2CHW_bData - Contains data to be transmitted.
                                        (0777) ;
                                        (0778) ;  RETURNS:
                                        (0779) ;    I2CHW_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0780) ;
                                        (0781) ;  SIDE EFFECTS:
                                        (0782) ;    The A and X registers may be modified by this or future implementations
                                        (0783) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0784) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0785) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0786) ;    functions.
                                        (0787) ;          
                                        (0788) ;    Currently only the page pointer registers listed below are modified: 
                                        (0789) ;          CUR_PP
                                        (0790) ;
                                        (0791) ;    Send data byte to slave. .
                                        (0792) ;
                                        (0793) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0794) ;    flag is set to return.
                                        (0795) ;
                                        (0796)  I2CHW_fWrite:
                                        (0797) _I2CHW_fWrite:
                                        (0798)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0799) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0800)     ; disable the interrupt
                                        (0801)         ; *** NOT REENABLED ***
                                        (0802)         ;
0B7D: 60 D8    MOV   REG[0xD8],A        (0803)     mov   reg[I2CHW_DR],A                                  ; Put data in Data Reg
0B7F: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0804)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0B82: 5D D9    MOV   A,REG[0xD9]        (0805)     mov   A,  reg[I2CHW_MSCR]                              ;MSCR into A incase there is an error here
0B84: 49 D9 04 TST   REG[0xD9],0x4      (0806)     tst   reg[I2CHW_MSCR],I2CM_MASTEROP                    ;Do we have control of the bus?
0B87: A0 19    JZ    0x0BA1             (0807)     jz    Err_Exit_fWrite
                                        (0808) 
0B89: 55 00 00 MOV   [0x0],0x0          (0809)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
0B8C: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0810)     ;SetI2CHW_SCR I2C_TX
                                        (0811)     ;mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                                        (0812) 
                                        (0813) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0814)         SetI2CHW_SCR I2C_TX                                ; Put data in Data Reg
                                        (0815) ;ELSE
                                        (0816) ;    mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                                        (0817) ;ENDIF
                                        (0818) 
                                        (0819) 
                                        (0820) I2CHW_write:
                                        (0821) _I2CHW_write:
                                        (0822) ;    mov   reg[I2CHW_SCR],A                                ; Put data in bData
                                        (0823) ;   jmp   I2CHW_get_ack                                    ; This jump is not required since it falls
                                        (0824) 
                                        (0825) WaitTXByteCompl:
0B8F: 5D D7    MOV   A,REG[0xD7]        (0826)     mov   A, reg[I2CHW_SCR]
0B91: 49 D7 01 TST   REG[0xD7],0x1      (0827)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0B94: AF FA    JZ    0x0B8F             (0828)     jz    WaitTXByteCompl
0B96: 49 D7 02 TST   REG[0xD7],0x2      (0829)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0B99: B0 07    JNZ   0x0BA1             (0830)     jnz   Err_Exit_fWrite
0B9B: 55 00 FF MOV   [0x0],0xFF         (0831)     mov   [I2CHW_bStatus], 0xff
0B9E: 50 01    MOV   A,0x1              (0832)     mov   A, 01
                                        (0833)     RAM_EPILOGUE RAM_USE_CLASS_4
0BA0: 7F       RET                      (0834)     ret
                                        (0835) 
                                        (0836) Err_Exit_fWrite:
0BA1: 50 00    MOV   A,0x0              (0837)     mov   A, 0
0BA3: 53 00    MOV   [0x0],A            (0838)     mov   [I2CHW_bStatus], A
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
0BA5: 7F       RET                      (0840)     ret
0BA6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0841) 
                                        (0842) .ENDSECTION
                                        (0843) 
                                        (0844) .SECTION
                                        (0845) ;-----------------------------------------------------------------------------
                                        (0846) ;  FUNCTION NAME: I2CHW_get_ack
                                        (0847) ;
                                        (0848) ;  DESCRIPTION:
                                        (0849) ;    Get slave acknowledge response. Used to poll for I2C_BYTE_COMPL and then test Ack (I2C_LST_BIT)
                                        (0850) ;
                                        (0851) ;-----------------------------------------------------------------------------
                                        (0852) ;
                                        (0853) ;  ARGUMENTS:
                                        (0854) ;
                                        (0855) ;  RETURNS:
                                        (0856) ;    Sets flag in I2CHW_bStatus if ACKed by Slave.  !!!
                                        (0857) ;
                                        (0858) ;  SIDE EFFECTS:
                                        (0859) ;    The A and X registers may be modified by this or future implementations
                                        (0860) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0861) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0862) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0863) ;    functions.
                                        (0864) ;          
                                        (0865) ;    Currently only the page pointer registers listed below are modified: 
                                        (0866) ;          CUR_PP
                                        (0867) ;
                                        (0868) ;    Do the ack clock and check for Slave ACK
                                        (0869) ;
                                        (0870) I2CHW_get_ack:
                                        (0871) _I2CHW_get_ack:
                                        (0872)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0873) 	RAM_SETPAGE_CUR >I2CHW_bStatus
0BA9: 26 00 FE AND   [0x0],0xFE         (0874)     and [I2CHW_bStatus], ~I2CHW_SLAVE_ACKed
0BAC: 49 D7 01 TST   REG[0xD7],0x1      (0875)     tst reg[I2CHW_SCR], I2C_BYTE_COMPL
0BAF: BF F6    JNZ   0x0BA6             (0876)     jnz I2CHW_get_ack
0BB1: 49 D7 02 TST   REG[0xD7],0x2      (0877)     tst reg[I2CHW_SCR], I2C_LST_BIT
0BB4: B0 04    JNZ   0x0BB9             (0878)     jnz notAcked
0BB6: 2E 00 01 OR    [0x0],0x1          (0879)     or [I2CHW_bStatus], I2CHW_SLAVE_ACKed
                                        (0880) notAcked:
                                        (0881)     RAM_EPILOGUE RAM_USE_CLASS_4
0BB9: 7F       RET                      (0882)     ret
0BBA: 62 D0 00 MOV   REG[0xD0],0x0      
0BBD: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0883) 
                                        (0884) .ENDSECTION
                                        (0885) 
                                        (0886) .SECTION
                                        (0887) 
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;  FUNCTION NAME: I2CHW_bRead
                                        (0890) ;
                                        (0891) ;  DESCRIPTION:
                                        (0892) ;    Reads 1 data byte from the I2C master bus.
                                        (0893) ;
                                        (0894) ;-----------------------------------------------------------------------------
                                        (0895) ;
                                        (0896) ;  ARGUMENTS:
                                        (0897) ;    Reg A Contains the Slave Address.
                                        (0898) ;    I2CHW_bStatus - Set for no ack to be followed by stop.
                                        (0899) ;    Clear for ack to indicate more data to follow.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2CHW_bData - Contains received data.
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Must be followed by I2CHW_put_ack.
                                        (0915) ;    The I2CHW interrupt should be disabled since this routine will poll the
                                        (0916) ;    reg[I2CHW_SCR] to determine when a byte is available
                                        (0917) ;
                                        (0918) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0919) ;    flag is set to return.
                                        (0920) ;
                                        (0921) I2CHW_bRead:
                                        (0922) _I2CHW_bRead:
                                        (0923)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0924) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0925)     ; disable the interrupt
                                        (0926)     ; *** NOT REENABLED ***
                                        (0927)     ;
                                        (0928)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0BC0: 49 D9 04 TST   REG[0xD9],0x4      (0929)     tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
0BC3: A0 28    JZ    0x0BEC             (0930)     jz    notBusMaster2
                                        (0931) 
0BC5: 55 00 00 MOV   [0x0],0x0          (0932)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                                        (0933)     ;or    I2CHW_SEND_ACK                                  ; Set ACK flag
                                        (0934) ;
                                        (0935) ; Check for the special case of the first read after and address is sent
                                        (0936) ;
                                        (0937) 
0BC8: 08       PUSH  A                  (0938)     push  A                                                ;preserve the information about wether to ACK or NAK this byte
0BC9: 5D D7    MOV   A,REG[0xD7]        (0939)     mov   A, reg[I2CHW_SCR]
0BCB: 49 D7 08 TST   REG[0xD7],0x8      (0940)     tst   reg[I2CHW_SCR], I2C_ADDRIN
0BCE: A0 04    JZ    0x0BD3             (0941)     jz    WaitRXByteCompl                                  ;addr bit not set then this is a normal read
0BD0: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0942)     ;SetI2CHW_SCR 0
                                        (0943)     ;mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0944) 
                                        (0945) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0946)     SetI2CHW_SCR 0                                         ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0947) ;ELSE
                                        (0948) ;    mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0949) ;ENDIF
                                        (0950)                                                            ; through to I2CHW_put_ack.
                                        (0951) 
                                        (0952)     ;must DROP through to send an Ack and another byte,
                                        (0953)     ;to stop reading we NAK the slave
                                        (0954) WaitRXByteCompl:
0BD3: 49 D7 01 TST   REG[0xD7],0x1      (0955)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0BD6: AF FC    JZ    0x0BD3             (0956)     jz    WaitRXByteCompl
                                        (0957) 
0BD8: 18       POP   A                  (0958)     pop   A                                                ;recover the saved ACK/NAK flag
0BD9: 21 FF    AND   A,0xFF             (0959)     and   A,0xFF                                           ; Is Ack flag set"
0BDB: A0 0A    JZ    0x0BE6             (0960)     jz    exit_bRead_NOACK                                 ; Don't ACK
                                        (0961) 
                                        (0962)         ;now if the ACK flag was set, Ack the data which will release the bus and start the next byte in
                                        (0963)         ;otherwise do NOTHING to the SCR reg.  This will allow the calling routine to generate a repeat start
                                        (0964)         ;or a stop depending on it's preference.
                                        (0965) 
                                        (0966) 
0BDD: 5D D8    MOV   A,REG[0xD8]        (0967)     mov   A, reg[I2CHW_DR]                                 ; Record data received
0BDF: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0968)     ;SetI2CHW_SCR I2C_ACKOUT
                                        (0969)     ;mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                                        (0970) 
                                        (0971) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0972)     SetI2CHW_SCR I2C_ACKOUT                                ; Record data received
                                        (0973) ;ELSE
                                        (0974) ;    mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                                        (0975) ;ENDIF
                                        (0976) 
0BE2: 55 00 01 MOV   [0x0],0x1          (0977)     mov   [I2CHW_bStatus],0x01                             ; Clear ACK flag
                                        (0978)     RAM_EPILOGUE RAM_USE_CLASS_4
0BE5: 7F       RET                      (0979)     ret
                                        (0980) 
                                        (0981) exit_bRead_NOACK:
0BE6: 5D D8    MOV   A,REG[0xD8]        (0982)     mov   A, reg[I2CHW_DR]                                 ; Record data received
                                        (0983)     ; send no Ack or Nak, the calling routine will have to decide to NAK or execute a repeat start.
                                        (0984)     ; sending nothing leaves the bus held in wait until a decision is made.
0BE8: 55 00 00 MOV   [0x0],0x0          (0985)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                                        (0986)     RAM_EPILOGUE RAM_USE_CLASS_4
0BEB: 7F       RET                      (0987)     ret
                                        (0988) 
                                        (0989) notBusMaster2:
0BEC: 55 00 FF MOV   [0x0],0xFF         (0990)    mov   [I2CHW_bStatus], 0xff
                                        (0991)    ;SetI2CHW_SCR 0
                                        (0992)    ;mov          reg[I2CHW_MSCR], 0                        ;we certainly cant restart if we've not Master
                                        (0993)    ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
                                        (0994)    RAM_EPILOGUE RAM_USE_CLASS_4
0BEF: 7F       RET                      (0995)    ret
                                        (0996) 
                                        (0997) .ENDSECTION
                                        (0998) 
                                        (0999) 
                                        (1000) .SECTION
                                        (1001) ;-----------------------------------------------------------------------------
                                        (1002) ;  FUNCTION NAME: I2CHW_SendStop
                                        (1003) ;
                                        (1004) ;  DESCRIPTION:
                                        (1005) ;    Assert stop condition.
                                        (1006) ;
                                        (1007) ;-----------------------------------------------------------------------------
                                        (1008) ;
                                        (1009) ;  ARGUMENTS: none
                                        (1010) ;
                                        (1011) ;  RETURNS: none
                                        (1012) ;
                                        (1013) ;  SIDE EFFECTS:
                                        (1014) ;    The A and X registers may be modified by this or future implementations
                                        (1015) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1016) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1017) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1018) ;    functions.
                                        (1019) ;
                                        (1020) ;  THEORY of OPERATION or PROCEDURE:
                                        (1021) ;     Send stop by releasing SDA high while SCL high. When in Master Read Mode, this
                                        (1022) ;     is done by nak'ing a read from the slave, in Master Write Mode this is done by clearing
                                        (1023) ;     the I2C_TX bit in  reg[I2CHW_SCR].  In either case this is a zero written to
                                        (1024) ;     reg[I2CHW_SCR].
                                        (1025) ;
                                        (1026)  I2CHW_SendStop:
                                        (1027) _I2CHW_SendStop:
                                        (1028)     RAM_PROLOGUE RAM_USE_CLASS_1
0BF0: 49 D9 04 TST   REG[0xD9],0x4      (1029)     tst   reg[I2CHW_MSCR], I2CM_MASTEROP                   ;do we even have control of the bus?
0BF3: A0 04    JZ    0x0BF8             (1030)     jz    notBusMaster3
0BF5: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (1031)     ;SetI2CHW_SCR 0
                                        (1032)     ;mov  reg[I2CHW_SCR], 0
                                        (1033) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (1034)     SetI2CHW_SCR 0                                         ; Put data in Data Reg
                                        (1035) ;ELSE
                                        (1036) ;    mov   reg[I2CHW_SCR], 0                               ; Put data in Data Reg
                                        (1037) ;ENDIF
                                        (1038) 
                                        (1039) notBusMaster3:
                                        (1040)     RAM_EPILOGUE RAM_USE_CLASS_1
0BF8: 7F       RET                      (1041)     ret
0BF9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1042) .ENDSECTION
                                        (1043) 
                                        (1044) .SECTION
                                        (1045) ;-----------------------------------------------------------------------------
                                        (1046) ;  FUNCTION NAME: I2CHW_bReadBusStatus
                                        (1047) ;
                                        (1048) ;  DESCRIPTION:
                                        (1049) ;     Returns the Status bits in the bStatus Register
                                        (1050) ;
                                        (1051) ;-----------------------------------------------------------------------------
                                        (1052) ;
                                        (1053) ;  ARGUMENTS:
                                        (1054) ;
                                        (1055) ;  RETURNS:
                                        (1056) ;     BYTE  bStatus -  Bus status data.  Use the following defined bits
                                        (1057) ;     returned in A.
                                        (1058) ;       I2CHW_RepStart:                     equ  0x01
                                        (1059) ;       I2CHW_NoStop:                       equ  0x02
                                        (1060) ;       I2CHW_NAKnextWr:                    equ  0x04
                                        (1061) ;
                                        (1062) ;  SIDE EFFECTS:
                                        (1063) ;    The A and X registers may be modified by this or future implementations
                                        (1064) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1065) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1066) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1067) ;    functions.
                                        (1068) ;          
                                        (1069) ;  THEORY of OPERATION or PROCEDURE:
                                        (1070) ;     Read the Bus Status register.
                                        (1071) ;
                                        (1072) 
                                        (1073)  I2CHW_bReadBusStatus:
                                        (1074) _I2CHW_bReadBusStatus:
                                        (1075)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1076)    RAM_SETPAGE_CUR >I2CHW_bStatus				                      ;Set the Page Pointer for LMM
0BFC: 51 00    MOV   A,[0x0]            (1077)    mov   A, [I2CHW_bStatus]                      ;return the status in A
                                        (1078)    RAM_EPILOGUE RAM_USE_CLASS_4
0BFE: 7F       RET                      (1079)    ret
                                        (1080) 
                                        (1081) .ENDSECTION
                                        (1082) 
                                        (1083) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1084) .SECTION
                                        (1085) ;-----------------------------------------------------------------------------
                                        (1086) ;  FUNCTION NAME: I2CHW_fReadBytes
                                        (1087) ;
                                        (1088) ;  DESCRIPTION:
                                        (1089) ;
                                        (1090) ;-----------------------------------------------------------------------------
                                        (1091) ;
                                        (1092) ;  ARGUMENTS:
                                        (1093) ;      A => Address of slave
                                        (1094) ;      X => Pointer to other arguments.
                                        (1095) ;    [x] => LSB of Array address to put data in.
                                        (1096) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (1097) ;  [X-2] => Count of bytes to read.
                                        (1098) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (1099) ;           to determine if:
                                        (1100) ;             0x01 => Use RepeatStart instead of Start
                                        (1101) ;             0x02 => Don't send Stop
                                        (1102) ;
                                        (1103) ;  RETURNS:       None
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;    I2C and block must be operational.
                                        (1117) ;    This routine will enable the I2C interrupt!
                                        (1118) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (1119) ;    pend on the ISR_ACTIVE bit until it can run
                                        (1120) ;
                                        (1121) IF	(TOOLCHAIN & HITECH)
                                        (1122) RxArray:      set   0
                                        (1123) RxByteCount:  set  -2
                                        (1124) RxMode:       set  -3
                                        (1125) ELSE
                                        (1126) RxArray:      equ   0
                                        (1127) RxByteCount:  equ  -2
                                        (1128) RxMode:       equ  -3
                                        (1129) ENDIF
                                        (1130) 
                                        (1131) 
                                        (1132)  I2CHW_fReadBytes:
                                        (1133)     push  A
                                        (1134) I2CMSCR_NotReady1Smm:
                                        (1135)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1136)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1137)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1138)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1139)           ;For multi master operations, a pening start or restart
                                        (1140)           ;request might be OK, the master might be waiting to
                                        (1141)           ;acquire the bus from another master
                                        (1142)         jnz   I2CMSCR_NotReady1Smm
                                        (1143)     pop   A
                                        (1144)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared by ISR
                                        (1145)     asl   A                                                ; Shift address to the left to make
                                        (1146)                                                            ; a complete byte with the R/W bit.
                                        (1147)     or    A,0x01                                           ; OR the address with the Read bit.
                                        (1148)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1149)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1150)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1151)     mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1152)     mov   [I2CHW_bStatus],A
                                        (1153)     ;
                                        (1154)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1155)         ;
                                        (1156)         push   X                                                ;preserve since it's used later
                                        (1157)         mov    A, [X+RxByteCount]                               ;get the write buf size
                                        (1158)         push   A
                                        (1159)         push   A                                                                                            ;this will be ignored
                                        (1160)         mov    A, [X+RxArray]                                   ;get the write buf addr
                                        (1161)         push   A
                                        (1162)         mov    X, sp
                                        (1163)         dec    X
                                        (1164)         call  I2CHW_InitWrite                              ;sets the addr and byte count to write to
                                        (1165)         add SP, -3
                                        (1166)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1167) 
                                        (1168)     mov   A,[I2CHW_SlaveAddr]
                                        (1169)     tst   [x+RxMode],I2CHW_RepStart
                                        (1170)     jnz   DoRestartRxSmm
                                        (1171)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1172)     jnz   DoRestartRxSmm
                                        (1173)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1174)     jmp   CheckRxAckSmm
                                        (1175) DoRestartRxSmm:
                                        (1176)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1177)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (1178)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (1179)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (1180) 
                                        (1181) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
                                        (1182)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (1183)         ;is finished.
                                        (1184) ;End_RD:
                                        (1185)     ret
                                        (1186) 
                                        (1187) .ENDSECTION
                                        (1188) 
                                        (1189) .SECTION
                                        (1190) ;-----------------------------------------------------------------------------
                                        (1191) ;  FUNCTION NAME: I2CHW_bWriteBytes
                                        (1192) ;
                                        (1193) ;  DESCRIPTION:
                                        (1194) ;    Write multiple data bits to slave device.
                                        (1195) ;
                                        (1196) ;-----------------------------------------------------------------------------
                                        (1197) ;
                                        (1198) ;  ARGUMENTS:
                                        (1199) ;     A => Address of slave
                                        (1200) ;     X => Pointer to other arguments.
                                        (1201) ;   [x] => LSB of Array address to put data in.
                                        (1202) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (1203) ; [X-2] => Count of bytes to write.
                                        (1204) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (1205) ;          to determine if:
                                        (1206) ;              0x01 => Use RePeatStart instead of Start
                                        (1207) ;              0x02 => Don't send Stop
                                        (1208) ;
                                        (1209) ;
                                        (1210) ;  RETURNS:     None
                                        (1211) ;
                                        (1212) ;  SIDE EFFECTS:
                                        (1213) ;    The A and X registers may be modified by this or future implementations
                                        (1214) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1215) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1216) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1217) ;    functions.
                                        (1218) ;          
                                        (1219) IF	(TOOLCHAIN & HITECH)
                                        (1220) TxArray:      set   0
                                        (1221) TxByteCount:  set  -2
                                        (1222) TxMode:       set  -3
                                        (1223) ELSE
                                        (1224) TxArray:      equ   0
                                        (1225) TxByteCount:  equ  -2
                                        (1226) TxMode:       equ  -3
                                        (1227) ENDIF
                                        (1228) 
                                        (1229)  I2CHW_bWriteBytes:
                                        (1230)     push  A
                                        (1231) I2CMSCR_NotReady2Smm:
                                        (1232)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1233)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1234)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1235)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1236)           ;For multi master operations, a pening start or restart
                                        (1237)           ;request might be OK, the master might be waiting to
                                        (1238)           ;acquire the bus from another master
                                        (1239)         jnz   I2CMSCR_NotReady2Smm
                                        (1240)     pop   A
                                        (1241)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared at end of ISR
                                        (1242)     asl   A                                                ; Shift address to the left to make
                                        (1243)                                                            ; a complete byte with the R/W bit.
                                        (1244)                                                            ; The ASL takes care of clearing bit 0.
                                        (1245)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1246)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1247)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1248)     mov   A, [X+TxMode]                                                             ; place the TxMode in status so ISR can access it
                                        (1249)     mov   [I2CHW_bStatus],A
                                        (1250)     ;
                                        (1251)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1252)         ;
                                        (1253)         push   X                                                ;preserve since it's used later
                                        (1254)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1255)                                                                 ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1256)         mov    A, [X+TxByteCount]                               ;get the write buf size
                                        (1257)         push   A
                                        (1258)         push   A                                                                                            ;this will be ignored
                                        (1259)         mov    A, [X+TxArray]                                   ;get the write buf addr
                                        (1260)         push   A
                                        (1261)         mov    X, sp
                                        (1262)         dec    X
                                        (1263)         call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
                                        (1264)         add    SP, -3
                                        (1265)         pop    X                                                ;restore X to be used for the rest of this routine
                                        (1266)     ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (1267) 
                                        (1268) 
                                        (1269)     mov   A,[I2CHW_SlaveAddr]
                                        (1270)     tst   [x+TxMode],I2CHW_RepStart
                                        (1271)     jnz   DoRestartTxSmm
                                        (1272)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1273)     jnz   DoRestartRxSmm
                                        (1274)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1275)     jmp   DoTxAckSmm
                                        (1276) DoRestartTxSmm:
                                        (1277)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1278) DoTxAckSmm:
                                        (1279) 
                                        (1280) 
                                        (1281) ;WriteSlaveAck:
                                        (1282)     ret
                                        (1283) 
                                        (1284) .ENDSECTION
                                        (1285) 
                                        (1286) .SECTION
                                        (1287) ;-----------------------------------------------------------------------------
                                        (1288) ;  FUNCTION NAME: I2CHW_bWriteCBytes
                                        (1289) ;
                                        (1290) ;  DESCRIPTION:
                                        (1291) ;    Write multiple data bits to slave device from ROM
                                        (1292) ;
                                        (1293) ;-----------------------------------------------------------------------------
                                        (1294) ;
                                        (1295) ;  ARGUMENTS:
                                        (1296) ;      A => Address of slave
                                        (1297) ;      X => Pointer to other arguments.
                                        (1298) ;     [x] => LSB of ROM Array address to put data in.
                                        (1299) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (1300) ;   [X-2] => Count of bytes to write.
                                        (1301) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (1302) ;            to determine if:
                                        (1303) ;               0x01 => Use RepeatStart instead of Start
                                        (1304) ;               0x02 => Don't send Stop
                                        (1305) ;
                                        (1306) ;  RETURNS:
                                        (1307) ;    None
                                        (1308) ;
                                        (1309) ;  SIDE EFFECTS:
                                        (1310) ;    The A and X registers may be modified by this or future implementations
                                        (1311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1314) ;    functions.
                                        (1315) ;          
                                        (1316) IF	(TOOLCHAIN & HITECH)
                                        (1317) TxCArrayLSB:   set   0
                                        (1318) TxCArrayMSB:   set  -1
                                        (1319) TxCByteCount:  set  -2
                                        (1320) TxCMode:       set  -3
                                        (1321) ELSE
                                        (1322) TxCArrayLSB:   equ   0
                                        (1323) TxCArrayMSB:   equ  -1
                                        (1324) TxCByteCount:  equ  -2
                                        (1325) TxCMode:       equ  -3
                                        (1326) ENDIF
                                        (1327) 
                                        (1328)  I2CHW_bWriteCBytes:
                                        (1329)     push  A
                                        (1330) I2CMSCR_NotReady3Smm:
                                        (1331)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1332)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1333)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1334)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1335)           ;For multi master operations, a pening start or restart
                                        (1336)           ;request might be OK, the master might be waiting to
                                        (1337)           ;acquire the bus from another master
                                        (1338)         jnz   I2CMSCR_NotReady3Smm
                                        (1339)     pop   A
                                        (1340)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
                                        (1341)         asl   A                                                 ; Shift address to the left to make
                                        (1342)                                                            ; a complete byte with the R/W bit.
                                        (1343)                                                            ; The ASL takes care of clearing bit 0.
                                        (1344)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1345)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1346)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1347)         mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1348)     mov   [I2CHW_bStatus],A
                                        (1349)     ;
                                        (1350)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1351)         ;
                                        (1352)         push   X                                                ;preserve X since it's used later
                                        (1353)         mov    A, 0                                             ;get the write buf size (this is the hi order part)
                                        (1354)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1355)         jnc     . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1356)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
                                        (1357)         push   A
                                        (1358)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
                                        (1359)         push   A
                                        (1360)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
                                        (1361)         push   A                                                                                        ;this will be ignored
                                        (1362)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
                                        (1363)         push   A
                                        (1364)         mov    X, sp
                                        (1365)         dec    X
                                        (1366)         call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
                                        (1367)         add SP, -4
                                        (1368)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1369)     ;or  [I2CHW_RsrcStatus],I2C_READFLASH
                                        (1370)     mov   A,[I2CHW_SlaveAddr]
                                        (1371)     tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
                                        (1372)     jnz   DoCRestartTxSmm                                      ; should executed.
                                        (1373)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1374)     jnz   DoRestartRxSmm
                                        (1375)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1376)     jmp   DoCTxAckSmm
                                        (1377) DoCRestartTxSmm:
                                        (1378)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1379) 
                                        (1380) DoCTxAckSmm:                                                   ; Test to see if Slave is ACKed
                                        (1381) 
                                        (1382) ;CWriteSlaveAck:
                                        (1383)         ret
                                        (1384) 
                                        (1385) .ENDSECTION
                                        (1386) 
                                        (1387) 
                                        (1388) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (1389) 
                                        (1390) ; End of File I2CHW.asm
                                        (1391) 
                                        (1392) 
FILE: lib\i2chwint.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWINT.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CHW Master Interrupt Service Routine
                                        (0008) ;;  This is the interrupt service routine for the Single Master I2C function.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "I2CHWCommon.inc"
                                        (0017) include "I2CHWMstr.inc"
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export     I2CHW_Read_Count
                                        (0024) export    _I2CHW_Read_Count
                                        (0025) export     I2CHW_Write_Count
                                        (0026) export    _I2CHW_Write_Count
                                        (0027) 
                                        (0028) export    pI2CHW_Read_BufLO
                                        (0029) export   _pI2CHW_Read_BufLO
                                        (0030) export    pI2CHW_Write_BufLO
                                        (0031) export   _pI2CHW_Write_BufLO
                                        (0032) export    I2CHW_RsrcStatus
                                        (0033) export   _I2CHW_RsrcStatus
                                        (0034) export    I2CHW_SlaveAddr
                                        (0035) export   _I2CHW_SlaveAddr
                                        (0036) 
                                        (0037) ;-----------------------------------------------
                                        (0038) ; WARNING: The variables below are deprecated
                                        (0039) ; and have been replaced with Read_BufLO
                                        (0040) ; and Write_BufLO
                                        (0041) ;-----------------------------------------------
                                        (0042) export    pI2CHW_Read_Buf
                                        (0043) export   _pI2CHW_Read_Buf
                                        (0044) export    pI2CHW_Write_Buf
                                        (0045) export   _pI2CHW_Write_Buf
                                        (0046) ;-----------------------------------------------
                                        (0047) ; END WARNING
                                        (0048) ;-----------------------------------------------
                                        (0049)  
                                        (0050) area InterruptRAM(RAM, REL, CON)
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ; Variable Allocation
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056)   I2CHW_SlaveAddr:
                                        (0057)  _I2CHW_SlaveAddr:                           blk      1
                                        (0058)   I2CHW_RsrcStatus:
                                        (0059)  _I2CHW_RsrcStatus:                          blk     1
                                        (0060)   I2CHW_Write_Count:
                                        (0061)  _I2CHW_Write_Count:                         blk    1
                                        (0062) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0063) export    pI2CHW_Write_BufHI
                                        (0064) export   _pI2CHW_Write_BufHI
                                        (0065) 
                                        (0066)  pI2CHW_Write_BufHI:
                                        (0067) _pI2CHW_Write_BufHI:                         blk     1
                                        (0068) ENDIF
                                        (0069) ;-----------------------------------------------
                                        (0070) ; WARNING: The variable below is deprecated
                                        (0071) ; and has been replaced Write_BufLO
                                        (0072) ;-----------------------------------------------
                                        (0073)  pI2CHW_Write_Buf:
                                        (0074) _pI2CHW_Write_Buf:
                                        (0075) ;-----------------------------------------------
                                        (0076) ; END WARNING
                                        (0077) ;-----------------------------------------------
                                        (0078)  pI2CHW_Write_BufLO:
                                        (0079) _pI2CHW_Write_BufLO:                         blk      1
                                        (0080) 
                                        (0081) IF I2CHW_READ_FLASH
                                        (0082) export    pI2CHW_Read_BufHI
                                        (0083) export   _pI2CHW_Read_BufHI
                                        (0084) 
                                        (0085)  pI2CHW_Read_BufHI:
                                        (0086) _pI2CHW_Read_BufHI:                          blk     1
                                        (0087) ELSE
                                        (0088) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0089) export    pI2CHW_Read_BufHI
                                        (0090) export   _pI2CHW_Read_BufHI
                                        (0091) 
                                        (0092)  pI2CHW_Read_BufHI:
                                        (0093) _pI2CHW_Read_BufHI:                          blk     1
                                        (0094) ENDIF
                                        (0095) ENDIF
                                        (0096) 
                                        (0097) ;-----------------------------------------------
                                        (0098) ; WARNING: The variable below is deprecated
                                        (0099) ; and has been replaced Read_BufLO
                                        (0100) ;-----------------------------------------------
                                        (0101)  pI2CHW_Read_Buf:
                                        (0102) _pI2CHW_Read_Buf:
                                        (0103) ;-----------------------------------------------
                                        (0104) ; END WARNING
                                        (0105) ;-----------------------------------------------
                                        (0106)  pI2CHW_Read_BufLO:
                                        (0107) _pI2CHW_Read_BufLO:                          blk       1
                                        (0108) 
                                        (0109) IF I2CHW_READ_FLASH
                                        (0110) export    I2CHW_Read_CountHI
                                        (0111) export   _I2CHW_Read_CountHI
                                        (0112) 
                                        (0113)  I2CHW_Read_CountHI:
                                        (0114) _I2CHW_Read_CountHI:                         blk    1
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)  I2CHW_Read_Count:
                                        (0118) _I2CHW_Read_Count:                           blk      1
                                        (0119) 
                                        (0120) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0121) ;---------------------------------------------------
                                        (0122) ; Insert your custom declarations below this banner
                                        (0123) ;---------------------------------------------------
                                        (0124) 
                                        (0125) ;------------------------
                                        (0126) ; Includes
                                        (0127) ;------------------------
                                        (0128) 
                                        (0129) 	
                                        (0130) ;------------------------
                                        (0131) ;  Constant Definitions
                                        (0132) ;------------------------
                                        (0133) 
                                        (0134) 
                                        (0135) ;------------------------
                                        (0136) ; Variable Allocation
                                        (0137) ;------------------------
                                        (0138) 
                                        (0139) 
                                        (0140) ;---------------------------------------------------
                                        (0141) ; Insert your custom declarations above this banner
                                        (0142) ;---------------------------------------------------
                                        (0143) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0144) 
                                        (0145) 
                                        (0146) 
                                        (0147) AREA UserModules (ROM, REL)
                                        (0148) 
                                        (0149) 
                                        (0150) export _I2CHW_ISR
                                        (0151) ;;****************************************************
                                        (0152) ;; I2C_MASTER  main entry point from vector 60h
                                        (0153) ;;
                                        (0154) ;;****************************************************
                                        (0155) 
                                        (0156) 
                                        (0157) _I2CHW_ISR:
0BFF: 08       PUSH  A                  (0158)     push A
0C00: 10       PUSH  X                  (0159)     push X
0C01: 5D D3    MOV   A,REG[0xD3]        
0C03: 08       PUSH  A                  
                                        (0160) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0161)     REG_PRESERVE IDX_PP
                                        (0162) ENDIF
                                        (0163)     
                                        (0164)     ; Stop trap is not recommended because the stop bit cannot be cleared
                                        (0165)     ; User may choose to enable it
                                        (0166)     ; Add code to handle stop condition here
                                        (0167) 
0C04: 49 D7 08 TST   REG[0xD7],0x8      (0168)     tst reg[I2CHW_SCR], I2C_ADDRIN
0C07: A0 18    JZ    0x0C20             (0169)     jz DataState
                                        (0170)     ;test for a start condition sent out, or bus error, ack from slave, or (lost arb & addr)
                                        (0171) AddrState:
0C09: 49 D9 01 TST   REG[0xD9],0x1      (0172)     tst reg[I2CHW_MSCR], I2CM_SNDSTRT
0C0C: B0 2F    JNZ   0x0C3C             (0173)     jnz NoStart
0C0E: 49 D7 02 TST   REG[0xD7],0x2      (0174)     tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
0C11: B0 1E    JNZ   0x0C30             (0175)     jnz SlaveAddrNAK
                                        (0176)                                                            ;slave must have acked here
                                        (0177)                                                            
0C13: 47 01 01 TST   [0x1],0x1          (0178)     tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read (from slave and put it in RAM,
                                        (0179)                                                            ;bit 0 = 0 then write to slave and get it from RAM or Flash
0C16: B0 2E    JNZ   0x0C45             (0180)     jnz I2C_ReadSlave1stByte                               ;bit 0 was 1
0C18: 80 A7    JMP   0x0CC0             (0181)     jmp I2C_WriteSlave1stByte                              ;bit 0 was 0
0C1A: 18       POP   A                  
0C1B: 60 D3    MOV   REG[0xD3],A        
                                        (0182) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0183)     REG_RESTORE IDX_PP
                                        (0184) ENDIF
0C1D: 20       POP   X                  (0185)     pop X
0C1E: 18       POP   A                  (0186)     pop A
0C1F: 7E       RETI                     (0187)     reti
                                        (0188) 
                                        (0189) DataState:
0C20: 2E 02 80 OR    [0x2],0x80         (0190)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
0C23: 47 01 01 TST   [0x1],0x1          (0191)     tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read, bit 0 = 0 then write
0C26: B0 2D    JNZ   0x0C54             (0192)     jnz I2C_ReadSlave                                      ;bit 0 was 1
                                        (0193) 
                                        (0194) StillDataToWrite:
0C28: 80 9D    JMP   0x0CC6             (0195)     jmp I2C_WriteSlave                                     ;bit 0 was 0
0C2A: 18       POP   A                  
0C2B: 60 D3    MOV   REG[0xD3],A        
                                        (0196) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0197)     REG_RESTORE IDX_PP
                                        (0198) ENDIF
0C2D: 20       POP   X                  (0199)     pop X
0C2E: 18       POP   A                  (0200)     pop A
0C2F: 7E       RETI                     (0201)     reti
0C30: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0202) 
                                        (0203) 
                                        (0204) SlaveAddrNAK:
                                        (0205)     ;;
                                        (0206)     ;; all there is to do here is to return, the slave didn't respond so it's not there or needs
                                        (0207)     ;; to be tried later.
                                        (0208)     ;;
                                        (0209) ;@PSoC_UserCode_BODY4@ (Do not change this line.)
                                        (0210) ;---------------------------------------------------
                                        (0211) ; Insert your custom code below this banner
                                        (0212) ; to modify the way a NAK from a slave is handled
                                        (0213) ; possibly set a user defined status
                                        (0214) ;---------------------------------------------------
                                        (0215) 
                                        (0216) ;********************************************************
                                        (0217) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0218) ;********************************************************
                                        (0219) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0220) ;
                                        (0221) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0222) ;
                                        (0223)     SetI2CHW_SCR 0     ;sets the tx/rx bit to receive, generates a stop without sending any data
                                        (0224) 
0C33: 26 02 7F AND   [0x2],0x7F         (0225)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0C36: 18       POP   A                  
0C37: 60 D3    MOV   REG[0xD3],A        
                                        (0226) 
                                        (0227) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0228)     REG_RESTORE IDX_PP
                                        (0229) ENDIF
0C39: 20       POP   X                  (0230)     pop X
0C3A: 18       POP   A                  (0231)     pop A
0C3B: 7E       RETI                     (0232)     reti
                                        (0233) 
                                        (0234) NoStart:
                                        (0235)     ;here might test loss of arbitration and the presence of an address bit indicating that the
                                        (0236)     ;Master is being addressed as a slave.
                                        (0237)     ;;
                                        (0238)     ;; there may be a need to indicate that there was a Master transmission
                                        (0239)     ;; failure or an unsuccessful attempt.
                                        (0240)     ;;
0C3C: 26 02 7F AND   [0x2],0x7F         (0241)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0C3F: 18       POP   A                  
0C40: 60 D3    MOV   REG[0xD3],A        
                                        (0242) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0243)     REG_RESTORE IDX_PP
                                        (0244) ENDIF
0C42: 20       POP   X                  (0245)     pop X
0C43: 18       POP   A                  (0246)     pop A
0C44: 7E       RETI                     (0247)     reti
                                        (0248) 
                                        (0249) I2C_ReadSlave1stByte:
0C45: 2E 02 80 OR    [0x2],0x80         (0250)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
0C48: 26 02 FB AND   [0x2],0xFB         (0251)     and [I2CHW_RsrcStatus], ~I2CHW_RD_COMPLETE
0C4B: 62 D7 00 MOV   REG[0xD7],0x0      
0C4E: 18       POP   A                  
0C4F: 60 D3    MOV   REG[0xD3],A        
                                        (0252) 
                                        (0253) ;read normal data in from slave immediately after the address is sent, there is no data to read
                                        (0254) ;but the bus is stalled at byte complete
                                        (0255) 
                                        (0256) ;
                                        (0257) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0258) ;
                                        (0259)     SetI2CHW_SCR 0     ;sets the tx/rx bit to receive, and clocks a byte in
                                        (0260) 
                                        (0261) 
                                        (0262) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0263)     REG_RESTORE IDX_PP
                                        (0264) ENDIF
0C51: 20       POP   X                  (0265)     pop X
0C52: 18       POP   A                  (0266)     pop A
0C53: 7E       RETI                     (0267)     reti
                                        (0268) 
                                        (0269) I2C_ReadSlave:                                             ;this is just a normal read
                                        (0270) 
                                        (0271) 
                                        (0272) ;;code snipped from old SW I2C below
                                        (0273) ;
                                        (0274) ; MASTER READ from SLAVE
                                        (0275) ; (and writing to it's own RAM--Write_Buf and Write_Cnt)
                                        (0276) ;
                                        (0277) ;@PSoC_UserCode_BODY1_V1.2@ (Do not change this line.)
                                        (0278) ;---------------------------------------------------
                                        (0279) ; Insert your custom code below this banner
                                        (0280) ;---------------------------------------------------
                                        (0281) 
                                        (0282) ;********************************************************
                                        (0283) ; By modifying the section from here down to the next comment block
                                        (0284) ; a user could process data for a custom I2C Master Read (write to RAM) application
                                        (0285) ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
                                        (0286) ;********************************************************
0C54: 47 00 04 TST   [0x0],0x4          (0287)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
0C57: B0 14    JNZ   0x0C6C             (0288)    jnz   InStoreData
                                        (0289)    ;
                                        (0290)    ;process write data here
                                        (0291)    ;
0C59: 7A 03    DEC   [0x3]              (0292)    dec   [I2CHW_Write_Count]
0C5B: C0 4F    JC    0x0CAB             (0293)    jc    CompleteRDXfer                                              ; carry set if value became -1
                                        (0294)    ;jz    InStoreData                                                                                             ;In theory overflow cant happen but stop the transaction anyway.
0C5D: 3C 03 00 CMP   [0x3],0x0          (0295)    cmp   [I2CHW_Write_Count], 00                                     ;set nak flag, dec count, and store data
0C60: A0 03    JZ    0x0C64             (0296)    jz    InNakNextByte
0C62: 80 06    JMP   0x0C69             (0297)    jmp   InNotBufEnd
                                        (0298) InNakNextByte:                                                       ;set the nakflag in I2CHW_bStatus
0C64: 2E 00 04 OR    [0x0],0x4          (0299)    or    [I2CHW_bStatus], fI2C_NAKnextWr
0C67: 80 04    JMP   0x0C6C             (0300)    jmp   InStoreData
                                        (0301) InNotBufEnd:
0C69: 26 00 FB AND   [0x0],0xFB         (0302)    and   [I2CHW_bStatus], ~fI2C_NAKnextWr                            ;clear the nak flag in case it was set from a previous operation
                                        (0303) InStoreData:
                                        (0304)    ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
0C6C: 2E 02 10 OR    [0x2],0x10         (0305)    or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR                          ;set current status
                                        (0306) IF SYSTEM_LARGE_MEMORY_MODEL
0C6F: 51 04    MOV   A,[0x4]            (0307)    mov   A, [pI2CHW_Write_BufHI]
0C71: 60 D3    MOV   REG[0xD3],A        
                                        (0308) ENDIF
                                        (0309)    RAM_SETPAGE_IDX A
0C73: 58 05    MOV   X,[0x5]            (0310)    mov   X, [pI2CHW_Write_BufLO]
0C75: 5D D8    MOV   A,REG[0xD8]        (0311)    mov   A, reg[I2CHW_DR]
0C77: 70 3F    AND   F,0x3F             
0C79: 71 80    OR    F,0x80             
                                        (0312)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0C7B: 54 00    MOV   [X+0],A            (0313)    mov   [X], A
0C7D: 70 3F    AND   F,0x3F             
0C7F: 71 00    OR    F,0x0              
                                        (0314)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0C81: 76 05    INC   [0x5]              (0315)    inc   [pI2CHW_Write_BufLO]
                                        (0316) 
0C83: 47 00 04 TST   [0x0],0x4          (0317)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
0C86: B0 0A    JNZ   0x0C91             (0318)    jnz   NAK_this_one
0C88: 62 D7 10 MOV   REG[0xD7],0x10     
0C8B: 18       POP   A                  
0C8C: 60 D3    MOV   REG[0xD3],A        
                                        (0319) 
                                        (0320) ;********************************************************
                                        (0321) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0322) ;********************************************************
                                        (0323) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0324) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0325) 
                                        (0326) ;
                                        (0327) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0328) ;
                                        (0329)     SetI2CHW_SCR I2C_ACKOUT                                          ;send Ack
                                        (0330) 
                                        (0331) 
                                        (0332) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0333)     REG_RESTORE IDX_PP
                                        (0334) ENDIF
0C8E: 20       POP   X                  (0335)     pop X
0C8F: 18       POP   A                  (0336)     pop A
0C90: 7E       RETI                     (0337)     reti
                                        (0338) 
                                        (0339) NAK_this_one:
                                        (0340) 
0C91: 26 00 FB AND   [0x0],0xFB         (0341)     and  [I2CHW_bStatus], ~fI2C_NAKnextWr
                                        (0342) 
                                        (0343)     ; *****
                                        (0344)     ; here we may need to look at the mode that this was called under
                                        (0345)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0346)     ; ******
0C94: 26 02 F8 AND   [0x2],0xF8         (0347)     and   [I2CHW_RsrcStatus], ~0x07                                  ;clear the read status bits
0C97: 2E 02 01 OR    [0x2],0x1          (0348)     or    [I2CHW_RsrcStatus], I2CHW_RD_NOERR
0C9A: 2E 02 04 OR    [0x2],0x4          (0349)     or    [I2CHW_RsrcStatus], I2CHW_RD_COMPLETE
                                        (0350) 
0C9D: 26 00 03 AND   [0x0],0x3          (0351)     and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
0CA0: A0 0A    JZ    0x0CAB             (0352)     jz      CompleteRDXfer
0CA2: 26 02 7F AND   [0x2],0x7F         (0353)     and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0CA5: 18       POP   A                  
0CA6: 60 D3    MOV   REG[0xD3],A        
                                        (0354) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0355)     REG_RESTORE IDX_PP
                                        (0356) ENDIF
0CA8: 20       POP   X                  (0357)     pop X
0CA9: 18       POP   A                  (0358)     pop A
0CAA: 7E       RETI                     (0359)     reti
0CAB: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0360)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0361)     ;The NAK (not I2C_SNDACK) bit in I2C_SCR below will automatically generate a stop
                                        (0362) 
                                        (0363) CompleteRDXfer:
                                        (0364) 
                                        (0365) ;
                                        (0366) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0367) ;
                                        (0368)     SetI2CHW_SCR 0                                                   ;send Ack
                                        (0369) 
                                        (0370) 
0CAE: 26 02 7F AND   [0x2],0x7F         (0371)     and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0CB1: 18       POP   A                  
0CB2: 60 D3    MOV   REG[0xD3],A        
                                        (0372) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0373)     REG_RESTORE IDX_PP
                                        (0374) ENDIF
0CB4: 20       POP   X                  (0375)     pop X
0CB5: 18       POP   A                  (0376)     pop A
0CB6: 7E       RETI                     (0377)     reti                                                             ;return and wait for the next interrupt (on data)
0CB7: 62 D7 10 MOV   REG[0xD7],0x10     
0CBA: 18       POP   A                  
0CBB: 60 D3    MOV   REG[0xD3],A        
                                        (0378) 
                                        (0379) AckTheRead:
                                        (0380) 
                                        (0381) ;
                                        (0382) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0383) ;
                                        (0384)     SetI2CHW_SCR I2C_ACKOUT                                          ;send Ack
                                        (0385) 
                                        (0386) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0387)     REG_RESTORE IDX_PP
                                        (0388) ENDIF
0CBD: 20       POP   X                  (0389)     pop X
0CBE: 18       POP   A                  (0390)     pop A
0CBF: 7E       RETI                     (0391)     reti
                                        (0392) 
                                        (0393) 
                                        (0394) I2C_WriteSlave1stByte:
                                        (0395) ;write normal data to slave
0CC0: 26 02 BF AND   [0x2],0xBF         (0396)     and [I2CHW_RsrcStatus], ~I2CHW_WR_COMPLETE
0CC3: 2E 02 80 OR    [0x2],0x80         (0397)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0398) 
                                        (0399) 
                                        (0400) I2C_WriteSlave:
                                        (0401) 
0CC6: 49 D7 02 TST   REG[0xD7],0x2      (0402)     tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
0CC9: B0 4C    JNZ   0x0D16             (0403)     jnz SlaveDataNAK
0CCB: 50 04    MOV   A,0x4              (0404)     mov A, (I2C_TX)
0CCD: 08       PUSH  A                  (0405)     push A
                                        (0406) 
                                        (0407) ;
                                        (0408) ;MASTER is WRITING TO SLAVE (& reading data from ram or flash buffer)
                                        (0409) ;
                                        (0410) ;;code snipped from SW I2C below
                                        (0411) 
                                        (0412) I2C_ObtainOutData:
                                        (0413) 
                                        (0414) 
                                        (0415) ;********************************************************
                                        (0416) ; here we need to get the next data to output (master-read)
                                        (0417) ; also set the status byte for use on exit
                                        (0418) ;********************************************************
                                        (0419) IF I2CHW_READ_FLASH
                                        (0420) ;@PSoC_UserCode_BODY2_V1.2@ (Do not change this line.)
                                        (0421) ;---------------------------------------------------
                                        (0422) ; Insert your custom code below this banner
                                        (0423) ; to modify the way a master might read non-volitile data
                                        (0424) ; to send.
                                        (0425) ;---------------------------------------------------
                                        (0426) 
                                        (0427)     tst  [I2CHW_RsrcStatus],I2CHW_READFLASH
                                        (0428)     jz   ReadOutData
                                        (0429) 
                                        (0430)     ;
                                        (0431)     ;get the data
                                        (0432)     ;
                                        (0433)     mov  X, [pI2CHW_Read_BufLO]
                                        (0434)     mov  A, [pI2CHW_Read_BufHI]
                                        (0435)     romx
                                        (0436)     mov  reg[I2CHW_DR],A
                                        (0437)     dec  [I2CHW_Read_Count]                                          ;calc addr lsb
                                        (0438)     jnc  NoDecHighCount
                                        (0439)     dec  [I2CHW_Read_CountHI]
                                        (0440) 
                                        (0441)     jc   MstrWRComplete
                                        (0442) 
                                        (0443) NoDecHighCount:
                                        (0444) 
                                        (0445)     inc  [pI2CHW_Read_BufLO]                                         ;set the next flash address to read
                                        (0446)     jnc  NoIncHiAddr
                                        (0447)     inc  [pI2CHW_Read_BufHI]
                                        (0448) NoIncHiAddr:
                                        (0449)    jmp   I2CNormalOutput
                                        (0450) ;
                                        (0451) ;****** THERE SHOULD BE NO WAY TO REACH THIS STATE WE'LL JUST TERMINATE THE ACTIVITY SINCE WERE THE MASTER
                                        (0452) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0453) ;
                                        (0454) ;FlashRdOverflow:
                                        (0455)     ;deal with the over flow cond by resending last data byte (dec the low addr)
                                        (0456) 
                                        (0457) ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0458) ;                                                                      ;set count back to 0
                                        (0459) ;   mov   [I2CHW_Read_CountHI], 0                                    ;functionally the same as incrementing ffff and less instructions
                                        (0460) ;   mov   [I2CHW_Read_Count], 0
                                        (0461) ;   jmp   I2CNormalRead
                                        (0462) 
                                        (0463) ;---------------------------------------------------
                                        (0464) ; Insert your custom code above this banner
                                        (0465) ;---------------------------------------------------
                                        (0466) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0467) 
                                        (0468) ENDIF
                                        (0469) ;@PSoC_UserCode_BODY3@ (Do not change this line.)
                                        (0470) ;---------------------------------------------------
                                        (0471) ; Insert your custom code below this banner
                                        (0472) ; to modify the way a master might read RAM data to send
                                        (0473) ; to an I2C device
                                        (0474) ; By replacing the section from here down to the next block
                                        (0475) ; a user could process data for a custom I2C READ application
                                        (0476) ;---------------------------------------------------
                                        (0477) ReadOutData:
                                        (0478)    ;read the current data byte
                                        (0479) IF SYSTEM_LARGE_MEMORY_MODEL
0CCE: 51 06    MOV   A,[0x6]            (0480)    mov   A, [pI2CHW_Read_BufHI]
0CD0: 60 D3    MOV   REG[0xD3],A        
                                        (0481) ENDIF
                                        (0482)    RAM_SETPAGE_IDX A
0CD2: 58 07    MOV   X,[0x7]            (0483)    mov   X, [pI2CHW_Read_BufLO]
0CD4: 70 3F    AND   F,0x3F             
0CD6: 71 80    OR    F,0x80             
                                        (0484)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0CD8: 52 00    MOV   A,[X+0]            (0485)    mov   A, [X]
0CDA: 70 3F    AND   F,0x3F             
0CDC: 71 00    OR    F,0x0              
                                        (0486)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0CDE: 60 D8    MOV   REG[0xD8],A        (0487)    mov   reg[I2CHW_DR], A
0CE0: 7A 08    DEC   [0x8]              (0488)    dec   [I2CHW_Read_Count]
                                        (0489) 
0CE2: C0 0E    JC    0x0CF1             (0490)    jc    MstrWRComplete
0CE4: 76 07    INC   [0x7]              (0491)    inc   [pI2CHW_Read_BufLO]
0CE6: 80 01    JMP   0x0CE8             (0492)    jmp   I2CNormalOutput
                                        (0493) ;
                                        (0494) ;ram read overflow detected here, just resend the last location in the buffer
                                        (0495) ;
                                        (0496) ;********        THERE SHOULD BE NO WAY TO OVERFLOW FOR THIS CASE
                                        (0497) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0498) ;
                                        (0499) ;RamRDOverflow:
                                        (0500) ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0501) ;   inc   [I2CHW_Read_Count]                                         ; set back to zero
                                        (0502) 
                                        (0503) ;---------------------------------------------------
                                        (0504) ; End user I2C MASTER WRITE TO SLAVE /READ buffer customization section
                                        (0505) ; Insert your custom code above this banner
                                        (0506) ;---------------------------------------------------
                                        (0507) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0508) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0509) I2CNormalOutput:
                                        (0510) 
                                        (0511)     ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                                        (0512)     ;and place there based on whether or not the previous transmission was our I2C address.
0CE8: 18       POP   A                  (0513)     pop   A
0CE9: 60 D7    MOV   REG[0xD7],A        
0CEB: 18       POP   A                  
0CEC: 60 D3    MOV   REG[0xD3],A        
                                        (0514) 
                                        (0515) ;
                                        (0516) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0517) ;
                                        (0518)     SetI2CHW_SCR A                                                   ;Sets the I2C_TX bit in the I2C_SCR reg.
                                        (0519) 
                                        (0520) 
                                        (0521) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0522)     REG_RESTORE IDX_PP
                                        (0523) ENDIF
0CEE: 20       POP   X                  (0524)     pop X
0CEF: 18       POP   A                  (0525)     pop A
0CF0: 7E       RETI                     (0526)     reti ;return and wait for the next interrupt (on data)
                                        (0527) 
                                        (0528) MstrWRComplete:
0CF1: 26 02 8F AND   [0x2],0x8F         (0529)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
0CF4: 2E 02 40 OR    [0x2],0x40         (0530)     or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
0CF7: 2E 02 10 OR    [0x2],0x10         (0531)     or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR
                                        (0532) 
                                        (0533)     ; *****
                                        (0534)     ; here we may need to look at the mode that this was called under
                                        (0535)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0536)     ; ******
0CFA: 26 00 03 AND   [0x0],0x3          (0537)     and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
0CFD: A0 0B    JZ    0x0D09             (0538)     jz      CompleteWRXfer
0CFF: 18       POP   A                  (0539)     pop  A                                                           ;clear the stack for return
0D00: 26 02 7F AND   [0x2],0x7F         (0540)     and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0D03: 18       POP   A                  
0D04: 60 D3    MOV   REG[0xD3],A        
                                        (0541) 
                                        (0542) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0543)     REG_RESTORE IDX_PP
                                        (0544) ENDIF
0D06: 20       POP   X                  (0545)     pop X
0D07: 18       POP   A                  (0546)     pop A
0D08: 7E       RETI                     (0547)     reti
                                        (0548)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0549)     ; The release of the I2C_TX bit in I2C_SCR below will automatically generate a stop
                                        (0550) 
                                        (0551) CompleteWRXfer:
                                        (0552) 
0D09: 18       POP   A                  (0553)     pop   A
0D0A: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0554) 
                                        (0555) ;
                                        (0556) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0557) ;
                                        (0558)     SetI2CHW_SCR 0                                                   ;this will release the bus and generate a stop condition
                                        (0559) 
0D0D: 26 02 7F AND   [0x2],0x7F         (0560)    and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0D10: 18       POP   A                  
0D11: 60 D3    MOV   REG[0xD3],A        
                                        (0561) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0562)    REG_RESTORE IDX_PP
                                        (0563) ENDIF
0D13: 20       POP   X                  (0564)    pop X
0D14: 18       POP   A                  (0565)    pop A
0D15: 7E       RETI                     (0566)    reti
                                        (0567) 
                                        (0568) SlaveDataNAK:
                                        (0569) ;must also fix up the data buffer.  While it is marginally safe to nak a byte as a slave and 
                                        (0570) ;store it.  It is NEVER safe as a master to notice that a written byte has been nak'ed by a 
                                        (0571) ;slave and fail to resend it.
                                        (0572) ;this piece of code fixes up the count and buffer that the master is using to get data from
                                        (0573) ;to re-transmit the byte when the next master write is done.
0D16: 76 08    INC   [0x8]              (0574)     inc  [I2CHW_Read_Count]                          ;calc addr lsb
                                        (0575) IF I2CHW_READ_FLASH
                                        (0576)     jnc  NoIncHighCount
                                        (0577)     inc  [I2CHW_Read_CountHI]
                                        (0578) 
                                        (0579) NoIncHighCount:
                                        (0580) ENDIF
0D18: 7A 07    DEC   [0x7]              (0581)     dec  [pI2CHW_Read_BufLO]                         ;set the next flash address to read
                                        (0582) IF SYSTEM_LARGE_MEMORY_MODEL
0D1A: D0 03    JNC   0x0D1E             (0583)     jnc  NoDecHiAddr
0D1C: 7A 06    DEC   [0x6]              (0584)     dec  [pI2CHW_Read_BufHI]
0D1E: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0585) NoDecHiAddr:
                                        (0586) ELSE
                                        (0587) IF I2CHW_READ_FLASH
                                        (0588)     jnc  NoDecHiCAddr
                                        (0589)     dec  [pI2CHW_Read_BufHI]
                                        (0590) NoDecHiCAddr:
                                        (0591) ENDIF
                                        (0592) ENDIF
                                        (0593) 
                                        (0594) ;;
                                        (0595) ;; all there is to do here is to return & set status, the slave didn't want any more data
                                        (0596) ;;
                                        (0597) ; no pop needed because the nak is detected before the push happens above
                                        (0598) 
                                        (0599) ;
                                        (0600) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0601) ;
                                        (0602)     SetI2CHW_SCR 0                                                   ;this will release the bus and generate a stop condition
                                        (0603) 
0D21: 26 02 7F AND   [0x2],0x7F         (0604)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0D24: 26 02 8F AND   [0x2],0x8F         (0605)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
0D27: 2E 02 40 OR    [0x2],0x40         (0606)     or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
0D2A: 2E 02 20 OR    [0x2],0x20         (0607)     or    [I2CHW_RsrcStatus], I2CHW_WR_OVERFLOW
0D2D: 18       POP   A                  
0D2E: 60 D3    MOV   REG[0xD3],A        
                                        (0608) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0609)     REG_RESTORE IDX_PP
                                        (0610) ENDIF
0D30: 20       POP   X                  (0611)     pop X
0D31: 18       POP   A                  (0612)     pop A
0D32: 7E       RETI                     (0613)    reti
                                        (0614) 
                                        (0615) STOPTRAP:
                                        (0616)     ;
                                        (0617)     ;   If interrupt on STOP condition is enabled:
                                        (0618)     ;   Add user code to process stop (not recommended becuase I2C bus is NOT stalled and ISR
                                        (0619)     ;   may block reception of ongoing transactions/addresses
                                        (0620)     ;   STOP condition is never detected when a repeat start is used by the master.
                                        (0621)     ;
0D33: 26 02 7F AND   [0x2],0x7F         (0622)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0D36: 18       POP   A                  
0D37: 60 D3    MOV   REG[0xD3],A        
                                        (0623) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0624)     REG_RESTORE IDX_PP
                                        (0625) ENDIF
0D39: 20       POP   X                  (0626)     pop X
0D3A: 18       POP   A                  (0627)     pop A
0D3B: 7E       RETI                     (0628)     reti
                                        (0629) 
                                        (0630) ; end of file I2CHWINT.asm
FILE: lib\i2chwcommon.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWCommon.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ; include instance specific register definitions
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) ;-------------------------------------------------------------------
                                        (0034) ;  Declare the functions global for both assembler and C compiler.
                                        (0035) ;
                                        (0036) ;  Note that there are two names for each API. First name is
                                        (0037) ;  assembler reference. Name with underscore is name refence for
                                        (0038) ;  C compiler.  Calling function in C source code does not require
                                        (0039) ;  the underscore.
                                        (0040) ;-------------------------------------------------------------------
                                        (0041) 
                                        (0042) export    I2CHW_InitWrite
                                        (0043) export   _I2CHW_InitWrite
                                        (0044) export    I2CHW_InitRamRead
                                        (0045) export   _I2CHW_InitRamRead
                                        (0046) export    I2CHW_InitFlashRead
                                        (0047) export   _I2CHW_InitFlashRead
                                        (0048) export    I2CHW_bReadI2CStatus
                                        (0049) export   _I2CHW_bReadI2CStatus
                                        (0050) export    I2CHW_ClrRdStatus
                                        (0051) export   _I2CHW_ClrRdStatus
                                        (0052) export    I2CHW_ClrWrStatus
                                        (0053) export   _I2CHW_ClrWrStatus
                                        (0054) 
                                        (0055) 
                                        (0056) AREA UserModules (ROM, REL)
                                        (0057) 
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: I2CHW_InitWrite
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Initializes a data buffer pointer for the slave to use to deposit data, and
                                        (0065) ;     zeroes the value of a count byte for the same buffer.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  [SP-5]   -- count of bytes to write
                                        (0070) ;              [SP-4]   -- Hi order part of address Wrbuf
                                        (0071) ;              [SP-3]   -- Low order part of the address Wrbuf 
                                        (0072) ;
                                        (0073) ;  RETURNS:  none
                                        (0074) ;
                                        (0075) ;    Write Status bits are cleared
                                        (0076) ;
                                        (0077) ;  SIDE EFFECTS:
                                        (0078) ;    The A and X registers may be modified by this or future implementations
                                        (0079) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0080) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0081) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0082) ;    functions.
                                        (0083) ;          
                                        (0084) ;    Currently only the page pointer registers listed below are modified: 
                                        (0085) ;          CUR_PP
                                        (0086) ;
                                        (0087) ;    Write Status bits are cleared
                                        (0088) ;
                                        (0089) ;  THEORY of OPERATION or PROCEDURE:
                                        (0090) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0091) ;     the accumulator.  X register is the low order pointer.
                                        (0092) ;     IF a one byte buffer is established, set a flag to NAK the first written data byte.
                                        (0093) ;
                                        (0094) 
                                        (0095)  I2CHW_InitWrite:
                                        (0096) _I2CHW_InitWrite:
                                        (0097) 
                                        (0098) WrCnt:   equ -5
                                        (0099) WrBufHi: equ -4
                                        (0100) WrBufLo: equ -3
                                        (0101) 
                                        (0102) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0103)     RAM_PROLOGUE RAM_USE_CLASS_2
0D3C: 10       PUSH  X                  (0104) 	push  X
0D3D: 4F       MOV   X,SP               (0105) 	mov   X, SP
0D3E: 79       DEC   X                  (0106)     dec   X                                                          ;set up the pointer for correct param access
0D3F: 08       PUSH  A                  (0107)     push  A
0D40: 5D DE    MOV   A,REG[0xDE]        (0108)     mov   A, reg[I2CHW_INT_REG]
0D42: 08       PUSH  A                  (0109)     push  A                                                           ;preserve flags prior to disabling int
0D43: 41 DE FE AND   REG[0xDE],0xFE     
0D46: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0110)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0111) 
                                        (0112)     RAM_SETPAGE_CUR >I2CHW_bStatus						                             ;Set the Page Pointer for LMM
0D49: 26 00 FB AND   [0x0],0xFB         (0113)     and    [I2CHW_bStatus], ~fI2C_NAKnextWr                          ;reset the nak-next-written-byte flag.
                                        (0114) IF SYSTEM_LARGE_MEMORY_MODEL
0D4C: 52 FC    MOV   A,[X-4]            (0115)     mov   A, [X + WrBufHi]                                           ;move wrbuf addr to A
0D4E: 53 04    MOV   [0x4],A            (0116)     mov   [pI2CHW_Write_BufHI], A
                                        (0117) ENDIF
0D50: 52 FD    MOV   A,[X-3]            (0118)     mov   A, [X + WrBufLo]                                           ;move wrbuf addr to A
0D52: 53 05    MOV   [0x5],A            (0119)     mov   [pI2CHW_Write_BufLO], A
0D54: 52 FB    MOV   A,[X-5]            (0120)     mov   A, [X + WrCnt]                                               ;move Write_count to A
0D56: 53 03    MOV   [0x3],A            (0121)     mov   [I2CHW_Write_Count], A
0D58: 39 01    CMP   A,0x1              (0122)     cmp   A, 01                                                        ;if data buffer is one byte long or less
0D5A: A0 08    JZ    0x0D63             (0123)     jz    I2CHW_SetNak
0D5C: C0 06    JC    0x0D63             (0124)     jc    I2CHW_SetNak
0D5E: 26 02 8F AND   [0x2],0x8F         (0125)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the 0x10, 0x20 (Write status bits)
0D61: 80 09    JMP   0x0D6B             (0126)     jmp   I2Cs_1_ResetFlgs
                                        (0127) 
                                        (0128) I2CHW_SetNak:
0D63: 2E 00 04 OR    [0x0],0x4          (0129)     or    [I2CHW_bStatus], fI2C_NAKnextWr                            ;set the nak-next-written-byte flag.
0D66: 26 02 8F AND   [0x2],0x8F         (0130)     and   [I2CHW_RsrcStatus], ~0x70                                  ; clear the 0x10, 0x20 (Write status bits)
0D69: 80 01    JMP   0x0D6B             (0131)     jmp   I2Cs_1_ResetFlgs
                                        (0132) 
                                        (0133) I2Cs_1_ResetFlgs:
0D6B: 18       POP   A                  (0134)     pop A
0D6C: 21 01    AND   A,0x1              (0135)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
0D6E: A0 04    JZ    0x0D73             (0136)     jz  . + 5
0D70: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0137)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0D73: 18       POP   A                  (0138)     pop A
0D74: 20       POP   X                  (0139)     pop X
0D75: 70 3F    AND   F,0x3F             
0D77: 71 C0    OR    F,0xC0             
                                        (0140) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0141)     RAM_EPILOGUE RAM_USE_CLASS_2
0D79: 7F       RET                      (0142)     ret
0D7A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0143) 
                                        (0144) .ENDSECTION
                                        (0145) 
                                        (0146) .SECTION
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;  FUNCTION NAME: I2CHW_InitRamRead
                                        (0149) ;
                                        (0150) ;  DESCRIPTION:
                                        (0151) ;     Initializes a data buffer pointer for the slave to use to retrieve data from,
                                        (0152) ;     and zeroes the value of a count byte for the same buffer.
                                        (0153) ;
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:  [SP-5]  -- count of bytes to read
                                        (0157) ;              [SP-4]  -- Hi order part of addr to ReadBuf
                                        (0158) ;              [SP-3]  -- Low order part of the address to ReadBuf
                                        (0159) ;
                                        (0160) ;  RETURNS: none
                                        (0161) ;
                                        (0162) ;  SIDE EFFECTS:
                                        (0163) ;    The A and X registers may be modified by this or future implementations
                                        (0164) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0165) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0166) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0167) ;    functions.
                                        (0168) ;          
                                        (0169) ;    Currently only the page pointer registers listed below are modified: 
                                        (0170) ;          CUR_PP
                                        (0171) ;
                                        (0172) ;     Read Status bits are cleared
                                        (0173) ;
                                        (0174) ;  THEORY of OPERATION or PROCEDURE:
                                        (0175) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0176) ;     the accumulator.  X register is the low order pointer.
                                        (0177) ;
                                        (0178) 
                                        (0179)  I2CHW_InitRamRead:
                                        (0180) _I2CHW_InitRamRead:
                                        (0181) 
                                        (0182) RdCnt:     equ   -5
                                        (0183) RdBufHi:   equ   -4
                                        (0184) RdBufLo:   equ   -3
                                        (0185) 
                                        (0186)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0187) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0188) 	RAM_SETPAGE_CUR >I2CHW_Read_Count
0D7D: 10       PUSH  X                  (0189)     push  X
0D7E: 4F       MOV   X,SP               (0190) 	mov   X, SP
0D7F: 79       DEC   X                  (0191)     dec   X                                                          ;set up the pointer for correct param access
0D80: 08       PUSH  A                  (0192)     push  A
0D81: 5D DE    MOV   A,REG[0xDE]        (0193)     mov   A, reg[I2CHW_INT_REG]
0D83: 08       PUSH  A                  (0194)     push  A                                                            ;preserve flags prior to disabling int
0D84: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0195)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0196) 
                                        (0197) IF SYSTEM_LARGE_MEMORY_MODEL
0D87: 52 FC    MOV   A,[X-4]            (0198)     mov   A, [X + RdBufHi]                                           ;move wrbuf addr to A
0D89: 53 06    MOV   [0x6],A            (0199)     mov   [pI2CHW_Read_BufHI], A
                                        (0200) ENDIF
0D8B: 52 FD    MOV   A,[X-3]            (0201)     mov   A, [X + RdBufLo]                                             ; move rdbuf addr to A
0D8D: 53 07    MOV   [0x7],A            (0202)     mov   [pI2CHW_Read_BufLO], A
0D8F: 52 FB    MOV   A,[X-5]            (0203)     mov   A, [X + RdCnt]                                               ; move RamRead_count to A
0D91: 53 08    MOV   [0x8],A            (0204)     mov   [I2CHW_Read_Count], A
0D93: 7A 08    DEC   [0x8]              (0205)     dec   [I2CHW_Read_Count]                                         ; since we decrement through zero...
0D95: 26 02 F0 AND   [0x2],0xF0         (0206)     and   [I2CHW_RsrcStatus], ~0x0f                                  ; clear the lower 4 (read status bits)
                                        (0207) 
0D98: 18       POP   A                  (0208)     pop A
0D99: 21 01    AND   A,0x1              (0209)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
0D9B: A0 04    JZ    0x0DA0             (0210)     jz  . + 5
0D9D: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0211)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0DA0: 18       POP   A                  (0212)     pop A
0DA1: 20       POP   X                  (0213)     pop X
0DA2: 70 3F    AND   F,0x3F             
0DA4: 71 C0    OR    F,0xC0             
                                        (0214) 
                                        (0215)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0216)     RAM_EPILOGUE RAM_USE_CLASS_2
0DA6: 7F       RET                      (0217)     ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) .SECTION
                                        (0222) ;-----------------------------------------------------------------------------
                                        (0223) ;  FUNCTION NAME: I2CHW_InitFlashRead
                                        (0224) ;
                                        (0225) ;  DESCRIPTION:
                                        (0226) ;     Initializes a flash data buffer pointer for the slave to use to retrieve
                                        (0227) ;     data from, and zeroes the value of a count byte for the same buffer.
                                        (0228) ;
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:  [SP-6]   -- Hi order part of flash Read count
                                        (0232) ;              [SP-5]   -- Low order part of flashRead counts
                                        (0233) ;              [SP-4]   -- Hi order part of the flash buf address
                                        (0234) ;              [SP-3]   -- Lo order part of flash buf address
                                        (0235) ;
                                        (0236) ;  RETURNS:
                                        (0237) ;
                                        (0238) ;  SIDE EFFECTS:
                                        (0239) ;    The A and X registers may be modified by this or future implementations
                                        (0240) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0241) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0242) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0243) ;    functions.
                                        (0244) ;          
                                        (0245) ;    Currently only the page pointer registers listed below are modified: 
                                        (0246) ;          CUR_PP
                                        (0247) ;
                                        (0248) ;    Read Status bits are cleared
                                        (0249) ;
                                        (0250) ;  THEORY of OPERATION or PROCEDURE:
                                        (0251) ;     The C compiler will place the upper order address of the buffer in Acc.
                                        (0252) ;     X register is the low order pointer.  A user module parameter is used to conserve code
                                        (0253) ;     if flash buffers are un-needed.  The API call is left defined and capable of returning in
                                        (0254) ;     either case
                                        (0255) ;
                                        (0256)  I2CHW_InitFlashRead:
                                        (0257) _I2CHW_InitFlashRead:
                                        (0258) 
                                        (0259) FlRdCntHI:     equ   -6
                                        (0260) FlRdCntLO:     equ   -5
                                        (0261) FlBufAdrHI:    equ   -4
                                        (0262) FlBufAdrLO:    equ   -3
                                        (0263) 
                                        (0264) IF I2CHW_READ_FLASH
                                        (0265)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0266)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0267)     RAM_SETPAGE_CUR >pI2CHW_Read_BufLO   
                                        (0268) 	push  X
                                        (0269) 	mov   X, SP
                                        (0270)     dec   X                                                            ;set up the pointer for correct param access
                                        (0271)     push  A
                                        (0272)     mov   A, reg[I2CHW_INT_REG]
                                        (0273)     push  A                                                            ;preserve flags prior to disabling int
                                        (0274)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0275) 
                                        (0276)     mov   A, [X + FlBufAdrLO]                                          ; move flrdbuf LOaddr to A
                                        (0277)     mov   [pI2CHW_Read_BufLO], A
                                        (0278)     mov   A, [X + FlBufAdrHI]                                          ; move flrdbuf HIaddr to A
                                        (0279)     mov   [pI2CHW_Read_BufHI], A
                                        (0280)     mov   A, [X + FlRdCntLO]                                           ; move flrdbuf LOcount to A
                                        (0281)     mov   [I2CHW_Read_Count], A
                                        (0282)     mov   A, [X + FlRdCntHI]                                           ; move flrdbuf HIcount to A
                                        (0283)     mov   [I2CHW_Read_CountHI], A
                                        (0284) 
                                        (0285)     dec   [I2CHW_Read_Count]                                         ; since this will count throu zero
                                        (0286)     jnc    . + 4                                                       ; only Read_CountHI if Read_Count rolled to 0xff
                                        (0287)     dec   [I2CHW_Read_CountHI]
                                        (0288) 
                                        (0289)     and   [I2CHW_RsrcStatus], ~0x07                                  ; clear the lower 3 (read status bits)
                                        (0290)     or    [I2CHW_RsrcStatus],I2CHW_READFLASH                         ; set the flash status bit
                                        (0291) 
                                        (0292)     pop A
                                        (0293)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
                                        (0294)     jz  . + 5
                                        (0295)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0296)     pop A
                                        (0297) 	pop X
                                        (0298)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0299) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0300) ENDIF
0DA7: 7F       RET                      (0301)     ret
0DA8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0302) 
                                        (0303) .ENDSECTION
                                        (0304) 
                                        (0305) .SECTION
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: I2CHW_bReadI2CStatus
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;     Returns the value in the the RsrcStatus variable.
                                        (0311) ;
                                        (0312) ;-----------------------------------------------------------------------------
                                        (0313) ;
                                        (0314) ;  ARGUMENTS:
                                        (0315) ;
                                        (0316) ;  RETURNS:
                                        (0317) ;     BYTE  bI2CStatus -  status data.  Use the following defined bits
                                        (0318) ;     returned in A.
                                        (0319) ;         I2CHW_RD_NOERR:                   equ 1
                                        (0320) ;         I2CHW_RD_OVERFLOW:                equ 2
                                        (0321) ;         I2CHW_RD_INCOMPLETE:              equ 4
                                        (0322) ;         I2CHW_READFLASH:                  equ 8
                                        (0323) ;         I2CHW_WR_NOERR:                   equ 10h
                                        (0324) ;         I2CHW_WR_OVERFLOW:                equ 20h
                                        (0325) ;         I2CHW_WR_COMPLETE:                equ 40h
                                        (0326) ;         I2CHW_ISR_ACTIVE:                 equ 80h
                                        (0327) ;
                                        (0328) ;  SIDE EFFECTS:
                                        (0329) ;    The A and X registers may be modified by this or future implementations
                                        (0330) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0331) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0332) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0333) ;    functions.
                                        (0334) ;          
                                        (0335) ;    Currently only the page pointer registers listed below are modified: 
                                        (0336) ;          CUR_PP
                                        (0337) ;          
                                        (0338)  I2CHW_bReadI2CStatus:
                                        (0339) _I2CHW_bReadI2CStatus:
                                        (0340)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0341) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0DAB: 51 02    MOV   A,[0x2]            (0342)     mov   A, [I2CHW_RsrcStatus]                                      ;return the status in A
                                        (0343)     RAM_EPILOGUE RAM_USE_CLASS_4
0DAD: 7F       RET                      (0344)     ret
0DAE: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0345) 
                                        (0346) .ENDSECTION
                                        (0347) 
                                        (0348) .SECTION
                                        (0349) ;-----------------------------------------------------------------------------
                                        (0350) ;  FUNCTION NAME: I2CHW_ClrRdStatus
                                        (0351) ;
                                        (0352) ;  DESCRIPTION:
                                        (0353) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0354) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0355) ;
                                        (0356) ;-----------------------------------------------------------------------------
                                        (0357) ;
                                        (0358) ;  ARGUMENTS: none
                                        (0359) ;
                                        (0360) ;  RETURNS: none
                                        (0361) ;
                                        (0362) ;  SIDE EFFECTS:
                                        (0363) ;    The A and X registers may be modified by this or future implementations
                                        (0364) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0365) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0366) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0367) ;    functions.
                                        (0368) ;          
                                        (0369) ;    Currently only the page pointer registers listed below are modified: 
                                        (0370) ;          CUR_PP
                                        (0371) ;          
                                        (0372)  I2CHW_ClrRdStatus:
                                        (0373) _I2CHW_ClrRdStatus:
                                        (0374)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0375) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0DB1: 26 02 F8 AND   [0x2],0xF8         (0376)     and   [I2CHW_RsrcStatus], ~0x07                                  ; clear the lower 3 (read status bits)
                                        (0377)     RAM_EPILOGUE RAM_USE_CLASS_4
0DB4: 7F       RET                      (0378)     ret
0DB5: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0379) 
                                        (0380) .ENDSECTION
                                        (0381) 
                                        (0382) .SECTION
                                        (0383) ;-----------------------------------------------------------------------------
                                        (0384) ;  FUNCTION NAME: I2CHW_ClrWrStatus
                                        (0385) ;
                                        (0386) ;  DESCRIPTION:
                                        (0387) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0388) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0389) ;
                                        (0390) ;-----------------------------------------------------------------------------
                                        (0391) ;
                                        (0392) ;  ARGUMENTS: none
                                        (0393) ;
                                        (0394) ;  RETURNS: none
                                        (0395) ;
                                        (0396) ;  SIDE EFFECTS:
                                        (0397) ;    The A and X registers may be modified by this or future implementations
                                        (0398) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0399) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0400) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0401) ;    functions.
                                        (0402) ;          
                                        (0403) ;    Currently only the page pointer registers listed below are modified: 
                                        (0404) ;          CUR_PP
                                        (0405) ;          
                                        (0406)  I2CHW_ClrWrStatus:
                                        (0407) _I2CHW_ClrWrStatus:
                                        (0408)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0409) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0DB8: 26 02 8F AND   [0x2],0x8F         (0410)     and   [I2CHW_RsrcStatus], ~0x70                                  ; clear bits 10,20 (write status bits)
                                        (0411)     RAM_EPILOGUE RAM_USE_CLASS_4
0DBB: 7F       RET                      (0412)     ret
                                        (0413) 
                                        (0414) .ENDSECTION
                                        (0415) ; End of File I2CHW.asm
FILE: lib\counter16int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Counter16.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Counter16_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter16_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter16_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0DBC: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file Counter16INT.asm
FILE: lib\counter16.asm                 (0001) ;;*****************************************************************************
0DBD: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter16.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter16_EnableInt
                                        (0030) export _Counter16_EnableInt
                                        (0031) export  Counter16_DisableInt
                                        (0032) export _Counter16_DisableInt
                                        (0033) export  Counter16_Start
                                        (0034) export _Counter16_Start
                                        (0035) export  Counter16_Stop
                                        (0036) export _Counter16_Stop
                                        (0037) export  Counter16_WritePeriod
                                        (0038) export _Counter16_WritePeriod
                                        (0039) export  Counter16_WriteCompareValue
                                        (0040) export _Counter16_WriteCompareValue
                                        (0041) export  Counter16_wReadCompareValue
                                        (0042) export _Counter16_wReadCompareValue
                                        (0043) export  Counter16_wReadCounter
                                        (0044) export _Counter16_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wCounter16_ReadCompareValue  ; deprecated
                                        (0049) export _wCounter16_ReadCompareValue  ; deprecated
                                        (0050) export  wCounter16_ReadCounter       ; deprecated
                                        (0051) export _wCounter16_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Counter16_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Counter16_EnableInt:
                                        (0082) _Counter16_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    Counter16_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0DC0: 7F       RET                      (0086)    ret
0DC1: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Counter16_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Counter16_DisableInt:
                                        (0109) _Counter16_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    Counter16_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0DC4: 7F       RET                      (0113)    ret
0DC5: 43 23 01 OR    REG[0x23],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Counter16_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Counter16_Start:
                                        (0138) _Counter16_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    Counter16_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0DC8: 7F       RET                      (0142)    ret
0DC9: 41 23 FE AND   REG[0x23],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Counter16_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register of the LSB block.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Counter16_Stop:
                                        (0166) _Counter16_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    Counter16_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0DCC: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Counter16_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count registers (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Counter16_WritePeriod:
                                        (0196) _Counter16_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0DCD: 60 21    MOV   REG[0x21],A        (0198)    mov   reg[Counter16_PERIOD_LSB_REG], A
0DCF: 5B       MOV   A,X                (0199)    mov   A, X
0DD0: 60 25    MOV   REG[0x25],A        (0200)    mov   reg[Counter16_PERIOD_MSB_REG], A
                                        (0201)    RAM_EPILOGUE RAM_USE_CLASS_1
0DD2: 7F       RET                      (0202)    ret
                                        (0203) 
                                        (0204) 
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: Counter16_WriteCompareValue
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Writes compare value into the Compare register (DR2).
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;
                                        (0215) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0216) ;  RETURNS:      Nothing
                                        (0217) ;  SIDE EFFECTS: 
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;
                                        (0224)  Counter16_WriteCompareValue:
                                        (0225) _Counter16_WriteCompareValue:
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_1
0DD3: 60 22    MOV   REG[0x22],A        (0227)    mov   reg[Counter16_COMPARE_LSB_REG], A
0DD5: 5B       MOV   A,X                (0228)    mov   A, X
0DD6: 60 26    MOV   REG[0x26],A        (0229)    mov   reg[Counter16_COMPARE_MSB_REG], A
                                        (0230)    RAM_EPILOGUE RAM_USE_CLASS_1
0DD8: 7F       RET                      (0231)    ret
                                        (0232) 
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) .SECTION
                                        (0237) ;-----------------------------------------------------------------------------
                                        (0238) ;  FUNCTION NAME: Counter16_wReadCompareValue
                                        (0239) ;
                                        (0240) ;  DESCRIPTION:
                                        (0241) ;     Reads the Compare registers.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS:    None
                                        (0245) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  Counter16_wReadCompareValue:
                                        (0254) _Counter16_wReadCompareValue:
                                        (0255)  wCounter16_ReadCompareValue:                    ; this name deprecated
                                        (0256) _wCounter16_ReadCompareValue:                    ; this name deprecated
                                        (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
0DD9: 5D 26    MOV   A,REG[0x26]        (0258)    mov   A, reg[Counter16_COMPARE_MSB_REG]
0DDB: 5C       MOV   X,A                (0259)    mov   X, A
0DDC: 5D 22    MOV   A,REG[0x22]        (0260)    mov   A, reg[Counter16_COMPARE_LSB_REG]
                                        (0261)    RAM_EPILOGUE RAM_USE_CLASS_1
0DDE: 7F       RET                      (0262)    ret
                                        (0263) 
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: Counter16_wReadCounter
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0273) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0274) ;     from the Count to the Compare registers by holding the clock low in
                                        (0275) ;     the MSB PSoC block.
                                        (0276) ;-----------------------------------------------------------------------------
                                        (0277) ;
                                        (0278) ;  ARGUMENTS: None
                                        (0279) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0280) ;  SIDE EFFECTS:
                                        (0281) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0282) ;     2) The A and X registers may be modified by this or future implementations
                                        (0283) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0284) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0285) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0286) ;        functions.
                                        (0287) ;
                                        (0288)  Counter16_wReadCounter:
                                        (0289) _Counter16_wReadCounter:
                                        (0290)  wCounter16_ReadCounter:                         ; this name deprecated
                                        (0291) _wCounter16_ReadCounter:                         ; this name deprecated
                                        (0292) 
                                        (0293)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0294)    bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
                                        (0295)    bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
                                        (0296)    wCounter:               EQU   4                  ; Frame offset to temp Count   store
                                        (0297)    STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
                                        (0298) 
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
0DDF: 4F       MOV   X,SP               (0300)    mov   X, SP                                      ; X <-  stack frame pointer
0DE0: 5D 26    MOV   A,REG[0x26]        (0301)    mov   A, reg[Counter16_COMPARE_MSB_REG]       ; Save the Compare register on the stack
0DE2: 08       PUSH  A                  (0302)    push  A                                          ;
0DE3: 5D 22    MOV   A,REG[0x22]        (0303)    mov   A, reg[Counter16_COMPARE_LSB_REG]       ;
0DE5: 08       PUSH  A                  (0304)    push  A                                          ;   -stack frame now 2 bytes-
0DE6: 5D 23    MOV   A,REG[0x23]        (0305)    mov   A, reg[Counter16_CONTROL_LSB_REG]       ; Save CR0 (running or stopped state)
0DE8: 08       PUSH  A                  (0306)    push  A                                          ;   -stack frame now 3 bytes-
0DE9: 41 23 FE AND   REG[0x23],0xFE     
0DEC: 71 10    OR    F,0x10             
                                        (0307)    Counter16_Stop_M                              ; Disable (stop) the Counter if running
                                        (0308)    M8C_SetBank1                                     ;
0DEE: 5D 21    MOV   A,REG[0x21]        (0309)    mov   A, reg[Counter16_INPUT_LSB_REG]         ; save the LSB clock input setting
0DF0: 08       PUSH  A                  (0310)    push  A                                          ;   on the stack (now 4 bytes) and ...
                                        (0311)                                                     ;   hold the clock low:
0DF1: 62 21 00 MOV   REG[0x21],0x0      (0312)    mov   reg[Counter16_INPUT_LSB_REG], INPUT_REG_NULL
0DF4: 70 EF    AND   F,0xEF             
                                        (0313)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0DF6: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[Counter16_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
0DF8: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[Counter16_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
0DFA: 08       PUSH  A                  (0316)    push  A                                          ;   -stack frame is now 5 bytes
0DFB: 5D 20    MOV   A,REG[0x20]        (0317)    mov   A, reg[Counter16_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
0DFD: 5D 22    MOV   A,REG[0x22]        (0318)    mov   A, reg[Counter16_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
0DFF: 08       PUSH  A                  (0319)    push  A                                          ;   -stack frame is now 6 bytes-
0E00: 52 00    MOV   A,[X+0]            (0320)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0E02: 60 26    MOV   REG[0x26],A        (0321)    mov   reg[Counter16_COMPARE_MSB_REG], A       ;
0E04: 52 01    MOV   A,[X+1]            (0322)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0E06: 60 22    MOV   REG[0x22],A        (0323)    mov   reg[Counter16_COMPARE_LSB_REG], A       ;
0E08: 71 10    OR    F,0x10             
                                        (0324)    M8C_SetBank1                                     ; ---Restore the counter operation
0E0A: 52 03    MOV   A,[X+3]            (0325)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0E0C: 60 21    MOV   REG[0x21],A        (0326)    mov   reg[Counter16_INPUT_LSB_REG], A         ;   and restore it
0E0E: 70 EF    AND   F,0xEF             
                                        (0327)    M8C_SetBank0                                     ; Now re-enable (start) the counter
0E10: 52 02    MOV   A,[X+2]            (0328)    mov   A, [X+bOrigControlReg]                     ;   if it was running when
0E12: 60 23    MOV   REG[0x23],A        (0329)    mov   reg[Counter16_CONTROL_LSB_REG], A       ;   this function was first called
0E14: 18       POP   A                  (0330)    pop   A                                          ; Setup the return value
0E15: 20       POP   X                  (0331)    pop   X                                          ;
0E16: 38 FC    ADD   SP,0xFC            (0332)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0E18: 70 3F    AND   F,0x3F             
0E1A: 71 C0    OR    F,0xC0             
                                        (0333)    RAM_EPILOGUE RAM_USE_CLASS_2
0E1C: 7F       RET                      (0334)    ret
                                        (0335) 
                                        (0336) .ENDSECTION
                                        (0337) 
                                        (0338) ; End of File Counter16.asm
FILE: C:\Users\addis\DOCUME~1\ECE381\I2CRAM\I2CRAM\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "string.h"		// used for any of the string fcns supported by API
(0008) #include "stdio.h"		// this is used for fcns....
(0009) #include "ctype.h"		// this is used for fcns.. csspanf() and cstork()
(0010) 
(0011) static char rubout[4] = { 0x08, 0x20, 0x08, 0x00 }; // Rubout Sequence consists of Backspace Space Backspace. This is the null-terminated string
(0012) 
(0013) char buf[80];	// String that stores the string the user enters in serial console
(0014) char data[256];	// This is the memory used to read/write to the RAM
(0015) 
(0016) // This function reads characters from the serial until a character is entered that is within the min & max ASCII characters.
(0017) // That character is returned
(0018) char GetNumber(char min, char max)	// gets passed
(0019) {
__UserModules_end|_GetNumber|__text_start|_GetNumber:
  c                    --> X+0
  max                  --> X-5
  min                  --> X-4
    0E1D: 10       PUSH  X
    0E1E: 4F       MOV   X,SP
    0E1F: 38 01    ADD   SP,0x1
    0E21: 80 34    JMP   0x0E56
(0020) 	char c;
(0021) 	
(0022) 	while (1)
(0023) 	{
(0024) 		c = UART_cReadChar(); // Read the character
    0E23: 10       PUSH  X
    0E24: 7C 09 32 LCALL _UART_cReadChar
    0E27: 20       POP   X
    0E28: 62 D0 00 MOV   REG[0xD0],0x0
    0E2B: 54 00    MOV   [X+0],A
(0025) 		if (c < ('0' + min) || c > ('0' + max)) // If the character is not within min to max range, continue the loop
    0E2D: 52 FC    MOV   A,[X-4]
    0E2F: 01 30    ADD   A,0x30
    0E31: 53 7C    MOV   [__r0],A
    0E33: 52 00    MOV   A,[X+0]
    0E35: 3A 7C    CMP   A,[__r0]
    0E37: C0 0C    JC    0x0E44
    0E39: 62 D0 00 MOV   REG[0xD0],0x0
    0E3C: 52 FB    MOV   A,[X-5]
    0E3E: 01 30    ADD   A,0x30
    0E40: 3B 00    CMP   A,[X+0]
    0E42: D0 03    JNC   0x0E46
(0026) 			continue;
    0E44: 80 11    JMP   0x0E56
(0027) 		
(0028) 		UART_PutChar(c); // Put the character on the serial
    0E46: 10       PUSH  X
    0E47: 52 00    MOV   A,[X+0]
    0E49: 7C 09 22 LCALL _UART_PutChar
    0E4C: 20       POP   X
(0029) 		return (c - '0'); // This returns the integer number entered instead of the ASCII value
    0E4D: 62 D0 00 MOV   REG[0xD0],0x0
    0E50: 52 00    MOV   A,[X+0]
    0E52: 11 30    SUB   A,0x30
    0E54: 80 03    JMP   0x0E58
    0E56: 8F CC    JMP   0x0E23
    0E58: 38 FF    ADD   SP,0xFF
    0E5A: 20       POP   X
    0E5B: 7F       RET   
(0030) 	}
(0031) 	
(0032) 	return 0;
(0033) }
(0034) 
(0035) // This function gets a line of text. It writes data into buffer with a maximum size of bufferLen. The function returns number of bytes written
(0036) // when enter is pressed
(0037) void GetLine(char *buffer, char bufferLen)
(0038) {
_GetLine:
  strPos               --> X+1
  c                    --> X+0
  bufferLen            --> X-6
  buffer               --> X-5
    0E5C: 10       PUSH  X
    0E5D: 4F       MOV   X,SP
    0E5E: 38 02    ADD   SP,0x2
(0039) 	char c;
(0040) 	char strPos = 0; // Current position in the string
    0E60: 56 01 00 MOV   [X+1],0x0
(0041) 	
(0042) 	UART_PutChar('>'); // Print line pointer
    0E63: 10       PUSH  X
    0E64: 50 3E    MOV   A,0x3E
    0E66: 7C 09 22 LCALL _UART_PutChar
    0E69: 20       POP   X
    0E6A: 80 8F    JMP   0x0EFA
(0043) 	
(0044) 	while (1)
(0045) 	{
(0046) 		c = UART_cReadChar(); // Use UART module to read the character user enters
    0E6C: 10       PUSH  X
    0E6D: 7C 09 32 LCALL _UART_cReadChar
    0E70: 20       POP   X
    0E71: 62 D0 00 MOV   REG[0xD0],0x0
    0E74: 54 00    MOV   [X+0],A
(0047) 		
(0048) 		if (c == 0x08 || c == 0x7F) // Delete or backspace pressed
    0E76: 3D 00 08 CMP   [X+0],0x8
    0E79: A0 06    JZ    0x0E80
    0E7B: 3D 00 7F CMP   [X+0],0x7F
    0E7E: B0 17    JNZ   0x0E96
(0049) 		{
(0050) 			if (strPos > 0) // Only delete if there are characters to delete
    0E80: 50 00    MOV   A,0x0
    0E82: 3B 01    CMP   A,[X+1]
    0E84: D0 75    JNC   0x0EFA
(0051) 			{
(0052) 				strPos--; // Set the position back one
    0E86: 7B 01    DEC   [X+1]
(0053) 				UART_PutString(rubout); // Sends the rubout sequence to the serial.
    0E88: 10       PUSH  X
    0E89: 50 00    MOV   A,0x0
    0E8B: 08       PUSH  A
    0E8C: 50 7D    MOV   A,0x7D
    0E8E: 5C       MOV   X,A
    0E8F: 18       POP   A
    0E90: 7C 09 5F LCALL _UART_PutString
    0E93: 20       POP   X
(0054) 			}
(0055) 		}
    0E94: 80 65    JMP   0x0EFA
(0056) 		else if (c == 0x0D) // Newline enter is pressed
    0E96: 3D 00 0D CMP   [X+0],0xD
    0E99: B0 22    JNZ   0x0EBC
(0057) 		{
(0058) 			buffer[strPos] = 0x00; // put the null character at the current strPos
    0E9B: 62 D0 00 MOV   REG[0xD0],0x0
    0E9E: 52 01    MOV   A,[X+1]
    0EA0: 53 7B    MOV   [__r1],A
    0EA2: 55 7C 00 MOV   [__r0],0x0
    0EA5: 52 FC    MOV   A,[X-4]
    0EA7: 04 7B    ADD   [__r1],A
    0EA9: 52 FB    MOV   A,[X-5]
    0EAB: 0C 7C    ADC   [__r0],A
    0EAD: 51 7C    MOV   A,[__r0]
    0EAF: 60 D5    MOV   REG[0xD5],A
    0EB1: 50 00    MOV   A,0x0
    0EB3: 3F 7B    MVI   [__r1],A
(0059) 			UART_PutCRLF(); // Go to another line
    0EB5: 10       PUSH  X
    0EB6: 7C 09 D7 LCALL _UART_PutCRLF
    0EB9: 20       POP   X
(0060) 			break;
    0EBA: 80 41    JMP   0x0EFC
(0061) 		}
(0062) 		else if (c >= 0x20 && c < 0x7F) // only valid characters to the string. These are any alphabet, numeric, or symbols
    0EBC: 3D 00 20 CMP   [X+0],0x20
    0EBF: C0 3A    JC    0x0EFA
    0EC1: 3D 00 7F CMP   [X+0],0x7F
    0EC4: D0 35    JNC   0x0EFA
(0063) 		{
(0064) 			if (strPos < bufferLen) // If there is space in the buffer
    0EC6: 52 01    MOV   A,[X+1]
    0EC8: 3B FA    CMP   A,[X-6]
    0ECA: D0 28    JNC   0x0EF3
(0065) 			{
(0066) 				buffer[strPos++] = c; // Set the current character in buffer to c and then increment strPos
    0ECC: 62 D0 00 MOV   REG[0xD0],0x0
    0ECF: 52 01    MOV   A,[X+1]
    0ED1: 53 7B    MOV   [__r1],A
    0ED3: 55 7C 00 MOV   [__r0],0x0
    0ED6: 01 01    ADD   A,0x1
    0ED8: 54 01    MOV   [X+1],A
    0EDA: 52 FC    MOV   A,[X-4]
    0EDC: 04 7B    ADD   [__r1],A
    0EDE: 52 FB    MOV   A,[X-5]
    0EE0: 0C 7C    ADC   [__r0],A
    0EE2: 51 7C    MOV   A,[__r0]
    0EE4: 60 D5    MOV   REG[0xD5],A
    0EE6: 52 00    MOV   A,[X+0]
    0EE8: 3F 7B    MVI   [__r1],A
(0067) 				UART_PutChar(c); // Send the character to the computer
    0EEA: 10       PUSH  X
    0EEB: 52 00    MOV   A,[X+0]
    0EED: 7C 09 22 LCALL _UART_PutChar
    0EF0: 20       POP   X
(0068) 			}
    0EF1: 80 08    JMP   0x0EFA
(0069) 			else
(0070) 				UART_PutChar(0x07); // Send BEL key because there is no more space left to add to the string
    0EF3: 10       PUSH  X
    0EF4: 50 07    MOV   A,0x7
    0EF6: 7C 09 22 LCALL _UART_PutChar
    0EF9: 20       POP   X
(0071) 		}
(0072) 	}
    0EFA: 8F 71    JMP   0x0E6C
    0EFC: 38 FE    ADD   SP,0xFE
    0EFE: 20       POP   X
    0EFF: 7F       RET   
(0073) 	
(0074) 	return;
(0075) }
(0076) 
(0077) // This takes a string that has hex such as 'A4 FF 01 04' and converts it into a string containing the hex numbers. Returns -1 if error, otherwise 
(0078) // it returns the number of bytes converted
(0079) int HexConversion(char *src, char *dst)
(0080) {
_HexConversion:
  bytesParsed          --> X+6
  temp                 --> X+4
  str                  --> X+2
  ii                   --> X+0
  dst                  --> X-7
  src                  --> X-5
    0F00: 10       PUSH  X
    0F01: 4F       MOV   X,SP
    0F02: 38 08    ADD   SP,0x8
(0081) 	char *str;	
(0082)     int bytesParsed = 0;
    0F04: 56 07 00 MOV   [X+7],0x0
    0F07: 56 06 00 MOV   [X+6],0x0
(0083)     int ii = 0;
    0F0A: 56 01 00 MOV   [X+1],0x0
    0F0D: 56 00 00 MOV   [X+0],0x0
(0084) 	int temp;
(0085) 
(0086)     str = cstrtok(src, " "); // Finds next space and returns the word before it
    0F10: 50 05    MOV   A,0x5
    0F12: 08       PUSH  A
    0F13: 50 04    MOV   A,0x4
    0F15: 08       PUSH  A
    0F16: 52 FB    MOV   A,[X-5]
    0F18: 08       PUSH  A
    0F19: 52 FC    MOV   A,[X-4]
    0F1B: 08       PUSH  A
    0F1C: 7C 31 5F LCALL _cstrtok
    0F1F: 38 FC    ADD   SP,0xFC
    0F21: 62 D0 00 MOV   REG[0xD0],0x0
    0F24: 51 7B    MOV   A,[__r1]
    0F26: 54 03    MOV   [X+3],A
    0F28: 51 7C    MOV   A,[__r0]
    0F2A: 54 02    MOV   [X+2],A
(0087)     do
(0088)     {
(0089)         if (strlen(str) != 2) // If the string is not 2 bytes long, it is invalid
    0F2C: 52 02    MOV   A,[X+2]
    0F2E: 08       PUSH  A
    0F2F: 52 03    MOV   A,[X+3]
    0F31: 08       PUSH  A
    0F32: 7C 17 F4 LCALL _strlenLMM
    0F35: 38 FE    ADD   SP,0xFE
    0F37: 62 D0 00 MOV   REG[0xD0],0x0
    0F3A: 3C 7C 00 CMP   [__r0],0x0
    0F3D: B0 06    JNZ   0x0F44
    0F3F: 3C 7B 02 CMP   [__r1],0x2
    0F42: A0 0C    JZ    0x0F4F
(0090)             return -1;
    0F44: 62 D0 00 MOV   REG[0xD0],0x0
    0F47: 55 7B FF MOV   [__r1],0xFF
    0F4A: 55 7C FF MOV   [__r0],0xFF
    0F4D: 80 D3    JMP   0x1021
(0091) 
(0092)         for (ii = 0; ii < strlen(str); ++ii) // If any of the bytes are not valid hexadecimal, return error
    0F4F: 56 01 00 MOV   [X+1],0x0
    0F52: 56 00 00 MOV   [X+0],0x0
    0F55: 80 3C    JMP   0x0F92
(0093)             if (!isxdigit(str[ii]))
    0F57: 62 D0 00 MOV   REG[0xD0],0x0
    0F5A: 52 01    MOV   A,[X+1]
    0F5C: 03 03    ADD   A,[X+3]
    0F5E: 53 7B    MOV   [__r1],A
    0F60: 52 00    MOV   A,[X+0]
    0F62: 0B 02    ADC   A,[X+2]
    0F64: 60 D4    MOV   REG[0xD4],A
    0F66: 3E 7B    MVI   A,[__r1]
    0F68: 53 7B    MOV   [__r1],A
    0F6A: 50 00    MOV   A,0x0
    0F6C: 08       PUSH  A
    0F6D: 51 7B    MOV   A,[__r1]
    0F6F: 08       PUSH  A
    0F70: 7C 23 7E LCALL _isxdigit
    0F73: 38 FE    ADD   SP,0xFE
    0F75: 62 D0 00 MOV   REG[0xD0],0x0
    0F78: 3C 7C 00 CMP   [__r0],0x0
    0F7B: B0 11    JNZ   0x0F8D
    0F7D: 3C 7B 00 CMP   [__r1],0x0
    0F80: B0 0C    JNZ   0x0F8D
(0094)                 return -1;
    0F82: 62 D0 00 MOV   REG[0xD0],0x0
    0F85: 55 7B FF MOV   [__r1],0xFF
    0F88: 55 7C FF MOV   [__r0],0xFF
    0F8B: 80 95    JMP   0x1021
    0F8D: 77 01    INC   [X+1]
    0F8F: 0F 00 00 ADC   [X+0],0x0
    0F92: 52 02    MOV   A,[X+2]
    0F94: 08       PUSH  A
    0F95: 52 03    MOV   A,[X+3]
    0F97: 08       PUSH  A
    0F98: 7C 17 F4 LCALL _strlenLMM
    0F9B: 38 FE    ADD   SP,0xFE
    0F9D: 62 D0 00 MOV   REG[0xD0],0x0
    0FA0: 52 01    MOV   A,[X+1]
    0FA2: 12 7B    SUB   A,[__r1]
    0FA4: 52 00    MOV   A,[X+0]
    0FA6: 1A 7C    SBB   A,[__r0]
    0FA8: CF AE    JC    0x0F57
(0095) 
(0096)         csscanf(str, "%x", &temp); // Take the string and read a hexadecimal integer from it
    0FAA: 62 D0 00 MOV   REG[0xD0],0x0
    0FAD: 5A 7B    MOV   [__r1],X
    0FAF: 06 7B 04 ADD   [__r1],0x4
    0FB2: 50 07    MOV   A,0x7
    0FB4: 08       PUSH  A
    0FB5: 51 7B    MOV   A,[__r1]
    0FB7: 08       PUSH  A
    0FB8: 50 05    MOV   A,0x5
    0FBA: 08       PUSH  A
    0FBB: 50 01    MOV   A,0x1
    0FBD: 08       PUSH  A
    0FBE: 52 02    MOV   A,[X+2]
    0FC0: 08       PUSH  A
    0FC1: 52 03    MOV   A,[X+3]
    0FC3: 08       PUSH  A
    0FC4: 7C 25 04 LCALL _csscanf
(0097) 		dst[bytesParsed++] = temp; // Convert the integer into a char and put it into dst. Increment i to go to next position in dst
    0FC7: 62 D0 00 MOV   REG[0xD0],0x0
    0FCA: 52 07    MOV   A,[X+7]
    0FCC: 53 7B    MOV   [__r1],A
    0FCE: 52 06    MOV   A,[X+6]
    0FD0: 53 7C    MOV   [__r0],A
    0FD2: 51 7B    MOV   A,[__r1]
    0FD4: 01 01    ADD   A,0x1
    0FD6: 54 07    MOV   [X+7],A
    0FD8: 51 7C    MOV   A,[__r0]
    0FDA: 09 00    ADC   A,0x0
    0FDC: 54 06    MOV   [X+6],A
    0FDE: 52 05    MOV   A,[X+5]
    0FE0: 53 7A    MOV   [__r2],A
    0FE2: 52 FA    MOV   A,[X-6]
    0FE4: 04 7B    ADD   [__r1],A
    0FE6: 52 F9    MOV   A,[X-7]
    0FE8: 0C 7C    ADC   [__r0],A
    0FEA: 51 7C    MOV   A,[__r0]
    0FEC: 60 D5    MOV   REG[0xD5],A
    0FEE: 51 7A    MOV   A,[__r2]
    0FF0: 3F 7B    MVI   [__r1],A
(0098)         str = cstrtok(0x00, " "); // Sets str to be the next word in src. 0x00 means it will continue where it left off last
    0FF2: 50 05    MOV   A,0x5
    0FF4: 08       PUSH  A
    0FF5: 50 04    MOV   A,0x4
    0FF7: 08       PUSH  A
    0FF8: 50 00    MOV   A,0x0
    0FFA: 08       PUSH  A
    0FFB: 08       PUSH  A
    0FFC: 7C 31 5F LCALL _cstrtok
    0FFF: 38 F6    ADD   SP,0xF6
    1001: 62 D0 00 MOV   REG[0xD0],0x0
    1004: 51 7B    MOV   A,[__r1]
    1006: 54 03    MOV   [X+3],A
    1008: 51 7C    MOV   A,[__r0]
    100A: 54 02    MOV   [X+2],A
(0099)     } while (str != 0x00); // Continue while there are more strings to be parsed
    100C: 3D 02 00 CMP   [X+2],0x0
    100F: BF 1C    JNZ   0x0F2C
    1011: 3D 03 00 CMP   [X+3],0x0
    1014: BF 17    JNZ   0x0F2C
(0100) 
(0101)     return bytesParsed; // Returns the number of bytes that were read
    1016: 62 D0 00 MOV   REG[0xD0],0x0
    1019: 52 07    MOV   A,[X+7]
    101B: 53 7B    MOV   [__r1],A
    101D: 52 06    MOV   A,[X+6]
    101F: 53 7C    MOV   [__r0],A
    1021: 38 F8    ADD   SP,0xF8
    1023: 20       POP   X
    1024: 7F       RET   
(0102) }
(0103) 
(0104) // Takes input argument str and converts each character into a lowercase character. Returns that str. Note: This function alters str
(0105) char *Lowercase(char *str)
(0106) {
_Lowercase:
  i                    --> X+0
  str                  --> X-5
    1025: 10       PUSH  X
    1026: 4F       MOV   X,SP
    1027: 38 04    ADD   SP,0x4
(0107) 	int i;
(0108) 	for (i = 0; str[i] != '\0'; ++i) // Loop through each character in str and call tolower on it
    1029: 56 01 00 MOV   [X+1],0x0
    102C: 56 00 00 MOV   [X+0],0x0
    102F: 80 43    JMP   0x1073
(0109) 		str[i] = tolower(str[i]); // Set the character to be the lowercase of the character
    1031: 62 D0 00 MOV   REG[0xD0],0x0
    1034: 52 01    MOV   A,[X+1]
    1036: 03 FC    ADD   A,[X-4]
    1038: 53 7B    MOV   [__r1],A
    103A: 52 00    MOV   A,[X+0]
    103C: 0B FB    ADC   A,[X-5]
    103E: 53 7C    MOV   [__r0],A
    1040: 51 7B    MOV   A,[__r1]
    1042: 54 03    MOV   [X+3],A
    1044: 51 7C    MOV   A,[__r0]
    1046: 54 02    MOV   [X+2],A
    1048: 60 D4    MOV   REG[0xD4],A
    104A: 3E 7B    MVI   A,[__r1]
    104C: 7A 7B    DEC   [__r1]
    104E: 53 79    MOV   [__r3],A
    1050: 50 00    MOV   A,0x0
    1052: 08       PUSH  A
    1053: 51 79    MOV   A,[__r3]
    1055: 08       PUSH  A
    1056: 7C 23 DD LCALL _tolower
    1059: 38 FE    ADD   SP,0xFE
    105B: 62 D0 00 MOV   REG[0xD0],0x0
    105E: 51 7B    MOV   A,[__r1]
    1060: 53 7C    MOV   [__r0],A
    1062: 52 03    MOV   A,[X+3]
    1064: 53 79    MOV   [__r3],A
    1066: 52 02    MOV   A,[X+2]
    1068: 60 D5    MOV   REG[0xD5],A
    106A: 51 7C    MOV   A,[__r0]
    106C: 3F 79    MVI   [__r3],A
    106E: 77 01    INC   [X+1]
    1070: 0F 00 00 ADC   [X+0],0x0
    1073: 62 D0 00 MOV   REG[0xD0],0x0
    1076: 52 01    MOV   A,[X+1]
    1078: 03 FC    ADD   A,[X-4]
    107A: 53 7B    MOV   [__r1],A
    107C: 52 00    MOV   A,[X+0]
    107E: 0B FB    ADC   A,[X-5]
    1080: 60 D4    MOV   REG[0xD4],A
    1082: 3E 7B    MVI   A,[__r1]
    1084: 39 00    CMP   A,0x0
    1086: BF AA    JNZ   0x1031
(0110) 	
(0111) 	return str; // Return the string
    1088: 52 FC    MOV   A,[X-4]
    108A: 53 7B    MOV   [__r1],A
    108C: 52 FB    MOV   A,[X-5]
    108E: 53 7C    MOV   [__r0],A
    1090: 38 FC    ADD   SP,0xFC
    1092: 20       POP   X
    1093: 7F       RET   
(0112) }
(0113) 
(0114) void main(void)
(0115) {	
_main:
  memLoc               --> X+16
  groupAddress         --> X+14
  dataType             --> X+13
  hexStr               --> X+9
  numBytes             --> X+7
  i                    --> X+5
  memLoc               --> X+10
  len                  --> X+8
  groupAddress         --> X+6
  dataType             --> X+5
  slaveAddress         --> X+4
  cmd                  --> X+2
  params               --> X+0
    1094: 10       PUSH  X
    1095: 4F       MOV   X,SP
    1096: 38 12    ADD   SP,0x12
(0116) 	M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
    1098: 71 01    OR    F,0x1
(0117) 	
(0118) 	// Start the UART(with no parity), and Counter16
(0119) 	UART_Start(UART_PARITY_NONE);
    109A: 10       PUSH  X
    109B: 50 00    MOV   A,0x0
    109D: 7C 08 B0 LCALL _UART_Start
(0120) 	// clock for moving serial
(0121) 	Counter16_Start();
    10A0: 7C 0D C5 LCALL _Counter16_Start
(0122) 	
(0123) 	// Start I2CHW
(0124) 	I2CHW_Start();
    10A3: 7C 09 E0 LCALL _I2CHW_Start
(0125) 	I2CHW_EnableMstr();
    10A6: 7C 09 EE LCALL _I2CHW_EnableMstr
(0126) 	I2CHW_EnableInt();
    10A9: 7C 09 E3 LCALL _I2CHW_EnableInt
(0127) 	
(0128) 	// This is the command usage string
(0129) 	UART_CPutString("########################## I2C External SRAM ########################\r\n\
    10AC: 50 02    MOV   A,0x2
    10AE: 08       PUSH  A
    10AF: 50 58    MOV   A,0x58
    10B1: 5C       MOV   X,A
    10B2: 18       POP   A
    10B3: 7C 09 C5 LCALL _UART_CPutString
    10B6: 20       POP   X
    10B7: 85 F7    JMP   0x16AF
(0130) #	W # XX T [Data]\r\n\
(0131) #		W    - Write command\r\n\
(0132) #		#    - Group Address (0 - 7)\r\n\
(0133) #		XX   - Memory Location in hex (00 - FF)\r\n\
(0134) #		T    - Data Type, either A for ASCII or H for Hexadecimal\r\n\
(0135) #		Data - Either ASCII string or Hexadecimal separates by spaces\r\n\
(0136) #\t\t\tA - Mary had a little lamb\r\n\
(0137) #\t\t\tH - 01 FF A0 0F D8 C3\r\n\
(0138) #\r\n\
(0139) #	R # XX T NN\r\n\
(0140) #		R    - Read command\r\n\
(0141) #		#    - Group Address (0 - 7)\r\n\
(0142) #		XX   - Memory Location in hex (00 - FF)\r\n\
(0143) #		T    - Data Type, either A for ASCII or H for Hexadecimal\r\n\
(0144) #		NN	 - Number of bytes to read in hexadecimal\r\n\
(0145) #####################################################################\r\n");
(0146) 	while (1)
(0147) 	{
(0148) 		char *cmd;
(0149) 		char *params;
(0150) 		char slaveAddress = 0x50;		// 010100000 R/W shifted to front
    10B9: 56 04 50 MOV   [X+4],0x50
(0151) 		
(0152) 		GetLine(buf, 79); // Retrieves a line with a maximum length of 70 characters and put it in buf.
    10BC: 50 4F    MOV   A,0x4F
    10BE: 08       PUSH  A
    10BF: 50 00    MOV   A,0x0
    10C1: 08       PUSH  A
    10C2: 50 09    MOV   A,0x9
    10C4: 08       PUSH  A
    10C5: 9D 95    CALL  _GetLine
    10C7: 38 FD    ADD   SP,0xFD
(0153) 		
(0154) 		memset(data, 0x00, 256);	// Initialize all the set {data} to NULL bytes
    10C9: 50 01    MOV   A,0x1
    10CB: 08       PUSH  A
    10CC: 50 00    MOV   A,0x0
    10CE: 08       PUSH  A
    10CF: 08       PUSH  A
    10D0: 08       PUSH  A
    10D1: 50 01    MOV   A,0x1
    10D3: 08       PUSH  A
    10D4: 50 00    MOV   A,0x0
    10D6: 08       PUSH  A
    10D7: 7C 17 9D LCALL _memsetLMM
(0155) 		cmd = Lowercase(cstrtok(buf, " ")); // Get the first word from the entered string and lowercase it.
    10DA: 50 05    MOV   A,0x5
    10DC: 08       PUSH  A
    10DD: 50 04    MOV   A,0x4
    10DF: 08       PUSH  A
    10E0: 50 00    MOV   A,0x0
    10E2: 08       PUSH  A
    10E3: 50 09    MOV   A,0x9
    10E5: 08       PUSH  A
    10E6: 7C 31 5F LCALL _cstrtok
    10E9: 38 F6    ADD   SP,0xF6
    10EB: 62 D0 00 MOV   REG[0xD0],0x0
    10EE: 51 7C    MOV   A,[__r0]
    10F0: 08       PUSH  A
    10F1: 51 7B    MOV   A,[__r1]
    10F3: 08       PUSH  A
    10F4: 9F 2F    CALL  _Lowercase
    10F6: 62 D0 00 MOV   REG[0xD0],0x0
    10F9: 51 7B    MOV   A,[__r1]
    10FB: 54 03    MOV   [X+3],A
    10FD: 51 7C    MOV   A,[__r0]
    10FF: 54 02    MOV   [X+2],A
(0156) 		if (strlen(cmd) == 1 && cmd[0] == 'w') // If the command is one letter and it is w, then write command
    1101: 52 02    MOV   A,[X+2]
    1103: 08       PUSH  A
    1104: 52 03    MOV   A,[X+3]
    1106: 08       PUSH  A
    1107: 7C 17 F4 LCALL _strlenLMM
    110A: 38 FC    ADD   SP,0xFC
    110C: 62 D0 00 MOV   REG[0xD0],0x0
    110F: 3C 7C 00 CMP   [__r0],0x0
    1112: B2 75    JNZ   0x1388
    1114: 3C 7B 01 CMP   [__r1],0x1
    1117: B2 70    JNZ   0x1388
    1119: 62 D0 00 MOV   REG[0xD0],0x0
    111C: 52 03    MOV   A,[X+3]
    111E: 53 7B    MOV   [__r1],A
    1120: 52 02    MOV   A,[X+2]
    1122: 60 D4    MOV   REG[0xD4],A
    1124: 3E 7B    MVI   A,[__r1]
    1126: 39 77    CMP   A,0x77
    1128: B2 5F    JNZ   0x1388
(0157) 		{	
(0158) 			int groupAddress; // only 1 and 2 actually go to SRAM
(0159) 			int memLoc;
(0160) 			char dataType;
(0161) 			
(0162) 			int len;
(0163) 
(0164) 			params = cstrtok(0x00, " ");  // 0x00 indicates it will continue from last cstrtok command and get next word. This gets the next parameter
    112A: 50 05    MOV   A,0x5
    112C: 08       PUSH  A
    112D: 50 04    MOV   A,0x4
    112F: 08       PUSH  A
    1130: 50 00    MOV   A,0x0
    1132: 08       PUSH  A
    1133: 08       PUSH  A
    1134: 7C 31 5F LCALL _cstrtok
    1137: 62 D0 00 MOV   REG[0xD0],0x0
    113A: 51 7B    MOV   A,[__r1]
    113C: 54 01    MOV   [X+1],A
    113E: 51 7C    MOV   A,[__r0]
    1140: 54 00    MOV   [X+0],A
(0165) 			
(0166) 			// csscanf if used to parse the string into values such as hexadecimal or integers
(0167) 			// It returns the number of parameters it parsed which should be one
(0168) 			// If the length of the params is not right or it does not parse the right amount, it returns an error
(0169) 			// %d gets an integer, this is the groupAddress
(0170) 			if (strlen(params) != 1 || csscanf(params, "%d", &groupAddress) != 1) goto error;
    1142: 52 00    MOV   A,[X+0]
    1144: 08       PUSH  A
    1145: 52 01    MOV   A,[X+1]
    1147: 08       PUSH  A
    1148: 7C 17 F4 LCALL _strlenLMM
    114B: 38 FA    ADD   SP,0xFA
    114D: 62 D0 00 MOV   REG[0xD0],0x0
    1150: 3C 7C 00 CMP   [__r0],0x0
    1153: B0 32    JNZ   0x1186
    1155: 3C 7B 01 CMP   [__r1],0x1
    1158: B0 2D    JNZ   0x1186
    115A: 62 D0 00 MOV   REG[0xD0],0x0
    115D: 5A 7B    MOV   [__r1],X
    115F: 06 7B 06 ADD   [__r1],0x6
    1162: 50 07    MOV   A,0x7
    1164: 08       PUSH  A
    1165: 51 7B    MOV   A,[__r1]
    1167: 08       PUSH  A
    1168: 50 02    MOV   A,0x2
    116A: 08       PUSH  A
    116B: 50 55    MOV   A,0x55
    116D: 08       PUSH  A
    116E: 52 00    MOV   A,[X+0]
    1170: 08       PUSH  A
    1171: 52 01    MOV   A,[X+1]
    1173: 08       PUSH  A
    1174: 7C 25 04 LCALL _csscanf
    1177: 38 FA    ADD   SP,0xFA
    1179: 62 D0 00 MOV   REG[0xD0],0x0
    117C: 3C 7C 00 CMP   [__r0],0x0
    117F: B0 06    JNZ   0x1186
    1181: 3C 7B 01 CMP   [__r1],0x1
    1184: A0 03    JZ    0x1188
    1186: 85 1C    JMP   0x16A3
(0171) 			
(0172) 			// %x gets a hexadecimal value, this can read capital or lowercase letters, this is the memory location
(0173) 			params = cstrtok(0x00, " ");
    1188: 50 05    MOV   A,0x5
    118A: 08       PUSH  A
    118B: 50 04    MOV   A,0x4
    118D: 08       PUSH  A
    118E: 50 00    MOV   A,0x0
    1190: 08       PUSH  A
    1191: 08       PUSH  A
    1192: 7C 31 5F LCALL _cstrtok
    1195: 62 D0 00 MOV   REG[0xD0],0x0
    1198: 51 7B    MOV   A,[__r1]
    119A: 54 01    MOV   [X+1],A
    119C: 51 7C    MOV   A,[__r0]
    119E: 54 00    MOV   [X+0],A
(0174) 			if (strlen(params) != 2 || csscanf(params, "%x", &memLoc) != 1) goto error;
    11A0: 52 00    MOV   A,[X+0]
    11A2: 08       PUSH  A
    11A3: 52 01    MOV   A,[X+1]
    11A5: 08       PUSH  A
    11A6: 7C 17 F4 LCALL _strlenLMM
    11A9: 38 FA    ADD   SP,0xFA
    11AB: 62 D0 00 MOV   REG[0xD0],0x0
    11AE: 3C 7C 00 CMP   [__r0],0x0
    11B1: B0 32    JNZ   0x11E4
    11B3: 3C 7B 02 CMP   [__r1],0x2
    11B6: B0 2D    JNZ   0x11E4
    11B8: 62 D0 00 MOV   REG[0xD0],0x0
    11BB: 5A 7B    MOV   [__r1],X
    11BD: 06 7B 0A ADD   [__r1],0xA
    11C0: 50 07    MOV   A,0x7
    11C2: 08       PUSH  A
    11C3: 51 7B    MOV   A,[__r1]
    11C5: 08       PUSH  A
    11C6: 50 05    MOV   A,0x5
    11C8: 08       PUSH  A
    11C9: 50 01    MOV   A,0x1
    11CB: 08       PUSH  A
    11CC: 52 00    MOV   A,[X+0]
    11CE: 08       PUSH  A
    11CF: 52 01    MOV   A,[X+1]
    11D1: 08       PUSH  A
    11D2: 7C 25 04 LCALL _csscanf
    11D5: 38 FA    ADD   SP,0xFA
    11D7: 62 D0 00 MOV   REG[0xD0],0x0
    11DA: 3C 7C 00 CMP   [__r0],0x0
    11DD: B0 06    JNZ   0x11E4
    11DF: 3C 7B 01 CMP   [__r1],0x1
    11E2: A0 03    JZ    0x11E6
    11E4: 84 BE    JMP   0x16A3
(0175) 			
(0176) 			// %c gets a character, the data type character
(0177) 			params = cstrtok(0x00, " ");
    11E6: 50 05    MOV   A,0x5
    11E8: 08       PUSH  A
    11E9: 50 04    MOV   A,0x4
    11EB: 08       PUSH  A
    11EC: 50 00    MOV   A,0x0
    11EE: 08       PUSH  A
    11EF: 08       PUSH  A
    11F0: 7C 31 5F LCALL _cstrtok
    11F3: 62 D0 00 MOV   REG[0xD0],0x0
    11F6: 51 7B    MOV   A,[__r1]
    11F8: 54 01    MOV   [X+1],A
    11FA: 51 7C    MOV   A,[__r0]
    11FC: 54 00    MOV   [X+0],A
(0178) 			if (strlen(params) != 1 || csscanf(params, "%c", &dataType) != 1) goto error;
    11FE: 52 00    MOV   A,[X+0]
    1200: 08       PUSH  A
    1201: 52 01    MOV   A,[X+1]
    1203: 08       PUSH  A
    1204: 7C 17 F4 LCALL _strlenLMM
    1207: 38 FA    ADD   SP,0xFA
    1209: 62 D0 00 MOV   REG[0xD0],0x0
    120C: 3C 7C 00 CMP   [__r0],0x0
    120F: B0 32    JNZ   0x1242
    1211: 3C 7B 01 CMP   [__r1],0x1
    1214: B0 2D    JNZ   0x1242
    1216: 62 D0 00 MOV   REG[0xD0],0x0
    1219: 5A 7B    MOV   [__r1],X
    121B: 06 7B 05 ADD   [__r1],0x5
    121E: 50 07    MOV   A,0x7
    1220: 08       PUSH  A
    1221: 51 7B    MOV   A,[__r1]
    1223: 08       PUSH  A
    1224: 50 02    MOV   A,0x2
    1226: 08       PUSH  A
    1227: 50 52    MOV   A,0x52
    1229: 08       PUSH  A
    122A: 52 00    MOV   A,[X+0]
    122C: 08       PUSH  A
    122D: 52 01    MOV   A,[X+1]
    122F: 08       PUSH  A
    1230: 7C 25 04 LCALL _csscanf
    1233: 38 FA    ADD   SP,0xFA
    1235: 62 D0 00 MOV   REG[0xD0],0x0
    1238: 3C 7C 00 CMP   [__r0],0x0
    123B: B0 06    JNZ   0x1242
    123D: 3C 7B 01 CMP   [__r1],0x1
    1240: A0 03    JZ    0x1244
    1242: 84 60    JMP   0x16A3
(0179) 			
(0180) 			// This reads the rest of the string and stores it in params. 
(0181) 			// If the length is zero or if cstrtok returns 0, this means that there was no valid string/hex entered
(0182) 			params = cstrtok(0x00, "\0");
    1244: 50 02    MOV   A,0x2
    1246: 08       PUSH  A
    1247: 50 50    MOV   A,0x50
    1249: 08       PUSH  A
    124A: 50 00    MOV   A,0x0
    124C: 08       PUSH  A
    124D: 08       PUSH  A
    124E: 7C 31 5F LCALL _cstrtok
    1251: 62 D0 00 MOV   REG[0xD0],0x0
    1254: 51 7B    MOV   A,[__r1]
    1256: 54 01    MOV   [X+1],A
    1258: 51 7C    MOV   A,[__r0]
    125A: 54 00    MOV   [X+0],A
(0183) 			if (strlen(params) == 0 || params == 0x00) goto error;	// They did all the params but didn't write anything
    125C: 52 00    MOV   A,[X+0]
    125E: 08       PUSH  A
    125F: 52 01    MOV   A,[X+1]
    1261: 08       PUSH  A
    1262: 7C 17 F4 LCALL _strlenLMM
    1265: 38 FA    ADD   SP,0xFA
    1267: 62 D0 00 MOV   REG[0xD0],0x0
    126A: 3C 7C 00 CMP   [__r0],0x0
    126D: B0 06    JNZ   0x1274
    126F: 3C 7B 00 CMP   [__r1],0x0
    1272: A0 0B    JZ    0x127E
    1274: 3D 00 00 CMP   [X+0],0x0
    1277: B0 08    JNZ   0x1280
    1279: 3D 01 00 CMP   [X+1],0x0
    127C: B0 03    JNZ   0x1280
    127E: 84 24    JMP   0x16A3
(0184) 			
(0185) 			dataType = tolower(dataType); // Lowercase the data type
    1280: 62 D0 00 MOV   REG[0xD0],0x0
    1283: 52 05    MOV   A,[X+5]
    1285: 53 7B    MOV   [__r1],A
    1287: 50 00    MOV   A,0x0
    1289: 08       PUSH  A
    128A: 51 7B    MOV   A,[__r1]
    128C: 08       PUSH  A
    128D: 7C 23 DD LCALL _tolower
    1290: 38 FE    ADD   SP,0xFE
    1292: 62 D0 00 MOV   REG[0xD0],0x0
    1295: 51 7B    MOV   A,[__r1]
    1297: 54 05    MOV   [X+5],A
(0186) 			if (groupAddress < 0 || groupAddress > 7)
    1299: 52 07    MOV   A,[X+7]
    129B: 11 00    SUB   A,0x0
    129D: 52 06    MOV   A,[X+6]
    129F: 31 80    XOR   A,0x80
    12A1: 19 80    SBB   A,0x80
    12A3: C0 14    JC    0x12B8
    12A5: 50 07    MOV   A,0x7
    12A7: 13 07    SUB   A,[X+7]
    12A9: 52 06    MOV   A,[X+6]
    12AB: 31 80    XOR   A,0x80
    12AD: 62 D0 00 MOV   REG[0xD0],0x0
    12B0: 53 74    MOV   [__rX],A
    12B2: 50 80    MOV   A,0x80
    12B4: 1A 74    SBB   A,[__rX]
    12B6: D0 03    JNC   0x12BA
(0187) 				goto error; // groupAddress was not in range
    12B8: 83 EA    JMP   0x16A3
(0188) 			
(0189) 			data[0] = memLoc;	// First byte needs to be the memory location according to PCF8570 datasheet
    12BA: 52 0B    MOV   A,[X+11]
    12BC: 62 D0 01 MOV   REG[0xD0],0x1
    12BF: 53 00    MOV   [data],A
(0190) 			slaveAddress |= groupAddress;	// ORs the group 2 address to the group 1 address to get slaveAddress
    12C1: 62 D0 00 MOV   REG[0xD0],0x0
    12C4: 52 04    MOV   A,[X+4]
    12C6: 53 7B    MOV   [__r1],A
    12C8: 52 07    MOV   A,[X+7]
    12CA: 2C 7B    OR    [__r1],A
    12CC: 51 7B    MOV   A,[__r1]
    12CE: 54 04    MOV   [X+4],A
(0191) 			
(0192) 			if (dataType == 'a') // If the data type is ASCII
    12D0: 3D 05 61 CMP   [X+5],0x61
    12D3: B0 2E    JNZ   0x1302
(0193) 			{
(0194) 				strcpy((data + 1), params); // Copy the string from params and put it right after the data[0] byte
    12D5: 52 00    MOV   A,[X+0]
    12D7: 08       PUSH  A
    12D8: 52 01    MOV   A,[X+1]
    12DA: 08       PUSH  A
    12DB: 50 01    MOV   A,0x1
    12DD: 08       PUSH  A
    12DE: 50 01    MOV   A,0x1
    12E0: 08       PUSH  A
    12E1: 7C 17 CB LCALL _strcpyLMM
(0195) 				len = strlen((data + 1)) + 1; // len is the number of bytes to write, it is the length of the string and then +1 because of the memLoc byte
    12E4: 50 01    MOV   A,0x1
    12E6: 08       PUSH  A
    12E7: 50 01    MOV   A,0x1
    12E9: 08       PUSH  A
    12EA: 7C 17 F4 LCALL _strlenLMM
    12ED: 38 FA    ADD   SP,0xFA
    12EF: 62 D0 00 MOV   REG[0xD0],0x0
    12F2: 06 7B 01 ADD   [__r1],0x1
    12F5: 0E 7C 00 ADC   [__r0],0x0
    12F8: 51 7B    MOV   A,[__r1]
    12FA: 54 09    MOV   [X+9],A
    12FC: 51 7C    MOV   A,[__r0]
    12FE: 54 08    MOV   [X+8],A
(0196) 				// Cant just do strlen(data) because data[0] could be 0x00 and it would return 0 as the string length
(0197) 			}
    1300: 80 32    JMP   0x1333
(0198) 			else if (dataType == 'h') // If the data type is hex
    1302: 3D 05 68 CMP   [X+5],0x68
    1305: B3 9D    JNZ   0x16A3
(0199) 			{
(0200) 				// Take ASCII encoded hex data params and put it after data[0], returns number of bytes converted
(0201) 				if ((len = HexConversion(params, (data + 1))) == -1)
    1307: 50 01    MOV   A,0x1
    1309: 08       PUSH  A
    130A: 50 01    MOV   A,0x1
    130C: 08       PUSH  A
    130D: 52 00    MOV   A,[X+0]
    130F: 08       PUSH  A
    1310: 52 01    MOV   A,[X+1]
    1312: 08       PUSH  A
    1313: 9B EB    CALL  _HexConversion
    1315: 38 FC    ADD   SP,0xFC
    1317: 62 D0 00 MOV   REG[0xD0],0x0
    131A: 51 7B    MOV   A,[__r1]
    131C: 54 09    MOV   [X+9],A
    131E: 51 7C    MOV   A,[__r0]
    1320: 54 08    MOV   [X+8],A
    1322: 3C 7C FF CMP   [__r0],0xFF
    1325: B0 08    JNZ   0x132E
    1327: 3C 7B FF CMP   [__r1],0xFF
    132A: B0 03    JNZ   0x132E
(0202) 					goto error;
    132C: 83 76    JMP   0x16A3
(0203) 				len++; // Add one to the length because of the memLoc byte at data[0]
    132E: 77 09    INC   [X+9]
    1330: 0F 08 00 ADC   [X+8],0x0
(0204) 			}
(0205) 			else
(0206) 				goto error;
(0207) 			
(0208) 			I2CHW_bWriteBytes(slaveAddress, data, len, I2CHW_CompleteXfer); // Write len bytes from data 
    1333: 10       PUSH  X
    1334: 50 00    MOV   A,0x0
    1336: 08       PUSH  A
    1337: 62 D0 00 MOV   REG[0xD0],0x0
    133A: 52 09    MOV   A,[X+9]
    133C: 08       PUSH  A
    133D: 50 01    MOV   A,0x1
    133F: 08       PUSH  A
    1340: 50 00    MOV   A,0x0
    1342: 08       PUSH  A
    1343: 52 04    MOV   A,[X+4]
    1345: 08       PUSH  A
    1346: 7C 0A 4A LCALL _I2CHW_bWriteBytes
    1349: 38 FB    ADD   SP,0xFB
    134B: 20       POP   X
(0209) 			while (!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE)); // Wait while it is writing
    134C: 10       PUSH  X
    134D: 7C 0D A8 LCALL _I2CHW_bReadI2CStatus
    1350: 20       POP   X
    1351: 62 D0 00 MOV   REG[0xD0],0x0
    1354: 53 7C    MOV   [__r0],A
    1356: 47 7C 40 TST   [__r0],0x40
    1359: AF F2    JZ    0x134C
(0210) 			I2CHW_ClrWrStatus(); // Clear the write bit
    135B: 10       PUSH  X
    135C: 7C 0D B5 LCALL _I2CHW_ClrWrStatus
    135F: 20       POP   X
(0211) 
(0212) 			csprintf(data, "%x bytes were written", len); // csprintf takes the string and substitutes %x for len, puts into data str
    1360: 52 08    MOV   A,[X+8]
    1362: 08       PUSH  A
    1363: 52 09    MOV   A,[X+9]
    1365: 08       PUSH  A
    1366: 50 02    MOV   A,0x2
    1368: 08       PUSH  A
    1369: 50 3A    MOV   A,0x3A
    136B: 08       PUSH  A
    136C: 50 01    MOV   A,0x1
    136E: 08       PUSH  A
    136F: 50 00    MOV   A,0x0
    1371: 08       PUSH  A
    1372: 7C 24 4D LCALL _csprintf
    1375: 38 FA    ADD   SP,0xFA
(0213) 			UART_PutString(data); // Print the string to UART
    1377: 10       PUSH  X
    1378: 50 01    MOV   A,0x1
    137A: 08       PUSH  A
    137B: 50 00    MOV   A,0x0
    137D: 5C       MOV   X,A
    137E: 18       POP   A
    137F: 7C 09 5F LCALL _UART_PutString
(0214) 			UART_PutCRLF();
    1382: 7C 09 D7 LCALL _UART_PutCRLF
    1385: 20       POP   X
(0215) 		}
    1386: 83 28    JMP   0x16AF
(0216) 		else if (strlen(cmd) == 1 && cmd[0] == 'r') // If the command is one letter and it is r, then read command
    1388: 52 02    MOV   A,[X+2]
    138A: 08       PUSH  A
    138B: 52 03    MOV   A,[X+3]
    138D: 08       PUSH  A
    138E: 7C 17 F4 LCALL _strlenLMM
    1391: 38 FE    ADD   SP,0xFE
    1393: 62 D0 00 MOV   REG[0xD0],0x0
    1396: 3C 7C 00 CMP   [__r0],0x0
    1399: B3 09    JNZ   0x16A3
    139B: 3C 7B 01 CMP   [__r1],0x1
    139E: B3 04    JNZ   0x16A3
    13A0: 62 D0 00 MOV   REG[0xD0],0x0
    13A3: 52 03    MOV   A,[X+3]
    13A5: 53 7B    MOV   [__r1],A
    13A7: 52 02    MOV   A,[X+2]
    13A9: 60 D4    MOV   REG[0xD4],A
    13AB: 3E 7B    MVI   A,[__r1]
    13AD: 39 72    CMP   A,0x72
    13AF: B2 F3    JNZ   0x16A3
(0217) 		{
(0218) 			int groupAddress;
(0219) 			int memLoc;
(0220) 			char dataType;
(0221) 			int numBytes;
(0222) 			
(0223) 			char hexStr[4];
(0224) 			int i;
(0225) 
(0226) 			// csscanf if used to parse the string into values such as hexadecimal or integers
(0227) 			// It returns the number of parameters it parsed which should be one
(0228) 			// If the length of the params is not right or it does not parse the right amount, it returns an error
(0229) 			// %d gets an integer, this is the groupAddress
(0230) 			params = cstrtok(0x00, " ");
    13B1: 50 05    MOV   A,0x5
    13B3: 08       PUSH  A
    13B4: 50 04    MOV   A,0x4
    13B6: 08       PUSH  A
    13B7: 50 00    MOV   A,0x0
    13B9: 08       PUSH  A
    13BA: 08       PUSH  A
    13BB: 7C 31 5F LCALL _cstrtok
    13BE: 62 D0 00 MOV   REG[0xD0],0x0
    13C1: 51 7B    MOV   A,[__r1]
    13C3: 54 01    MOV   [X+1],A
    13C5: 51 7C    MOV   A,[__r0]
    13C7: 54 00    MOV   [X+0],A
(0231) 			if (strlen(params) != 1 || csscanf(params, "%d", &groupAddress) != 1) goto error;
    13C9: 52 00    MOV   A,[X+0]
    13CB: 08       PUSH  A
    13CC: 52 01    MOV   A,[X+1]
    13CE: 08       PUSH  A
    13CF: 7C 17 F4 LCALL _strlenLMM
    13D2: 38 FA    ADD   SP,0xFA
    13D4: 62 D0 00 MOV   REG[0xD0],0x0
    13D7: 3C 7C 00 CMP   [__r0],0x0
    13DA: B0 32    JNZ   0x140D
    13DC: 3C 7B 01 CMP   [__r1],0x1
    13DF: B0 2D    JNZ   0x140D
    13E1: 62 D0 00 MOV   REG[0xD0],0x0
    13E4: 5A 7B    MOV   [__r1],X
    13E6: 06 7B 0E ADD   [__r1],0xE
    13E9: 50 07    MOV   A,0x7
    13EB: 08       PUSH  A
    13EC: 51 7B    MOV   A,[__r1]
    13EE: 08       PUSH  A
    13EF: 50 02    MOV   A,0x2
    13F1: 08       PUSH  A
    13F2: 50 55    MOV   A,0x55
    13F4: 08       PUSH  A
    13F5: 52 00    MOV   A,[X+0]
    13F7: 08       PUSH  A
    13F8: 52 01    MOV   A,[X+1]
    13FA: 08       PUSH  A
    13FB: 7C 25 04 LCALL _csscanf
    13FE: 38 FA    ADD   SP,0xFA
    1400: 62 D0 00 MOV   REG[0xD0],0x0
    1403: 3C 7C 00 CMP   [__r0],0x0
    1406: B0 06    JNZ   0x140D
    1408: 3C 7B 01 CMP   [__r1],0x1
    140B: A0 03    JZ    0x140F
    140D: 82 95    JMP   0x16A3
(0232) 	
(0233) 			// %x gets a hexadecimal value, this can read capital or lowercase letters, this is the memory location
(0234) 			params = cstrtok(0x00, " ");
    140F: 50 05    MOV   A,0x5
    1411: 08       PUSH  A
    1412: 50 04    MOV   A,0x4
    1414: 08       PUSH  A
    1415: 50 00    MOV   A,0x0
    1417: 08       PUSH  A
    1418: 08       PUSH  A
    1419: 7C 31 5F LCALL _cstrtok
    141C: 62 D0 00 MOV   REG[0xD0],0x0
    141F: 51 7B    MOV   A,[__r1]
    1421: 54 01    MOV   [X+1],A
    1423: 51 7C    MOV   A,[__r0]
    1425: 54 00    MOV   [X+0],A
(0235) 			if (strlen(params) != 2 || csscanf(params, "%x", &memLoc) != 1) goto error;
    1427: 52 00    MOV   A,[X+0]
    1429: 08       PUSH  A
    142A: 52 01    MOV   A,[X+1]
    142C: 08       PUSH  A
    142D: 7C 17 F4 LCALL _strlenLMM
    1430: 38 FA    ADD   SP,0xFA
    1432: 62 D0 00 MOV   REG[0xD0],0x0
    1435: 3C 7C 00 CMP   [__r0],0x0
    1438: B0 32    JNZ   0x146B
    143A: 3C 7B 02 CMP   [__r1],0x2
    143D: B0 2D    JNZ   0x146B
    143F: 62 D0 00 MOV   REG[0xD0],0x0
    1442: 5A 7B    MOV   [__r1],X
    1444: 06 7B 10 ADD   [__r1],0x10
    1447: 50 07    MOV   A,0x7
    1449: 08       PUSH  A
    144A: 51 7B    MOV   A,[__r1]
    144C: 08       PUSH  A
    144D: 50 05    MOV   A,0x5
    144F: 08       PUSH  A
    1450: 50 01    MOV   A,0x1
    1452: 08       PUSH  A
    1453: 52 00    MOV   A,[X+0]
    1455: 08       PUSH  A
    1456: 52 01    MOV   A,[X+1]
    1458: 08       PUSH  A
    1459: 7C 25 04 LCALL _csscanf
    145C: 38 FA    ADD   SP,0xFA
    145E: 62 D0 00 MOV   REG[0xD0],0x0
    1461: 3C 7C 00 CMP   [__r0],0x0
    1464: B0 06    JNZ   0x146B
    1466: 3C 7B 01 CMP   [__r1],0x1
    1469: A0 03    JZ    0x146D
    146B: 82 37    JMP   0x16A3
(0236) 			
(0237) 			// %c gets a character, the data type character
(0238) 			params = cstrtok(0x00, " ");
    146D: 50 05    MOV   A,0x5
    146F: 08       PUSH  A
    1470: 50 04    MOV   A,0x4
    1472: 08       PUSH  A
    1473: 50 00    MOV   A,0x0
    1475: 08       PUSH  A
    1476: 08       PUSH  A
    1477: 7C 31 5F LCALL _cstrtok
    147A: 62 D0 00 MOV   REG[0xD0],0x0
    147D: 51 7B    MOV   A,[__r1]
    147F: 54 01    MOV   [X+1],A
    1481: 51 7C    MOV   A,[__r0]
    1483: 54 00    MOV   [X+0],A
(0239) 			if (strlen(params) != 1 || csscanf(params, "%c", &dataType) != 1) goto error;
    1485: 52 00    MOV   A,[X+0]
    1487: 08       PUSH  A
    1488: 52 01    MOV   A,[X+1]
    148A: 08       PUSH  A
    148B: 7C 17 F4 LCALL _strlenLMM
    148E: 38 FA    ADD   SP,0xFA
    1490: 62 D0 00 MOV   REG[0xD0],0x0
    1493: 3C 7C 00 CMP   [__r0],0x0
    1496: B0 32    JNZ   0x14C9
    1498: 3C 7B 01 CMP   [__r1],0x1
    149B: B0 2D    JNZ   0x14C9
    149D: 62 D0 00 MOV   REG[0xD0],0x0
    14A0: 5A 7B    MOV   [__r1],X
    14A2: 06 7B 0D ADD   [__r1],0xD
    14A5: 50 07    MOV   A,0x7
    14A7: 08       PUSH  A
    14A8: 51 7B    MOV   A,[__r1]
    14AA: 08       PUSH  A
    14AB: 50 02    MOV   A,0x2
    14AD: 08       PUSH  A
    14AE: 50 52    MOV   A,0x52
    14B0: 08       PUSH  A
    14B1: 52 00    MOV   A,[X+0]
    14B3: 08       PUSH  A
    14B4: 52 01    MOV   A,[X+1]
    14B6: 08       PUSH  A
    14B7: 7C 25 04 LCALL _csscanf
    14BA: 38 FA    ADD   SP,0xFA
    14BC: 62 D0 00 MOV   REG[0xD0],0x0
    14BF: 3C 7C 00 CMP   [__r0],0x0
    14C2: B0 06    JNZ   0x14C9
    14C4: 3C 7B 01 CMP   [__r1],0x1
    14C7: A0 03    JZ    0x14CB
    14C9: 81 D9    JMP   0x16A3
(0240) 			
(0241) 			// %x gets a hexadecimal value, number of bytes to read
(0242) 			params = cstrtok(0x00, " ");
    14CB: 50 05    MOV   A,0x5
    14CD: 08       PUSH  A
    14CE: 50 04    MOV   A,0x4
    14D0: 08       PUSH  A
    14D1: 50 00    MOV   A,0x0
    14D3: 08       PUSH  A
    14D4: 08       PUSH  A
    14D5: 7C 31 5F LCALL _cstrtok
    14D8: 62 D0 00 MOV   REG[0xD0],0x0
    14DB: 51 7B    MOV   A,[__r1]
    14DD: 54 01    MOV   [X+1],A
    14DF: 51 7C    MOV   A,[__r0]
    14E1: 54 00    MOV   [X+0],A
(0243) 			if (strlen(params) != 2 || csscanf(params, "%x", &numBytes) != 1) goto error;
    14E3: 52 00    MOV   A,[X+0]
    14E5: 08       PUSH  A
    14E6: 52 01    MOV   A,[X+1]
    14E8: 08       PUSH  A
    14E9: 7C 17 F4 LCALL _strlenLMM
    14EC: 38 FA    ADD   SP,0xFA
    14EE: 62 D0 00 MOV   REG[0xD0],0x0
    14F1: 3C 7C 00 CMP   [__r0],0x0
    14F4: B0 32    JNZ   0x1527
    14F6: 3C 7B 02 CMP   [__r1],0x2
    14F9: B0 2D    JNZ   0x1527
    14FB: 62 D0 00 MOV   REG[0xD0],0x0
    14FE: 5A 7B    MOV   [__r1],X
    1500: 06 7B 07 ADD   [__r1],0x7
    1503: 50 07    MOV   A,0x7
    1505: 08       PUSH  A
    1506: 51 7B    MOV   A,[__r1]
    1508: 08       PUSH  A
    1509: 50 05    MOV   A,0x5
    150B: 08       PUSH  A
    150C: 50 01    MOV   A,0x1
    150E: 08       PUSH  A
    150F: 52 00    MOV   A,[X+0]
    1511: 08       PUSH  A
    1512: 52 01    MOV   A,[X+1]
    1514: 08       PUSH  A
    1515: 7C 25 04 LCALL _csscanf
    1518: 38 FA    ADD   SP,0xFA
    151A: 62 D0 00 MOV   REG[0xD0],0x0
    151D: 3C 7C 00 CMP   [__r0],0x0
    1520: B0 06    JNZ   0x1527
    1522: 3C 7B 01 CMP   [__r1],0x1
    1525: A0 03    JZ    0x1529
    1527: 81 7B    JMP   0x16A3
(0244) 			
(0245) 			// If there is any data after the number of bytes, then the format is invalid and it should return an error
(0246) 			if (cstrtok(0x00, " ") != 0x00) goto error;
    1529: 50 05    MOV   A,0x5
    152B: 08       PUSH  A
    152C: 50 04    MOV   A,0x4
    152E: 08       PUSH  A
    152F: 50 00    MOV   A,0x0
    1531: 08       PUSH  A
    1532: 08       PUSH  A
    1533: 7C 31 5F LCALL _cstrtok
    1536: 38 FC    ADD   SP,0xFC
    1538: 62 D0 00 MOV   REG[0xD0],0x0
    153B: 3C 7C 00 CMP   [__r0],0x0
    153E: B0 06    JNZ   0x1545
    1540: 3C 7B 00 CMP   [__r1],0x0
    1543: A0 03    JZ    0x1547
    1545: 81 5D    JMP   0x16A3
(0247) 			
(0248) 			dataType = tolower(dataType); // Lowercase the data type
    1547: 62 D0 00 MOV   REG[0xD0],0x0
    154A: 52 0D    MOV   A,[X+13]
    154C: 53 7B    MOV   [__r1],A
    154E: 50 00    MOV   A,0x0
    1550: 08       PUSH  A
    1551: 51 7B    MOV   A,[__r1]
    1553: 08       PUSH  A
    1554: 7C 23 DD LCALL _tolower
    1557: 38 FE    ADD   SP,0xFE
    1559: 62 D0 00 MOV   REG[0xD0],0x0
    155C: 51 7B    MOV   A,[__r1]
    155E: 54 0D    MOV   [X+13],A
(0249) 			if (groupAddress < 0 || groupAddress > 7)
    1560: 52 0F    MOV   A,[X+15]
    1562: 11 00    SUB   A,0x0
    1564: 52 0E    MOV   A,[X+14]
    1566: 31 80    XOR   A,0x80
    1568: 19 80    SBB   A,0x80
    156A: C0 14    JC    0x157F
    156C: 50 07    MOV   A,0x7
    156E: 13 0F    SUB   A,[X+15]
    1570: 52 0E    MOV   A,[X+14]
    1572: 31 80    XOR   A,0x80
    1574: 62 D0 00 MOV   REG[0xD0],0x0
    1577: 53 74    MOV   [__rX],A
    1579: 50 80    MOV   A,0x80
    157B: 1A 74    SBB   A,[__rX]
    157D: D0 03    JNC   0x1581
(0250) 				goto error; // groupAddress was not in range
    157F: 81 23    JMP   0x16A3
(0251) 			
(0252) 			data[0] = memLoc;	// First byte needs to be the memory location according to PCF8570 datasheet
    1581: 52 11    MOV   A,[X+17]
    1583: 62 D0 01 MOV   REG[0xD0],0x1
    1586: 53 00    MOV   [data],A
(0253) 			slaveAddress |= groupAddress;	// ORs the group 2 address to the group 1 address to get slaveAddress
    1588: 62 D0 00 MOV   REG[0xD0],0x0
    158B: 52 04    MOV   A,[X+4]
    158D: 53 7B    MOV   [__r1],A
    158F: 52 0F    MOV   A,[X+15]
    1591: 2C 7B    OR    [__r1],A
    1593: 51 7B    MOV   A,[__r1]
    1595: 54 04    MOV   [X+4],A
(0254) 			
(0255) 			I2CHW_bWriteBytes(slaveAddress, data, 1, I2CHW_NoStop); // Write one byte to the RAM, the slaveAddress so it knows who were talking to
    1597: 10       PUSH  X
    1598: 50 02    MOV   A,0x2
    159A: 08       PUSH  A
    159B: 50 01    MOV   A,0x1
    159D: 08       PUSH  A
    159E: 50 01    MOV   A,0x1
    15A0: 08       PUSH  A
    15A1: 50 00    MOV   A,0x0
    15A3: 08       PUSH  A
    15A4: 52 04    MOV   A,[X+4]
    15A6: 08       PUSH  A
    15A7: 7C 0A 4A LCALL _I2CHW_bWriteBytes
    15AA: 38 FB    ADD   SP,0xFB
    15AC: 20       POP   X
(0256) 			while (!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE)); // Wait while it is writing
    15AD: 10       PUSH  X
    15AE: 7C 0D A8 LCALL _I2CHW_bReadI2CStatus
    15B1: 20       POP   X
    15B2: 62 D0 00 MOV   REG[0xD0],0x0
    15B5: 53 7C    MOV   [__r0],A
    15B7: 47 7C 40 TST   [__r0],0x40
    15BA: AF F2    JZ    0x15AD
(0257) 			I2CHW_ClrWrStatus(); // Clear the write bit
    15BC: 10       PUSH  X
    15BD: 7C 0D B5 LCALL _I2CHW_ClrWrStatus
    15C0: 20       POP   X
(0258) 			
(0259) 			I2CHW_fReadBytes(slaveAddress, data, numBytes, I2CHW_CompleteXfer); // Read numBytes from the RAM, put it in data
    15C1: 10       PUSH  X
    15C2: 50 00    MOV   A,0x0
    15C4: 08       PUSH  A
    15C5: 62 D0 00 MOV   REG[0xD0],0x0
    15C8: 52 08    MOV   A,[X+8]
    15CA: 08       PUSH  A
    15CB: 50 01    MOV   A,0x1
    15CD: 08       PUSH  A
    15CE: 50 00    MOV   A,0x0
    15D0: 08       PUSH  A
    15D1: 52 04    MOV   A,[X+4]
    15D3: 08       PUSH  A
    15D4: 7C 0A 06 LCALL _I2CHW_fReadBytes
    15D7: 38 FB    ADD   SP,0xFB
    15D9: 20       POP   X
(0260) 			while(!(I2CHW_bReadI2CStatus() & I2CHW_RD_COMPLETE)); // Wait while it is reading
    15DA: 10       PUSH  X
    15DB: 7C 0D A8 LCALL _I2CHW_bReadI2CStatus
    15DE: 20       POP   X
    15DF: 62 D0 00 MOV   REG[0xD0],0x0
    15E2: 53 7C    MOV   [__r0],A
    15E4: 47 7C 04 TST   [__r0],0x4
    15E7: AF F2    JZ    0x15DA
(0261) 			I2CHW_ClrRdStatus(); // Clear the read bit
    15E9: 10       PUSH  X
    15EA: 7C 0D AE LCALL _I2CHW_ClrRdStatus
    15ED: 20       POP   X
(0262) 			
(0263) 			if (dataType == 'a') // If the data type is ASCII
    15EE: 3D 0D 61 CMP   [X+13],0x61
    15F1: B0 40    JNZ   0x1632
(0264) 			{
(0265) 				for (i = 0; i < numBytes; ++i) // Loop through each byte
    15F3: 56 06 00 MOV   [X+6],0x0
    15F6: 56 05 00 MOV   [X+5],0x0
    15F9: 80 1C    JMP   0x1616
(0266) 					UART_PutChar(data[i]); // Put the character in PuTTy
    15FB: 62 D0 00 MOV   REG[0xD0],0x0
    15FE: 52 06    MOV   A,[X+6]
    1600: 01 00    ADD   A,0x0
    1602: 53 7B    MOV   [__r1],A
    1604: 52 05    MOV   A,[X+5]
    1606: 09 01    ADC   A,0x1
    1608: 60 D4    MOV   REG[0xD4],A
    160A: 3E 7B    MVI   A,[__r1]
    160C: 10       PUSH  X
    160D: 7C 09 22 LCALL _UART_PutChar
    1610: 20       POP   X
    1611: 77 06    INC   [X+6]
    1613: 0F 05 00 ADC   [X+5],0x0
    1616: 52 06    MOV   A,[X+6]
    1618: 13 08    SUB   A,[X+8]
    161A: 52 07    MOV   A,[X+7]
    161C: 31 80    XOR   A,0x80
    161E: 62 D0 00 MOV   REG[0xD0],0x0
    1621: 53 74    MOV   [__rX],A
    1623: 52 05    MOV   A,[X+5]
    1625: 31 80    XOR   A,0x80
    1627: 1A 74    SBB   A,[__rX]
    1629: CF D1    JC    0x15FB
(0267) 				UART_PutCRLF();
    162B: 10       PUSH  X
    162C: 7C 09 D7 LCALL _UART_PutCRLF
    162F: 20       POP   X
(0268) 			}
    1630: 80 7E    JMP   0x16AF
(0269) 			else if (dataType == 'h') // If the data type is Hex
    1632: 3D 0D 68 CMP   [X+13],0x68
    1635: B0 6D    JNZ   0x16A3
(0270) 			{
(0271) 				for (i = 0; i < numBytes; ++i) // Loop through each byte
    1637: 56 06 00 MOV   [X+6],0x0
    163A: 56 05 00 MOV   [X+5],0x0
    163D: 80 49    JMP   0x1687
(0272) 				{
(0273) 					csprintf(hexStr, "%X ", data[i]); // csprintf prints into hexStr a hexadecimal with a space
    163F: 62 D0 00 MOV   REG[0xD0],0x0
    1642: 52 06    MOV   A,[X+6]
    1644: 01 00    ADD   A,0x0
    1646: 53 7B    MOV   [__r1],A
    1648: 52 05    MOV   A,[X+5]
    164A: 09 01    ADC   A,0x1
    164C: 60 D4    MOV   REG[0xD4],A
    164E: 3E 7B    MVI   A,[__r1]
    1650: 53 7B    MOV   [__r1],A
    1652: 50 00    MOV   A,0x0
    1654: 08       PUSH  A
    1655: 51 7B    MOV   A,[__r1]
    1657: 08       PUSH  A
    1658: 50 02    MOV   A,0x2
    165A: 08       PUSH  A
    165B: 50 36    MOV   A,0x36
    165D: 08       PUSH  A
    165E: 5A 7B    MOV   [__r1],X
    1660: 06 7B 09 ADD   [__r1],0x9
    1663: 50 07    MOV   A,0x7
    1665: 08       PUSH  A
    1666: 51 7B    MOV   A,[__r1]
    1668: 08       PUSH  A
    1669: 7C 24 4D LCALL _csprintf
    166C: 38 FA    ADD   SP,0xFA
(0274) 					UART_PutString(hexStr); // Print hexStr
    166E: 62 D0 00 MOV   REG[0xD0],0x0
    1671: 5A 7B    MOV   [__r1],X
    1673: 06 7B 09 ADD   [__r1],0x9
    1676: 10       PUSH  X
    1677: 50 07    MOV   A,0x7
    1679: 08       PUSH  A
    167A: 51 7B    MOV   A,[__r1]
    167C: 5C       MOV   X,A
    167D: 18       POP   A
    167E: 7C 09 5F LCALL _UART_PutString
    1681: 20       POP   X
(0275) 				}
    1682: 77 06    INC   [X+6]
    1684: 0F 05 00 ADC   [X+5],0x0
    1687: 52 06    MOV   A,[X+6]
    1689: 13 08    SUB   A,[X+8]
    168B: 52 07    MOV   A,[X+7]
    168D: 31 80    XOR   A,0x80
    168F: 62 D0 00 MOV   REG[0xD0],0x0
    1692: 53 74    MOV   [__rX],A
    1694: 52 05    MOV   A,[X+5]
    1696: 31 80    XOR   A,0x80
    1698: 1A 74    SBB   A,[__rX]
    169A: CF A4    JC    0x163F
(0276) 				UART_PutCRLF();
    169C: 10       PUSH  X
    169D: 7C 09 D7 LCALL _UART_PutCRLF
    16A0: 20       POP   X
(0277) 			}
(0278) 			else
(0279) 				goto error;
(0280) 		}
(0281) 		else 
(0282) 			goto error;
(0283) 		
(0284) 		continue; // This is so that the error is skipped when everything goes right
    16A1: 80 0D    JMP   0x16AF
(0285) 		error: // This outputs an invalid format message and continues on to read another line
(0286) 			UART_CPutString("Invalid format entered. Valid formats are:\r\n\tW [GroupAddress] [MemoryLocation] [h|a] Hex/ASCII\r\n\tR [GroupAddress] [MemoryLocation] [h|a] [NumBytes]\r\n");
    16A3: 10       PUSH  X
    16A4: 50 01    MOV   A,0x1
    16A6: 08       PUSH  A
    16A7: 50 A0    MOV   A,0xA0
    16A9: 5C       MOV   X,A
    16AA: 18       POP   A
    16AB: 7C 09 C5 LCALL _UART_CPutString
    16AE: 20       POP   X
(0287) 	}
    16AF: 8A 09    JMP   0x10B9
(0288) }
    16B1: 38 EE    ADD   SP,0xEE
    16B3: 20       POP   X
    16B4: 8F FF    JMP   0x16B4
_memsetLMM:
    179D: 62 D0 00 MOV   REG[0xD0],0x0
    17A0: 10       PUSH  X
    17A1: 4F       MOV   X,SP
    17A2: 52 FB    MOV   A,[X-5]
    17A4: 60 D5    MOV   REG[0xD5],A
    17A6: 80 03    JMP   0x17AA
_memset:
    17A8: 10       PUSH  X
    17A9: 4F       MOV   X,SP
    17AA: 52 FC    MOV   A,[X-4]
    17AC: 53 7B    MOV   [__r1],A
    17AE: 53 7A    MOV   [__r2],A
    17B0: 52 FB    MOV   A,[X-5]
    17B2: 53 7C    MOV   [__r0],A
    17B4: 52 FA    MOV   A,[X-6]
    17B6: 80 08    JMP   0x17BF
    17B8: 3F 7A    MVI   [__r2],A
    17BA: 7B F8    DEC   [X-8]
    17BC: 1F F7 00 SBB   [X-9],0x0
    17BF: 3D F8 00 CMP   [X-8],0x0
    17C2: BF F5    JNZ   0x17B8
    17C4: 3D F7 00 CMP   [X-9],0x0
    17C7: BF F0    JNZ   0x17B8
    17C9: 20       POP   X
    17CA: 7F       RET   
_strcpyLMM:
    17CB: 62 D0 00 MOV   REG[0xD0],0x0
    17CE: 10       PUSH  X
    17CF: 4F       MOV   X,SP
    17D0: 52 FB    MOV   A,[X-5]
    17D2: 60 D5    MOV   REG[0xD5],A
    17D4: 52 F9    MOV   A,[X-7]
    17D6: 60 D4    MOV   REG[0xD4],A
    17D8: 80 03    JMP   0x17DC
_strcpy:
    17DA: 10       PUSH  X
    17DB: 4F       MOV   X,SP
    17DC: 52 FC    MOV   A,[X-4]
    17DE: 53 7B    MOV   [__r1],A
    17E0: 53 7A    MOV   [__r2],A
    17E2: 52 FB    MOV   A,[X-5]
    17E4: 53 7C    MOV   [__r0],A
    17E6: 52 FA    MOV   A,[X-6]
    17E8: 53 79    MOV   [__r3],A
    17EA: 3E 79    MVI   A,[__r3]
    17EC: 3F 7A    MVI   [__r2],A
    17EE: 39 00    CMP   A,0x0
    17F0: BF F9    JNZ   0x17EA
    17F2: 20       POP   X
    17F3: 7F       RET   
_strlenLMM:
    17F4: 62 D0 00 MOV   REG[0xD0],0x0
    17F7: 10       PUSH  X
    17F8: 4F       MOV   X,SP
    17F9: 52 FB    MOV   A,[X-5]
    17FB: 60 D4    MOV   REG[0xD4],A
    17FD: 80 03    JMP   0x1801
_strlen:
    17FF: 10       PUSH  X
    1800: 4F       MOV   X,SP
    1801: 55 7B 00 MOV   [__r1],0x0
    1804: 55 7C 00 MOV   [__r0],0x0
    1807: 52 FC    MOV   A,[X-4]
    1809: 53 7A    MOV   [__r2],A
    180B: 3E 7A    MVI   A,[__r2]
    180D: 39 00    CMP   A,0x0
    180F: A0 08    JZ    0x1818
    1811: 76 7B    INC   [__r1]
    1813: 0E 7C 00 ADC   [__r0],0x0
    1816: 8F F4    JMP   0x180B
    1818: 20       POP   X
    1819: 7F       RET   
__plcall:
    181A: 53 74    MOV   [__rX],A
    181C: 28       ROMX  
    181D: 08       PUSH  A
    181E: 51 74    MOV   A,[__rX]
    1820: 75       INC   X
    1821: 09 00    ADC   A,0x0
    1823: 28       ROMX  
    1824: 08       PUSH  A
    1825: 7F       RET   
_itoa:
    1826: 10       PUSH  X
    1827: 4F       MOV   X,SP
    1828: 38 09    ADD   SP,0x9
    182A: 52 FA    MOV   A,[X-6]
    182C: 54 03    MOV   [X+3],A
    182E: 52 F9    MOV   A,[X-7]
    1830: 54 02    MOV   [X+2],A
    1832: 3D F9 00 CMP   [X-7],0x0
    1835: B0 2F    JNZ   0x1865
    1837: 3D FA 00 CMP   [X-6],0x0
    183A: B0 2A    JNZ   0x1865
    183C: 62 D0 00 MOV   REG[0xD0],0x0
    183F: 52 FC    MOV   A,[X-4]
    1841: 53 7B    MOV   [__r1],A
    1843: 52 FB    MOV   A,[X-5]
    1845: 60 D5    MOV   REG[0xD5],A
    1847: 50 30    MOV   A,0x30
    1849: 3F 7B    MVI   [__r1],A
    184B: 52 FC    MOV   A,[X-4]
    184D: 01 01    ADD   A,0x1
    184F: 53 7B    MOV   [__r1],A
    1851: 52 FB    MOV   A,[X-5]
    1853: 09 00    ADC   A,0x0
    1855: 60 D5    MOV   REG[0xD5],A
    1857: 50 00    MOV   A,0x0
    1859: 3F 7B    MVI   [__r1],A
    185B: 52 FC    MOV   A,[X-4]
    185D: 53 7B    MOV   [__r1],A
    185F: 52 FB    MOV   A,[X-5]
    1861: 53 7C    MOV   [__r0],A
    1863: 81 97    JMP   0x19FB
    1865: 52 FA    MOV   A,[X-6]
    1867: 11 00    SUB   A,0x0
    1869: 52 F9    MOV   A,[X-7]
    186B: 31 80    XOR   A,0x80
    186D: 19 80    SBB   A,0x80
    186F: D0 29    JNC   0x1899
    1871: 3D F7 00 CMP   [X-9],0x0
    1874: B0 24    JNZ   0x1899
    1876: 3D F8 0A CMP   [X-8],0xA
    1879: B0 1F    JNZ   0x1899
    187B: 56 06 01 MOV   [X+6],0x1
    187E: 62 D0 00 MOV   REG[0xD0],0x0
    1881: 52 03    MOV   A,[X+3]
    1883: 73       CPL   A
    1884: 53 7B    MOV   [__r1],A
    1886: 52 02    MOV   A,[X+2]
    1888: 73       CPL   A
    1889: 53 7C    MOV   [__r0],A
    188B: 51 7B    MOV   A,[__r1]
    188D: 01 01    ADD   A,0x1
    188F: 54 03    MOV   [X+3],A
    1891: 51 7C    MOV   A,[__r0]
    1893: 09 00    ADC   A,0x0
    1895: 54 02    MOV   [X+2],A
    1897: 80 04    JMP   0x189C
    1899: 56 06 00 MOV   [X+6],0x0
    189C: 52 FC    MOV   A,[X-4]
    189E: 54 01    MOV   [X+1],A
    18A0: 52 FB    MOV   A,[X-5]
    18A2: 54 00    MOV   [X+0],A
    18A4: 62 D0 00 MOV   REG[0xD0],0x0
    18A7: 52 F7    MOV   A,[X-9]
    18A9: 08       PUSH  A
    18AA: 52 F8    MOV   A,[X-8]
    18AC: 08       PUSH  A
    18AD: 52 02    MOV   A,[X+2]
    18AF: 08       PUSH  A
    18B0: 52 03    MOV   A,[X+3]
    18B2: 08       PUSH  A
    18B3: 7C 16 B6 LCALL 0x16B6
    18B6: 38 FE    ADD   SP,0xFE
    18B8: 18       POP   A
    18B9: 53 7B    MOV   [__r1],A
    18BB: 18       POP   A
    18BC: 53 7C    MOV   [__r0],A
    18BE: 51 7B    MOV   A,[__r1]
    18C0: 54 08    MOV   [X+8],A
    18C2: 51 7C    MOV   A,[__r0]
    18C4: 54 07    MOV   [X+7],A
    18C6: 50 09    MOV   A,0x9
    18C8: 13 08    SUB   A,[X+8]
    18CA: 52 07    MOV   A,[X+7]
    18CC: 31 80    XOR   A,0x80
    18CE: 53 74    MOV   [__rX],A
    18D0: 50 80    MOV   A,0x80
    18D2: 1A 74    SBB   A,[__rX]
    18D4: C0 28    JC    0x18FD
    18D6: 62 D0 00 MOV   REG[0xD0],0x0
    18D9: 52 01    MOV   A,[X+1]
    18DB: 53 7B    MOV   [__r1],A
    18DD: 52 00    MOV   A,[X+0]
    18DF: 53 7C    MOV   [__r0],A
    18E1: 51 7B    MOV   A,[__r1]
    18E3: 01 01    ADD   A,0x1
    18E5: 54 01    MOV   [X+1],A
    18E7: 51 7C    MOV   A,[__r0]
    18E9: 09 00    ADC   A,0x0
    18EB: 54 00    MOV   [X+0],A
    18ED: 52 08    MOV   A,[X+8]
    18EF: 01 30    ADD   A,0x30
    18F1: 53 7A    MOV   [__r2],A
    18F3: 51 7C    MOV   A,[__r0]
    18F5: 60 D5    MOV   REG[0xD5],A
    18F7: 51 7A    MOV   A,[__r2]
    18F9: 3F 7B    MVI   [__r1],A
    18FB: 80 26    JMP   0x1922
    18FD: 62 D0 00 MOV   REG[0xD0],0x0
    1900: 52 01    MOV   A,[X+1]
    1902: 53 7B    MOV   [__r1],A
    1904: 52 00    MOV   A,[X+0]
    1906: 53 7C    MOV   [__r0],A
    1908: 51 7B    MOV   A,[__r1]
    190A: 01 01    ADD   A,0x1
    190C: 54 01    MOV   [X+1],A
    190E: 51 7C    MOV   A,[__r0]
    1910: 09 00    ADC   A,0x0
    1912: 54 00    MOV   [X+0],A
    1914: 52 08    MOV   A,[X+8]
    1916: 01 57    ADD   A,0x57
    1918: 53 7A    MOV   [__r2],A
    191A: 51 7C    MOV   A,[__r0]
    191C: 60 D5    MOV   REG[0xD5],A
    191E: 51 7A    MOV   A,[__r2]
    1920: 3F 7B    MVI   [__r1],A
    1922: 52 F7    MOV   A,[X-9]
    1924: 08       PUSH  A
    1925: 52 F8    MOV   A,[X-8]
    1927: 08       PUSH  A
    1928: 52 02    MOV   A,[X+2]
    192A: 08       PUSH  A
    192B: 52 03    MOV   A,[X+3]
    192D: 08       PUSH  A
    192E: 62 D0 00 MOV   REG[0xD0],0x0
    1931: 7C 16 B6 LCALL 0x16B6
    1934: 18       POP   A
    1935: 54 03    MOV   [X+3],A
    1937: 18       POP   A
    1938: 54 02    MOV   [X+2],A
    193A: 38 FE    ADD   SP,0xFE
    193C: 3D 02 00 CMP   [X+2],0x0
    193F: BF 64    JNZ   0x18A4
    1941: 3D 03 00 CMP   [X+3],0x0
    1944: BF 5F    JNZ   0x18A4
    1946: 3D 06 00 CMP   [X+6],0x0
    1949: A0 20    JZ    0x196A
    194B: 62 D0 00 MOV   REG[0xD0],0x0
    194E: 52 01    MOV   A,[X+1]
    1950: 53 7B    MOV   [__r1],A
    1952: 52 00    MOV   A,[X+0]
    1954: 53 7C    MOV   [__r0],A
    1956: 51 7B    MOV   A,[__r1]
    1958: 01 01    ADD   A,0x1
    195A: 54 01    MOV   [X+1],A
    195C: 51 7C    MOV   A,[__r0]
    195E: 09 00    ADC   A,0x0
    1960: 54 00    MOV   [X+0],A
    1962: 51 7C    MOV   A,[__r0]
    1964: 60 D5    MOV   REG[0xD5],A
    1966: 50 2D    MOV   A,0x2D
    1968: 3F 7B    MVI   [__r1],A
    196A: 62 D0 00 MOV   REG[0xD0],0x0
    196D: 52 01    MOV   A,[X+1]
    196F: 53 7B    MOV   [__r1],A
    1971: 52 00    MOV   A,[X+0]
    1973: 53 7C    MOV   [__r0],A
    1975: 51 7B    MOV   A,[__r1]
    1977: 01 FF    ADD   A,0xFF
    1979: 54 01    MOV   [X+1],A
    197B: 51 7C    MOV   A,[__r0]
    197D: 09 FF    ADC   A,0xFF
    197F: 54 00    MOV   [X+0],A
    1981: 51 7C    MOV   A,[__r0]
    1983: 60 D5    MOV   REG[0xD5],A
    1985: 50 00    MOV   A,0x0
    1987: 3F 7B    MVI   [__r1],A
    1989: 52 FC    MOV   A,[X-4]
    198B: 54 05    MOV   [X+5],A
    198D: 52 FB    MOV   A,[X-5]
    198F: 54 04    MOV   [X+4],A
    1991: 80 54    JMP   0x19E6
    1993: 62 D0 00 MOV   REG[0xD0],0x0
    1996: 52 05    MOV   A,[X+5]
    1998: 53 7B    MOV   [__r1],A
    199A: 52 04    MOV   A,[X+4]
    199C: 60 D4    MOV   REG[0xD4],A
    199E: 3E 7B    MVI   A,[__r1]
    19A0: 54 06    MOV   [X+6],A
    19A2: 52 05    MOV   A,[X+5]
    19A4: 53 7B    MOV   [__r1],A
    19A6: 52 04    MOV   A,[X+4]
    19A8: 53 7C    MOV   [__r0],A
    19AA: 51 7B    MOV   A,[__r1]
    19AC: 01 01    ADD   A,0x1
    19AE: 54 05    MOV   [X+5],A
    19B0: 51 7C    MOV   A,[__r0]
    19B2: 09 00    ADC   A,0x0
    19B4: 54 04    MOV   [X+4],A
    19B6: 52 01    MOV   A,[X+1]
    19B8: 53 79    MOV   [__r3],A
    19BA: 52 00    MOV   A,[X+0]
    19BC: 60 D4    MOV   REG[0xD4],A
    19BE: 3E 79    MVI   A,[__r3]
    19C0: 53 7A    MOV   [__r2],A
    19C2: 51 7C    MOV   A,[__r0]
    19C4: 60 D5    MOV   REG[0xD5],A
    19C6: 51 7A    MOV   A,[__r2]
    19C8: 3F 7B    MVI   [__r1],A
    19CA: 52 01    MOV   A,[X+1]
    19CC: 53 7B    MOV   [__r1],A
    19CE: 52 00    MOV   A,[X+0]
    19D0: 53 7C    MOV   [__r0],A
    19D2: 51 7B    MOV   A,[__r1]
    19D4: 01 FF    ADD   A,0xFF
    19D6: 54 01    MOV   [X+1],A
    19D8: 51 7C    MOV   A,[__r0]
    19DA: 09 FF    ADC   A,0xFF
    19DC: 54 00    MOV   [X+0],A
    19DE: 51 7C    MOV   A,[__r0]
    19E0: 60 D5    MOV   REG[0xD5],A
    19E2: 52 06    MOV   A,[X+6]
    19E4: 3F 7B    MVI   [__r1],A
    19E6: 52 05    MOV   A,[X+5]
    19E8: 13 01    SUB   A,[X+1]
    19EA: 52 04    MOV   A,[X+4]
    19EC: 1B 00    SBB   A,[X+0]
    19EE: CF A4    JC    0x1993
    19F0: 62 D0 00 MOV   REG[0xD0],0x0
    19F3: 52 FC    MOV   A,[X-4]
    19F5: 53 7B    MOV   [__r1],A
    19F7: 52 FB    MOV   A,[X-5]
    19F9: 53 7C    MOV   [__r0],A
    19FB: 38 F7    ADD   SP,0xF7
    19FD: 20       POP   X
    19FE: 7F       RET   
_strtol:
    19FF: 10       PUSH  X
    1A00: 4F       MOV   X,SP
    1A01: 38 18    ADD   SP,0x18
    1A03: 56 00 00 MOV   [X+0],0x0
    1A06: 56 01 00 MOV   [X+1],0x0
    1A09: 56 02 00 MOV   [X+2],0x0
    1A0C: 56 03 00 MOV   [X+3],0x0
    1A0F: 80 06    JMP   0x1A16
    1A11: 77 FC    INC   [X-4]
    1A13: 0F FB 00 ADC   [X-5],0x0
    1A16: 62 D0 00 MOV   REG[0xD0],0x0
    1A19: 52 FC    MOV   A,[X-4]
    1A1B: 53 7B    MOV   [__r1],A
    1A1D: 52 FB    MOV   A,[X-5]
    1A1F: 60 D4    MOV   REG[0xD4],A
    1A21: 3E 7B    MVI   A,[__r1]
    1A23: 53 7B    MOV   [__r1],A
    1A25: 50 00    MOV   A,0x0
    1A27: 08       PUSH  A
    1A28: 51 7B    MOV   A,[__r1]
    1A2A: 08       PUSH  A
    1A2B: 7C 23 3C LCALL _isspace
    1A2E: 38 FE    ADD   SP,0xFE
    1A30: 62 D0 00 MOV   REG[0xD0],0x0
    1A33: 3C 7C 00 CMP   [__r0],0x0
    1A36: BF DA    JNZ   0x1A11
    1A38: 3C 7B 00 CMP   [__r1],0x0
    1A3B: BF D5    JNZ   0x1A11
    1A3D: 62 D0 00 MOV   REG[0xD0],0x0
    1A40: 52 FC    MOV   A,[X-4]
    1A42: 53 7B    MOV   [__r1],A
    1A44: 52 FB    MOV   A,[X-5]
    1A46: 60 D4    MOV   REG[0xD4],A
    1A48: 3E 7B    MVI   A,[__r1]
    1A4A: 39 00    CMP   A,0x0
    1A4C: A0 31    JZ    0x1A7E
    1A4E: 3D F7 00 CMP   [X-9],0x0
    1A51: B0 06    JNZ   0x1A58
    1A53: 3D F8 00 CMP   [X-8],0x0
    1A56: A0 55    JZ    0x1AAC
    1A58: 50 01    MOV   A,0x1
    1A5A: 13 F8    SUB   A,[X-8]
    1A5C: 52 F7    MOV   A,[X-9]
    1A5E: 31 80    XOR   A,0x80
    1A60: 62 D0 00 MOV   REG[0xD0],0x0
    1A63: 53 74    MOV   [__rX],A
    1A65: 50 80    MOV   A,0x80
    1A67: 1A 74    SBB   A,[__rX]
    1A69: D0 14    JNC   0x1A7E
    1A6B: 50 24    MOV   A,0x24
    1A6D: 13 F8    SUB   A,[X-8]
    1A6F: 52 F7    MOV   A,[X-9]
    1A71: 31 80    XOR   A,0x80
    1A73: 62 D0 00 MOV   REG[0xD0],0x0
    1A76: 53 74    MOV   [__rX],A
    1A78: 50 80    MOV   A,0x80
    1A7A: 1A 74    SBB   A,[__rX]
    1A7C: D0 2F    JNC   0x1AAC
    1A7E: 3D F9 00 CMP   [X-7],0x0
    1A81: B0 06    JNZ   0x1A88
    1A83: 3D FA 00 CMP   [X-6],0x0
    1A86: A0 14    JZ    0x1A9B
    1A88: 62 D0 00 MOV   REG[0xD0],0x0
    1A8B: 52 FA    MOV   A,[X-6]
    1A8D: 53 7B    MOV   [__r1],A
    1A8F: 52 F9    MOV   A,[X-7]
    1A91: 60 D5    MOV   REG[0xD5],A
    1A93: 52 FB    MOV   A,[X-5]
    1A95: 3F 7B    MVI   [__r1],A
    1A97: 52 FC    MOV   A,[X-4]
    1A99: 3F 7B    MVI   [__r1],A
    1A9B: 62 D0 00 MOV   REG[0xD0],0x0
    1A9E: 55 7C 00 MOV   [__r0],0x0
    1AA1: 55 7B 00 MOV   [__r1],0x0
    1AA4: 55 7A 00 MOV   [__r2],0x0
    1AA7: 55 79 00 MOV   [__r3],0x0
    1AAA: 83 72    JMP   0x1E1D
    1AAC: 56 0B 00 MOV   [X+11],0x0
    1AAF: 56 0A 00 MOV   [X+10],0x0
    1AB2: 62 D0 00 MOV   REG[0xD0],0x0
    1AB5: 52 FC    MOV   A,[X-4]
    1AB7: 53 7B    MOV   [__r1],A
    1AB9: 52 FB    MOV   A,[X-5]
    1ABB: 60 D4    MOV   REG[0xD4],A
    1ABD: 3E 7B    MVI   A,[__r1]
    1ABF: 39 2D    CMP   A,0x2D
    1AC1: B0 0E    JNZ   0x1AD0
    1AC3: 77 FC    INC   [X-4]
    1AC5: 0F FB 00 ADC   [X-5],0x0
    1AC8: 56 0B 01 MOV   [X+11],0x1
    1ACB: 56 0A 00 MOV   [X+10],0x0
    1ACE: 80 17    JMP   0x1AE6
    1AD0: 62 D0 00 MOV   REG[0xD0],0x0
    1AD3: 52 FC    MOV   A,[X-4]
    1AD5: 53 7B    MOV   [__r1],A
    1AD7: 52 FB    MOV   A,[X-5]
    1AD9: 60 D4    MOV   REG[0xD4],A
    1ADB: 3E 7B    MVI   A,[__r1]
    1ADD: 39 2B    CMP   A,0x2B
    1ADF: B0 06    JNZ   0x1AE6
    1AE1: 77 FC    INC   [X-4]
    1AE3: 0F FB 00 ADC   [X-5],0x0
    1AE6: 62 D0 00 MOV   REG[0xD0],0x0
    1AE9: 52 FC    MOV   A,[X-4]
    1AEB: 53 7B    MOV   [__r1],A
    1AED: 52 FB    MOV   A,[X-5]
    1AEF: 60 D4    MOV   REG[0xD4],A
    1AF1: 3E 7B    MVI   A,[__r1]
    1AF3: 39 30    CMP   A,0x30
    1AF5: B0 4A    JNZ   0x1B40
    1AF7: 52 FC    MOV   A,[X-4]
    1AF9: 01 01    ADD   A,0x1
    1AFB: 53 7B    MOV   [__r1],A
    1AFD: 52 FB    MOV   A,[X-5]
    1AFF: 09 00    ADC   A,0x0
    1B01: 60 D4    MOV   REG[0xD4],A
    1B03: 3E 7B    MVI   A,[__r1]
    1B05: 53 7B    MOV   [__r1],A
    1B07: 55 7C 00 MOV   [__r0],0x0
    1B0A: 3C 7C 00 CMP   [__r0],0x0
    1B0D: B0 05    JNZ   0x1B13
    1B0F: 39 58    CMP   A,0x58
    1B11: A0 0E    JZ    0x1B20
    1B13: 62 D0 00 MOV   REG[0xD0],0x0
    1B16: 3C 7C 00 CMP   [__r0],0x0
    1B19: B0 26    JNZ   0x1B40
    1B1B: 3C 7B 78 CMP   [__r1],0x78
    1B1E: B0 21    JNZ   0x1B40
    1B20: 3D F7 00 CMP   [X-9],0x0
    1B23: B0 06    JNZ   0x1B2A
    1B25: 3D F8 10 CMP   [X-8],0x10
    1B28: A0 0B    JZ    0x1B34
    1B2A: 3D F7 00 CMP   [X-9],0x0
    1B2D: B0 12    JNZ   0x1B40
    1B2F: 3D F8 00 CMP   [X-8],0x0
    1B32: B0 0D    JNZ   0x1B40
    1B34: 56 F8 10 MOV   [X-8],0x10
    1B37: 56 F7 00 MOV   [X-9],0x0
    1B3A: 07 FC 02 ADD   [X-4],0x2
    1B3D: 0F FB 00 ADC   [X-5],0x0
    1B40: 3D F7 00 CMP   [X-9],0x0
    1B43: B0 2D    JNZ   0x1B71
    1B45: 3D F8 00 CMP   [X-8],0x0
    1B48: B0 28    JNZ   0x1B71
    1B4A: 62 D0 00 MOV   REG[0xD0],0x0
    1B4D: 52 FC    MOV   A,[X-4]
    1B4F: 53 7B    MOV   [__r1],A
    1B51: 52 FB    MOV   A,[X-5]
    1B53: 60 D4    MOV   REG[0xD4],A
    1B55: 3E 7B    MVI   A,[__r1]
    1B57: 39 30    CMP   A,0x30
    1B59: B0 09    JNZ   0x1B63
    1B5B: 56 0F 08 MOV   [X+15],0x8
    1B5E: 56 0E 00 MOV   [X+14],0x0
    1B61: 80 07    JMP   0x1B69
    1B63: 56 0F 0A MOV   [X+15],0xA
    1B66: 56 0E 00 MOV   [X+14],0x0
    1B69: 52 0F    MOV   A,[X+15]
    1B6B: 54 F8    MOV   [X-8],A
    1B6D: 52 0E    MOV   A,[X+14]
    1B6F: 54 F7    MOV   [X-9],A
    1B71: 52 F8    MOV   A,[X-8]
    1B73: 11 0A    SUB   A,0xA
    1B75: 52 F7    MOV   A,[X-9]
    1B77: 31 80    XOR   A,0x80
    1B79: 19 80    SBB   A,0x80
    1B7B: C0 09    JC    0x1B85
    1B7D: 56 11 39 MOV   [X+17],0x39
    1B80: 56 10 00 MOV   [X+16],0x0
    1B83: 80 1C    JMP   0x1BA0
    1B85: 62 D0 00 MOV   REG[0xD0],0x0
    1B88: 52 F8    MOV   A,[X-8]
    1B8A: 11 01    SUB   A,0x1
    1B8C: 53 7B    MOV   [__r1],A
    1B8E: 52 F7    MOV   A,[X-9]
    1B90: 19 00    SBB   A,0x0
    1B92: 53 7C    MOV   [__r0],A
    1B94: 51 7B    MOV   A,[__r1]
    1B96: 01 30    ADD   A,0x30
    1B98: 54 11    MOV   [X+17],A
    1B9A: 51 7C    MOV   A,[__r0]
    1B9C: 09 00    ADC   A,0x0
    1B9E: 54 10    MOV   [X+16],A
    1BA0: 52 11    MOV   A,[X+17]
    1BA2: 54 09    MOV   [X+9],A
    1BA4: 52 10    MOV   A,[X+16]
    1BA6: 54 08    MOV   [X+8],A
    1BA8: 50 0A    MOV   A,0xA
    1BAA: 13 F8    SUB   A,[X-8]
    1BAC: 52 F7    MOV   A,[X-9]
    1BAE: 31 80    XOR   A,0x80
    1BB0: 62 D0 00 MOV   REG[0xD0],0x0
    1BB3: 53 74    MOV   [__rX],A
    1BB5: 50 80    MOV   A,0x80
    1BB7: 1A 74    SBB   A,[__rX]
    1BB9: D1 EA    JNC   0x1DA4
    1BBB: 62 D0 00 MOV   REG[0xD0],0x0
    1BBE: 52 F8    MOV   A,[X-8]
    1BC0: 11 0B    SUB   A,0xB
    1BC2: 53 7B    MOV   [__r1],A
    1BC4: 52 F7    MOV   A,[X-9]
    1BC6: 19 00    SBB   A,0x0
    1BC8: 53 7C    MOV   [__r0],A
    1BCA: 51 7B    MOV   A,[__r1]
    1BCC: 01 61    ADD   A,0x61
    1BCE: 54 0D    MOV   [X+13],A
    1BD0: 51 7C    MOV   A,[__r0]
    1BD2: 09 00    ADC   A,0x0
    1BD4: 54 0C    MOV   [X+12],A
    1BD6: 81 CD    JMP   0x1DA4
    1BD8: 62 D0 00 MOV   REG[0xD0],0x0
    1BDB: 52 FC    MOV   A,[X-4]
    1BDD: 53 7B    MOV   [__r1],A
    1BDF: 52 FB    MOV   A,[X-5]
    1BE1: 60 D4    MOV   REG[0xD4],A
    1BE3: 3E 7B    MVI   A,[__r1]
    1BE5: 53 7B    MOV   [__r1],A
    1BE7: 50 00    MOV   A,0x0
    1BE9: 08       PUSH  A
    1BEA: 51 7B    MOV   A,[__r1]
    1BEC: 08       PUSH  A
    1BED: 7C 22 FA LCALL _isdigit
    1BF0: 38 FE    ADD   SP,0xFE
    1BF2: 62 D0 00 MOV   REG[0xD0],0x0
    1BF5: 3C 7C 00 CMP   [__r0],0x0
    1BF8: B0 06    JNZ   0x1BFF
    1BFA: 3C 7B 00 CMP   [__r1],0x0
    1BFD: A0 3B    JZ    0x1C39
    1BFF: 62 D0 00 MOV   REG[0xD0],0x0
    1C02: 52 FC    MOV   A,[X-4]
    1C04: 53 7B    MOV   [__r1],A
    1C06: 52 FB    MOV   A,[X-5]
    1C08: 60 D4    MOV   REG[0xD4],A
    1C0A: 3E 7B    MVI   A,[__r1]
    1C0C: 53 7B    MOV   [__r1],A
    1C0E: 52 09    MOV   A,[X+9]
    1C10: 12 7B    SUB   A,[__r1]
    1C12: 50 00    MOV   A,0x0
    1C14: 31 80    XOR   A,0x80
    1C16: 53 74    MOV   [__rX],A
    1C18: 52 08    MOV   A,[X+8]
    1C1A: 31 80    XOR   A,0x80
    1C1C: 1A 74    SBB   A,[__rX]
    1C1E: C0 1A    JC    0x1C39
    1C20: 62 D0 00 MOV   REG[0xD0],0x0
    1C23: 52 FC    MOV   A,[X-4]
    1C25: 53 7B    MOV   [__r1],A
    1C27: 52 FB    MOV   A,[X-5]
    1C29: 60 D4    MOV   REG[0xD4],A
    1C2B: 3E 7B    MVI   A,[__r1]
    1C2D: 11 30    SUB   A,0x30
    1C2F: 54 13    MOV   [X+19],A
    1C31: 50 00    MOV   A,0x0
    1C33: 19 00    SBB   A,0x0
    1C35: 54 12    MOV   [X+18],A
    1C37: 80 75    JMP   0x1CAD
    1C39: 50 0A    MOV   A,0xA
    1C3B: 13 F8    SUB   A,[X-8]
    1C3D: 52 F7    MOV   A,[X-9]
    1C3F: 31 80    XOR   A,0x80
    1C41: 62 D0 00 MOV   REG[0xD0],0x0
    1C44: 53 74    MOV   [__rX],A
    1C46: 50 80    MOV   A,0x80
    1C48: 1A 74    SBB   A,[__rX]
    1C4A: D1 6A    JNC   0x1DB5
    1C4C: 62 D0 00 MOV   REG[0xD0],0x0
    1C4F: 52 FC    MOV   A,[X-4]
    1C51: 53 7B    MOV   [__r1],A
    1C53: 52 FB    MOV   A,[X-5]
    1C55: 60 D4    MOV   REG[0xD4],A
    1C57: 3E 7B    MVI   A,[__r1]
    1C59: 53 7B    MOV   [__r1],A
    1C5B: 50 00    MOV   A,0x0
    1C5D: 08       PUSH  A
    1C5E: 51 7B    MOV   A,[__r1]
    1C60: 08       PUSH  A
    1C61: 7C 23 DD LCALL _tolower
    1C64: 38 FE    ADD   SP,0xFE
    1C66: 62 D0 00 MOV   REG[0xD0],0x0
    1C69: 51 7B    MOV   A,[__r1]
    1C6B: 54 13    MOV   [X+19],A
    1C6D: 51 7C    MOV   A,[__r0]
    1C6F: 54 12    MOV   [X+18],A
    1C71: 51 7B    MOV   A,[__r1]
    1C73: 11 61    SUB   A,0x61
    1C75: 51 7C    MOV   A,[__r0]
    1C77: 31 80    XOR   A,0x80
    1C79: 19 80    SBB   A,0x80
    1C7B: C1 39    JC    0x1DB5
    1C7D: 52 0D    MOV   A,[X+13]
    1C7F: 13 13    SUB   A,[X+19]
    1C81: 52 12    MOV   A,[X+18]
    1C83: 31 80    XOR   A,0x80
    1C85: 62 D0 00 MOV   REG[0xD0],0x0
    1C88: 53 74    MOV   [__rX],A
    1C8A: 52 0C    MOV   A,[X+12]
    1C8C: 31 80    XOR   A,0x80
    1C8E: 1A 74    SBB   A,[__rX]
    1C90: C1 24    JC    0x1DB5
    1C92: 62 D0 00 MOV   REG[0xD0],0x0
    1C95: 52 13    MOV   A,[X+19]
    1C97: 11 61    SUB   A,0x61
    1C99: 53 7B    MOV   [__r1],A
    1C9B: 52 12    MOV   A,[X+18]
    1C9D: 19 00    SBB   A,0x0
    1C9F: 53 7C    MOV   [__r0],A
    1CA1: 51 7B    MOV   A,[__r1]
    1CA3: 01 0A    ADD   A,0xA
    1CA5: 54 13    MOV   [X+19],A
    1CA7: 51 7C    MOV   A,[__r0]
    1CA9: 09 00    ADC   A,0x0
    1CAB: 54 12    MOV   [X+18],A
    1CAD: 52 00    MOV   A,[X+0]
    1CAF: 54 04    MOV   [X+4],A
    1CB1: 52 01    MOV   A,[X+1]
    1CB3: 54 05    MOV   [X+5],A
    1CB5: 52 02    MOV   A,[X+2]
    1CB7: 54 06    MOV   [X+6],A
    1CB9: 52 03    MOV   A,[X+3]
    1CBB: 54 07    MOV   [X+7],A
    1CBD: 62 D0 00 MOV   REG[0xD0],0x0
    1CC0: 52 13    MOV   A,[X+19]
    1CC2: 53 79    MOV   [__r3],A
    1CC4: 52 12    MOV   A,[X+18]
    1CC6: 53 7A    MOV   [__r2],A
    1CC8: 47 7A 80 TST   [__r2],0x80
    1CCB: A0 09    JZ    0x1CD5
    1CCD: 55 7B FF MOV   [__r1],0xFF
    1CD0: 55 7C FF MOV   [__r0],0xFF
    1CD3: 80 0A    JMP   0x1CDE
    1CD5: 62 D0 00 MOV   REG[0xD0],0x0
    1CD8: 55 7B 00 MOV   [__r1],0x0
    1CDB: 55 7C 00 MOV   [__r0],0x0
    1CDE: 62 D0 00 MOV   REG[0xD0],0x0
    1CE1: 52 F8    MOV   A,[X-8]
    1CE3: 53 75    MOV   [__r7],A
    1CE5: 52 F7    MOV   A,[X-9]
    1CE7: 53 76    MOV   [__r6],A
    1CE9: 47 76 80 TST   [__r6],0x80
    1CEC: A0 09    JZ    0x1CF6
    1CEE: 55 77 FF MOV   [__r5],0xFF
    1CF1: 55 78 FF MOV   [__r4],0xFF
    1CF4: 80 0A    JMP   0x1CFF
    1CF6: 62 D0 00 MOV   REG[0xD0],0x0
    1CF9: 55 77 00 MOV   [__r5],0x0
    1CFC: 55 78 00 MOV   [__r4],0x0
    1CFF: 62 D0 00 MOV   REG[0xD0],0x0
    1D02: 51 78    MOV   A,[__r4]
    1D04: 08       PUSH  A
    1D05: 51 77    MOV   A,[__r5]
    1D07: 08       PUSH  A
    1D08: 51 76    MOV   A,[__r6]
    1D0A: 08       PUSH  A
    1D0B: 51 75    MOV   A,[__r7]
    1D0D: 08       PUSH  A
    1D0E: 52 00    MOV   A,[X+0]
    1D10: 08       PUSH  A
    1D11: 52 01    MOV   A,[X+1]
    1D13: 08       PUSH  A
    1D14: 52 02    MOV   A,[X+2]
    1D16: 08       PUSH  A
    1D17: 52 03    MOV   A,[X+3]
    1D19: 08       PUSH  A
    1D1A: 7C 17 17 LCALL 0x1717
    1D1D: 38 FC    ADD   SP,0xFC
    1D1F: 18       POP   A
    1D20: 53 75    MOV   [__r7],A
    1D22: 18       POP   A
    1D23: 53 76    MOV   [__r6],A
    1D25: 18       POP   A
    1D26: 53 77    MOV   [__r5],A
    1D28: 18       POP   A
    1D29: 53 78    MOV   [__r4],A
    1D2B: 51 75    MOV   A,[__r7]
    1D2D: 02 79    ADD   A,[__r3]
    1D2F: 54 03    MOV   [X+3],A
    1D31: 51 76    MOV   A,[__r6]
    1D33: 0A 7A    ADC   A,[__r2]
    1D35: 54 02    MOV   [X+2],A
    1D37: 51 77    MOV   A,[__r5]
    1D39: 0A 7B    ADC   A,[__r1]
    1D3B: 54 01    MOV   [X+1],A
    1D3D: 51 78    MOV   A,[__r4]
    1D3F: 0A 7C    ADC   A,[__r0]
    1D41: 54 00    MOV   [X+0],A
    1D43: 52 03    MOV   A,[X+3]
    1D45: 13 07    SUB   A,[X+7]
    1D47: 52 02    MOV   A,[X+2]
    1D49: 1B 06    SBB   A,[X+6]
    1D4B: 52 01    MOV   A,[X+1]
    1D4D: 1B 05    SBB   A,[X+5]
    1D4F: 52 04    MOV   A,[X+4]
    1D51: 31 80    XOR   A,0x80
    1D53: 53 74    MOV   [__rX],A
    1D55: 52 00    MOV   A,[X+0]
    1D57: 31 80    XOR   A,0x80
    1D59: 1A 74    SBB   A,[__rX]
    1D5B: D0 43    JNC   0x1D9F
    1D5D: 62 D0 00 MOV   REG[0xD0],0x0
    1D60: 55 8A 02 MOV   [errno+1],0x2
    1D63: 55 89 00 MOV   [errno],0x0
    1D66: 3D 0A 00 CMP   [X+10],0x0
    1D69: B0 06    JNZ   0x1D70
    1D6B: 3D 0B 00 CMP   [X+11],0x0
    1D6E: A0 0F    JZ    0x1D7E
    1D70: 56 14 80 MOV   [X+20],0x80
    1D73: 56 15 00 MOV   [X+21],0x0
    1D76: 56 16 00 MOV   [X+22],0x0
    1D79: 56 17 00 MOV   [X+23],0x0
    1D7C: 80 0D    JMP   0x1D8A
    1D7E: 56 14 7F MOV   [X+20],0x7F
    1D81: 56 15 FF MOV   [X+21],0xFF
    1D84: 56 16 FF MOV   [X+22],0xFF
    1D87: 56 17 FF MOV   [X+23],0xFF
    1D8A: 62 D0 00 MOV   REG[0xD0],0x0
    1D8D: 52 14    MOV   A,[X+20]
    1D8F: 53 7C    MOV   [__r0],A
    1D91: 52 15    MOV   A,[X+21]
    1D93: 53 7B    MOV   [__r1],A
    1D95: 52 16    MOV   A,[X+22]
    1D97: 53 7A    MOV   [__r2],A
    1D99: 52 17    MOV   A,[X+23]
    1D9B: 53 79    MOV   [__r3],A
    1D9D: 80 7F    JMP   0x1E1D
    1D9F: 77 FC    INC   [X-4]
    1DA1: 0F FB 00 ADC   [X-5],0x0
    1DA4: 62 D0 00 MOV   REG[0xD0],0x0
    1DA7: 52 FC    MOV   A,[X-4]
    1DA9: 53 7B    MOV   [__r1],A
    1DAB: 52 FB    MOV   A,[X-5]
    1DAD: 60 D4    MOV   REG[0xD4],A
    1DAF: 3E 7B    MVI   A,[__r1]
    1DB1: 39 00    CMP   A,0x0
    1DB3: BE 24    JNZ   0x1BD8
    1DB5: 3D F9 00 CMP   [X-7],0x0
    1DB8: B0 06    JNZ   0x1DBF
    1DBA: 3D FA 00 CMP   [X-6],0x0
    1DBD: A0 14    JZ    0x1DD2
    1DBF: 62 D0 00 MOV   REG[0xD0],0x0
    1DC2: 52 FA    MOV   A,[X-6]
    1DC4: 53 7B    MOV   [__r1],A
    1DC6: 52 F9    MOV   A,[X-7]
    1DC8: 60 D5    MOV   REG[0xD5],A
    1DCA: 52 FB    MOV   A,[X-5]
    1DCC: 3F 7B    MVI   [__r1],A
    1DCE: 52 FC    MOV   A,[X-4]
    1DD0: 3F 7B    MVI   [__r1],A
    1DD2: 3D 0A 00 CMP   [X+10],0x0
    1DD5: B0 06    JNZ   0x1DDC
    1DD7: 3D 0B 00 CMP   [X+11],0x0
    1DDA: A0 1F    JZ    0x1DFA
    1DDC: 52 03    MOV   A,[X+3]
    1DDE: 73       CPL   A
    1DDF: 11 FF    SUB   A,0xFF
    1DE1: 54 15    MOV   [X+21],A
    1DE3: 52 02    MOV   A,[X+2]
    1DE5: 73       CPL   A
    1DE6: 19 FF    SBB   A,0xFF
    1DE8: 54 14    MOV   [X+20],A
    1DEA: 52 01    MOV   A,[X+1]
    1DEC: 73       CPL   A
    1DED: 19 FF    SBB   A,0xFF
    1DEF: 54 13    MOV   [X+19],A
    1DF1: 52 00    MOV   A,[X+0]
    1DF3: 73       CPL   A
    1DF4: 19 FF    SBB   A,0xFF
    1DF6: 54 12    MOV   [X+18],A
    1DF8: 80 11    JMP   0x1E0A
    1DFA: 52 00    MOV   A,[X+0]
    1DFC: 54 12    MOV   [X+18],A
    1DFE: 52 01    MOV   A,[X+1]
    1E00: 54 13    MOV   [X+19],A
    1E02: 52 02    MOV   A,[X+2]
    1E04: 54 14    MOV   [X+20],A
    1E06: 52 03    MOV   A,[X+3]
    1E08: 54 15    MOV   [X+21],A
    1E0A: 62 D0 00 MOV   REG[0xD0],0x0
    1E0D: 52 12    MOV   A,[X+18]
    1E0F: 53 7C    MOV   [__r0],A
    1E11: 52 13    MOV   A,[X+19]
    1E13: 53 7B    MOV   [__r1],A
    1E15: 52 14    MOV   A,[X+20]
    1E17: 53 7A    MOV   [__r2],A
    1E19: 52 15    MOV   A,[X+21]
    1E1B: 53 79    MOV   [__r3],A
    1E1D: 38 E8    ADD   SP,0xE8
    1E1F: 20       POP   X
    1E20: 7F       RET   
_strtoul:
    1E21: 10       PUSH  X
    1E22: 4F       MOV   X,SP
    1E23: 38 12    ADD   SP,0x12
    1E25: 56 00 00 MOV   [X+0],0x0
    1E28: 56 01 00 MOV   [X+1],0x0
    1E2B: 56 02 00 MOV   [X+2],0x0
    1E2E: 56 03 00 MOV   [X+3],0x0
    1E31: 80 06    JMP   0x1E38
    1E33: 77 FC    INC   [X-4]
    1E35: 0F FB 00 ADC   [X-5],0x0
    1E38: 62 D0 00 MOV   REG[0xD0],0x0
    1E3B: 52 FC    MOV   A,[X-4]
    1E3D: 53 7B    MOV   [__r1],A
    1E3F: 52 FB    MOV   A,[X-5]
    1E41: 60 D4    MOV   REG[0xD4],A
    1E43: 3E 7B    MVI   A,[__r1]
    1E45: 53 7B    MOV   [__r1],A
    1E47: 50 00    MOV   A,0x0
    1E49: 08       PUSH  A
    1E4A: 51 7B    MOV   A,[__r1]
    1E4C: 08       PUSH  A
    1E4D: 7C 23 3C LCALL _isspace
    1E50: 38 FE    ADD   SP,0xFE
    1E52: 62 D0 00 MOV   REG[0xD0],0x0
    1E55: 3C 7C 00 CMP   [__r0],0x0
    1E58: BF DA    JNZ   0x1E33
    1E5A: 3C 7B 00 CMP   [__r1],0x0
    1E5D: BF D5    JNZ   0x1E33
    1E5F: 62 D0 00 MOV   REG[0xD0],0x0
    1E62: 52 FC    MOV   A,[X-4]
    1E64: 53 7B    MOV   [__r1],A
    1E66: 52 FB    MOV   A,[X-5]
    1E68: 60 D4    MOV   REG[0xD4],A
    1E6A: 3E 7B    MVI   A,[__r1]
    1E6C: 39 00    CMP   A,0x0
    1E6E: A0 31    JZ    0x1EA0
    1E70: 3D F7 00 CMP   [X-9],0x0
    1E73: B0 06    JNZ   0x1E7A
    1E75: 3D F8 00 CMP   [X-8],0x0
    1E78: A0 55    JZ    0x1ECE
    1E7A: 50 01    MOV   A,0x1
    1E7C: 13 F8    SUB   A,[X-8]
    1E7E: 52 F7    MOV   A,[X-9]
    1E80: 31 80    XOR   A,0x80
    1E82: 62 D0 00 MOV   REG[0xD0],0x0
    1E85: 53 74    MOV   [__rX],A
    1E87: 50 80    MOV   A,0x80
    1E89: 1A 74    SBB   A,[__rX]
    1E8B: D0 14    JNC   0x1EA0
    1E8D: 50 24    MOV   A,0x24
    1E8F: 13 F8    SUB   A,[X-8]
    1E91: 52 F7    MOV   A,[X-9]
    1E93: 31 80    XOR   A,0x80
    1E95: 62 D0 00 MOV   REG[0xD0],0x0
    1E98: 53 74    MOV   [__rX],A
    1E9A: 50 80    MOV   A,0x80
    1E9C: 1A 74    SBB   A,[__rX]
    1E9E: D0 2F    JNC   0x1ECE
    1EA0: 3D F9 00 CMP   [X-7],0x0
    1EA3: B0 06    JNZ   0x1EAA
    1EA5: 3D FA 00 CMP   [X-6],0x0
    1EA8: A0 14    JZ    0x1EBD
    1EAA: 62 D0 00 MOV   REG[0xD0],0x0
    1EAD: 52 FA    MOV   A,[X-6]
    1EAF: 53 7B    MOV   [__r1],A
    1EB1: 52 F9    MOV   A,[X-7]
    1EB3: 60 D5    MOV   REG[0xD5],A
    1EB5: 52 FB    MOV   A,[X-5]
    1EB7: 3F 7B    MVI   [__r1],A
    1EB9: 52 FC    MOV   A,[X-4]
    1EBB: 3F 7B    MVI   [__r1],A
    1EBD: 62 D0 00 MOV   REG[0xD0],0x0
    1EC0: 55 7C 00 MOV   [__r0],0x0
    1EC3: 55 7B 00 MOV   [__r1],0x0
    1EC6: 55 7A 00 MOV   [__r2],0x0
    1EC9: 55 79 00 MOV   [__r3],0x0
    1ECC: 82 E6    JMP   0x21B3
    1ECE: 62 D0 00 MOV   REG[0xD0],0x0
    1ED1: 52 FC    MOV   A,[X-4]
    1ED3: 53 7B    MOV   [__r1],A
    1ED5: 52 FB    MOV   A,[X-5]
    1ED7: 60 D4    MOV   REG[0xD4],A
    1ED9: 3E 7B    MVI   A,[__r1]
    1EDB: 39 2B    CMP   A,0x2B
    1EDD: B0 06    JNZ   0x1EE4
    1EDF: 77 FC    INC   [X-4]
    1EE1: 0F FB 00 ADC   [X-5],0x0
    1EE4: 62 D0 00 MOV   REG[0xD0],0x0
    1EE7: 52 FC    MOV   A,[X-4]
    1EE9: 53 7B    MOV   [__r1],A
    1EEB: 52 FB    MOV   A,[X-5]
    1EED: 60 D4    MOV   REG[0xD4],A
    1EEF: 3E 7B    MVI   A,[__r1]
    1EF1: 39 30    CMP   A,0x30
    1EF3: B0 4A    JNZ   0x1F3E
    1EF5: 52 FC    MOV   A,[X-4]
    1EF7: 01 01    ADD   A,0x1
    1EF9: 53 7B    MOV   [__r1],A
    1EFB: 52 FB    MOV   A,[X-5]
    1EFD: 09 00    ADC   A,0x0
    1EFF: 60 D4    MOV   REG[0xD4],A
    1F01: 3E 7B    MVI   A,[__r1]
    1F03: 53 7B    MOV   [__r1],A
    1F05: 55 7C 00 MOV   [__r0],0x0
    1F08: 3C 7C 00 CMP   [__r0],0x0
    1F0B: B0 05    JNZ   0x1F11
    1F0D: 39 58    CMP   A,0x58
    1F0F: A0 0E    JZ    0x1F1E
    1F11: 62 D0 00 MOV   REG[0xD0],0x0
    1F14: 3C 7C 00 CMP   [__r0],0x0
    1F17: B0 26    JNZ   0x1F3E
    1F19: 3C 7B 78 CMP   [__r1],0x78
    1F1C: B0 21    JNZ   0x1F3E
    1F1E: 3D F7 00 CMP   [X-9],0x0
    1F21: B0 06    JNZ   0x1F28
    1F23: 3D F8 10 CMP   [X-8],0x10
    1F26: A0 0B    JZ    0x1F32
    1F28: 3D F7 00 CMP   [X-9],0x0
    1F2B: B0 12    JNZ   0x1F3E
    1F2D: 3D F8 00 CMP   [X-8],0x0
    1F30: B0 0D    JNZ   0x1F3E
    1F32: 56 F8 10 MOV   [X-8],0x10
    1F35: 56 F7 00 MOV   [X-9],0x0
    1F38: 07 FC 02 ADD   [X-4],0x2
    1F3B: 0F FB 00 ADC   [X-5],0x0
    1F3E: 3D F7 00 CMP   [X-9],0x0
    1F41: B0 2D    JNZ   0x1F6F
    1F43: 3D F8 00 CMP   [X-8],0x0
    1F46: B0 28    JNZ   0x1F6F
    1F48: 62 D0 00 MOV   REG[0xD0],0x0
    1F4B: 52 FC    MOV   A,[X-4]
    1F4D: 53 7B    MOV   [__r1],A
    1F4F: 52 FB    MOV   A,[X-5]
    1F51: 60 D4    MOV   REG[0xD4],A
    1F53: 3E 7B    MVI   A,[__r1]
    1F55: 39 30    CMP   A,0x30
    1F57: B0 09    JNZ   0x1F61
    1F59: 56 0D 08 MOV   [X+13],0x8
    1F5C: 56 0C 00 MOV   [X+12],0x0
    1F5F: 80 07    JMP   0x1F67
    1F61: 56 0D 0A MOV   [X+13],0xA
    1F64: 56 0C 00 MOV   [X+12],0x0
    1F67: 52 0D    MOV   A,[X+13]
    1F69: 54 F8    MOV   [X-8],A
    1F6B: 52 0C    MOV   A,[X+12]
    1F6D: 54 F7    MOV   [X-9],A
    1F6F: 52 F8    MOV   A,[X-8]
    1F71: 11 0A    SUB   A,0xA
    1F73: 52 F7    MOV   A,[X-9]
    1F75: 31 80    XOR   A,0x80
    1F77: 19 80    SBB   A,0x80
    1F79: C0 09    JC    0x1F83
    1F7B: 56 0F 39 MOV   [X+15],0x39
    1F7E: 56 0E 00 MOV   [X+14],0x0
    1F81: 80 1C    JMP   0x1F9E
    1F83: 62 D0 00 MOV   REG[0xD0],0x0
    1F86: 52 F8    MOV   A,[X-8]
    1F88: 11 01    SUB   A,0x1
    1F8A: 53 7B    MOV   [__r1],A
    1F8C: 52 F7    MOV   A,[X-9]
    1F8E: 19 00    SBB   A,0x0
    1F90: 53 7C    MOV   [__r0],A
    1F92: 51 7B    MOV   A,[__r1]
    1F94: 01 30    ADD   A,0x30
    1F96: 54 0F    MOV   [X+15],A
    1F98: 51 7C    MOV   A,[__r0]
    1F9A: 09 00    ADC   A,0x0
    1F9C: 54 0E    MOV   [X+14],A
    1F9E: 52 0F    MOV   A,[X+15]
    1FA0: 54 09    MOV   [X+9],A
    1FA2: 52 0E    MOV   A,[X+14]
    1FA4: 54 08    MOV   [X+8],A
    1FA6: 50 0A    MOV   A,0xA
    1FA8: 13 F8    SUB   A,[X-8]
    1FAA: 52 F7    MOV   A,[X-9]
    1FAC: 31 80    XOR   A,0x80
    1FAE: 62 D0 00 MOV   REG[0xD0],0x0
    1FB1: 53 74    MOV   [__rX],A
    1FB3: 50 80    MOV   A,0x80
    1FB5: 1A 74    SBB   A,[__rX]
    1FB7: D1 BA    JNC   0x2172
    1FB9: 62 D0 00 MOV   REG[0xD0],0x0
    1FBC: 52 F8    MOV   A,[X-8]
    1FBE: 11 0B    SUB   A,0xB
    1FC0: 53 7B    MOV   [__r1],A
    1FC2: 52 F7    MOV   A,[X-9]
    1FC4: 19 00    SBB   A,0x0
    1FC6: 53 7C    MOV   [__r0],A
    1FC8: 51 7B    MOV   A,[__r1]
    1FCA: 01 61    ADD   A,0x61
    1FCC: 54 0B    MOV   [X+11],A
    1FCE: 51 7C    MOV   A,[__r0]
    1FD0: 09 00    ADC   A,0x0
    1FD2: 54 0A    MOV   [X+10],A
    1FD4: 81 9D    JMP   0x2172
    1FD6: 62 D0 00 MOV   REG[0xD0],0x0
    1FD9: 52 FC    MOV   A,[X-4]
    1FDB: 53 7B    MOV   [__r1],A
    1FDD: 52 FB    MOV   A,[X-5]
    1FDF: 60 D4    MOV   REG[0xD4],A
    1FE1: 3E 7B    MVI   A,[__r1]
    1FE3: 53 7B    MOV   [__r1],A
    1FE5: 50 00    MOV   A,0x0
    1FE7: 08       PUSH  A
    1FE8: 51 7B    MOV   A,[__r1]
    1FEA: 08       PUSH  A
    1FEB: 7C 22 FA LCALL _isdigit
    1FEE: 38 FE    ADD   SP,0xFE
    1FF0: 62 D0 00 MOV   REG[0xD0],0x0
    1FF3: 3C 7C 00 CMP   [__r0],0x0
    1FF6: B0 06    JNZ   0x1FFD
    1FF8: 3C 7B 00 CMP   [__r1],0x0
    1FFB: A0 3B    JZ    0x2037
    1FFD: 62 D0 00 MOV   REG[0xD0],0x0
    2000: 52 FC    MOV   A,[X-4]
    2002: 53 7B    MOV   [__r1],A
    2004: 52 FB    MOV   A,[X-5]
    2006: 60 D4    MOV   REG[0xD4],A
    2008: 3E 7B    MVI   A,[__r1]
    200A: 53 7B    MOV   [__r1],A
    200C: 52 09    MOV   A,[X+9]
    200E: 12 7B    SUB   A,[__r1]
    2010: 50 00    MOV   A,0x0
    2012: 31 80    XOR   A,0x80
    2014: 53 74    MOV   [__rX],A
    2016: 52 08    MOV   A,[X+8]
    2018: 31 80    XOR   A,0x80
    201A: 1A 74    SBB   A,[__rX]
    201C: C0 1A    JC    0x2037
    201E: 62 D0 00 MOV   REG[0xD0],0x0
    2021: 52 FC    MOV   A,[X-4]
    2023: 53 7B    MOV   [__r1],A
    2025: 52 FB    MOV   A,[X-5]
    2027: 60 D4    MOV   REG[0xD4],A
    2029: 3E 7B    MVI   A,[__r1]
    202B: 11 30    SUB   A,0x30
    202D: 54 11    MOV   [X+17],A
    202F: 50 00    MOV   A,0x0
    2031: 19 00    SBB   A,0x0
    2033: 54 10    MOV   [X+16],A
    2035: 80 75    JMP   0x20AB
    2037: 50 0A    MOV   A,0xA
    2039: 13 F8    SUB   A,[X-8]
    203B: 52 F7    MOV   A,[X-9]
    203D: 31 80    XOR   A,0x80
    203F: 62 D0 00 MOV   REG[0xD0],0x0
    2042: 53 74    MOV   [__rX],A
    2044: 50 80    MOV   A,0x80
    2046: 1A 74    SBB   A,[__rX]
    2048: D1 3A    JNC   0x2183
    204A: 62 D0 00 MOV   REG[0xD0],0x0
    204D: 52 FC    MOV   A,[X-4]
    204F: 53 7B    MOV   [__r1],A
    2051: 52 FB    MOV   A,[X-5]
    2053: 60 D4    MOV   REG[0xD4],A
    2055: 3E 7B    MVI   A,[__r1]
    2057: 53 7B    MOV   [__r1],A
    2059: 50 00    MOV   A,0x0
    205B: 08       PUSH  A
    205C: 51 7B    MOV   A,[__r1]
    205E: 08       PUSH  A
    205F: 7C 23 DD LCALL _tolower
    2062: 38 FE    ADD   SP,0xFE
    2064: 62 D0 00 MOV   REG[0xD0],0x0
    2067: 51 7B    MOV   A,[__r1]
    2069: 54 11    MOV   [X+17],A
    206B: 51 7C    MOV   A,[__r0]
    206D: 54 10    MOV   [X+16],A
    206F: 51 7B    MOV   A,[__r1]
    2071: 11 61    SUB   A,0x61
    2073: 51 7C    MOV   A,[__r0]
    2075: 31 80    XOR   A,0x80
    2077: 19 80    SBB   A,0x80
    2079: C1 09    JC    0x2183
    207B: 52 0B    MOV   A,[X+11]
    207D: 13 11    SUB   A,[X+17]
    207F: 52 10    MOV   A,[X+16]
    2081: 31 80    XOR   A,0x80
    2083: 62 D0 00 MOV   REG[0xD0],0x0
    2086: 53 74    MOV   [__rX],A
    2088: 52 0A    MOV   A,[X+10]
    208A: 31 80    XOR   A,0x80
    208C: 1A 74    SBB   A,[__rX]
    208E: C0 F4    JC    0x2183
    2090: 62 D0 00 MOV   REG[0xD0],0x0
    2093: 52 11    MOV   A,[X+17]
    2095: 11 61    SUB   A,0x61
    2097: 53 7B    MOV   [__r1],A
    2099: 52 10    MOV   A,[X+16]
    209B: 19 00    SBB   A,0x0
    209D: 53 7C    MOV   [__r0],A
    209F: 51 7B    MOV   A,[__r1]
    20A1: 01 0A    ADD   A,0xA
    20A3: 54 11    MOV   [X+17],A
    20A5: 51 7C    MOV   A,[__r0]
    20A7: 09 00    ADC   A,0x0
    20A9: 54 10    MOV   [X+16],A
    20AB: 52 00    MOV   A,[X+0]
    20AD: 54 04    MOV   [X+4],A
    20AF: 52 01    MOV   A,[X+1]
    20B1: 54 05    MOV   [X+5],A
    20B3: 52 02    MOV   A,[X+2]
    20B5: 54 06    MOV   [X+6],A
    20B7: 52 03    MOV   A,[X+3]
    20B9: 54 07    MOV   [X+7],A
    20BB: 62 D0 00 MOV   REG[0xD0],0x0
    20BE: 52 11    MOV   A,[X+17]
    20C0: 53 79    MOV   [__r3],A
    20C2: 52 10    MOV   A,[X+16]
    20C4: 53 7A    MOV   [__r2],A
    20C6: 47 7A 80 TST   [__r2],0x80
    20C9: A0 09    JZ    0x20D3
    20CB: 55 7B FF MOV   [__r1],0xFF
    20CE: 55 7C FF MOV   [__r0],0xFF
    20D1: 80 0A    JMP   0x20DC
    20D3: 62 D0 00 MOV   REG[0xD0],0x0
    20D6: 55 7B 00 MOV   [__r1],0x0
    20D9: 55 7C 00 MOV   [__r0],0x0
    20DC: 62 D0 00 MOV   REG[0xD0],0x0
    20DF: 52 F8    MOV   A,[X-8]
    20E1: 53 75    MOV   [__r7],A
    20E3: 52 F7    MOV   A,[X-9]
    20E5: 53 76    MOV   [__r6],A
    20E7: 47 76 80 TST   [__r6],0x80
    20EA: A0 09    JZ    0x20F4
    20EC: 55 77 FF MOV   [__r5],0xFF
    20EF: 55 78 FF MOV   [__r4],0xFF
    20F2: 80 0A    JMP   0x20FD
    20F4: 62 D0 00 MOV   REG[0xD0],0x0
    20F7: 55 77 00 MOV   [__r5],0x0
    20FA: 55 78 00 MOV   [__r4],0x0
    20FD: 62 D0 00 MOV   REG[0xD0],0x0
    2100: 51 78    MOV   A,[__r4]
    2102: 08       PUSH  A
    2103: 51 77    MOV   A,[__r5]
    2105: 08       PUSH  A
    2106: 51 76    MOV   A,[__r6]
    2108: 08       PUSH  A
    2109: 51 75    MOV   A,[__r7]
    210B: 08       PUSH  A
    210C: 52 00    MOV   A,[X+0]
    210E: 08       PUSH  A
    210F: 52 01    MOV   A,[X+1]
    2111: 08       PUSH  A
    2112: 52 02    MOV   A,[X+2]
    2114: 08       PUSH  A
    2115: 52 03    MOV   A,[X+3]
    2117: 08       PUSH  A
    2118: 7C 17 17 LCALL 0x1717
    211B: 38 FC    ADD   SP,0xFC
    211D: 18       POP   A
    211E: 53 75    MOV   [__r7],A
    2120: 18       POP   A
    2121: 53 76    MOV   [__r6],A
    2123: 18       POP   A
    2124: 53 77    MOV   [__r5],A
    2126: 18       POP   A
    2127: 53 78    MOV   [__r4],A
    2129: 51 75    MOV   A,[__r7]
    212B: 02 79    ADD   A,[__r3]
    212D: 54 03    MOV   [X+3],A
    212F: 51 76    MOV   A,[__r6]
    2131: 0A 7A    ADC   A,[__r2]
    2133: 54 02    MOV   [X+2],A
    2135: 51 77    MOV   A,[__r5]
    2137: 0A 7B    ADC   A,[__r1]
    2139: 54 01    MOV   [X+1],A
    213B: 51 78    MOV   A,[__r4]
    213D: 0A 7C    ADC   A,[__r0]
    213F: 54 00    MOV   [X+0],A
    2141: 52 03    MOV   A,[X+3]
    2143: 13 07    SUB   A,[X+7]
    2145: 52 02    MOV   A,[X+2]
    2147: 1B 06    SBB   A,[X+6]
    2149: 52 01    MOV   A,[X+1]
    214B: 1B 05    SBB   A,[X+5]
    214D: 52 00    MOV   A,[X+0]
    214F: 1B 04    SBB   A,[X+4]
    2151: D0 1B    JNC   0x216D
    2153: 62 D0 00 MOV   REG[0xD0],0x0
    2156: 55 8A 02 MOV   [errno+1],0x2
    2159: 55 89 00 MOV   [errno],0x0
    215C: 62 D0 00 MOV   REG[0xD0],0x0
    215F: 55 7C FF MOV   [__r0],0xFF
    2162: 55 7B FF MOV   [__r1],0xFF
    2165: 55 7A FF MOV   [__r2],0xFF
    2168: 55 79 FF MOV   [__r3],0xFF
    216B: 80 47    JMP   0x21B3
    216D: 77 FC    INC   [X-4]
    216F: 0F FB 00 ADC   [X-5],0x0
    2172: 62 D0 00 MOV   REG[0xD0],0x0
    2175: 52 FC    MOV   A,[X-4]
    2177: 53 7B    MOV   [__r1],A
    2179: 52 FB    MOV   A,[X-5]
    217B: 60 D4    MOV   REG[0xD4],A
    217D: 3E 7B    MVI   A,[__r1]
    217F: 39 00    CMP   A,0x0
    2181: BE 54    JNZ   0x1FD6
    2183: 3D F9 00 CMP   [X-7],0x0
    2186: B0 06    JNZ   0x218D
    2188: 3D FA 00 CMP   [X-6],0x0
    218B: A0 14    JZ    0x21A0
    218D: 62 D0 00 MOV   REG[0xD0],0x0
    2190: 52 FA    MOV   A,[X-6]
    2192: 53 7B    MOV   [__r1],A
    2194: 52 F9    MOV   A,[X-7]
    2196: 60 D5    MOV   REG[0xD5],A
    2198: 52 FB    MOV   A,[X-5]
    219A: 3F 7B    MVI   [__r1],A
    219C: 52 FC    MOV   A,[X-4]
    219E: 3F 7B    MVI   [__r1],A
    21A0: 62 D0 00 MOV   REG[0xD0],0x0
    21A3: 52 00    MOV   A,[X+0]
    21A5: 53 7C    MOV   [__r0],A
    21A7: 52 01    MOV   A,[X+1]
    21A9: 53 7B    MOV   [__r1],A
    21AB: 52 02    MOV   A,[X+2]
    21AD: 53 7A    MOV   [__r2],A
    21AF: 52 03    MOV   A,[X+3]
    21B1: 53 79    MOV   [__r3],A
    21B3: 38 EE    ADD   SP,0xEE
    21B5: 20       POP   X
    21B6: 7F       RET   
_utoa:
    21B7: 10       PUSH  X
    21B8: 4F       MOV   X,SP
    21B9: 38 07    ADD   SP,0x7
    21BB: 52 FC    MOV   A,[X-4]
    21BD: 54 01    MOV   [X+1],A
    21BF: 52 FB    MOV   A,[X-5]
    21C1: 54 00    MOV   [X+0],A
    21C3: 62 D0 00 MOV   REG[0xD0],0x0
    21C6: 52 F7    MOV   A,[X-9]
    21C8: 08       PUSH  A
    21C9: 52 F8    MOV   A,[X-8]
    21CB: 08       PUSH  A
    21CC: 52 F9    MOV   A,[X-7]
    21CE: 08       PUSH  A
    21CF: 52 FA    MOV   A,[X-6]
    21D1: 08       PUSH  A
    21D2: 7C 16 B6 LCALL 0x16B6
    21D5: 38 FE    ADD   SP,0xFE
    21D7: 18       POP   A
    21D8: 53 7B    MOV   [__r1],A
    21DA: 18       POP   A
    21DB: 53 7C    MOV   [__r0],A
    21DD: 51 7B    MOV   A,[__r1]
    21DF: 54 06    MOV   [X+6],A
    21E1: 51 7C    MOV   A,[__r0]
    21E3: 54 05    MOV   [X+5],A
    21E5: 50 09    MOV   A,0x9
    21E7: 13 06    SUB   A,[X+6]
    21E9: 52 05    MOV   A,[X+5]
    21EB: 31 80    XOR   A,0x80
    21ED: 53 74    MOV   [__rX],A
    21EF: 50 80    MOV   A,0x80
    21F1: 1A 74    SBB   A,[__rX]
    21F3: C0 28    JC    0x221C
    21F5: 62 D0 00 MOV   REG[0xD0],0x0
    21F8: 52 01    MOV   A,[X+1]
    21FA: 53 7B    MOV   [__r1],A
    21FC: 52 00    MOV   A,[X+0]
    21FE: 53 7C    MOV   [__r0],A
    2200: 51 7B    MOV   A,[__r1]
    2202: 01 01    ADD   A,0x1
    2204: 54 01    MOV   [X+1],A
    2206: 51 7C    MOV   A,[__r0]
    2208: 09 00    ADC   A,0x0
    220A: 54 00    MOV   [X+0],A
    220C: 52 06    MOV   A,[X+6]
    220E: 01 30    ADD   A,0x30
    2210: 53 7A    MOV   [__r2],A
    2212: 51 7C    MOV   A,[__r0]
    2214: 60 D5    MOV   REG[0xD5],A
    2216: 51 7A    MOV   A,[__r2]
    2218: 3F 7B    MVI   [__r1],A
    221A: 80 26    JMP   0x2241
    221C: 62 D0 00 MOV   REG[0xD0],0x0
    221F: 52 01    MOV   A,[X+1]
    2221: 53 7B    MOV   [__r1],A
    2223: 52 00    MOV   A,[X+0]
    2225: 53 7C    MOV   [__r0],A
    2227: 51 7B    MOV   A,[__r1]
    2229: 01 01    ADD   A,0x1
    222B: 54 01    MOV   [X+1],A
    222D: 51 7C    MOV   A,[__r0]
    222F: 09 00    ADC   A,0x0
    2231: 54 00    MOV   [X+0],A
    2233: 52 06    MOV   A,[X+6]
    2235: 01 57    ADD   A,0x57
    2237: 53 7A    MOV   [__r2],A
    2239: 51 7C    MOV   A,[__r0]
    223B: 60 D5    MOV   REG[0xD5],A
    223D: 51 7A    MOV   A,[__r2]
    223F: 3F 7B    MVI   [__r1],A
    2241: 52 F7    MOV   A,[X-9]
    2243: 08       PUSH  A
    2244: 52 F8    MOV   A,[X-8]
    2246: 08       PUSH  A
    2247: 52 F9    MOV   A,[X-7]
    2249: 08       PUSH  A
    224A: 52 FA    MOV   A,[X-6]
    224C: 08       PUSH  A
    224D: 62 D0 00 MOV   REG[0xD0],0x0
    2250: 7C 16 B6 LCALL 0x16B6
    2253: 18       POP   A
    2254: 54 FA    MOV   [X-6],A
    2256: 18       POP   A
    2257: 54 F9    MOV   [X-7],A
    2259: 38 FE    ADD   SP,0xFE
    225B: 3D F9 00 CMP   [X-7],0x0
    225E: BF 64    JNZ   0x21C3
    2260: 3D FA 00 CMP   [X-6],0x0
    2263: BF 5F    JNZ   0x21C3
    2265: 62 D0 00 MOV   REG[0xD0],0x0
    2268: 52 01    MOV   A,[X+1]
    226A: 53 7B    MOV   [__r1],A
    226C: 52 00    MOV   A,[X+0]
    226E: 53 7C    MOV   [__r0],A
    2270: 51 7B    MOV   A,[__r1]
    2272: 01 FF    ADD   A,0xFF
    2274: 54 01    MOV   [X+1],A
    2276: 51 7C    MOV   A,[__r0]
    2278: 09 FF    ADC   A,0xFF
    227A: 54 00    MOV   [X+0],A
    227C: 51 7C    MOV   A,[__r0]
    227E: 60 D5    MOV   REG[0xD5],A
    2280: 50 00    MOV   A,0x0
    2282: 3F 7B    MVI   [__r1],A
    2284: 52 FC    MOV   A,[X-4]
    2286: 54 03    MOV   [X+3],A
    2288: 52 FB    MOV   A,[X-5]
    228A: 54 02    MOV   [X+2],A
    228C: 80 54    JMP   0x22E1
    228E: 62 D0 00 MOV   REG[0xD0],0x0
    2291: 52 03    MOV   A,[X+3]
    2293: 53 7B    MOV   [__r1],A
    2295: 52 02    MOV   A,[X+2]
    2297: 60 D4    MOV   REG[0xD4],A
    2299: 3E 7B    MVI   A,[__r1]
    229B: 54 04    MOV   [X+4],A
    229D: 52 03    MOV   A,[X+3]
    229F: 53 7B    MOV   [__r1],A
    22A1: 52 02    MOV   A,[X+2]
    22A3: 53 7C    MOV   [__r0],A
    22A5: 51 7B    MOV   A,[__r1]
    22A7: 01 01    ADD   A,0x1
    22A9: 54 03    MOV   [X+3],A
    22AB: 51 7C    MOV   A,[__r0]
    22AD: 09 00    ADC   A,0x0
    22AF: 54 02    MOV   [X+2],A
    22B1: 52 01    MOV   A,[X+1]
    22B3: 53 79    MOV   [__r3],A
    22B5: 52 00    MOV   A,[X+0]
    22B7: 60 D4    MOV   REG[0xD4],A
    22B9: 3E 79    MVI   A,[__r3]
    22BB: 53 7A    MOV   [__r2],A
    22BD: 51 7C    MOV   A,[__r0]
    22BF: 60 D5    MOV   REG[0xD5],A
    22C1: 51 7A    MOV   A,[__r2]
    22C3: 3F 7B    MVI   [__r1],A
    22C5: 52 01    MOV   A,[X+1]
    22C7: 53 7B    MOV   [__r1],A
    22C9: 52 00    MOV   A,[X+0]
    22CB: 53 7C    MOV   [__r0],A
    22CD: 51 7B    MOV   A,[__r1]
    22CF: 01 FF    ADD   A,0xFF
    22D1: 54 01    MOV   [X+1],A
    22D3: 51 7C    MOV   A,[__r0]
    22D5: 09 FF    ADC   A,0xFF
    22D7: 54 00    MOV   [X+0],A
    22D9: 51 7C    MOV   A,[__r0]
    22DB: 60 D5    MOV   REG[0xD5],A
    22DD: 52 04    MOV   A,[X+4]
    22DF: 3F 7B    MVI   [__r1],A
    22E1: 52 03    MOV   A,[X+3]
    22E3: 13 01    SUB   A,[X+1]
    22E5: 52 02    MOV   A,[X+2]
    22E7: 1B 00    SBB   A,[X+0]
    22E9: CF A4    JC    0x228E
    22EB: 62 D0 00 MOV   REG[0xD0],0x0
    22EE: 52 FC    MOV   A,[X-4]
    22F0: 53 7B    MOV   [__r1],A
    22F2: 52 FB    MOV   A,[X-5]
    22F4: 53 7C    MOV   [__r0],A
    22F6: 38 F9    ADD   SP,0xF9
    22F8: 20       POP   X
    22F9: 7F       RET   
_isdigit:
    22FA: 10       PUSH  X
    22FB: 4F       MOV   X,SP
    22FC: 62 D0 00 MOV   REG[0xD0],0x0
    22FF: 52 FC    MOV   A,[X-4]
    2301: 01 AB    ADD   A,0xAB
    2303: 53 7B    MOV   [__r1],A
    2305: 52 FB    MOV   A,[X-5]
    2307: 09 05    ADC   A,0x5
    2309: 10       PUSH  X
    230A: 58 7B    MOV   X,[__r1]
    230C: 28       ROMX  
    230D: 20       POP   X
    230E: 53 7B    MOV   [__r1],A
    2310: 55 7C 00 MOV   [__r0],0x0
    2313: 26 7B 04 AND   [__r1],0x4
    2316: 26 7C 00 AND   [__r0],0x0
    2319: 20       POP   X
    231A: 7F       RET   
_islower:
    231B: 10       PUSH  X
    231C: 4F       MOV   X,SP
    231D: 62 D0 00 MOV   REG[0xD0],0x0
    2320: 52 FC    MOV   A,[X-4]
    2322: 01 AB    ADD   A,0xAB
    2324: 53 7B    MOV   [__r1],A
    2326: 52 FB    MOV   A,[X-5]
    2328: 09 05    ADC   A,0x5
    232A: 10       PUSH  X
    232B: 58 7B    MOV   X,[__r1]
    232D: 28       ROMX  
    232E: 20       POP   X
    232F: 53 7B    MOV   [__r1],A
    2331: 55 7C 00 MOV   [__r0],0x0
    2334: 26 7B 02 AND   [__r1],0x2
    2337: 26 7C 00 AND   [__r0],0x0
    233A: 20       POP   X
    233B: 7F       RET   
_isspace:
    233C: 10       PUSH  X
    233D: 4F       MOV   X,SP
    233E: 62 D0 00 MOV   REG[0xD0],0x0
    2341: 52 FC    MOV   A,[X-4]
    2343: 01 AB    ADD   A,0xAB
    2345: 53 7B    MOV   [__r1],A
    2347: 52 FB    MOV   A,[X-5]
    2349: 09 05    ADC   A,0x5
    234B: 10       PUSH  X
    234C: 58 7B    MOV   X,[__r1]
    234E: 28       ROMX  
    234F: 20       POP   X
    2350: 53 7B    MOV   [__r1],A
    2352: 55 7C 00 MOV   [__r0],0x0
    2355: 26 7B 10 AND   [__r1],0x10
    2358: 26 7C 00 AND   [__r0],0x0
    235B: 20       POP   X
    235C: 7F       RET   
_isupper:
    235D: 10       PUSH  X
    235E: 4F       MOV   X,SP
    235F: 62 D0 00 MOV   REG[0xD0],0x0
    2362: 52 FC    MOV   A,[X-4]
    2364: 01 AB    ADD   A,0xAB
    2366: 53 7B    MOV   [__r1],A
    2368: 52 FB    MOV   A,[X-5]
    236A: 09 05    ADC   A,0x5
    236C: 10       PUSH  X
    236D: 58 7B    MOV   X,[__r1]
    236F: 28       ROMX  
    2370: 20       POP   X
    2371: 53 7B    MOV   [__r1],A
    2373: 55 7C 00 MOV   [__r0],0x0
    2376: 26 7B 01 AND   [__r1],0x1
    2379: 26 7C 00 AND   [__r0],0x0
    237C: 20       POP   X
    237D: 7F       RET   
_isxdigit:
    237E: 10       PUSH  X
    237F: 4F       MOV   X,SP
    2380: 62 D0 00 MOV   REG[0xD0],0x0
    2383: 52 FC    MOV   A,[X-4]
    2385: 01 AB    ADD   A,0xAB
    2387: 53 7B    MOV   [__r1],A
    2389: 52 FB    MOV   A,[X-5]
    238B: 09 05    ADC   A,0x5
    238D: 10       PUSH  X
    238E: 58 7B    MOV   X,[__r1]
    2390: 28       ROMX  
    2391: 20       POP   X
    2392: 53 7B    MOV   [__r1],A
    2394: 55 7C 00 MOV   [__r0],0x0
    2397: 26 7B 08 AND   [__r1],0x8
    239A: 26 7C 00 AND   [__r0],0x0
    239D: 20       POP   X
    239E: 7F       RET   
_toupper:
    239F: 10       PUSH  X
    23A0: 4F       MOV   X,SP
    23A1: 52 FB    MOV   A,[X-5]
    23A3: 08       PUSH  A
    23A4: 52 FC    MOV   A,[X-4]
    23A6: 08       PUSH  A
    23A7: 7C 23 1B LCALL _islower
    23AA: 38 FE    ADD   SP,0xFE
    23AC: 62 D0 00 MOV   REG[0xD0],0x0
    23AF: 3C 7C 00 CMP   [__r0],0x0
    23B2: B0 06    JNZ   0x23B9
    23B4: 3C 7B 00 CMP   [__r1],0x0
    23B7: A0 18    JZ    0x23D0
    23B9: 62 D0 00 MOV   REG[0xD0],0x0
    23BC: 52 FC    MOV   A,[X-4]
    23BE: 11 61    SUB   A,0x61
    23C0: 53 7B    MOV   [__r1],A
    23C2: 52 FB    MOV   A,[X-5]
    23C4: 19 00    SBB   A,0x0
    23C6: 53 7C    MOV   [__r0],A
    23C8: 06 7B 41 ADD   [__r1],0x41
    23CB: 0E 7C 00 ADC   [__r0],0x0
    23CE: 80 0C    JMP   0x23DB
    23D0: 62 D0 00 MOV   REG[0xD0],0x0
    23D3: 52 FC    MOV   A,[X-4]
    23D5: 53 7B    MOV   [__r1],A
    23D7: 52 FB    MOV   A,[X-5]
    23D9: 53 7C    MOV   [__r0],A
    23DB: 20       POP   X
    23DC: 7F       RET   
_tolower:
    23DD: 10       PUSH  X
    23DE: 4F       MOV   X,SP
    23DF: 52 FB    MOV   A,[X-5]
    23E1: 08       PUSH  A
    23E2: 52 FC    MOV   A,[X-4]
    23E4: 08       PUSH  A
    23E5: 7C 23 5D LCALL _isupper
    23E8: 38 FE    ADD   SP,0xFE
    23EA: 62 D0 00 MOV   REG[0xD0],0x0
    23ED: 3C 7C 00 CMP   [__r0],0x0
    23F0: B0 06    JNZ   0x23F7
    23F2: 3C 7B 00 CMP   [__r1],0x0
    23F5: A0 18    JZ    0x240E
    23F7: 62 D0 00 MOV   REG[0xD0],0x0
    23FA: 52 FC    MOV   A,[X-4]
    23FC: 11 41    SUB   A,0x41
    23FE: 53 7B    MOV   [__r1],A
    2400: 52 FB    MOV   A,[X-5]
    2402: 19 00    SBB   A,0x0
    2404: 53 7C    MOV   [__r0],A
    2406: 06 7B 61 ADD   [__r1],0x61
    2409: 0E 7C 00 ADC   [__r0],0x0
    240C: 80 0C    JMP   0x2419
    240E: 62 D0 00 MOV   REG[0xD0],0x0
    2411: 52 FC    MOV   A,[X-4]
    2413: 53 7B    MOV   [__r1],A
    2415: 52 FB    MOV   A,[X-5]
    2417: 53 7C    MOV   [__r0],A
    2419: 20       POP   X
    241A: 7F       RET   
__csdepi:
    241B: 10       PUSH  X
    241C: 4F       MOV   X,SP
    241D: 62 D0 00 MOV   REG[0xD0],0x0
    2420: 51 86    MOV   A,[main.c:rubout+9]
    2422: 08       PUSH  A
    2423: 51 85    MOV   A,[main.c:rubout+8]
    2425: 62 D0 00 MOV   REG[0xD0],0x0
    2428: 53 7C    MOV   [__r0],A
    242A: 18       POP   A
    242B: 53 7B    MOV   [__r1],A
    242D: 01 01    ADD   A,0x1
    242F: 62 D0 00 MOV   REG[0xD0],0x0
    2432: 53 86    MOV   [main.c:rubout+9],A
    2434: 62 D0 00 MOV   REG[0xD0],0x0
    2437: 51 7C    MOV   A,[__r0]
    2439: 09 00    ADC   A,0x0
    243B: 62 D0 00 MOV   REG[0xD0],0x0
    243E: 53 85    MOV   [main.c:rubout+8],A
    2440: 62 D0 00 MOV   REG[0xD0],0x0
    2443: 51 7C    MOV   A,[__r0]
    2445: 60 D5    MOV   REG[0xD5],A
    2447: 52 FC    MOV   A,[X-4]
    2449: 3F 7B    MVI   [__r1],A
    244B: 20       POP   X
    244C: 7F       RET   
_csprintf:
    244D: 10       PUSH  X
    244E: 4F       MOV   X,SP
    244F: 38 02    ADD   SP,0x2
    2451: 62 D0 00 MOV   REG[0xD0],0x0
    2454: 52 FC    MOV   A,[X-4]
    2456: 53 86    MOV   [main.c:rubout+9],A
    2458: 52 FB    MOV   A,[X-5]
    245A: 53 85    MOV   [main.c:rubout+8],A
    245C: 62 D0 00 MOV   REG[0xD0],0x0
    245F: 5A 7B    MOV   [__r1],X
    2461: 16 7B 07 SUB   [__r1],0x7
    2464: 51 7B    MOV   A,[__r1]
    2466: 54 01    MOV   [X+1],A
    2468: 56 00 07 MOV   [X+0],0x7
    246B: 52 00    MOV   A,[X+0]
    246D: 08       PUSH  A
    246E: 52 01    MOV   A,[X+1]
    2470: 08       PUSH  A
    2471: 52 F9    MOV   A,[X-7]
    2473: 08       PUSH  A
    2474: 52 FA    MOV   A,[X-6]
    2476: 08       PUSH  A
    2477: 50 07    MOV   A,0x7
    2479: 08       PUSH  A
    247A: 50 21    MOV   A,0x21
    247C: 08       PUSH  A
    247D: 7C 25 70 LCALL __cprint
    2480: 38 FA    ADD   SP,0xFA
    2482: 62 D0 00 MOV   REG[0xD0],0x0
    2485: 51 86    MOV   A,[main.c:rubout+9]
    2487: 08       PUSH  A
    2488: 51 85    MOV   A,[main.c:rubout+8]
    248A: 62 D0 00 MOV   REG[0xD0],0x0
    248D: 53 7C    MOV   [__r0],A
    248F: 18       POP   A
    2490: 53 7B    MOV   [__r1],A
    2492: 51 7C    MOV   A,[__r0]
    2494: 60 D5    MOV   REG[0xD5],A
    2496: 50 00    MOV   A,0x0
    2498: 3F 7B    MVI   [__r1],A
    249A: 62 D0 00 MOV   REG[0xD0],0x0
    249D: 51 86    MOV   A,[main.c:rubout+9]
    249F: 13 FC    SUB   A,[X-4]
    24A1: 62 D0 00 MOV   REG[0xD0],0x0
    24A4: 53 7B    MOV   [__r1],A
    24A6: 62 D0 00 MOV   REG[0xD0],0x0
    24A9: 51 85    MOV   A,[main.c:rubout+8]
    24AB: 1B FB    SBB   A,[X-5]
    24AD: 62 D0 00 MOV   REG[0xD0],0x0
    24B0: 53 7C    MOV   [__r0],A
    24B2: 38 FE    ADD   SP,0xFE
    24B4: 20       POP   X
    24B5: 7F       RET   
    24B6: 10       PUSH  X
    24B7: 4F       MOV   X,SP
    24B8: 38 01    ADD   SP,0x1
    24BA: 62 D0 00 MOV   REG[0xD0],0x0
    24BD: 3C 8B 00 CMP   [errno+2],0x0
    24C0: A0 0A    JZ    0x24CB
    24C2: 51 8B    MOV   A,[errno+2]
    24C4: 54 00    MOV   [X+0],A
    24C6: 55 8B 00 MOV   [errno+2],0x0
    24C9: 80 26    JMP   0x24F0
    24CB: 62 D0 00 MOV   REG[0xD0],0x0
    24CE: 51 82    MOV   A,[main.c:rubout+5]
    24D0: 08       PUSH  A
    24D1: 51 81    MOV   A,[main.c:rubout+4]
    24D3: 62 D0 00 MOV   REG[0xD0],0x0
    24D6: 53 7C    MOV   [__r0],A
    24D8: 18       POP   A
    24D9: 53 7B    MOV   [__r1],A
    24DB: 51 7C    MOV   A,[__r0]
    24DD: 60 D4    MOV   REG[0xD4],A
    24DF: 3E 7B    MVI   A,[__r1]
    24E1: 54 00    MOV   [X+0],A
    24E3: 3D 00 00 CMP   [X+0],0x0
    24E6: A0 09    JZ    0x24F0
    24E8: 62 D0 00 MOV   REG[0xD0],0x0
    24EB: 76 82    INC   [main.c:rubout+5]
    24ED: 0E 81 00 ADC   [main.c:rubout+4],0x0
    24F0: 52 00    MOV   A,[X+0]
    24F2: 62 D0 00 MOV   REG[0xD0],0x0
    24F5: 38 FF    ADD   SP,0xFF
    24F7: 20       POP   X
    24F8: 7F       RET   
    24F9: 10       PUSH  X
    24FA: 4F       MOV   X,SP
    24FB: 52 FC    MOV   A,[X-4]
    24FD: 62 D0 00 MOV   REG[0xD0],0x0
    2500: 53 8B    MOV   [errno+2],A
    2502: 20       POP   X
    2503: 7F       RET   
_csscanf:
    2504: 10       PUSH  X
    2505: 4F       MOV   X,SP
    2506: 38 04    ADD   SP,0x4
    2508: 62 D0 00 MOV   REG[0xD0],0x0
    250B: 55 8B 00 MOV   [errno+2],0x0
    250E: 62 D0 00 MOV   REG[0xD0],0x0
    2511: 52 FC    MOV   A,[X-4]
    2513: 53 82    MOV   [main.c:rubout+5],A
    2515: 52 FB    MOV   A,[X-5]
    2517: 53 81    MOV   [main.c:rubout+4],A
    2519: 62 D0 00 MOV   REG[0xD0],0x0
    251C: 5A 7B    MOV   [__r1],X
    251E: 16 7B 07 SUB   [__r1],0x7
    2521: 51 7B    MOV   A,[__r1]
    2523: 54 01    MOV   [X+1],A
    2525: 56 00 07 MOV   [X+0],0x7
    2528: 52 00    MOV   A,[X+0]
    252A: 08       PUSH  A
    252B: 52 01    MOV   A,[X+1]
    252D: 08       PUSH  A
    252E: 52 F9    MOV   A,[X-7]
    2530: 08       PUSH  A
    2531: 52 FA    MOV   A,[X-6]
    2533: 08       PUSH  A
    2534: 50 07    MOV   A,0x7
    2536: 08       PUSH  A
    2537: 50 25    MOV   A,0x25
    2539: 08       PUSH  A
    253A: 50 07    MOV   A,0x7
    253C: 08       PUSH  A
    253D: 50 23    MOV   A,0x23
    253F: 08       PUSH  A
    2540: 7C 2C 7E LCALL __cscanf
    2543: 38 F8    ADD   SP,0xF8
    2545: 62 D0 00 MOV   REG[0xD0],0x0
    2548: 51 7B    MOV   A,[__r1]
    254A: 54 03    MOV   [X+3],A
    254C: 51 7C    MOV   A,[__r0]
    254E: 54 02    MOV   [X+2],A
    2550: 62 D0 00 MOV   REG[0xD0],0x0
    2553: 3C 8B 00 CMP   [errno+2],0x0
    2556: A0 0A    JZ    0x2561
    2558: 62 D0 00 MOV   REG[0xD0],0x0
    255B: 06 82 FF ADD   [main.c:rubout+5],0xFF
    255E: 0E 81 FF ADC   [main.c:rubout+4],0xFF
    2561: 62 D0 00 MOV   REG[0xD0],0x0
    2564: 52 03    MOV   A,[X+3]
    2566: 53 7B    MOV   [__r1],A
    2568: 52 02    MOV   A,[X+2]
    256A: 53 7C    MOV   [__r0],A
    256C: 38 FC    ADD   SP,0xFC
    256E: 20       POP   X
    256F: 7F       RET   
__cprint:
    2570: 10       PUSH  X
    2571: 4F       MOV   X,SP
    2572: 38 11    ADD   SP,0x11
    2574: 56 05 00 MOV   [X+5],0x0
    2577: 56 04 00 MOV   [X+4],0x0
    257A: 83 C7    JMP   0x2942
    257C: 62 D0 00 MOV   REG[0xD0],0x0
    257F: 52 FA    MOV   A,[X-6]
    2581: 53 7B    MOV   [__r1],A
    2583: 52 F9    MOV   A,[X-7]
    2585: 10       PUSH  X
    2586: 58 7B    MOV   X,[__r1]
    2588: 28       ROMX  
    2589: 20       POP   X
    258A: 39 25    CMP   A,0x25
    258C: A0 23    JZ    0x25B0
    258E: 52 FA    MOV   A,[X-6]
    2590: 53 7B    MOV   [__r1],A
    2592: 52 F9    MOV   A,[X-7]
    2594: 10       PUSH  X
    2595: 58 7B    MOV   X,[__r1]
    2597: 28       ROMX  
    2598: 20       POP   X
    2599: 10       PUSH  X
    259A: 08       PUSH  A
    259B: 52 FC    MOV   A,[X-4]
    259D: 53 7B    MOV   [__r1],A
    259F: 52 FB    MOV   A,[X-5]
    25A1: 58 7B    MOV   X,[__r1]
    25A3: 7C 18 1A LCALL __plcall
    25A6: 38 FF    ADD   SP,0xFF
    25A8: 20       POP   X
    25A9: 77 05    INC   [X+5]
    25AB: 0F 04 00 ADC   [X+4],0x0
    25AE: 83 8E    JMP   0x293D
    25B0: 56 0A 00 MOV   [X+10],0x0
    25B3: 56 09 00 MOV   [X+9],0x0
    25B6: 56 07 59 MOV   [X+7],0x59
    25B9: 56 06 00 MOV   [X+6],0x0
    25BC: 56 08 20 MOV   [X+8],0x20
    25BF: 77 FA    INC   [X-6]
    25C1: 0F F9 00 ADC   [X-7],0x0
    25C4: 62 D0 00 MOV   REG[0xD0],0x0
    25C7: 52 FA    MOV   A,[X-6]
    25C9: 53 7B    MOV   [__r1],A
    25CB: 52 F9    MOV   A,[X-7]
    25CD: 10       PUSH  X
    25CE: 58 7B    MOV   X,[__r1]
    25D0: 28       ROMX  
    25D1: 20       POP   X
    25D2: 54 10    MOV   [X+16],A
    25D4: 56 0F 00 MOV   [X+15],0x0
    25D7: 52 10    MOV   A,[X+16]
    25D9: 11 58    SUB   A,0x58
    25DB: 53 73    MOV   [__rY],A
    25DD: 52 0F    MOV   A,[X+15]
    25DF: 31 80    XOR   A,0x80
    25E1: 19 80    SBB   A,0x80
    25E3: 2A 73    OR    A,[__rY]
    25E5: A0 ED    JZ    0x26D3
    25E7: D0 22    JNC   0x260A
    25E9: 52 10    MOV   A,[X+16]
    25EB: 11 45    SUB   A,0x45
    25ED: 62 D0 00 MOV   REG[0xD0],0x0
    25F0: 53 73    MOV   [__rY],A
    25F2: 52 0F    MOV   A,[X+15]
    25F4: 31 80    XOR   A,0x80
    25F6: 19 80    SBB   A,0x80
    25F8: C0 83    JC    0x267C
    25FA: 2A 73    OR    A,[__rY]
    25FC: A3 38    JZ    0x2935
    25FE: 3D 0F 00 CMP   [X+15],0x0
    2601: B0 06    JNZ   0x2608
    2603: 3D 10 53 CMP   [X+16],0x53
    2606: A2 32    JZ    0x2839
    2608: 80 73    JMP   0x267C
    260A: 3D 0F 00 CMP   [X+15],0x0
    260D: B0 06    JNZ   0x2614
    260F: 3D 10 63 CMP   [X+16],0x63
    2612: A1 F6    JZ    0x2809
    2614: 3D 0F 00 CMP   [X+15],0x0
    2617: B0 06    JNZ   0x261E
    2619: 3D 10 64 CMP   [X+16],0x64
    261C: A0 84    JZ    0x26A1
    261E: 3D 0F 00 CMP   [X+15],0x0
    2621: B0 06    JNZ   0x2628
    2623: 3D 10 65 CMP   [X+16],0x65
    2626: A3 0E    JZ    0x2935
    2628: 3D 0F 00 CMP   [X+15],0x0
    262B: B0 06    JNZ   0x2632
    262D: 3D 10 66 CMP   [X+16],0x66
    2630: A3 04    JZ    0x2935
    2632: 3D 0F 00 CMP   [X+15],0x0
    2635: B0 06    JNZ   0x263C
    2637: 3D 10 69 CMP   [X+16],0x69
    263A: A0 66    JZ    0x26A1
    263C: 3D 0F 00 CMP   [X+15],0x0
    263F: B0 06    JNZ   0x2646
    2641: 3D 10 6F CMP   [X+16],0x6F
    2644: A0 8E    JZ    0x26D3
    2646: 3D 0F 00 CMP   [X+15],0x0
    2649: B0 06    JNZ   0x2650
    264B: 3D 10 70 CMP   [X+16],0x70
    264E: A0 84    JZ    0x26D3
    2650: 52 10    MOV   A,[X+16]
    2652: 11 63    SUB   A,0x63
    2654: 52 0F    MOV   A,[X+15]
    2656: 31 80    XOR   A,0x80
    2658: 19 80    SBB   A,0x80
    265A: C0 21    JC    0x267C
    265C: 3D 0F 00 CMP   [X+15],0x0
    265F: B0 06    JNZ   0x2666
    2661: 3D 10 73 CMP   [X+16],0x73
    2664: A2 4A    JZ    0x28AF
    2666: 3D 0F 00 CMP   [X+15],0x0
    2669: B0 06    JNZ   0x2670
    266B: 3D 10 75 CMP   [X+16],0x75
    266E: A0 64    JZ    0x26D3
    2670: 3D 0F 00 CMP   [X+15],0x0
    2673: B0 06    JNZ   0x267A
    2675: 3D 10 78 CMP   [X+16],0x78
    2678: A0 5A    JZ    0x26D3
    267A: 80 01    JMP   0x267C
    267C: 62 D0 00 MOV   REG[0xD0],0x0
    267F: 52 FA    MOV   A,[X-6]
    2681: 53 7B    MOV   [__r1],A
    2683: 52 F9    MOV   A,[X-7]
    2685: 10       PUSH  X
    2686: 58 7B    MOV   X,[__r1]
    2688: 28       ROMX  
    2689: 20       POP   X
    268A: 10       PUSH  X
    268B: 08       PUSH  A
    268C: 52 FC    MOV   A,[X-4]
    268E: 53 7B    MOV   [__r1],A
    2690: 52 FB    MOV   A,[X-5]
    2692: 58 7B    MOV   X,[__r1]
    2694: 7C 18 1A LCALL __plcall
    2697: 38 FF    ADD   SP,0xFF
    2699: 20       POP   X
    269A: 77 05    INC   [X+5]
    269C: 0F 04 00 ADC   [X+4],0x0
    269F: 82 9D    JMP   0x293D
    26A1: 07 F8 FE ADD   [X-8],0xFE
    26A4: 0F F7 FF ADC   [X-9],0xFF
    26A7: 62 D0 00 MOV   REG[0xD0],0x0
    26AA: 52 F8    MOV   A,[X-8]
    26AC: 53 7B    MOV   [__r1],A
    26AE: 52 F7    MOV   A,[X-9]
    26B0: 60 D4    MOV   REG[0xD4],A
    26B2: 3E 7B    MVI   A,[__r1]
    26B4: 54 0B    MOV   [X+11],A
    26B6: 3E 7B    MVI   A,[__r1]
    26B8: 54 0C    MOV   [X+12],A
    26BA: 50 00    MOV   A,0x0
    26BC: 08       PUSH  A
    26BD: 50 0A    MOV   A,0xA
    26BF: 08       PUSH  A
    26C0: 52 0B    MOV   A,[X+11]
    26C2: 08       PUSH  A
    26C3: 52 0C    MOV   A,[X+12]
    26C5: 08       PUSH  A
    26C6: 52 06    MOV   A,[X+6]
    26C8: 08       PUSH  A
    26C9: 52 07    MOV   A,[X+7]
    26CB: 08       PUSH  A
    26CC: 7C 18 26 LCALL _itoa
    26CF: 38 FA    ADD   SP,0xFA
    26D1: 81 2F    JMP   0x2801
    26D3: 07 F8 FE ADD   [X-8],0xFE
    26D6: 0F F7 FF ADC   [X-9],0xFF
    26D9: 62 D0 00 MOV   REG[0xD0],0x0
    26DC: 52 F8    MOV   A,[X-8]
    26DE: 53 7B    MOV   [__r1],A
    26E0: 52 F7    MOV   A,[X-9]
    26E2: 60 D4    MOV   REG[0xD4],A
    26E4: 3E 7B    MVI   A,[__r1]
    26E6: 53 7C    MOV   [__r0],A
    26E8: 3E 7B    MVI   A,[__r1]
    26EA: 54 0C    MOV   [X+12],A
    26EC: 51 7C    MOV   A,[__r0]
    26EE: 54 0B    MOV   [X+11],A
    26F0: 52 FA    MOV   A,[X-6]
    26F2: 53 7B    MOV   [__r1],A
    26F4: 52 F9    MOV   A,[X-7]
    26F6: 10       PUSH  X
    26F7: 58 7B    MOV   X,[__r1]
    26F9: 28       ROMX  
    26FA: 20       POP   X
    26FB: 39 75    CMP   A,0x75
    26FD: B0 1A    JNZ   0x2718
    26FF: 50 00    MOV   A,0x0
    2701: 08       PUSH  A
    2702: 50 0A    MOV   A,0xA
    2704: 08       PUSH  A
    2705: 52 0B    MOV   A,[X+11]
    2707: 08       PUSH  A
    2708: 52 0C    MOV   A,[X+12]
    270A: 08       PUSH  A
    270B: 52 06    MOV   A,[X+6]
    270D: 08       PUSH  A
    270E: 52 07    MOV   A,[X+7]
    2710: 08       PUSH  A
    2711: 7C 21 B7 LCALL _utoa
    2714: 38 FA    ADD   SP,0xFA
    2716: 80 EA    JMP   0x2801
    2718: 62 D0 00 MOV   REG[0xD0],0x0
    271B: 52 FA    MOV   A,[X-6]
    271D: 53 7B    MOV   [__r1],A
    271F: 52 F9    MOV   A,[X-7]
    2721: 10       PUSH  X
    2722: 58 7B    MOV   X,[__r1]
    2724: 28       ROMX  
    2725: 20       POP   X
    2726: 39 6F    CMP   A,0x6F
    2728: B0 1A    JNZ   0x2743
    272A: 50 00    MOV   A,0x0
    272C: 08       PUSH  A
    272D: 50 08    MOV   A,0x8
    272F: 08       PUSH  A
    2730: 52 0B    MOV   A,[X+11]
    2732: 08       PUSH  A
    2733: 52 0C    MOV   A,[X+12]
    2735: 08       PUSH  A
    2736: 52 06    MOV   A,[X+6]
    2738: 08       PUSH  A
    2739: 52 07    MOV   A,[X+7]
    273B: 08       PUSH  A
    273C: 7C 21 B7 LCALL _utoa
    273F: 38 FA    ADD   SP,0xFA
    2741: 80 BF    JMP   0x2801
    2743: 62 D0 00 MOV   REG[0xD0],0x0
    2746: 52 FA    MOV   A,[X-6]
    2748: 53 7B    MOV   [__r1],A
    274A: 52 F9    MOV   A,[X-7]
    274C: 10       PUSH  X
    274D: 58 7B    MOV   X,[__r1]
    274F: 28       ROMX  
    2750: 20       POP   X
    2751: 39 70    CMP   A,0x70
    2753: B0 39    JNZ   0x278D
    2755: 52 07    MOV   A,[X+7]
    2757: 53 7B    MOV   [__r1],A
    2759: 52 06    MOV   A,[X+6]
    275B: 53 7C    MOV   [__r0],A
    275D: 51 7B    MOV   A,[__r1]
    275F: 01 01    ADD   A,0x1
    2761: 54 07    MOV   [X+7],A
    2763: 51 7C    MOV   A,[__r0]
    2765: 09 00    ADC   A,0x0
    2767: 54 06    MOV   [X+6],A
    2769: 51 7C    MOV   A,[__r0]
    276B: 60 D5    MOV   REG[0xD5],A
    276D: 50 30    MOV   A,0x30
    276F: 3F 7B    MVI   [__r1],A
    2771: 52 07    MOV   A,[X+7]
    2773: 53 7B    MOV   [__r1],A
    2775: 52 06    MOV   A,[X+6]
    2777: 53 7C    MOV   [__r0],A
    2779: 51 7B    MOV   A,[__r1]
    277B: 01 01    ADD   A,0x1
    277D: 54 07    MOV   [X+7],A
    277F: 51 7C    MOV   A,[__r0]
    2781: 09 00    ADC   A,0x0
    2783: 54 06    MOV   [X+6],A
    2785: 51 7C    MOV   A,[__r0]
    2787: 60 D5    MOV   REG[0xD5],A
    2789: 50 78    MOV   A,0x78
    278B: 3F 7B    MVI   [__r1],A
    278D: 50 00    MOV   A,0x0
    278F: 08       PUSH  A
    2790: 50 10    MOV   A,0x10
    2792: 08       PUSH  A
    2793: 52 0B    MOV   A,[X+11]
    2795: 08       PUSH  A
    2796: 52 0C    MOV   A,[X+12]
    2798: 08       PUSH  A
    2799: 52 06    MOV   A,[X+6]
    279B: 08       PUSH  A
    279C: 52 07    MOV   A,[X+7]
    279E: 08       PUSH  A
    279F: 7C 21 B7 LCALL _utoa
    27A2: 38 FA    ADD   SP,0xFA
    27A4: 62 D0 00 MOV   REG[0xD0],0x0
    27A7: 52 FA    MOV   A,[X-6]
    27A9: 53 7B    MOV   [__r1],A
    27AB: 52 F9    MOV   A,[X-7]
    27AD: 10       PUSH  X
    27AE: 58 7B    MOV   X,[__r1]
    27B0: 28       ROMX  
    27B1: 20       POP   X
    27B2: 39 58    CMP   A,0x58
    27B4: B0 4C    JNZ   0x2801
    27B6: 56 01 59 MOV   [X+1],0x59
    27B9: 56 00 00 MOV   [X+0],0x0
    27BC: 80 33    JMP   0x27F0
    27BE: 62 D0 00 MOV   REG[0xD0],0x0
    27C1: 52 01    MOV   A,[X+1]
    27C3: 53 7B    MOV   [__r1],A
    27C5: 52 00    MOV   A,[X+0]
    27C7: 60 D4    MOV   REG[0xD4],A
    27C9: 3E 7B    MVI   A,[__r1]
    27CB: 53 7B    MOV   [__r1],A
    27CD: 50 00    MOV   A,0x0
    27CF: 08       PUSH  A
    27D0: 51 7B    MOV   A,[__r1]
    27D2: 08       PUSH  A
    27D3: 7C 23 9F LCALL _toupper
    27D6: 38 FE    ADD   SP,0xFE
    27D8: 62 D0 00 MOV   REG[0xD0],0x0
    27DB: 51 7B    MOV   A,[__r1]
    27DD: 53 7C    MOV   [__r0],A
    27DF: 52 01    MOV   A,[X+1]
    27E1: 53 79    MOV   [__r3],A
    27E3: 52 00    MOV   A,[X+0]
    27E5: 60 D5    MOV   REG[0xD5],A
    27E7: 51 7C    MOV   A,[__r0]
    27E9: 3F 79    MVI   [__r3],A
    27EB: 77 01    INC   [X+1]
    27ED: 0F 00 00 ADC   [X+0],0x0
    27F0: 62 D0 00 MOV   REG[0xD0],0x0
    27F3: 52 01    MOV   A,[X+1]
    27F5: 53 7B    MOV   [__r1],A
    27F7: 52 00    MOV   A,[X+0]
    27F9: 60 D4    MOV   REG[0xD4],A
    27FB: 3E 7B    MVI   A,[__r1]
    27FD: 39 00    CMP   A,0x0
    27FF: BF BE    JNZ   0x27BE
    2801: 56 01 59 MOV   [X+1],0x59
    2804: 56 00 00 MOV   [X+0],0x0
    2807: 80 D2    JMP   0x28DA
    2809: 07 F8 FE ADD   [X-8],0xFE
    280C: 0F F7 FF ADC   [X-9],0xFF
    280F: 62 D0 00 MOV   REG[0xD0],0x0
    2812: 52 F8    MOV   A,[X-8]
    2814: 53 7B    MOV   [__r1],A
    2816: 52 F7    MOV   A,[X-9]
    2818: 60 D4    MOV   REG[0xD4],A
    281A: 3E 7B    MVI   A,[__r1]
    281C: 3E 7B    MVI   A,[__r1]
    281E: 54 0D    MOV   [X+13],A
    2820: 10       PUSH  X
    2821: 52 0D    MOV   A,[X+13]
    2823: 08       PUSH  A
    2824: 52 FC    MOV   A,[X-4]
    2826: 53 7B    MOV   [__r1],A
    2828: 52 FB    MOV   A,[X-5]
    282A: 58 7B    MOV   X,[__r1]
    282C: 7C 18 1A LCALL __plcall
    282F: 38 FF    ADD   SP,0xFF
    2831: 20       POP   X
    2832: 77 05    INC   [X+5]
    2834: 0F 04 00 ADC   [X+4],0x0
    2837: 81 05    JMP   0x293D
    2839: 07 F8 FE ADD   [X-8],0xFE
    283C: 0F F7 FF ADC   [X-9],0xFF
    283F: 62 D0 00 MOV   REG[0xD0],0x0
    2842: 52 F8    MOV   A,[X-8]
    2844: 53 7B    MOV   [__r1],A
    2846: 52 F7    MOV   A,[X-9]
    2848: 60 D4    MOV   REG[0xD4],A
    284A: 3E 7B    MVI   A,[__r1]
    284C: 54 02    MOV   [X+2],A
    284E: 3E 7B    MVI   A,[__r1]
    2850: 54 03    MOV   [X+3],A
    2852: 3D 08 2D CMP   [X+8],0x2D
    2855: B0 45    JNZ   0x289B
    2857: 10       PUSH  X
    2858: 50 2D    MOV   A,0x2D
    285A: 08       PUSH  A
    285B: 62 D0 00 MOV   REG[0xD0],0x0
    285E: 52 FC    MOV   A,[X-4]
    2860: 53 7B    MOV   [__r1],A
    2862: 52 FB    MOV   A,[X-5]
    2864: 58 7B    MOV   X,[__r1]
    2866: 7C 18 1A LCALL __plcall
    2869: 38 FF    ADD   SP,0xFF
    286B: 20       POP   X
    286C: 77 05    INC   [X+5]
    286E: 0F 04 00 ADC   [X+4],0x0
    2871: 80 29    JMP   0x289B
    2873: 62 D0 00 MOV   REG[0xD0],0x0
    2876: 52 03    MOV   A,[X+3]
    2878: 53 7B    MOV   [__r1],A
    287A: 52 02    MOV   A,[X+2]
    287C: 10       PUSH  X
    287D: 58 7B    MOV   X,[__r1]
    287F: 28       ROMX  
    2880: 20       POP   X
    2881: 10       PUSH  X
    2882: 08       PUSH  A
    2883: 52 FC    MOV   A,[X-4]
    2885: 53 7B    MOV   [__r1],A
    2887: 52 FB    MOV   A,[X-5]
    2889: 58 7B    MOV   X,[__r1]
    288B: 7C 18 1A LCALL __plcall
    288E: 38 FF    ADD   SP,0xFF
    2890: 20       POP   X
    2891: 77 05    INC   [X+5]
    2893: 0F 04 00 ADC   [X+4],0x0
    2896: 77 03    INC   [X+3]
    2898: 0F 02 00 ADC   [X+2],0x0
    289B: 62 D0 00 MOV   REG[0xD0],0x0
    289E: 52 03    MOV   A,[X+3]
    28A0: 53 7B    MOV   [__r1],A
    28A2: 52 02    MOV   A,[X+2]
    28A4: 10       PUSH  X
    28A5: 58 7B    MOV   X,[__r1]
    28A7: 28       ROMX  
    28A8: 20       POP   X
    28A9: 39 00    CMP   A,0x0
    28AB: BF C7    JNZ   0x2873
    28AD: 80 8F    JMP   0x293D
    28AF: 07 F8 FE ADD   [X-8],0xFE
    28B2: 0F F7 FF ADC   [X-9],0xFF
    28B5: 62 D0 00 MOV   REG[0xD0],0x0
    28B8: 52 F8    MOV   A,[X-8]
    28BA: 53 7B    MOV   [__r1],A
    28BC: 52 F7    MOV   A,[X-9]
    28BE: 60 D4    MOV   REG[0xD4],A
    28C0: 3E 7B    MVI   A,[__r1]
    28C2: 54 00    MOV   [X+0],A
    28C4: 3E 7B    MVI   A,[__r1]
    28C6: 54 01    MOV   [X+1],A
    28C8: 3D 00 00 CMP   [X+0],0x0
    28CB: B0 0E    JNZ   0x28DA
    28CD: 3D 01 00 CMP   [X+1],0x0
    28D0: B0 09    JNZ   0x28DA
    28D2: 56 03 AB MOV   [X+3],0xAB
    28D5: 56 02 06 MOV   [X+2],0x6
    28D8: 8F 79    JMP   0x2852
    28DA: 3D 08 2D CMP   [X+8],0x2D
    28DD: B0 44    JNZ   0x2922
    28DF: 10       PUSH  X
    28E0: 50 2D    MOV   A,0x2D
    28E2: 08       PUSH  A
    28E3: 62 D0 00 MOV   REG[0xD0],0x0
    28E6: 52 FC    MOV   A,[X-4]
    28E8: 53 7B    MOV   [__r1],A
    28EA: 52 FB    MOV   A,[X-5]
    28EC: 58 7B    MOV   X,[__r1]
    28EE: 7C 18 1A LCALL __plcall
    28F1: 38 FF    ADD   SP,0xFF
    28F3: 20       POP   X
    28F4: 77 05    INC   [X+5]
    28F6: 0F 04 00 ADC   [X+4],0x0
    28F9: 80 28    JMP   0x2922
    28FB: 62 D0 00 MOV   REG[0xD0],0x0
    28FE: 52 01    MOV   A,[X+1]
    2900: 53 7B    MOV   [__r1],A
    2902: 52 00    MOV   A,[X+0]
    2904: 60 D4    MOV   REG[0xD4],A
    2906: 3E 7B    MVI   A,[__r1]
    2908: 10       PUSH  X
    2909: 08       PUSH  A
    290A: 52 FC    MOV   A,[X-4]
    290C: 53 7B    MOV   [__r1],A
    290E: 52 FB    MOV   A,[X-5]
    2910: 58 7B    MOV   X,[__r1]
    2912: 7C 18 1A LCALL __plcall
    2915: 38 FF    ADD   SP,0xFF
    2917: 20       POP   X
    2918: 77 05    INC   [X+5]
    291A: 0F 04 00 ADC   [X+4],0x0
    291D: 77 01    INC   [X+1]
    291F: 0F 00 00 ADC   [X+0],0x0
    2922: 62 D0 00 MOV   REG[0xD0],0x0
    2925: 52 01    MOV   A,[X+1]
    2927: 53 7B    MOV   [__r1],A
    2929: 52 00    MOV   A,[X+0]
    292B: 60 D4    MOV   REG[0xD4],A
    292D: 3E 7B    MVI   A,[__r1]
    292F: 39 00    CMP   A,0x0
    2931: BF C9    JNZ   0x28FB
    2933: 80 09    JMP   0x293D
    2935: 56 03 BD MOV   [X+3],0xBD
    2938: 56 02 06 MOV   [X+2],0x6
    293B: 8F 16    JMP   0x2852
    293D: 77 FA    INC   [X-6]
    293F: 0F F9 00 ADC   [X-7],0x0
    2942: 62 D0 00 MOV   REG[0xD0],0x0
    2945: 52 FA    MOV   A,[X-6]
    2947: 53 7B    MOV   [__r1],A
    2949: 52 F9    MOV   A,[X-7]
    294B: 10       PUSH  X
    294C: 58 7B    MOV   X,[__r1]
    294E: 28       ROMX  
    294F: 20       POP   X
    2950: 39 00    CMP   A,0x0
    2952: BC 29    JNZ   0x257C
    2954: 52 05    MOV   A,[X+5]
    2956: 53 7B    MOV   [__r1],A
    2958: 52 04    MOV   A,[X+4]
    295A: 53 7C    MOV   [__r0],A
    295C: 38 EF    ADD   SP,0xEF
    295E: 20       POP   X
    295F: 7F       RET   
    2960: 10       PUSH  X
    2961: 4F       MOV   X,SP
    2962: 38 04    ADD   SP,0x4
    2964: 80 06    JMP   0x296B
    2966: 77 FC    INC   [X-4]
    2968: 0F FB 00 ADC   [X-5],0x0
    296B: 62 D0 00 MOV   REG[0xD0],0x0
    296E: 52 FC    MOV   A,[X-4]
    2970: 53 7B    MOV   [__r1],A
    2972: 52 FB    MOV   A,[X-5]
    2974: 10       PUSH  X
    2975: 58 7B    MOV   X,[__r1]
    2977: 28       ROMX  
    2978: 20       POP   X
    2979: 53 7B    MOV   [__r1],A
    297B: 50 00    MOV   A,0x0
    297D: 08       PUSH  A
    297E: 51 7B    MOV   A,[__r1]
    2980: 08       PUSH  A
    2981: 7C 23 3C LCALL _isspace
    2984: 38 FE    ADD   SP,0xFE
    2986: 62 D0 00 MOV   REG[0xD0],0x0
    2989: 3C 7C 00 CMP   [__r0],0x0
    298C: BF D9    JNZ   0x2966
    298E: 3C 7B 00 CMP   [__r1],0x0
    2991: BF D4    JNZ   0x2966
    2993: 56 03 00 MOV   [X+3],0x0
    2996: 56 02 00 MOV   [X+2],0x0
    2999: 62 D0 00 MOV   REG[0xD0],0x0
    299C: 52 FC    MOV   A,[X-4]
    299E: 53 7B    MOV   [__r1],A
    29A0: 52 FB    MOV   A,[X-5]
    29A2: 10       PUSH  X
    29A3: 58 7B    MOV   X,[__r1]
    29A5: 28       ROMX  
    29A6: 20       POP   X
    29A7: 39 2D    CMP   A,0x2D
    29A9: B0 0E    JNZ   0x29B8
    29AB: 56 03 01 MOV   [X+3],0x1
    29AE: 56 02 00 MOV   [X+2],0x0
    29B1: 77 FC    INC   [X-4]
    29B3: 0F FB 00 ADC   [X-5],0x0
    29B6: 80 18    JMP   0x29CF
    29B8: 62 D0 00 MOV   REG[0xD0],0x0
    29BB: 52 FC    MOV   A,[X-4]
    29BD: 53 7B    MOV   [__r1],A
    29BF: 52 FB    MOV   A,[X-5]
    29C1: 10       PUSH  X
    29C2: 58 7B    MOV   X,[__r1]
    29C4: 28       ROMX  
    29C5: 20       POP   X
    29C6: 39 2B    CMP   A,0x2B
    29C8: B0 06    JNZ   0x29CF
    29CA: 77 FC    INC   [X-4]
    29CC: 0F FB 00 ADC   [X-5],0x0
    29CF: 56 01 00 MOV   [X+1],0x0
    29D2: 56 00 00 MOV   [X+0],0x0
    29D5: 80 7C    JMP   0x2A52
    29D7: 62 D0 00 MOV   REG[0xD0],0x0
    29DA: 52 FC    MOV   A,[X-4]
    29DC: 53 7B    MOV   [__r1],A
    29DE: 52 FB    MOV   A,[X-5]
    29E0: 53 7C    MOV   [__r0],A
    29E2: 51 7B    MOV   A,[__r1]
    29E4: 01 01    ADD   A,0x1
    29E6: 54 FC    MOV   [X-4],A
    29E8: 51 7C    MOV   A,[__r0]
    29EA: 09 00    ADC   A,0x0
    29EC: 54 FB    MOV   [X-5],A
    29EE: 52 01    MOV   A,[X+1]
    29F0: 53 79    MOV   [__r3],A
    29F2: 52 00    MOV   A,[X+0]
    29F4: 53 7A    MOV   [__r2],A
    29F6: 55 77 0A MOV   [__r5],0xA
    29F9: 55 78 00 MOV   [__r4],0x0
    29FC: 55 74 00 MOV   [__rX],0x0
    29FF: 55 73 00 MOV   [__rY],0x0
    2A02: 3C 78 00 CMP   [__r4],0x0
    2A05: B0 06    JNZ   0x2A0C
    2A07: 3C 77 00 CMP   [__r5],0x0
    2A0A: A0 1A    JZ    0x2A25
    2A0C: 70 FB    AND   F,0xFB
    2A0E: 6E 78    RRC   [__r4]
    2A10: 6E 77    RRC   [__r5]
    2A12: D0 0C    JNC   0x2A1F
    2A14: 62 D0 00 MOV   REG[0xD0],0x0
    2A17: 51 79    MOV   A,[__r3]
    2A19: 04 74    ADD   [__rX],A
    2A1B: 51 7A    MOV   A,[__r2]
    2A1D: 0C 73    ADC   [__rY],A
    2A1F: 65 79    ASL   [__r3]
    2A21: 6B 7A    RLC   [__r2]
    2A23: 8F DE    JMP   0x2A02
    2A25: 5F 79 74 MOV   [__r3],[__rX]
    2A28: 5F 7A 73 MOV   [__r2],[__rY]
    2A2B: 62 D0 00 MOV   REG[0xD0],0x0
    2A2E: 51 7C    MOV   A,[__r0]
    2A30: 10       PUSH  X
    2A31: 58 7B    MOV   X,[__r1]
    2A33: 28       ROMX  
    2A34: 20       POP   X
    2A35: 53 7B    MOV   [__r1],A
    2A37: 55 7C 00 MOV   [__r0],0x0
    2A3A: 51 79    MOV   A,[__r3]
    2A3C: 02 7B    ADD   A,[__r1]
    2A3E: 53 7B    MOV   [__r1],A
    2A40: 51 7A    MOV   A,[__r2]
    2A42: 0A 7C    ADC   A,[__r0]
    2A44: 53 7C    MOV   [__r0],A
    2A46: 51 7B    MOV   A,[__r1]
    2A48: 11 30    SUB   A,0x30
    2A4A: 54 01    MOV   [X+1],A
    2A4C: 51 7C    MOV   A,[__r0]
    2A4E: 19 00    SBB   A,0x0
    2A50: 54 00    MOV   [X+0],A
    2A52: 62 D0 00 MOV   REG[0xD0],0x0
    2A55: 52 FC    MOV   A,[X-4]
    2A57: 53 7B    MOV   [__r1],A
    2A59: 52 FB    MOV   A,[X-5]
    2A5B: 10       PUSH  X
    2A5C: 58 7B    MOV   X,[__r1]
    2A5E: 28       ROMX  
    2A5F: 20       POP   X
    2A60: 53 7B    MOV   [__r1],A
    2A62: 50 00    MOV   A,0x0
    2A64: 08       PUSH  A
    2A65: 51 7B    MOV   A,[__r1]
    2A67: 08       PUSH  A
    2A68: 7C 22 FA LCALL _isdigit
    2A6B: 38 FE    ADD   SP,0xFE
    2A6D: 62 D0 00 MOV   REG[0xD0],0x0
    2A70: 3C 7C 00 CMP   [__r0],0x0
    2A73: BF 63    JNZ   0x29D7
    2A75: 3C 7B 00 CMP   [__r1],0x0
    2A78: BF 5E    JNZ   0x29D7
    2A7A: 3D 02 00 CMP   [X+2],0x0
    2A7D: B0 06    JNZ   0x2A84
    2A7F: 3D 03 00 CMP   [X+3],0x0
    2A82: A0 14    JZ    0x2A97
    2A84: 62 D0 00 MOV   REG[0xD0],0x0
    2A87: 52 01    MOV   A,[X+1]
    2A89: 73       CPL   A
    2A8A: 11 FF    SUB   A,0xFF
    2A8C: 53 7B    MOV   [__r1],A
    2A8E: 52 00    MOV   A,[X+0]
    2A90: 73       CPL   A
    2A91: 19 FF    SBB   A,0xFF
    2A93: 53 7C    MOV   [__r0],A
    2A95: 80 0C    JMP   0x2AA2
    2A97: 62 D0 00 MOV   REG[0xD0],0x0
    2A9A: 52 01    MOV   A,[X+1]
    2A9C: 53 7B    MOV   [__r1],A
    2A9E: 52 00    MOV   A,[X+0]
    2AA0: 53 7C    MOV   [__r0],A
    2AA2: 38 FC    ADD   SP,0xFC
    2AA4: 20       POP   X
    2AA5: 7F       RET   
    2AA6: 10       PUSH  X
    2AA7: 4F       MOV   X,SP
    2AA8: 38 04    ADD   SP,0x4
    2AAA: 56 03 00 MOV   [X+3],0x0
    2AAD: 56 02 00 MOV   [X+2],0x0
    2AB0: 80 59    JMP   0x2B0A
    2AB2: 52 00    MOV   A,[X+0]
    2AB4: 08       PUSH  A
    2AB5: 52 01    MOV   A,[X+1]
    2AB7: 08       PUSH  A
    2AB8: 7C 23 3C LCALL _isspace
    2ABB: 38 FE    ADD   SP,0xFE
    2ABD: 62 D0 00 MOV   REG[0xD0],0x0
    2AC0: 3C 7C 00 CMP   [__r0],0x0
    2AC3: B0 06    JNZ   0x2ACA
    2AC5: 3C 7B 00 CMP   [__r1],0x0
    2AC8: A0 18    JZ    0x2AE1
    2ACA: 62 D0 00 MOV   REG[0xD0],0x0
    2ACD: 52 01    MOV   A,[X+1]
    2ACF: 10       PUSH  X
    2AD0: 08       PUSH  A
    2AD1: 52 F8    MOV   A,[X-8]
    2AD3: 53 7B    MOV   [__r1],A
    2AD5: 52 F7    MOV   A,[X-9]
    2AD7: 58 7B    MOV   X,[__r1]
    2AD9: 7C 18 1A LCALL __plcall
    2ADC: 38 FF    ADD   SP,0xFF
    2ADE: 20       POP   X
    2ADF: 80 50    JMP   0x2B30
    2AE1: 62 D0 00 MOV   REG[0xD0],0x0
    2AE4: 52 FC    MOV   A,[X-4]
    2AE6: 53 7B    MOV   [__r1],A
    2AE8: 52 FB    MOV   A,[X-5]
    2AEA: 53 7C    MOV   [__r0],A
    2AEC: 51 7B    MOV   A,[__r1]
    2AEE: 01 01    ADD   A,0x1
    2AF0: 54 FC    MOV   [X-4],A
    2AF2: 51 7C    MOV   A,[__r0]
    2AF4: 09 00    ADC   A,0x0
    2AF6: 54 FB    MOV   [X-5],A
    2AF8: 52 01    MOV   A,[X+1]
    2AFA: 53 7A    MOV   [__r2],A
    2AFC: 51 7C    MOV   A,[__r0]
    2AFE: 60 D5    MOV   REG[0xD5],A
    2B00: 51 7A    MOV   A,[__r2]
    2B02: 3F 7B    MVI   [__r1],A
    2B04: 56 03 01 MOV   [X+3],0x1
    2B07: 56 02 00 MOV   [X+2],0x0
    2B0A: 62 D0 00 MOV   REG[0xD0],0x0
    2B0D: 52 FA    MOV   A,[X-6]
    2B0F: 53 7B    MOV   [__r1],A
    2B11: 52 F9    MOV   A,[X-7]
    2B13: 10       PUSH  X
    2B14: 58 7B    MOV   X,[__r1]
    2B16: 7C 18 1A LCALL __plcall
    2B19: 62 D0 00 MOV   REG[0xD0],0x0
    2B1C: 20       POP   X
    2B1D: 53 7B    MOV   [__r1],A
    2B1F: 55 7C 00 MOV   [__r0],0x0
    2B22: 54 01    MOV   [X+1],A
    2B24: 56 00 00 MOV   [X+0],0x0
    2B27: 3C 7C 00 CMP   [__r0],0x0
    2B2A: BF 87    JNZ   0x2AB2
    2B2C: 39 00    CMP   A,0x0
    2B2E: BF 83    JNZ   0x2AB2
    2B30: 62 D0 00 MOV   REG[0xD0],0x0
    2B33: 52 FC    MOV   A,[X-4]
    2B35: 53 7B    MOV   [__r1],A
    2B37: 52 FB    MOV   A,[X-5]
    2B39: 60 D5    MOV   REG[0xD5],A
    2B3B: 50 00    MOV   A,0x0
    2B3D: 3F 7B    MVI   [__r1],A
    2B3F: 62 D0 00 MOV   REG[0xD0],0x0
    2B42: 52 03    MOV   A,[X+3]
    2B44: 04 88    ADD   [main.c:rubout+11],A
    2B46: 52 02    MOV   A,[X+2]
    2B48: 0C 87    ADC   [main.c:rubout+10],A
    2B4A: 38 FC    ADD   SP,0xFC
    2B4C: 20       POP   X
    2B4D: 7F       RET   
    2B4E: 10       PUSH  X
    2B4F: 4F       MOV   X,SP
    2B50: 38 04    ADD   SP,0x4
    2B52: 56 03 00 MOV   [X+3],0x0
    2B55: 56 02 00 MOV   [X+2],0x0
    2B58: 80 E1    JMP   0x2C3A
    2B5A: 3D F5 00 CMP   [X-11],0x0
    2B5D: B0 35    JNZ   0x2B93
    2B5F: 3D F6 10 CMP   [X-10],0x10
    2B62: B0 30    JNZ   0x2B93
    2B64: 52 00    MOV   A,[X+0]
    2B66: 08       PUSH  A
    2B67: 52 01    MOV   A,[X+1]
    2B69: 08       PUSH  A
    2B6A: 7C 23 7E LCALL _isxdigit
    2B6D: 38 FE    ADD   SP,0xFE
    2B6F: 62 D0 00 MOV   REG[0xD0],0x0
    2B72: 3C 7C 00 CMP   [__r0],0x0
    2B75: B0 9B    JNZ   0x2C11
    2B77: 3C 7B 00 CMP   [__r1],0x0
    2B7A: B0 96    JNZ   0x2C11
    2B7C: 62 D0 00 MOV   REG[0xD0],0x0
    2B7F: 52 01    MOV   A,[X+1]
    2B81: 10       PUSH  X
    2B82: 08       PUSH  A
    2B83: 52 F8    MOV   A,[X-8]
    2B85: 53 7B    MOV   [__r1],A
    2B87: 52 F7    MOV   A,[X-9]
    2B89: 58 7B    MOV   X,[__r1]
    2B8B: 7C 18 1A LCALL __plcall
    2B8E: 38 FF    ADD   SP,0xFF
    2B90: 20       POP   X
    2B91: 80 CE    JMP   0x2C60
    2B93: 3D F5 00 CMP   [X-11],0x0
    2B96: B0 41    JNZ   0x2BD8
    2B98: 3D F6 08 CMP   [X-10],0x8
    2B9B: B0 3C    JNZ   0x2BD8
    2B9D: 52 00    MOV   A,[X+0]
    2B9F: 08       PUSH  A
    2BA0: 52 01    MOV   A,[X+1]
    2BA2: 08       PUSH  A
    2BA3: 7C 22 FA LCALL _isdigit
    2BA6: 38 FE    ADD   SP,0xFE
    2BA8: 62 D0 00 MOV   REG[0xD0],0x0
    2BAB: 3C 7C 00 CMP   [__r0],0x0
    2BAE: B0 06    JNZ   0x2BB5
    2BB0: 3C 7B 00 CMP   [__r1],0x0
    2BB3: A0 0D    JZ    0x2BC1
    2BB5: 52 01    MOV   A,[X+1]
    2BB7: 11 38    SUB   A,0x38
    2BB9: 52 00    MOV   A,[X+0]
    2BBB: 31 80    XOR   A,0x80
    2BBD: 19 80    SBB   A,0x80
    2BBF: C0 51    JC    0x2C11
    2BC1: 62 D0 00 MOV   REG[0xD0],0x0
    2BC4: 52 01    MOV   A,[X+1]
    2BC6: 10       PUSH  X
    2BC7: 08       PUSH  A
    2BC8: 52 F8    MOV   A,[X-8]
    2BCA: 53 7B    MOV   [__r1],A
    2BCC: 52 F7    MOV   A,[X-9]
    2BCE: 58 7B    MOV   X,[__r1]
    2BD0: 7C 18 1A LCALL __plcall
    2BD3: 38 FF    ADD   SP,0xFF
    2BD5: 20       POP   X
    2BD6: 80 89    JMP   0x2C60
    2BD8: 52 00    MOV   A,[X+0]
    2BDA: 08       PUSH  A
    2BDB: 52 01    MOV   A,[X+1]
    2BDD: 08       PUSH  A
    2BDE: 7C 22 FA LCALL _isdigit
    2BE1: 38 FE    ADD   SP,0xFE
    2BE3: 62 D0 00 MOV   REG[0xD0],0x0
    2BE6: 3C 7C 00 CMP   [__r0],0x0
    2BE9: B0 27    JNZ   0x2C11
    2BEB: 3C 7B 00 CMP   [__r1],0x0
    2BEE: B0 22    JNZ   0x2C11
    2BF0: 3D 00 00 CMP   [X+0],0x0
    2BF3: B0 06    JNZ   0x2BFA
    2BF5: 3D 01 2D CMP   [X+1],0x2D
    2BF8: A0 18    JZ    0x2C11
    2BFA: 62 D0 00 MOV   REG[0xD0],0x0
    2BFD: 52 01    MOV   A,[X+1]
    2BFF: 10       PUSH  X
    2C00: 08       PUSH  A
    2C01: 52 F8    MOV   A,[X-8]
    2C03: 53 7B    MOV   [__r1],A
    2C05: 52 F7    MOV   A,[X-9]
    2C07: 58 7B    MOV   X,[__r1]
    2C09: 7C 18 1A LCALL __plcall
    2C0C: 38 FF    ADD   SP,0xFF
    2C0E: 20       POP   X
    2C0F: 80 50    JMP   0x2C60
    2C11: 62 D0 00 MOV   REG[0xD0],0x0
    2C14: 52 FC    MOV   A,[X-4]
    2C16: 53 7B    MOV   [__r1],A
    2C18: 52 FB    MOV   A,[X-5]
    2C1A: 53 7C    MOV   [__r0],A
    2C1C: 51 7B    MOV   A,[__r1]
    2C1E: 01 01    ADD   A,0x1
    2C20: 54 FC    MOV   [X-4],A
    2C22: 51 7C    MOV   A,[__r0]
    2C24: 09 00    ADC   A,0x0
    2C26: 54 FB    MOV   [X-5],A
    2C28: 52 01    MOV   A,[X+1]
    2C2A: 53 7A    MOV   [__r2],A
    2C2C: 51 7C    MOV   A,[__r0]
    2C2E: 60 D5    MOV   REG[0xD5],A
    2C30: 51 7A    MOV   A,[__r2]
    2C32: 3F 7B    MVI   [__r1],A
    2C34: 56 03 01 MOV   [X+3],0x1
    2C37: 56 02 00 MOV   [X+2],0x0
    2C3A: 62 D0 00 MOV   REG[0xD0],0x0
    2C3D: 52 FA    MOV   A,[X-6]
    2C3F: 53 7B    MOV   [__r1],A
    2C41: 52 F9    MOV   A,[X-7]
    2C43: 10       PUSH  X
    2C44: 58 7B    MOV   X,[__r1]
    2C46: 7C 18 1A LCALL __plcall
    2C49: 62 D0 00 MOV   REG[0xD0],0x0
    2C4C: 20       POP   X
    2C4D: 53 7B    MOV   [__r1],A
    2C4F: 55 7C 00 MOV   [__r0],0x0
    2C52: 54 01    MOV   [X+1],A
    2C54: 56 00 00 MOV   [X+0],0x0
    2C57: 3C 7C 00 CMP   [__r0],0x0
    2C5A: BE FF    JNZ   0x2B5A
    2C5C: 39 00    CMP   A,0x0
    2C5E: BE FB    JNZ   0x2B5A
    2C60: 62 D0 00 MOV   REG[0xD0],0x0
    2C63: 52 FC    MOV   A,[X-4]
    2C65: 53 7B    MOV   [__r1],A
    2C67: 52 FB    MOV   A,[X-5]
    2C69: 60 D5    MOV   REG[0xD5],A
    2C6B: 50 00    MOV   A,0x0
    2C6D: 3F 7B    MVI   [__r1],A
    2C6F: 62 D0 00 MOV   REG[0xD0],0x0
    2C72: 52 03    MOV   A,[X+3]
    2C74: 04 88    ADD   [main.c:rubout+11],A
    2C76: 52 02    MOV   A,[X+2]
    2C78: 0C 87    ADC   [main.c:rubout+10],A
    2C7A: 38 FC    ADD   SP,0xFC
    2C7C: 20       POP   X
    2C7D: 7F       RET   
__cscanf:
    2C7E: 10       PUSH  X
    2C7F: 4F       MOV   X,SP
    2C80: 38 15    ADD   SP,0x15
    2C82: 62 D0 00 MOV   REG[0xD0],0x0
    2C85: 55 88 00 MOV   [main.c:rubout+11],0x0
    2C88: 55 87 00 MOV   [main.c:rubout+10],0x0
    2C8B: 83 12    JMP   0x2F9E
    2C8D: 3D 00 00 CMP   [X+0],0x0
    2C90: B2 7D    JNZ   0x2F0E
    2C92: 3D 01 25 CMP   [X+1],0x25
    2C95: B2 78    JNZ   0x2F0E
    2C97: 62 D0 00 MOV   REG[0xD0],0x0
    2C9A: 52 F8    MOV   A,[X-8]
    2C9C: 53 7B    MOV   [__r1],A
    2C9E: 52 F7    MOV   A,[X-9]
    2CA0: 10       PUSH  X
    2CA1: 58 7B    MOV   X,[__r1]
    2CA3: 28       ROMX  
    2CA4: 20       POP   X
    2CA5: 39 6C    CMP   A,0x6C
    2CA7: B0 0E    JNZ   0x2CB6
    2CA9: 56 05 01 MOV   [X+5],0x1
    2CAC: 56 04 00 MOV   [X+4],0x0
    2CAF: 77 F8    INC   [X-8]
    2CB1: 0F F7 00 ADC   [X-9],0x0
    2CB4: 80 07    JMP   0x2CBC
    2CB6: 56 05 00 MOV   [X+5],0x0
    2CB9: 56 04 00 MOV   [X+4],0x0
    2CBC: 07 F6 FE ADD   [X-10],0xFE
    2CBF: 0F F5 FF ADC   [X-11],0xFF
    2CC2: 62 D0 00 MOV   REG[0xD0],0x0
    2CC5: 52 F6    MOV   A,[X-10]
    2CC7: 53 7B    MOV   [__r1],A
    2CC9: 52 F5    MOV   A,[X-11]
    2CCB: 60 D4    MOV   REG[0xD4],A
    2CCD: 3E 7B    MVI   A,[__r1]
    2CCF: 54 02    MOV   [X+2],A
    2CD1: 3E 7B    MVI   A,[__r1]
    2CD3: 54 03    MOV   [X+3],A
    2CD5: 52 F8    MOV   A,[X-8]
    2CD7: 53 7B    MOV   [__r1],A
    2CD9: 52 F7    MOV   A,[X-9]
    2CDB: 10       PUSH  X
    2CDC: 58 7B    MOV   X,[__r1]
    2CDE: 28       ROMX  
    2CDF: 20       POP   X
    2CE0: 54 14    MOV   [X+20],A
    2CE2: 56 13 00 MOV   [X+19],0x0
    2CE5: 3D 13 00 CMP   [X+19],0x0
    2CE8: B0 06    JNZ   0x2CEF
    2CEA: 3D 14 63 CMP   [X+20],0x63
    2CED: A0 56    JZ    0x2D44
    2CEF: 52 14    MOV   A,[X+20]
    2CF1: 11 64    SUB   A,0x64
    2CF3: 62 D0 00 MOV   REG[0xD0],0x0
    2CF6: 53 73    MOV   [__rY],A
    2CF8: 52 13    MOV   A,[X+19]
    2CFA: 31 80    XOR   A,0x80
    2CFC: 19 80    SBB   A,0x80
    2CFE: 2A 73    OR    A,[__rY]
    2D00: A1 2E    JZ    0x2E2F
    2D02: D0 0D    JNC   0x2D10
    2D04: 3D 13 00 CMP   [X+19],0x0
    2D07: B0 06    JNZ   0x2D0E
    2D09: 3D 14 58 CMP   [X+20],0x58
    2D0C: A0 72    JZ    0x2D7F
    2D0E: 81 ED    JMP   0x2EFC
    2D10: 3D 13 00 CMP   [X+19],0x0
    2D13: B0 06    JNZ   0x2D1A
    2D15: 3D 14 6F CMP   [X+20],0x6F
    2D18: A0 56    JZ    0x2D6F
    2D1A: 3D 13 00 CMP   [X+19],0x0
    2D1D: B0 06    JNZ   0x2D24
    2D1F: 3D 14 70 CMP   [X+20],0x70
    2D22: A0 5C    JZ    0x2D7F
    2D24: 3D 13 00 CMP   [X+19],0x0
    2D27: B0 06    JNZ   0x2D2E
    2D29: 3D 14 73 CMP   [X+20],0x73
    2D2C: A1 AC    JZ    0x2ED9
    2D2E: 3D 13 00 CMP   [X+19],0x0
    2D31: B0 06    JNZ   0x2D38
    2D33: 3D 14 75 CMP   [X+20],0x75
    2D36: A0 40    JZ    0x2D77
    2D38: 3D 13 00 CMP   [X+19],0x0
    2D3B: B0 06    JNZ   0x2D42
    2D3D: 3D 14 78 CMP   [X+20],0x78
    2D40: A0 3E    JZ    0x2D7F
    2D42: 81 B9    JMP   0x2EFC
    2D44: 62 D0 00 MOV   REG[0xD0],0x0
    2D47: 52 FC    MOV   A,[X-4]
    2D49: 53 7B    MOV   [__r1],A
    2D4B: 52 FB    MOV   A,[X-5]
    2D4D: 10       PUSH  X
    2D4E: 58 7B    MOV   X,[__r1]
    2D50: 7C 18 1A LCALL __plcall
    2D53: 62 D0 00 MOV   REG[0xD0],0x0
    2D56: 53 7C    MOV   [__r0],A
    2D58: 20       POP   X
    2D59: 52 03    MOV   A,[X+3]
    2D5B: 53 79    MOV   [__r3],A
    2D5D: 52 02    MOV   A,[X+2]
    2D5F: 60 D5    MOV   REG[0xD5],A
    2D61: 51 7C    MOV   A,[__r0]
    2D63: 3F 79    MVI   [__r3],A
    2D65: 62 D0 00 MOV   REG[0xD0],0x0
    2D68: 76 88    INC   [main.c:rubout+11]
    2D6A: 0E 87 00 ADC   [main.c:rubout+10],0x0
    2D6D: 81 99    JMP   0x2F07
    2D6F: 56 07 08 MOV   [X+7],0x8
    2D72: 56 06 00 MOV   [X+6],0x0
    2D75: 80 0F    JMP   0x2D85
    2D77: 56 07 0A MOV   [X+7],0xA
    2D7A: 56 06 00 MOV   [X+6],0x0
    2D7D: 80 07    JMP   0x2D85
    2D7F: 56 07 10 MOV   [X+7],0x10
    2D82: 56 06 00 MOV   [X+6],0x0
    2D85: 52 06    MOV   A,[X+6]
    2D87: 08       PUSH  A
    2D88: 52 07    MOV   A,[X+7]
    2D8A: 08       PUSH  A
    2D8B: 62 D0 00 MOV   REG[0xD0],0x0
    2D8E: 52 FA    MOV   A,[X-6]
    2D90: 53 7B    MOV   [__r1],A
    2D92: 52 F9    MOV   A,[X-7]
    2D94: 08       PUSH  A
    2D95: 51 7B    MOV   A,[__r1]
    2D97: 08       PUSH  A
    2D98: 52 FC    MOV   A,[X-4]
    2D9A: 53 7B    MOV   [__r1],A
    2D9C: 52 FB    MOV   A,[X-5]
    2D9E: 08       PUSH  A
    2D9F: 51 7B    MOV   A,[__r1]
    2DA1: 08       PUSH  A
    2DA2: 5A 7B    MOV   [__r1],X
    2DA4: 06 7B 08 ADD   [__r1],0x8
    2DA7: 50 07    MOV   A,0x7
    2DA9: 08       PUSH  A
    2DAA: 51 7B    MOV   A,[__r1]
    2DAC: 08       PUSH  A
    2DAD: 9D 9F    CALL  0x2B4E
    2DAF: 38 F8    ADD   SP,0xF8
    2DB1: 3D 04 00 CMP   [X+4],0x0
    2DB4: B0 06    JNZ   0x2DBB
    2DB6: 3D 05 00 CMP   [X+5],0x0
    2DB9: A0 3B    JZ    0x2DF5
    2DBB: 52 06    MOV   A,[X+6]
    2DBD: 08       PUSH  A
    2DBE: 52 07    MOV   A,[X+7]
    2DC0: 08       PUSH  A
    2DC1: 50 00    MOV   A,0x0
    2DC3: 08       PUSH  A
    2DC4: 08       PUSH  A
    2DC5: 62 D0 00 MOV   REG[0xD0],0x0
    2DC8: 5A 7B    MOV   [__r1],X
    2DCA: 06 7B 08 ADD   [__r1],0x8
    2DCD: 50 07    MOV   A,0x7
    2DCF: 08       PUSH  A
    2DD0: 51 7B    MOV   A,[__r1]
    2DD2: 08       PUSH  A
    2DD3: 7C 1E 21 LCALL _strtoul
    2DD6: 38 FA    ADD   SP,0xFA
    2DD8: 62 D0 00 MOV   REG[0xD0],0x0
    2DDB: 52 03    MOV   A,[X+3]
    2DDD: 53 77    MOV   [__r5],A
    2DDF: 52 02    MOV   A,[X+2]
    2DE1: 60 D5    MOV   REG[0xD5],A
    2DE3: 51 7C    MOV   A,[__r0]
    2DE5: 3F 77    MVI   [__r5],A
    2DE7: 51 7B    MOV   A,[__r1]
    2DE9: 3F 77    MVI   [__r5],A
    2DEB: 51 7A    MOV   A,[__r2]
    2DED: 3F 77    MVI   [__r5],A
    2DEF: 51 79    MOV   A,[__r3]
    2DF1: 3F 77    MVI   [__r5],A
    2DF3: 81 13    JMP   0x2F07
    2DF5: 52 06    MOV   A,[X+6]
    2DF7: 08       PUSH  A
    2DF8: 52 07    MOV   A,[X+7]
    2DFA: 08       PUSH  A
    2DFB: 50 00    MOV   A,0x0
    2DFD: 08       PUSH  A
    2DFE: 08       PUSH  A
    2DFF: 62 D0 00 MOV   REG[0xD0],0x0
    2E02: 5A 7B    MOV   [__r1],X
    2E04: 06 7B 08 ADD   [__r1],0x8
    2E07: 50 07    MOV   A,0x7
    2E09: 08       PUSH  A
    2E0A: 51 7B    MOV   A,[__r1]
    2E0C: 08       PUSH  A
    2E0D: 7C 1E 21 LCALL _strtoul
    2E10: 38 FA    ADD   SP,0xFA
    2E12: 62 D0 00 MOV   REG[0xD0],0x0
    2E15: 51 79    MOV   A,[__r3]
    2E17: 53 7B    MOV   [__r1],A
    2E19: 51 7A    MOV   A,[__r2]
    2E1B: 53 7C    MOV   [__r0],A
    2E1D: 52 03    MOV   A,[X+3]
    2E1F: 53 79    MOV   [__r3],A
    2E21: 52 02    MOV   A,[X+2]
    2E23: 60 D5    MOV   REG[0xD5],A
    2E25: 51 7C    MOV   A,[__r0]
    2E27: 3F 79    MVI   [__r3],A
    2E29: 51 7B    MOV   A,[__r1]
    2E2B: 3F 79    MVI   [__r3],A
    2E2D: 80 D9    JMP   0x2F07
    2E2F: 50 00    MOV   A,0x0
    2E31: 08       PUSH  A
    2E32: 50 0A    MOV   A,0xA
    2E34: 08       PUSH  A
    2E35: 62 D0 00 MOV   REG[0xD0],0x0
    2E38: 52 FA    MOV   A,[X-6]
    2E3A: 53 7B    MOV   [__r1],A
    2E3C: 52 F9    MOV   A,[X-7]
    2E3E: 08       PUSH  A
    2E3F: 51 7B    MOV   A,[__r1]
    2E41: 08       PUSH  A
    2E42: 52 FC    MOV   A,[X-4]
    2E44: 53 7B    MOV   [__r1],A
    2E46: 52 FB    MOV   A,[X-5]
    2E48: 08       PUSH  A
    2E49: 51 7B    MOV   A,[__r1]
    2E4B: 08       PUSH  A
    2E4C: 5A 7B    MOV   [__r1],X
    2E4E: 06 7B 08 ADD   [__r1],0x8
    2E51: 50 07    MOV   A,0x7
    2E53: 08       PUSH  A
    2E54: 51 7B    MOV   A,[__r1]
    2E56: 08       PUSH  A
    2E57: 9C F5    CALL  0x2B4E
    2E59: 38 F8    ADD   SP,0xF8
    2E5B: 3D 04 00 CMP   [X+4],0x0
    2E5E: B0 06    JNZ   0x2E65
    2E60: 3D 05 00 CMP   [X+5],0x0
    2E63: A0 3B    JZ    0x2E9F
    2E65: 50 00    MOV   A,0x0
    2E67: 08       PUSH  A
    2E68: 50 0A    MOV   A,0xA
    2E6A: 08       PUSH  A
    2E6B: 50 00    MOV   A,0x0
    2E6D: 08       PUSH  A
    2E6E: 08       PUSH  A
    2E6F: 62 D0 00 MOV   REG[0xD0],0x0
    2E72: 5A 7B    MOV   [__r1],X
    2E74: 06 7B 08 ADD   [__r1],0x8
    2E77: 50 07    MOV   A,0x7
    2E79: 08       PUSH  A
    2E7A: 51 7B    MOV   A,[__r1]
    2E7C: 08       PUSH  A
    2E7D: 7C 19 FF LCALL _strtol
    2E80: 38 FA    ADD   SP,0xFA
    2E82: 62 D0 00 MOV   REG[0xD0],0x0
    2E85: 52 03    MOV   A,[X+3]
    2E87: 53 77    MOV   [__r5],A
    2E89: 52 02    MOV   A,[X+2]
    2E8B: 60 D5    MOV   REG[0xD5],A
    2E8D: 51 7C    MOV   A,[__r0]
    2E8F: 3F 77    MVI   [__r5],A
    2E91: 51 7B    MOV   A,[__r1]
    2E93: 3F 77    MVI   [__r5],A
    2E95: 51 7A    MOV   A,[__r2]
    2E97: 3F 77    MVI   [__r5],A
    2E99: 51 79    MOV   A,[__r3]
    2E9B: 3F 77    MVI   [__r5],A
    2E9D: 80 69    JMP   0x2F07
    2E9F: 50 00    MOV   A,0x0
    2EA1: 08       PUSH  A
    2EA2: 50 0A    MOV   A,0xA
    2EA4: 08       PUSH  A
    2EA5: 50 00    MOV   A,0x0
    2EA7: 08       PUSH  A
    2EA8: 08       PUSH  A
    2EA9: 62 D0 00 MOV   REG[0xD0],0x0
    2EAC: 5A 7B    MOV   [__r1],X
    2EAE: 06 7B 08 ADD   [__r1],0x8
    2EB1: 50 07    MOV   A,0x7
    2EB3: 08       PUSH  A
    2EB4: 51 7B    MOV   A,[__r1]
    2EB6: 08       PUSH  A
    2EB7: 7C 19 FF LCALL _strtol
    2EBA: 38 FA    ADD   SP,0xFA
    2EBC: 62 D0 00 MOV   REG[0xD0],0x0
    2EBF: 51 79    MOV   A,[__r3]
    2EC1: 53 7B    MOV   [__r1],A
    2EC3: 51 7A    MOV   A,[__r2]
    2EC5: 53 7C    MOV   [__r0],A
    2EC7: 52 03    MOV   A,[X+3]
    2EC9: 53 79    MOV   [__r3],A
    2ECB: 52 02    MOV   A,[X+2]
    2ECD: 60 D5    MOV   REG[0xD5],A
    2ECF: 51 7C    MOV   A,[__r0]
    2ED1: 3F 79    MVI   [__r3],A
    2ED3: 51 7B    MOV   A,[__r1]
    2ED5: 3F 79    MVI   [__r3],A
    2ED7: 80 2F    JMP   0x2F07
    2ED9: 62 D0 00 MOV   REG[0xD0],0x0
    2EDC: 52 FA    MOV   A,[X-6]
    2EDE: 53 7B    MOV   [__r1],A
    2EE0: 52 F9    MOV   A,[X-7]
    2EE2: 08       PUSH  A
    2EE3: 51 7B    MOV   A,[__r1]
    2EE5: 08       PUSH  A
    2EE6: 52 FC    MOV   A,[X-4]
    2EE8: 53 7B    MOV   [__r1],A
    2EEA: 52 FB    MOV   A,[X-5]
    2EEC: 08       PUSH  A
    2EED: 51 7B    MOV   A,[__r1]
    2EEF: 08       PUSH  A
    2EF0: 52 02    MOV   A,[X+2]
    2EF2: 08       PUSH  A
    2EF3: 52 03    MOV   A,[X+3]
    2EF5: 08       PUSH  A
    2EF6: 9B AE    CALL  0x2AA6
    2EF8: 38 FA    ADD   SP,0xFA
    2EFA: 80 0C    JMP   0x2F07
    2EFC: 62 D0 00 MOV   REG[0xD0],0x0
    2EFF: 55 7B 00 MOV   [__r1],0x0
    2F02: 55 7C 00 MOV   [__r0],0x0
    2F05: 80 D9    JMP   0x2FDF
    2F07: 77 F8    INC   [X-8]
    2F09: 0F F7 00 ADC   [X-9],0x0
    2F0C: 80 91    JMP   0x2F9E
    2F0E: 52 00    MOV   A,[X+0]
    2F10: 08       PUSH  A
    2F11: 52 01    MOV   A,[X+1]
    2F13: 08       PUSH  A
    2F14: 7C 23 3C LCALL _isspace
    2F17: 38 FE    ADD   SP,0xFE
    2F19: 62 D0 00 MOV   REG[0xD0],0x0
    2F1C: 3C 7C 00 CMP   [__r0],0x0
    2F1F: B0 06    JNZ   0x2F26
    2F21: 3C 7B 00 CMP   [__r1],0x0
    2F24: A0 56    JZ    0x2F7B
    2F26: 62 D0 00 MOV   REG[0xD0],0x0
    2F29: 52 FC    MOV   A,[X-4]
    2F2B: 53 7B    MOV   [__r1],A
    2F2D: 52 FB    MOV   A,[X-5]
    2F2F: 10       PUSH  X
    2F30: 58 7B    MOV   X,[__r1]
    2F32: 7C 18 1A LCALL __plcall
    2F35: 62 D0 00 MOV   REG[0xD0],0x0
    2F38: 20       POP   X
    2F39: 53 7B    MOV   [__r1],A
    2F3B: 55 7C 00 MOV   [__r0],0x0
    2F3E: 54 01    MOV   [X+1],A
    2F40: 56 00 00 MOV   [X+0],0x0
    2F43: 3C 7C 00 CMP   [__r0],0x0
    2F46: B0 05    JNZ   0x2F4C
    2F48: 39 00    CMP   A,0x0
    2F4A: A0 19    JZ    0x2F64
    2F4C: 52 00    MOV   A,[X+0]
    2F4E: 08       PUSH  A
    2F4F: 52 01    MOV   A,[X+1]
    2F51: 08       PUSH  A
    2F52: 7C 23 3C LCALL _isspace
    2F55: 38 FE    ADD   SP,0xFE
    2F57: 62 D0 00 MOV   REG[0xD0],0x0
    2F5A: 3C 7C 00 CMP   [__r0],0x0
    2F5D: BF C8    JNZ   0x2F26
    2F5F: 3C 7B 00 CMP   [__r1],0x0
    2F62: BF C3    JNZ   0x2F26
    2F64: 62 D0 00 MOV   REG[0xD0],0x0
    2F67: 52 01    MOV   A,[X+1]
    2F69: 10       PUSH  X
    2F6A: 08       PUSH  A
    2F6B: 52 FA    MOV   A,[X-6]
    2F6D: 53 7B    MOV   [__r1],A
    2F6F: 52 F9    MOV   A,[X-7]
    2F71: 58 7B    MOV   X,[__r1]
    2F73: 7C 18 1A LCALL __plcall
    2F76: 38 FF    ADD   SP,0xFF
    2F78: 20       POP   X
    2F79: 80 24    JMP   0x2F9E
    2F7B: 62 D0 00 MOV   REG[0xD0],0x0
    2F7E: 52 FC    MOV   A,[X-4]
    2F80: 53 7B    MOV   [__r1],A
    2F82: 52 FB    MOV   A,[X-5]
    2F84: 10       PUSH  X
    2F85: 58 7B    MOV   X,[__r1]
    2F87: 7C 18 1A LCALL __plcall
    2F8A: 62 D0 00 MOV   REG[0xD0],0x0
    2F8D: 20       POP   X
    2F8E: 53 7B    MOV   [__r1],A
    2F90: 50 00    MOV   A,0x0
    2F92: 3B 00    CMP   A,[X+0]
    2F94: B0 07    JNZ   0x2F9C
    2F96: 51 7B    MOV   A,[__r1]
    2F98: 3B 01    CMP   A,[X+1]
    2F9A: A0 03    JZ    0x2F9E
    2F9C: 80 32    JMP   0x2FCF
    2F9E: 62 D0 00 MOV   REG[0xD0],0x0
    2FA1: 52 F8    MOV   A,[X-8]
    2FA3: 53 7B    MOV   [__r1],A
    2FA5: 52 F7    MOV   A,[X-9]
    2FA7: 53 7C    MOV   [__r0],A
    2FA9: 51 7B    MOV   A,[__r1]
    2FAB: 01 01    ADD   A,0x1
    2FAD: 54 F8    MOV   [X-8],A
    2FAF: 51 7C    MOV   A,[__r0]
    2FB1: 09 00    ADC   A,0x0
    2FB3: 54 F7    MOV   [X-9],A
    2FB5: 51 7C    MOV   A,[__r0]
    2FB7: 10       PUSH  X
    2FB8: 58 7B    MOV   X,[__r1]
    2FBA: 28       ROMX  
    2FBB: 20       POP   X
    2FBC: 53 7B    MOV   [__r1],A
    2FBE: 55 7C 00 MOV   [__r0],0x0
    2FC1: 54 01    MOV   [X+1],A
    2FC3: 56 00 00 MOV   [X+0],0x0
    2FC6: 3C 7C 00 CMP   [__r0],0x0
    2FC9: BC C3    JNZ   0x2C8D
    2FCB: 39 00    CMP   A,0x0
    2FCD: BC BF    JNZ   0x2C8D
    2FCF: 62 D0 00 MOV   REG[0xD0],0x0
    2FD2: 51 88    MOV   A,[main.c:rubout+11]
    2FD4: 08       PUSH  A
    2FD5: 51 87    MOV   A,[main.c:rubout+10]
    2FD7: 62 D0 00 MOV   REG[0xD0],0x0
    2FDA: 53 7C    MOV   [__r0],A
    2FDC: 18       POP   A
    2FDD: 53 7B    MOV   [__r1],A
    2FDF: 38 EB    ADD   SP,0xEB
    2FE1: 20       POP   X
    2FE2: 7F       RET   
_cstrcspn:
    2FE3: 10       PUSH  X
    2FE4: 4F       MOV   X,SP
    2FE5: 38 04    ADD   SP,0x4
    2FE7: 56 03 00 MOV   [X+3],0x0
    2FEA: 56 02 00 MOV   [X+2],0x0
    2FED: 80 5A    JMP   0x3048
    2FEF: 56 01 00 MOV   [X+1],0x0
    2FF2: 56 00 00 MOV   [X+0],0x0
    2FF5: 80 32    JMP   0x3028
    2FF7: 62 D0 00 MOV   REG[0xD0],0x0
    2FFA: 52 01    MOV   A,[X+1]
    2FFC: 03 FA    ADD   A,[X-6]
    2FFE: 53 7B    MOV   [__r1],A
    3000: 52 00    MOV   A,[X+0]
    3002: 0B F9    ADC   A,[X-7]
    3004: 10       PUSH  X
    3005: 58 7B    MOV   X,[__r1]
    3007: 28       ROMX  
    3008: 20       POP   X
    3009: 53 7C    MOV   [__r0],A
    300B: 52 FC    MOV   A,[X-4]
    300D: 53 79    MOV   [__r3],A
    300F: 52 FB    MOV   A,[X-5]
    3011: 60 D4    MOV   REG[0xD4],A
    3013: 3E 79    MVI   A,[__r3]
    3015: 3A 7C    CMP   A,[__r0]
    3017: B0 0B    JNZ   0x3023
    3019: 52 03    MOV   A,[X+3]
    301B: 53 7B    MOV   [__r1],A
    301D: 52 02    MOV   A,[X+2]
    301F: 53 7C    MOV   [__r0],A
    3021: 80 3F    JMP   0x3061
    3023: 77 01    INC   [X+1]
    3025: 0F 00 00 ADC   [X+0],0x0
    3028: 62 D0 00 MOV   REG[0xD0],0x0
    302B: 52 01    MOV   A,[X+1]
    302D: 03 FA    ADD   A,[X-6]
    302F: 53 7B    MOV   [__r1],A
    3031: 52 00    MOV   A,[X+0]
    3033: 0B F9    ADC   A,[X-7]
    3035: 10       PUSH  X
    3036: 58 7B    MOV   X,[__r1]
    3038: 28       ROMX  
    3039: 20       POP   X
    303A: 39 00    CMP   A,0x0
    303C: BF BA    JNZ   0x2FF7
    303E: 77 FC    INC   [X-4]
    3040: 0F FB 00 ADC   [X-5],0x0
    3043: 77 03    INC   [X+3]
    3045: 0F 02 00 ADC   [X+2],0x0
    3048: 62 D0 00 MOV   REG[0xD0],0x0
    304B: 52 FC    MOV   A,[X-4]
    304D: 53 7B    MOV   [__r1],A
    304F: 52 FB    MOV   A,[X-5]
    3051: 60 D4    MOV   REG[0xD4],A
    3053: 3E 7B    MVI   A,[__r1]
    3055: 39 00    CMP   A,0x0
    3057: BF 97    JNZ   0x2FEF
    3059: 52 03    MOV   A,[X+3]
    305B: 53 7B    MOV   [__r1],A
    305D: 52 02    MOV   A,[X+2]
    305F: 53 7C    MOV   [__r0],A
    3061: 38 FC    ADD   SP,0xFC
    3063: 20       POP   X
    3064: 7F       RET   
_cstrpbrk:
    3065: 10       PUSH  X
    3066: 4F       MOV   X,SP
    3067: 38 02    ADD   SP,0x2
    3069: 52 F9    MOV   A,[X-7]
    306B: 08       PUSH  A
    306C: 52 FA    MOV   A,[X-6]
    306E: 08       PUSH  A
    306F: 52 FB    MOV   A,[X-5]
    3071: 08       PUSH  A
    3072: 52 FC    MOV   A,[X-4]
    3074: 08       PUSH  A
    3075: 7C 2F E3 LCALL _cstrcspn
    3078: 38 FC    ADD   SP,0xFC
    307A: 62 D0 00 MOV   REG[0xD0],0x0
    307D: 51 7B    MOV   A,[__r1]
    307F: 54 01    MOV   [X+1],A
    3081: 51 7C    MOV   A,[__r0]
    3083: 54 00    MOV   [X+0],A
    3085: 52 01    MOV   A,[X+1]
    3087: 03 FC    ADD   A,[X-4]
    3089: 53 7B    MOV   [__r1],A
    308B: 52 00    MOV   A,[X+0]
    308D: 0B FB    ADC   A,[X-5]
    308F: 60 D4    MOV   REG[0xD4],A
    3091: 3E 7B    MVI   A,[__r1]
    3093: 39 00    CMP   A,0x0
    3095: A0 0F    JZ    0x30A5
    3097: 52 01    MOV   A,[X+1]
    3099: 03 FC    ADD   A,[X-4]
    309B: 53 7B    MOV   [__r1],A
    309D: 52 00    MOV   A,[X+0]
    309F: 0B FB    ADC   A,[X-5]
    30A1: 53 7C    MOV   [__r0],A
    30A3: 80 0A    JMP   0x30AE
    30A5: 62 D0 00 MOV   REG[0xD0],0x0
    30A8: 55 7B 00 MOV   [__r1],0x0
    30AB: 55 7C 00 MOV   [__r0],0x0
    30AE: 38 FE    ADD   SP,0xFE
    30B0: 20       POP   X
    30B1: 7F       RET   
_cstrspn:
    30B2: 10       PUSH  X
    30B3: 4F       MOV   X,SP
    30B4: 38 04    ADD   SP,0x4
    30B6: 56 03 00 MOV   [X+3],0x0
    30B9: 56 02 00 MOV   [X+2],0x0
    30BC: 80 81    JMP   0x313E
    30BE: 56 01 00 MOV   [X+1],0x0
    30C1: 56 00 00 MOV   [X+0],0x0
    30C4: 80 2E    JMP   0x30F3
    30C6: 62 D0 00 MOV   REG[0xD0],0x0
    30C9: 52 01    MOV   A,[X+1]
    30CB: 03 FA    ADD   A,[X-6]
    30CD: 53 7B    MOV   [__r1],A
    30CF: 52 00    MOV   A,[X+0]
    30D1: 0B F9    ADC   A,[X-7]
    30D3: 10       PUSH  X
    30D4: 58 7B    MOV   X,[__r1]
    30D6: 28       ROMX  
    30D7: 20       POP   X
    30D8: 53 7C    MOV   [__r0],A
    30DA: 52 03    MOV   A,[X+3]
    30DC: 03 FC    ADD   A,[X-4]
    30DE: 53 79    MOV   [__r3],A
    30E0: 52 02    MOV   A,[X+2]
    30E2: 0B FB    ADC   A,[X-5]
    30E4: 60 D4    MOV   REG[0xD4],A
    30E6: 3E 79    MVI   A,[__r3]
    30E8: 3A 7C    CMP   A,[__r0]
    30EA: B0 03    JNZ   0x30EE
    30EC: 80 1C    JMP   0x3109
    30EE: 77 01    INC   [X+1]
    30F0: 0F 00 00 ADC   [X+0],0x0
    30F3: 62 D0 00 MOV   REG[0xD0],0x0
    30F6: 52 01    MOV   A,[X+1]
    30F8: 03 FA    ADD   A,[X-6]
    30FA: 53 7B    MOV   [__r1],A
    30FC: 52 00    MOV   A,[X+0]
    30FE: 0B F9    ADC   A,[X-7]
    3100: 10       PUSH  X
    3101: 58 7B    MOV   X,[__r1]
    3103: 28       ROMX  
    3104: 20       POP   X
    3105: 39 00    CMP   A,0x0
    3107: BF BE    JNZ   0x30C6
    3109: 62 D0 00 MOV   REG[0xD0],0x0
    310C: 52 01    MOV   A,[X+1]
    310E: 03 FA    ADD   A,[X-6]
    3110: 53 7B    MOV   [__r1],A
    3112: 52 00    MOV   A,[X+0]
    3114: 0B F9    ADC   A,[X-7]
    3116: 10       PUSH  X
    3117: 58 7B    MOV   X,[__r1]
    3119: 28       ROMX  
    311A: 20       POP   X
    311B: 53 7C    MOV   [__r0],A
    311D: 52 03    MOV   A,[X+3]
    311F: 03 FC    ADD   A,[X-4]
    3121: 53 79    MOV   [__r3],A
    3123: 52 02    MOV   A,[X+2]
    3125: 0B FB    ADC   A,[X-5]
    3127: 60 D4    MOV   REG[0xD4],A
    3129: 3E 79    MVI   A,[__r3]
    312B: 3A 7C    CMP   A,[__r0]
    312D: A0 0B    JZ    0x3139
    312F: 52 03    MOV   A,[X+3]
    3131: 53 7B    MOV   [__r1],A
    3133: 52 02    MOV   A,[X+2]
    3135: 53 7C    MOV   [__r0],A
    3137: 80 23    JMP   0x315B
    3139: 77 03    INC   [X+3]
    313B: 0F 02 00 ADC   [X+2],0x0
    313E: 62 D0 00 MOV   REG[0xD0],0x0
    3141: 52 03    MOV   A,[X+3]
    3143: 03 FC    ADD   A,[X-4]
    3145: 53 7B    MOV   [__r1],A
    3147: 52 02    MOV   A,[X+2]
    3149: 0B FB    ADC   A,[X-5]
    314B: 60 D4    MOV   REG[0xD4],A
    314D: 3E 7B    MVI   A,[__r1]
    314F: 39 00    CMP   A,0x0
    3151: BF 6C    JNZ   0x30BE
    3153: 52 03    MOV   A,[X+3]
    3155: 53 7B    MOV   [__r1],A
    3157: 52 02    MOV   A,[X+2]
    3159: 53 7C    MOV   [__r0],A
    315B: 38 FC    ADD   SP,0xFC
    315D: 20       POP   X
    315E: 7F       RET   
_cstrtok:
    315F: 10       PUSH  X
    3160: 4F       MOV   X,SP
    3161: 38 06    ADD   SP,0x6
    3163: 3D FB 00 CMP   [X-5],0x0
    3166: B0 06    JNZ   0x316D
    3168: 3D FC 00 CMP   [X-4],0x0
    316B: A0 0B    JZ    0x3177
    316D: 52 FC    MOV   A,[X-4]
    316F: 54 05    MOV   [X+5],A
    3171: 52 FB    MOV   A,[X-5]
    3173: 54 04    MOV   [X+4],A
    3175: 80 0C    JMP   0x3182
    3177: 62 D0 00 MOV   REG[0xD0],0x0
    317A: 51 84    MOV   A,[main.c:rubout+7]
    317C: 54 05    MOV   [X+5],A
    317E: 51 83    MOV   A,[main.c:rubout+6]
    3180: 54 04    MOV   [X+4],A
    3182: 52 05    MOV   A,[X+5]
    3184: 54 01    MOV   [X+1],A
    3186: 52 04    MOV   A,[X+4]
    3188: 54 00    MOV   [X+0],A
    318A: 3D 00 00 CMP   [X+0],0x0
    318D: B0 11    JNZ   0x319F
    318F: 3D 01 00 CMP   [X+1],0x0
    3192: B0 0C    JNZ   0x319F
    3194: 62 D0 00 MOV   REG[0xD0],0x0
    3197: 55 7B 00 MOV   [__r1],0x0
    319A: 55 7C 00 MOV   [__r0],0x0
    319D: 80 A0    JMP   0x323E
    319F: 52 F9    MOV   A,[X-7]
    31A1: 08       PUSH  A
    31A2: 52 FA    MOV   A,[X-6]
    31A4: 08       PUSH  A
    31A5: 52 00    MOV   A,[X+0]
    31A7: 08       PUSH  A
    31A8: 52 01    MOV   A,[X+1]
    31AA: 08       PUSH  A
    31AB: 7C 30 B2 LCALL _cstrspn
    31AE: 38 FC    ADD   SP,0xFC
    31B0: 62 D0 00 MOV   REG[0xD0],0x0
    31B3: 51 7B    MOV   A,[__r1]
    31B5: 03 01    ADD   A,[X+1]
    31B7: 54 01    MOV   [X+1],A
    31B9: 51 7C    MOV   A,[__r0]
    31BB: 0B 00    ADC   A,[X+0]
    31BD: 54 00    MOV   [X+0],A
    31BF: 52 01    MOV   A,[X+1]
    31C1: 53 7B    MOV   [__r1],A
    31C3: 52 00    MOV   A,[X+0]
    31C5: 60 D4    MOV   REG[0xD4],A
    31C7: 3E 7B    MVI   A,[__r1]
    31C9: 39 00    CMP   A,0x0
    31CB: B0 09    JNZ   0x31D5
    31CD: 55 7B 00 MOV   [__r1],0x0
    31D0: 55 7C 00 MOV   [__r0],0x0
    31D3: 80 6A    JMP   0x323E
    31D5: 52 F9    MOV   A,[X-7]
    31D7: 08       PUSH  A
    31D8: 52 FA    MOV   A,[X-6]
    31DA: 08       PUSH  A
    31DB: 52 00    MOV   A,[X+0]
    31DD: 08       PUSH  A
    31DE: 52 01    MOV   A,[X+1]
    31E0: 08       PUSH  A
    31E1: 7C 30 65 LCALL _cstrpbrk
    31E4: 38 FC    ADD   SP,0xFC
    31E6: 62 D0 00 MOV   REG[0xD0],0x0
    31E9: 51 7B    MOV   A,[__r1]
    31EB: 54 03    MOV   [X+3],A
    31ED: 51 7C    MOV   A,[__r0]
    31EF: 54 02    MOV   [X+2],A
    31F1: 3D 02 00 CMP   [X+2],0x0
    31F4: B0 06    JNZ   0x31FB
    31F6: 3D 03 00 CMP   [X+3],0x0
    31F9: A0 2E    JZ    0x3228
    31FB: 62 D0 00 MOV   REG[0xD0],0x0
    31FE: 52 03    MOV   A,[X+3]
    3200: 53 7B    MOV   [__r1],A
    3202: 52 02    MOV   A,[X+2]
    3204: 60 D4    MOV   REG[0xD4],A
    3206: 3E 7B    MVI   A,[__r1]
    3208: 39 00    CMP   A,0x0
    320A: A0 1D    JZ    0x3228
    320C: 52 03    MOV   A,[X+3]
    320E: 53 7B    MOV   [__r1],A
    3210: 52 02    MOV   A,[X+2]
    3212: 53 7C    MOV   [__r0],A
    3214: 51 7B    MOV   A,[__r1]
    3216: 01 01    ADD   A,0x1
    3218: 54 03    MOV   [X+3],A
    321A: 51 7C    MOV   A,[__r0]
    321C: 09 00    ADC   A,0x0
    321E: 54 02    MOV   [X+2],A
    3220: 51 7C    MOV   A,[__r0]
    3222: 60 D5    MOV   REG[0xD5],A
    3224: 50 00    MOV   A,0x0
    3226: 3F 7B    MVI   [__r1],A
    3228: 62 D0 00 MOV   REG[0xD0],0x0
    322B: 52 03    MOV   A,[X+3]
    322D: 53 84    MOV   [main.c:rubout+7],A
    322F: 52 02    MOV   A,[X+2]
    3231: 53 83    MOV   [main.c:rubout+6],A
    3233: 62 D0 00 MOV   REG[0xD0],0x0
    3236: 52 01    MOV   A,[X+1]
    3238: 53 7B    MOV   [__r1],A
    323A: 52 00    MOV   A,[X+0]
    323C: 53 7C    MOV   [__r0],A
    323E: 38 FA    ADD   SP,0xFA
    3240: 20       POP   X
    3241: 7F       RET   
